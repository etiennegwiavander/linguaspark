"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/test-smart-template/route";
exports.ids = ["app/api/test-smart-template/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-smart-template%2Froute&page=%2Fapi%2Ftest-smart-template%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-smart-template%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-smart-template%2Froute&page=%2Fapi%2Ftest-smart-template%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-smart-template%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_linguaspark_app_api_test_smart_template_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/test-smart-template/route.ts */ \"(rsc)/./app/api/test-smart-template/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/test-smart-template/route\",\n        pathname: \"/api/test-smart-template\",\n        filename: \"route\",\n        bundlePath: \"app/api/test-smart-template/route\"\n    },\n    resolvedPagePath: \"D:\\\\linguaspark\\\\app\\\\api\\\\test-smart-template\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_linguaspark_app_api_test_smart_template_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/test-smart-template/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0ZXN0LXNtYXJ0LXRlbXBsYXRlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0ZXN0LXNtYXJ0LXRlbXBsYXRlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGVzdC1zbWFydC10ZW1wbGF0ZSUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbGluZ3Vhc3BhcmslNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNsaW5ndWFzcGFyayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDUTtBQUNyRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzI3MWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFx0ZXN0LXNtYXJ0LXRlbXBsYXRlXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90ZXN0LXNtYXJ0LXRlbXBsYXRlL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdGVzdC1zbWFydC10ZW1wbGF0ZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdGVzdC1zbWFydC10ZW1wbGF0ZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkQ6XFxcXGxpbmd1YXNwYXJrXFxcXGFwcFxcXFxhcGlcXFxcdGVzdC1zbWFydC10ZW1wbGF0ZVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvdGVzdC1zbWFydC10ZW1wbGF0ZS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-smart-template%2Froute&page=%2Fapi%2Ftest-smart-template%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-smart-template%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/test-smart-template/route.ts":
/*!**********************************************!*\
  !*** ./app/api/test-smart-template/route.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/lesson-ai-generator-server */ \"(rsc)/./lib/lesson-ai-generator-server.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { sourceText, lessonType = \"discussion\", studentLevel = \"A2\", targetLanguage = \"english\" } = body;\n        console.log(\"\\uD83E\\uDDEA Testing smart template generation...\");\n        // Generate lesson using smart template system\n        const lesson = await _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__.lessonAIServerGenerator.generateLesson({\n            sourceText,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sourceUrl: \"test\",\n            contentMetadata: undefined,\n            structuredContent: undefined,\n            wordCount: sourceText.split(\" \").length,\n            readingTime: Math.ceil(sourceText.split(\" \").length / 200)\n        });\n        console.log(\"✅ Smart template test complete!\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            lesson: lesson,\n            message: \"Smart template generation successful\"\n        });\n    } catch (error) {\n        console.error(\"❌ Smart template test failed:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3Rlc3Qtc21hcnQtdGVtcGxhdGUvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTREO0FBQ2M7QUFFbkUsZUFBZUUsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQ0pDLFVBQVUsRUFDVkMsYUFBYSxZQUFZLEVBQ3pCQyxlQUFlLElBQUksRUFDbkJDLGlCQUFpQixTQUFTLEVBQzNCLEdBQUdMO1FBRUpNLFFBQVFDLEdBQUcsQ0FBQztRQUVaLDhDQUE4QztRQUM5QyxNQUFNQyxTQUFTLE1BQU1YLG9GQUF1QkEsQ0FBQ1ksY0FBYyxDQUFDO1lBQzFEUDtZQUNBQztZQUNBQztZQUNBQztZQUNBSyxXQUFXO1lBQ1hDLGlCQUFpQkM7WUFDakJDLG1CQUFtQkQ7WUFDbkJFLFdBQVdaLFdBQVdhLEtBQUssQ0FBQyxLQUFLQyxNQUFNO1lBQ3ZDQyxhQUFhQyxLQUFLQyxJQUFJLENBQUNqQixXQUFXYSxLQUFLLENBQUMsS0FBS0MsTUFBTSxHQUFHO1FBQ3hEO1FBRUFWLFFBQVFDLEdBQUcsQ0FBQztRQUVaLE9BQU9YLHFEQUFZQSxDQUFDSyxJQUFJLENBQUM7WUFDdkJtQixTQUFTO1lBQ1RaLFFBQVFBO1lBQ1JhLFNBQVM7UUFDWDtJQUNGLEVBQUUsT0FBT0MsT0FBTztRQUNkaEIsUUFBUWdCLEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE9BQU8xQixxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDO1lBQ3ZCbUIsU0FBUztZQUNURSxPQUFPQSxNQUFNRCxPQUFPO1FBQ3RCLEdBQUc7WUFBRUUsUUFBUTtRQUFJO0lBQ25CO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vYXBwL2FwaS90ZXN0LXNtYXJ0LXRlbXBsYXRlL3JvdXRlLnRzPzQ5NGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCJcclxuaW1wb3J0IHsgbGVzc29uQUlTZXJ2ZXJHZW5lcmF0b3IgfSBmcm9tIFwiQC9saWIvbGVzc29uLWFpLWdlbmVyYXRvci1zZXJ2ZXJcIlxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXHJcbiAgICBjb25zdCB7IFxyXG4gICAgICBzb3VyY2VUZXh0LCBcclxuICAgICAgbGVzc29uVHlwZSA9IFwiZGlzY3Vzc2lvblwiLCBcclxuICAgICAgc3R1ZGVudExldmVsID0gXCJBMlwiLCBcclxuICAgICAgdGFyZ2V0TGFuZ3VhZ2UgPSBcImVuZ2xpc2hcIlxyXG4gICAgfSA9IGJvZHlcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIvCfp6ogVGVzdGluZyBzbWFydCB0ZW1wbGF0ZSBnZW5lcmF0aW9uLi4uXCIpXHJcblxyXG4gICAgLy8gR2VuZXJhdGUgbGVzc29uIHVzaW5nIHNtYXJ0IHRlbXBsYXRlIHN5c3RlbVxyXG4gICAgY29uc3QgbGVzc29uID0gYXdhaXQgbGVzc29uQUlTZXJ2ZXJHZW5lcmF0b3IuZ2VuZXJhdGVMZXNzb24oe1xyXG4gICAgICBzb3VyY2VUZXh0LFxyXG4gICAgICBsZXNzb25UeXBlLFxyXG4gICAgICBzdHVkZW50TGV2ZWwsXHJcbiAgICAgIHRhcmdldExhbmd1YWdlLFxyXG4gICAgICBzb3VyY2VVcmw6IFwidGVzdFwiLFxyXG4gICAgICBjb250ZW50TWV0YWRhdGE6IHVuZGVmaW5lZCxcclxuICAgICAgc3RydWN0dXJlZENvbnRlbnQ6IHVuZGVmaW5lZCxcclxuICAgICAgd29yZENvdW50OiBzb3VyY2VUZXh0LnNwbGl0KCcgJykubGVuZ3RoLFxyXG4gICAgICByZWFkaW5nVGltZTogTWF0aC5jZWlsKHNvdXJjZVRleHQuc3BsaXQoJyAnKS5sZW5ndGggLyAyMDApXHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnNvbGUubG9nKFwi4pyFIFNtYXJ0IHRlbXBsYXRlIHRlc3QgY29tcGxldGUhXCIpXHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgbGVzc29uOiBsZXNzb24sXHJcbiAgICAgIG1lc3NhZ2U6IFwiU21hcnQgdGVtcGxhdGUgZ2VuZXJhdGlvbiBzdWNjZXNzZnVsXCJcclxuICAgIH0pXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgU21hcnQgdGVtcGxhdGUgdGVzdCBmYWlsZWQ6XCIsIGVycm9yKVxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcclxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UgXHJcbiAgICB9LCB7IHN0YXR1czogNTAwIH0pXHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImxlc3NvbkFJU2VydmVyR2VuZXJhdG9yIiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsInNvdXJjZVRleHQiLCJsZXNzb25UeXBlIiwic3R1ZGVudExldmVsIiwidGFyZ2V0TGFuZ3VhZ2UiLCJjb25zb2xlIiwibG9nIiwibGVzc29uIiwiZ2VuZXJhdGVMZXNzb24iLCJzb3VyY2VVcmwiLCJjb250ZW50TWV0YWRhdGEiLCJ1bmRlZmluZWQiLCJzdHJ1Y3R1cmVkQ29udGVudCIsIndvcmRDb3VudCIsInNwbGl0IiwibGVuZ3RoIiwicmVhZGluZ1RpbWUiLCJNYXRoIiwiY2VpbCIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiZXJyb3IiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/test-smart-template/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-ai-server.ts":
/*!*********************************!*\
  !*** ./lib/google-ai-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleAIServerService: () => (/* binding */ createGoogleAIServerService)\n/* harmony export */ });\n// Server-side Google AI (Gemini) APIs service layer\nclass GoogleAIServerService {\n    constructor(config){\n        this.model = \"models/gemini-2.5-flash\" // Use actual available model\n        ;\n        this.config = config;\n    }\n    async makeGeminiRequest(prompt, options = {}) {\n        // Use only the working model\n        const modelsToTry = [\n            \"models/gemini-2.5-flash\"\n        ];\n        const possibleUrls = [];\n        // Generate URLs for different combinations\n        for (const model of modelsToTry){\n            possibleUrls.push(`${this.config.baseUrl}/v1beta/models/${model}:generateContent?key=${this.config.apiKey}`);\n            possibleUrls.push(`${this.config.baseUrl}/v1/models/${model}:generateContent?key=${this.config.apiKey}`);\n        }\n        const requestBody = {\n            contents: [\n                {\n                    parts: [\n                        {\n                            text: prompt\n                        }\n                    ]\n                }\n            ],\n            generationConfig: {\n                temperature: options.temperature || 0.7,\n                maxOutputTokens: options.maxTokens || 2000,\n                topP: options.topP || 0.9\n            }\n        };\n        console.log(\"\\uD83D\\uDD17 Using working Gemini API endpoint...\");\n        // Use only the working endpoint\n        const url = `${this.config.baseUrl}/v1beta/models/gemini-2.5-flash:generateContent?key=${this.config.apiKey}`;\n        console.log(`🌐 API URL: ${url.replace(this.config.apiKey, \"API_KEY_HIDDEN\")}`);\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(requestBody)\n            });\n            console.log(`📡 Response status: ${response.status} ${response.statusText}`);\n            if (response.ok) {\n                const result = await response.json();\n                console.log(\"✅ Successful API response received\");\n                console.log(\"\\uD83D\\uDD0D Full API response structure:\", JSON.stringify(result, null, 2));\n                // More robust response parsing with MAX_TOKENS handling\n                if (result.candidates && result.candidates.length > 0) {\n                    const candidate = result.candidates[0];\n                    // Check if we hit MAX_TOKENS limit\n                    if (candidate.finishReason === \"MAX_TOKENS\") {\n                        console.warn(\"⚠️ Hit MAX_TOKENS limit, response may be incomplete\");\n                        // Still try to extract partial content if available\n                        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                            const text = candidate.content.parts[0].text;\n                            console.log(\"⚠️ Extracted partial text due to MAX_TOKENS:\", text.substring(0, 100) + \"...\");\n                            return text;\n                        } else {\n                            console.warn(\"❌ MAX_TOKENS hit and no content available\");\n                            throw new Error(\"API response hit token limit with no usable content\");\n                        }\n                    }\n                    // Normal response processing\n                    if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                        const text = candidate.content.parts[0].text;\n                        console.log(\"✅ Extracted text:\", text);\n                        return text;\n                    } else {\n                        console.warn(\"⚠️ Invalid content structure in candidate:\", candidate);\n                        throw new Error(\"Invalid content structure in API response\");\n                    }\n                } else {\n                    console.warn(\"⚠️ No candidates in response:\", result);\n                    throw new Error(\"No candidates in API response\");\n                }\n            } else {\n                const errorText = await response.text();\n                console.error(`❌ API call failed:`, response.status, errorText);\n                throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n        } catch (error) {\n            console.error(`❌ API call exception:`, error.message);\n            throw error;\n        }\n    }\n    async summarize(text, options = {}) {\n        const summaryType = options.type || \"key-points\";\n        const length = options.length || \"medium\";\n        const lengthInstructions = {\n            short: \"in 2-3 sentences\",\n            medium: \"in 4-6 sentences\",\n            long: \"in 7-10 sentences\"\n        };\n        const typeInstructions = {\n            \"key-points\": \"Extract and summarize the key points\",\n            \"tl-dr\": \"Create a TL;DR summary\",\n            \"teaser\": \"Write an engaging teaser summary\",\n            \"headline\": \"Create a headline-style summary\"\n        };\n        const prompt = `${typeInstructions[summaryType]} of the following text ${lengthInstructions[length]}:\n\n${text}\n\nSummary:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.3\n            });\n        } catch (error) {\n            console.error(\"Summarization failed:\", error);\n            // Fallback to simple truncation\n            return text.substring(0, 500) + \"...\";\n        }\n    }\n    async translate(text, options) {\n        const targetLang = this.getLanguageName(options.targetLanguage);\n        const prompt = `Translate the following text to ${targetLang}. Maintain the original meaning and tone:\n\n${text}\n\nTranslation:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n        } catch (error) {\n            console.error(\"Translation failed:\", error);\n            // Return original text if translation fails\n            return text;\n        }\n    }\n    async prompt(prompt, options = {}) {\n        try {\n            return await this.makeGeminiRequest(prompt, options);\n        } catch (error) {\n            console.error(\"Prompt generation failed:\", error);\n            throw error;\n        }\n    }\n    async write(prompt, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"medium\";\n        const format = options.format || \"paragraph\";\n        const lengthInstructions = {\n            short: \"Keep it brief and concise\",\n            medium: \"Write a moderate length response\",\n            long: \"Provide a detailed and comprehensive response\"\n        };\n        const formatInstructions = {\n            paragraph: \"Write in paragraph form\",\n            \"bullet-points\": \"Format as bullet points\",\n            \"numbered-list\": \"Format as a numbered list\"\n        };\n        const enhancedPrompt = `${prompt}\n\nInstructions:\n- Tone: ${tone}\n- ${lengthInstructions[length]}\n- ${formatInstructions[format]}\n\nResponse:`;\n        try {\n            return await this.makeGeminiRequest(enhancedPrompt, {\n                temperature: 0.7\n            });\n        } catch (error) {\n            console.error(\"Writing failed:\", error);\n            throw error;\n        }\n    }\n    async rewrite(text, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"same\";\n        const audience = options.audience || \"general\";\n        const lengthInstructions = {\n            shorter: \"Make it more concise\",\n            longer: \"Expand and add more detail\",\n            same: \"Keep approximately the same length\"\n        };\n        const prompt = `Rewrite the following text with these requirements:\n- Tone: ${tone}\n- Audience: ${audience}\n- Length: ${lengthInstructions[length]}\n\nOriginal text:\n${text}\n\nRewritten text:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.5\n            });\n        } catch (error) {\n            console.error(\"Rewriting failed:\", error);\n            return text // Return original if rewriting fails\n            ;\n        }\n    }\n    async proofread(text, options = {}) {\n        const checkGrammar = options.checkGrammar !== false;\n        const checkSpelling = options.checkSpelling !== false;\n        const checkStyle = options.checkStyle !== false;\n        const checks = [];\n        if (checkGrammar) checks.push(\"grammar\");\n        if (checkSpelling) checks.push(\"spelling\");\n        if (checkStyle) checks.push(\"style and clarity\");\n        const prompt = `Proofread and correct the following text for ${checks.join(\", \")}. Return only the corrected text:\n\n${text}\n\nCorrected text:`;\n        try {\n            const correctedText = await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n            return {\n                corrected_text: correctedText,\n                suggestions: [],\n                errors: []\n            };\n        } catch (error) {\n            console.error(\"Proofreading failed:\", error);\n            return {\n                corrected_text: text,\n                suggestions: [],\n                errors: []\n            };\n        }\n    }\n    getLanguageName(code) {\n        const languageMap = {\n            es: \"Spanish\",\n            fr: \"French\",\n            de: \"German\",\n            it: \"Italian\",\n            pt: \"Portuguese\",\n            ja: \"Japanese\",\n            ko: \"Korean\",\n            zh: \"Chinese\",\n            en: \"English\"\n        };\n        return languageMap[code] || \"English\";\n    }\n}\n// Server-side only initialization\nconst createGoogleAIServerService = ()=>{\n    const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\";\n    const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n    if (!apiKey) {\n        console.warn(\"Google AI API key not found. Lesson generation will use fallback templates.\");\n        // Return a service that will always throw errors, triggering fallbacks\n        return new GoogleAIServerService({\n            apiKey: \"dummy\",\n            baseUrl\n        });\n    }\n    return new GoogleAIServerService({\n        apiKey,\n        baseUrl\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-ai-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/lesson-ai-generator-server.ts":
/*!*******************************************!*\
  !*** ./lib/lesson-ai-generator-server.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonAIServerGenerator: () => (/* binding */ LessonAIServerGenerator),\n/* harmony export */   lessonAIServerGenerator: () => (/* binding */ lessonAIServerGenerator)\n/* harmony export */ });\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n\nclass LessonAIServerGenerator {\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_0__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    async generateLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = params;\n        console.log(\"\\uD83D\\uDE80 Starting optimized AI lesson generation with params:\", {\n            textLength: sourceText.length,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            hasMetadata: !!contentMetadata,\n            hasStructuredContent: !!structuredContent\n        });\n        try {\n            // Use ultra-minimal AI approach to avoid MAX_TOKENS\n            console.log(\"\\uD83E\\uDD16 Step 1: Generating lesson with ultra-minimal AI prompts...\");\n            const lessonStructure = await this.generateMinimalAILesson(sourceText, lessonType, studentLevel, targetLanguage, contentMetadata);\n            console.log(\"✅ Minimal AI lesson generated:\", Object.keys(lessonStructure));\n            // Return properly structured GeneratedLesson object\n            const finalLesson = {\n                lessonType,\n                studentLevel,\n                targetLanguage,\n                sections: lessonStructure\n            };\n            console.log(\"\\uD83C\\uDFAF Returning AI-generated lesson:\", {\n                lessonType: finalLesson.lessonType,\n                studentLevel: finalLesson.studentLevel,\n                targetLanguage: finalLesson.targetLanguage,\n                sectionsCount: Object.keys(finalLesson.sections).length,\n                warmupCount: finalLesson.sections.warmup?.length || 0,\n                vocabularyCount: finalLesson.sections.vocabulary?.length || 0\n            });\n            console.log(\"\\uD83C\\uDF89 Optimized AI lesson generation complete!\");\n            return finalLesson;\n        } catch (error) {\n            console.error(\"❌ Error in AI lesson generation:\", error);\n            console.log(\"\\uD83D\\uDD04 Falling back to smart template generation...\");\n            // Fallback to smart templates if AI fails\n            return this.generateSmartTemplateFallback(params);\n        }\n    }\n    // Ultra-minimal AI lesson generation to avoid MAX_TOKENS\n    async generateMinimalAILesson(sourceText, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFAF Using ultra-minimal AI prompts to avoid token limits...\");\n        // Step 1: Generate just the essential parts with minimal prompts\n        const warmupQuestions = await this.generateMinimalWarmup(sourceText, studentLevel);\n        const vocabulary = await this.generateMinimalVocabulary(sourceText, studentLevel);\n        const comprehensionQuestions = await this.generateMinimalComprehension(sourceText, studentLevel);\n        // Step 2: Use hybrid approach - AI for key parts, templates for the rest\n        return {\n            warmup: this.addWarmupInstructions(warmupQuestions, studentLevel),\n            vocabulary: vocabulary,\n            reading: this.generateSmartReading(sourceText, studentLevel),\n            comprehension: this.addComprehensionInstructions(comprehensionQuestions, studentLevel),\n            discussion: this.addDiscussionInstructions(this.generateSmartDiscussion(this.extractBetterTopics(sourceText), lessonType, studentLevel), studentLevel),\n            grammar: this.generateSmartGrammar(studentLevel, sourceText),\n            pronunciation: this.generateSmartPronunciation(vocabulary.map((v)=>v.word)),\n            wrapup: this.addWrapupInstructions(this.generateSmartWrapup(this.extractBetterTopics(sourceText), studentLevel), studentLevel)\n        };\n    }\n    // Ultra-minimal warmup generation\n    async generateMinimalWarmup(sourceText, studentLevel) {\n        // Extract better context for topic identification\n        const topics = this.extractBetterTopics(sourceText);\n        const mainTopic = topics[0] || \"this topic\";\n        // Create a more specific prompt that avoids content assumptions\n        const prompt = `Write 3 ${studentLevel} warm-up questions about ${mainTopic}. Ask about students' prior knowledge and experience. Do not mention any specific events or results. Format: just the questions, one per line:`;\n        try {\n            console.log(\"\\uD83D\\uDD25 Minimal warmup prompt:\", prompt.length, \"chars\");\n            console.log(\"\\uD83C\\uDFAF Topic identified:\", mainTopic);\n            const response = await this.getGoogleAI().prompt(prompt);\n            // Extract only actual questions (must end with ?)\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question (ends with ?) and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\") && !line.toLowerCase().includes(\"headline mentions\") && !line.toLowerCase().includes(\"the text\") && !line.toLowerCase().includes(\"the article\") && !line.toLowerCase().includes(\"according to\") && !line.toLowerCase().includes(\"the passage\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^-\\s*/, \"\").trim()).slice(0, 3);\n            console.log(\"\\uD83C\\uDFAF Extracted warmup questions:\", questions);\n            return questions.length >= 3 ? questions : this.generateSmartWarmupQuestions(topics, studentLevel, {});\n        } catch (error) {\n            console.log(\"⚠️ Minimal warmup failed, using template\");\n            return this.generateSmartWarmupQuestions(this.extractBetterTopics(sourceText), studentLevel, {});\n        }\n    }\n    // Add instructional text to sections\n    addWarmupInstructions(questions, studentLevel) {\n        const instruction = \"Have the following conversations or discussions with your tutor before reading the text:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addComprehensionInstructions(questions, studentLevel) {\n        const instruction = \"After reading the text, answer these comprehension questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addDiscussionInstructions(questions, studentLevel) {\n        const instruction = \"Discuss these questions with your tutor to explore the topic in depth:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addWrapupInstructions(questions, studentLevel) {\n        const instruction = \"Reflect on your learning by discussing these wrap-up questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    // Better topic extraction that recognizes compound terms\n    extractBetterTopics(text) {\n        const topics = [];\n        // Look for compound terms first (like \"Ryder Cup\", \"World Cup\", etc.)\n        const compoundPatterns = [\n            /\\b(Ryder Cup|World Cup|Champions League|Premier League|Super Bowl|Olympics|World Series)\\b/gi,\n            /\\b(artificial intelligence|machine learning|climate change|social media)\\b/gi,\n            /\\b([A-Z][a-z]+ [A-Z][a-z]+)\\b/g // General compound proper nouns\n        ];\n        for (const pattern of compoundPatterns){\n            const matches = text.match(pattern);\n            if (matches) {\n                topics.push(...matches.map((m)=>m.toLowerCase()));\n            }\n        }\n        // If no compound terms found, fall back to single words\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"europe\",\n                \"team\",\n                \"golf\",\n                \"tournament\",\n                \"sports\",\n                \"competition\"\n            ];\n            const foundWords = words.filter((word)=>commonWords.includes(word));\n            topics.push(...foundWords.slice(0, 3));\n        }\n        return topics.length > 0 ? topics : [\n            \"sports\"\n        ];\n    }\n    // Ultra-minimal vocabulary generation\n    async generateMinimalVocabulary(sourceText, studentLevel) {\n        const words = sourceText.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words)).slice(0, 4) // Only 4 words\n        ;\n        const vocabulary = [];\n        for (const word of uniqueWords){\n            try {\n                const prompt = `Define \"${word}\" for ${studentLevel} student:`;\n                console.log(\"\\uD83D\\uDCDA Minimal vocab prompt:\", prompt.length, \"chars\");\n                const meaning = await this.getGoogleAI().prompt(prompt);\n                // Find example sentence from source\n                const sentences = sourceText.split(/[.!?]+/);\n                const example = sentences.find((s)=>s.toLowerCase().includes(word.toLowerCase())) || `Example with ${word}.`;\n                vocabulary.push({\n                    word: word,\n                    meaning: meaning.trim().substring(0, 100),\n                    example: example.trim().substring(0, 100)\n                });\n            } catch (error) {\n                console.log(`⚠️ Vocab failed for ${word}, using template`);\n                vocabulary.push({\n                    word: word,\n                    meaning: this.generateWordMeaning(word, studentLevel),\n                    example: `Example sentence with ${word}.`\n                });\n            }\n        }\n        return vocabulary;\n    }\n    // Ultra-minimal comprehension generation\n    async generateMinimalComprehension(sourceText, studentLevel) {\n        const shortText = sourceText.substring(0, 150) // Use only first 150 chars\n        ;\n        const prompt = `Write 3 ${studentLevel} reading comprehension questions about this text. Only return questions, no instructions: ${shortText}`;\n        try {\n            console.log(\"❓ Minimal comprehension prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^\\*\\*/, \"\").replace(/\\*\\*$/, \"\").trim()).slice(0, 3);\n            return questions.length >= 3 ? questions : this.generateSmartComprehension(this.extractBetterTopics(sourceText), studentLevel);\n        } catch (error) {\n            console.log(\"⚠️ Minimal comprehension failed, using template\");\n            return this.generateSmartComprehension(this.extractBetterTopics(sourceText), studentLevel);\n        }\n    }\n    // Smart template fallback\n    generateSmartTemplateFallback(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        console.log(\"\\uD83C\\uDFA8 Using smart template fallback...\");\n        const topics = this.extractTopicsFromText(sourceText, []);\n        const vocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.addWarmupInstructions(this.generateSmartWarmupQuestions(topics, studentLevel, {}), studentLevel),\n                vocabulary: this.generateSmartVocabulary(vocabulary, sourceText, studentLevel),\n                reading: this.generateSmartReading(sourceText, studentLevel),\n                comprehension: this.addComprehensionInstructions(this.generateSmartComprehension(topics, studentLevel), studentLevel),\n                discussion: this.addDiscussionInstructions(this.generateSmartDiscussion(topics, lessonType, studentLevel), studentLevel),\n                grammar: this.generateSmartGrammar(studentLevel, sourceText),\n                pronunciation: this.generateSmartPronunciation(vocabulary),\n                wrapup: this.addWrapupInstructions(this.generateSmartWrapup(topics, studentLevel), studentLevel)\n            }\n        };\n    }\n    // Content analysis without AI calls\n    analyzeContentContextNoAI(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context without AI...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        // Extract topics using text analysis\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        // Extract vocabulary using text analysis\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n        }\n        // Generate learning objectives\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        return analysis;\n    }\n    // New method: Analyze content context and complexity\n    async analyzeContentContext(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity based on text characteristics\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        console.log(\"\\uD83D\\uDCC8 Text complexity analysis:\", {\n            avgSentenceLength,\n            complexWords,\n            totalWords,\n            complexity: analysis.complexity\n        });\n        // Extract key topics using simple text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83C\\uDFAF Extracting topics using text analysis...\");\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        console.log(\"✅ Extracted topics:\", analysis.topics);\n        // Extract key vocabulary using text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83D\\uDCDA Extracting vocabulary using text analysis...\");\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        console.log(\"✅ Extracted vocabulary:\", analysis.keyVocabulary);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n            console.log(\"\\uD83C\\uDF0D Cultural context:\", analysis.culturalContext);\n        }\n        // Generate learning objectives based on content type and lesson type\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        console.log(\"\\uD83C\\uDFAF Learning objectives:\", analysis.learningObjectives);\n        return analysis;\n    }\n    // Enhanced contextual summary creation\n    async createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDCDD Creating contextual summary...\");\n        // Use simple prompt to avoid token limits\n        const summaryPrompt = `Summarize this text in 4-5 sentences for ${studentLevel} level students:\n\n${sourceText.substring(0, 800)}\n\nSummary:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual summary...\");\n            const summary = await this.getGoogleAI().prompt(summaryPrompt, {\n                temperature: 0.4,\n                maxTokens: 300\n            });\n            console.log(\"✅ AI contextual summary created:\", summary.substring(0, 100) + \"...\");\n            return summary;\n        } catch (error) {\n            console.warn(\"⚠️ AI contextual summary failed, using text truncation:\", error.message);\n            // Skip complex fallbacks, just use truncation\n            const truncated = sourceText.substring(0, 600) + \"...\";\n            console.log(\"\\uD83D\\uDD04 Using truncated text as summary\");\n            return truncated;\n        }\n    }\n    // Generate CEFR-adapted warm-up questions\n    async generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata) {\n        console.log(\"\\uD83D\\uDD25 Generating CEFR-adapted warm-up questions...\");\n        const levelInstructions = {\n            \"A1\": `\nCreate 3 warm-up questions for A1 (beginner) level:\n- Use simple present tense and basic vocabulary\n- Ask yes/no questions or simple choice questions\n- Focus on familiar, concrete concepts\n- Keep questions short and direct\n- Use vocabulary the student likely knows\nExample: \"Do you use [topic] in your daily life? Yes or No?\"`,\n            \"A2\": `\nCreate 3 warm-up questions for A2 (elementary) level:\n- Use simple past tense and personal experiences\n- Ask for short, simple answers\n- Include basic comparisons with \"different\" or \"same\"\n- Focus on personal experiences and familiar situations\n- Use simple connecting words like \"and\", \"but\"\nExample: \"Have you ever [experienced topic]? How was it?\"`,\n            \"B1\": `\nCreate 3 warm-up questions for B1 (intermediate) level:\n- Ask for opinions with \"What do you think...?\"\n- Include comparisons between countries/cultures\n- Ask students to explain reasons with \"because\" or \"why\"\n- Discuss advantages and disadvantages\n- Use more varied vocabulary but keep structure clear\nExample: \"What do you think about [topic]? How is it different in your country?\"`,\n            \"B2\": `\nCreate 3 warm-up questions for B2 (upper intermediate) level:\n- Ask students to analyze situations and predict outcomes\n- Include complex opinions and explanations\n- Discuss implications and consequences\n- Use conditional language (\"What would happen if...?\")\n- Encourage detailed responses with examples\nExample: \"What challenges do you think [specific group] face with [topic]?\"`,\n            \"C1\": `\nCreate 3 warm-up questions for C1 (advanced) level:\n- Ask students to evaluate arguments and consider multiple perspectives\n- Include abstract concepts and societal implications\n- Use sophisticated vocabulary and complex structures\n- Encourage critical thinking and nuanced discussion\n- Ask about broader cultural and social contexts\nExample: \"How do cultural attitudes toward [concept] influence [topic] in different societies?\"`\n        };\n        // Ultra-simple prompt to avoid token limits\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const warmupPrompt = `Create 3 ${studentLevel} level warm-up questions about ${topic}. Return only the questions:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual warm-up questions...\");\n            console.log(\"\\uD83D\\uDCDD Warm-up prompt:\", warmupPrompt.substring(0, 200) + \"...\");\n            const response = await this.getGoogleAI().prompt(warmupPrompt, {\n                temperature: 0.6,\n                maxTokens: 150\n            });\n            console.log(\"✅ AI warm-up questions generated\");\n            console.log(\"\\uD83E\\uDD16 Raw AI response:\", response);\n            const questions = this.parseListFromText(response).slice(0, 3);\n            console.log(\"\\uD83D\\uDD25 Parsed warm-up questions:\", questions);\n            console.log(\"\\uD83D\\uDD0D Questions array length:\", questions.length);\n            // Ensure we have 3 questions, add fallbacks if needed\n            while(questions.length < 3){\n                const fallbackQuestion = this.getFallbackWarmupQuestion(studentLevel, contentAnalysis, questions.length);\n                console.log(`🔄 Adding fallback question ${questions.length + 1}:`, fallbackQuestion);\n                questions.push(fallbackQuestion);\n            }\n            console.log(\"✅ Final warm-up questions:\", questions);\n            // Final safety check - if still empty, use basic fallback\n            if (questions.length === 0) {\n                console.warn(\"⚠️ No questions generated, using emergency fallback\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return questions;\n        } catch (error) {\n            console.warn(\"⚠️ AI warm-up generation failed, using contextual fallbacks:\", error.message);\n            const fallbackQuestions = this.getContextualWarmupFallback(studentLevel, contentAnalysis, metadata);\n            console.log(\"\\uD83D\\uDD04 Fallback warm-up questions:\", fallbackQuestions);\n            // Final safety check for fallback\n            if (!fallbackQuestions || fallbackQuestions.length === 0) {\n                console.warn(\"⚠️ Fallback also empty, using emergency questions\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return fallbackQuestions;\n        }\n    }\n    // Enhanced contextual lesson structure generation\n    async generateContextualLessonStructure(content, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFD7️ Generating contextual lesson structure...\");\n        // Generate contextual warm-up questions first\n        const contextualWarmup = await this.generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata);\n        console.log(\"\\uD83D\\uDD25 Generated contextual warm-up questions:\", contextualWarmup);\n        // Ultra-simplified prompt to avoid token limits\n        const topics = contentAnalysis.topics.slice(0, 2).join(\", \") || \"technology\";\n        const vocab = contentAnalysis.keyVocabulary.slice(0, 4).join(\", \");\n        const prompt = `Create a ${lessonType} lesson for ${studentLevel} students about: ${topics}\n\nContent: \"${content.substring(0, 400)}\"\nKey words: ${vocab}\n\nReturn JSON with: warmup (use provided), vocabulary (4 words from content), reading (simplified content), comprehension (3 questions), discussion (3 questions), grammar (focus + examples), pronunciation (1 word), wrapup (3 questions).\n\n{\n  \"warmup\": ${JSON.stringify(contextualWarmup)},\n  \"vocabulary\": [{\"word\": \"word\", \"meaning\": \"definition\", \"example\": \"sentence\"}],\n  \"reading\": \"text\",\n  \"comprehension\": [\"question\"],\n  \"discussion\": [\"question\"], \n  \"grammar\": {\"focus\": \"topic\", \"examples\": [\"example\"], \"exercise\": [\"exercise\"]},\n  \"pronunciation\": {\"word\": \"word\", \"ipa\": \"/ipa/\", \"practice\": \"sentence\"},\n  \"wrapup\": [\"question\"]\n}`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for lesson structure...\");\n            const response = await this.getGoogleAI().prompt(prompt, {\n                temperature: 0.7,\n                maxTokens: 1500\n            });\n            console.log(\"\\uD83E\\uDD16 AI lesson structure response:\", response.substring(0, 200) + \"...\");\n            try {\n                const parsed = JSON.parse(response);\n                console.log(\"✅ Successfully parsed lesson structure JSON\");\n                // Ensure our contextual warm-up questions are preserved\n                parsed.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in final structure\");\n                return parsed;\n            } catch (parseError) {\n                console.warn(\"⚠️ Failed to parse JSON, attempting to clean response...\");\n                // Try to extract JSON from the response\n                const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    try {\n                        const cleaned = JSON.parse(jsonMatch[0]);\n                        console.log(\"✅ Successfully parsed cleaned JSON\");\n                        // Ensure our contextual warm-up questions are preserved\n                        cleaned.warmup = contextualWarmup;\n                        console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in cleaned structure\");\n                        return cleaned;\n                    } catch (cleanError) {\n                        console.warn(\"⚠️ Failed to parse cleaned JSON, using fallback\");\n                    }\n                }\n                // If JSON parsing fails, return a structured fallback with contextual warm-up\n                const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n                fallback.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Using fallback with contextual warm-up questions\");\n                return fallback;\n            }\n        } catch (error) {\n            console.warn(\"⚠️ AI lesson structure generation failed, using fallback:\", error.message);\n            const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n            fallback.warmup = contextualWarmup;\n            console.log(\"\\uD83D\\uDD25 Using error fallback with contextual warm-up questions\");\n            return fallback;\n        }\n    }\n    // Enhanced detailed content generation with context\n    async generateDetailedContextualContent(structure, content, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent) {\n        // Use Writer API to expand each section with contextual, detailed content\n        const sections = {\n            ...structure\n        };\n        // Enhance vocabulary section with contextual examples\n        if (sections.vocabulary) {\n            for(let i = 0; i < sections.vocabulary.length; i++){\n                const vocab = sections.vocabulary[i];\n                try {\n                    const contextualExamplePrompt = `\nCreate a natural example sentence using the word \"${vocab.word}\" that relates to this content context:\nTopics: ${contentAnalysis.topics.join(\", \")}\nContent type: ${contentAnalysis.contentType}\nLevel: ${studentLevel}\n\nMake the example relevant to the source material and appropriate for ${studentLevel} level students.\n`;\n                    const enhancedExample = await this.getGoogleAI().write(contextualExamplePrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].example = enhancedExample;\n                    // Add contextual meaning based on source content\n                    const contextualMeaningPrompt = `\nExplain the meaning of \"${vocab.word}\" in the context of: ${contentAnalysis.topics[0] || contentAnalysis.contentType}\nKeep it simple for ${studentLevel} level students.\n`;\n                    const contextualMeaning = await this.getGoogleAI().write(contextualMeaningPrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].contextualMeaning = contextualMeaning;\n                } catch (error) {\n                    // Keep original if enhancement fails\n                    console.warn(`Failed to enhance vocabulary for ${vocab.word}:`, error);\n                }\n            }\n        }\n        // Enhance discussion questions with specific content references\n        if (sections.discussion) {\n            try {\n                const enhancedDiscussionPrompt = `\nEnhance these discussion questions for a ${lessonType} lesson about ${contentAnalysis.topics.join(\" and \")}:\n${sections.discussion.join(\"\\n\")}\n\nMake them more specific to the content, engaging for ${studentLevel} level students, and encourage deeper thinking about:\n- ${contentAnalysis.topics.slice(0, 3).join(\"\\n- \")}\n\nReturn 3-4 enhanced questions that reference specific aspects of the content.\n`;\n                const enhancedDiscussion = await this.getGoogleAI().write(enhancedDiscussionPrompt, {\n                    tone: \"casual\",\n                    length: \"medium\",\n                    format: \"bullet-points\"\n                });\n                sections.discussion = this.parseListFromText(enhancedDiscussion).slice(0, 4);\n            } catch (error) {\n                console.warn(\"Failed to enhance discussion questions:\", error);\n            }\n        }\n        // Enhance reading section with better structure\n        if (sections.reading && structuredContent?.headings?.length > 0) {\n            try {\n                const structuredReadingPrompt = `\nImprove this reading text by organizing it with clear structure based on these headings from the original:\n${structuredContent.headings.slice(0, 3).map((h)=>`- ${h.text}`).join(\"\\n\")}\n\nOriginal text: \"${sections.reading}\"\n\nCreate a well-structured, ${studentLevel}-appropriate reading passage that maintains the key information but improves readability.\n`;\n                const enhancedReading = await this.getGoogleAI().rewrite(sections.reading, {\n                    tone: \"casual\",\n                    length: \"same\",\n                    audience: this.getAudienceLevel(studentLevel)\n                });\n                sections.reading = enhancedReading;\n            } catch (error) {\n                console.warn(\"Failed to enhance reading section:\", error);\n            }\n        }\n        // Enhance grammar section with content-specific examples\n        if (sections.grammar && sections.grammar.focus) {\n            try {\n                const grammarExamplesPrompt = `\nCreate 3 grammar examples for \"${sections.grammar.focus}\" using vocabulary and concepts from this content:\nTopics: ${contentAnalysis.topics.join(\", \")}\nKey vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\n\nMake examples relevant to the content and appropriate for ${studentLevel} level.\n`;\n                const contextualGrammarExamples = await this.getGoogleAI().write(grammarExamplesPrompt, {\n                    tone: \"casual\",\n                    length: \"short\",\n                    format: \"bullet-points\"\n                });\n                sections.grammar.contextualExamples = this.parseListFromText(contextualGrammarExamples);\n            } catch (error) {\n                console.warn(\"Failed to enhance grammar examples:\", error);\n            }\n        }\n        return sections;\n    }\n    async proofreadLesson(lesson) {\n        // Proofread key text sections\n        const sectionsToProofread = [\n            \"reading\",\n            \"grammar.examples\",\n            \"pronunciation.practice\"\n        ];\n        for (const sectionPath of sectionsToProofread){\n            const value = this.getNestedValue(lesson, sectionPath);\n            if (typeof value === \"string\") {\n                const proofread = await this.getGoogleAI().proofread(value, {\n                    checkGrammar: true,\n                    checkSpelling: true,\n                    checkStyle: true\n                });\n                this.setNestedValue(lesson, sectionPath, proofread.corrected_text);\n            }\n        }\n        return lesson;\n    }\n    generateFallbackLesson(params) {\n        // Template-based fallback when AI APIs fail\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getTemplateWarmup(lessonType, studentLevel),\n                vocabulary: this.extractVocabulary(sourceText, studentLevel),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n                discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getTemplateWrapup(lessonType)\n            }\n        };\n    }\n    // Helper methods\n    getSummaryLength(level) {\n        const lengthMap = {\n            A1: \"short\",\n            A2: \"short\",\n            B1: \"medium\",\n            B2: \"medium\",\n            C1: \"long\"\n        };\n        return lengthMap[level] || \"medium\";\n    }\n    getLanguageCode(language) {\n        const languageMap = {\n            spanish: \"es\",\n            french: \"fr\",\n            german: \"de\",\n            italian: \"it\",\n            portuguese: \"pt\",\n            japanese: \"ja\",\n            korean: \"ko\",\n            chinese: \"zh\"\n        };\n        return languageMap[language] || \"en\";\n    }\n    parseListFromText(text) {\n        return text.split(\"\\n\").filter((line)=>line.trim()).map((line)=>line.replace(/^[-•*]\\s*/, \"\").trim()).filter((line)=>line.length > 0).slice(0, 4) // Limit to 4 items\n        ;\n    }\n    getNestedValue(obj, path) {\n        return path.split(\".\").reduce((current, key)=>current?.[key], obj);\n    }\n    setNestedValue(obj, path, value) {\n        const keys = path.split(\".\");\n        const lastKey = keys.pop();\n        const target = keys.reduce((current, key)=>current[key], obj);\n        target[lastKey] = value;\n    }\n    createStructuredFallback(content, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDD04 Creating structured fallback lesson...\");\n        // Extract some basic information from content for better fallback\n        const words = content.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words)).slice(0, 6);\n        const fallback = {\n            warmup: [],\n            vocabulary: uniqueWords.map((word)=>({\n                    word: word,\n                    meaning: `Definition of ${word}`,\n                    example: `Example sentence with ${word}.`\n                })),\n            reading: this.simplifyText(content, studentLevel),\n            comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n            discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n            grammar: this.getTemplateGrammar(studentLevel),\n            pronunciation: this.getTemplatePronunciation(content),\n            wrapup: this.getTemplateWrapup(lessonType)\n        };\n        console.log(\"✅ Structured fallback created (warmup will be set by caller)\");\n        return fallback;\n    }\n    getTemplateWarmup(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What do you already know about this topic?\",\n                \"Have you had similar experiences?\",\n                \"What would you like to learn more about?\"\n            ],\n            grammar: [\n                \"What grammar patterns do you notice?\",\n                \"Which sentences seem most complex?\",\n                \"What grammar rules do you remember?\"\n            ],\n            travel: [\n                \"Where would you like to travel next?\",\n                \"What travel experiences have you had?\",\n                \"What travel vocabulary do you know?\"\n            ],\n            business: [\n                \"What business situations are you familiar with?\",\n                \"How do you communicate professionally?\",\n                \"What business terms are challenging?\"\n            ],\n            pronunciation: [\n                \"Which sounds are difficult to pronounce?\",\n                \"How do you practice pronunciation?\",\n                \"What pronunciation goals do you have?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    extractVocabulary(text, studentLevel) {\n        // Simple vocabulary extraction based on word frequency and complexity\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        const selectedWords = uniqueWords.slice(0, 6);\n        return selectedWords.map((word)=>({\n                word: word,\n                meaning: `Definition of ${word}`,\n                example: `Example sentence with ${word}.`\n            }));\n    }\n    simplifyText(text, studentLevel) {\n        // Basic text simplification based on level\n        const maxLength = {\n            A1: 200,\n            A2: 300,\n            B1: 400,\n            B2: 500,\n            C1: 600\n        };\n        const limit = maxLength[studentLevel] || 400;\n        return text.substring(0, limit) + (text.length > limit ? \"...\" : \"\");\n    }\n    getTemplateComprehension(lessonType, studentLevel) {\n        return [\n            \"What is the main idea of this text?\",\n            \"What supporting details can you identify?\",\n            \"How does this relate to your experience?\",\n            \"What conclusions can you draw?\"\n        ];\n    }\n    getTemplateDiscussion(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What is your opinion on this topic?\",\n                \"How would you handle this situation?\",\n                \"What alternative approaches exist?\"\n            ],\n            business: [\n                \"How would you apply this professionally?\",\n                \"What business challenges does this address?\",\n                \"How would you present this to colleagues?\"\n            ],\n            travel: [\n                \"How would this help while traveling?\",\n                \"What preparations would you make?\",\n                \"How would you share this experience?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    getTemplateGrammar(studentLevel) {\n        const grammarFoci = {\n            A1: \"Present Simple Tense\",\n            A2: \"Past Simple Tense\",\n            B1: \"Present Perfect Tense\",\n            B2: \"Conditional Sentences\",\n            C1: \"Advanced Grammar Structures\"\n        };\n        return {\n            focus: grammarFoci[studentLevel] || \"Present Perfect Tense\",\n            examples: [\n                \"I have learned many new things.\",\n                \"She has improved her skills.\",\n                \"We have discussed this topic.\"\n            ],\n            exercise: [\n                \"I _____ (learn) a lot today.\",\n                \"They _____ (complete) the project.\",\n                \"She _____ (improve) significantly.\"\n            ]\n        };\n    }\n    getTemplatePronunciation(text) {\n        // Extract a challenging word from the text\n        const words = text.match(/\\b[a-z]{6,}\\b/gi) || [\n            \"communication\"\n        ];\n        const selectedWord = words[0] || \"communication\";\n        return {\n            word: selectedWord.toLowerCase(),\n            ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n            practice: `Practice saying: \"${selectedWord}\" in a sentence.`\n        };\n    }\n    getTemplateWrapup(lessonType) {\n        return [\n            \"What new vocabulary did you learn?\",\n            \"Which concepts need more practice?\",\n            \"How will you use this knowledge?\",\n            \"What questions do you still have?\"\n        ];\n    }\n    // New helper methods for enhanced contextual analysis\n    extractTopicsFromHeadings(headings) {\n        return headings.filter((h)=>h.level <= 3) // Focus on main headings\n        .map((h)=>h.text).slice(0, 5);\n    }\n    extractTopicsFromText(text, headings) {\n        // First try to get topics from headings\n        const headingTopics = this.extractTopicsFromHeadings(headings);\n        if (headingTopics.length > 0) {\n            return headingTopics;\n        }\n        // Fallback: extract key phrases from text\n        const sentences = text.split(/[.!?]+/).filter((s)=>s.trim().length > 20);\n        const topics = [];\n        // Look for common topic indicators\n        const topicPatterns = [\n            /about (.+?)(?:\\s|,|\\.)/gi,\n            /discuss (.+?)(?:\\s|,|\\.)/gi,\n            /focus on (.+?)(?:\\s|,|\\.)/gi,\n            /regarding (.+?)(?:\\s|,|\\.)/gi\n        ];\n        for (const sentence of sentences.slice(0, 5)){\n            for (const pattern of topicPatterns){\n                const matches = sentence.match(pattern);\n                if (matches) {\n                    topics.push(...matches.map((m)=>m.replace(pattern, \"$1\").trim()).slice(0, 2));\n                }\n            }\n        }\n        // If no patterns found, extract key nouns\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"this\",\n                \"that\",\n                \"with\",\n                \"from\",\n                \"they\",\n                \"have\",\n                \"been\",\n                \"will\",\n                \"more\",\n                \"some\",\n                \"what\",\n                \"when\",\n                \"where\",\n                \"which\",\n                \"their\",\n                \"would\",\n                \"could\",\n                \"should\"\n            ];\n            const keyWords = words.filter((word)=>!commonWords.includes(word)).filter((word, index, arr)=>arr.indexOf(word) === index) // unique\n            .slice(0, 3);\n            return keyWords.length > 0 ? keyWords : [\n                \"AI technology\",\n                \"mobile devices\",\n                \"privacy\"\n            ];\n        }\n        return topics.slice(0, 3);\n    }\n    extractVocabularyFromText(text, level) {\n        // Extract words based on complexity appropriate for the level\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        // Filter by complexity based on level\n        const complexityThreshold = {\n            \"A1\": 6,\n            \"A2\": 7,\n            \"B1\": 8,\n            \"B2\": 10,\n            \"C1\": 12\n        };\n        const maxLength = complexityThreshold[level] || 8;\n        return uniqueWords.filter((word)=>word.length <= maxLength && word.length >= 4).slice(0, 8);\n    }\n    determineCulturalContext(domain, text) {\n        // Determine cultural context based on domain and content\n        const culturalIndicators = {\n            \"bbc.com\": \"British English, UK culture\",\n            \"cnn.com\": \"American English, US culture\",\n            \"wikipedia.org\": \"International, encyclopedic\",\n            \"nytimes.com\": \"American English, US perspective\",\n            \"theguardian.com\": \"British English, UK perspective\"\n        };\n        if (culturalIndicators[domain]) {\n            return culturalIndicators[domain];\n        }\n        // Analyze text for cultural markers\n        const americanMarkers = [\n            \"dollar\",\n            \"president\",\n            \"congress\",\n            \"state\",\n            \"federal\"\n        ];\n        const britishMarkers = [\n            \"pound\",\n            \"minister\",\n            \"parliament\",\n            \"council\",\n            \"government\"\n        ];\n        const americanCount = americanMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        const britishCount = britishMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        if (americanCount > britishCount) {\n            return \"American English context\";\n        } else if (britishCount > americanCount) {\n            return \"British English context\";\n        }\n        return \"International context\";\n    }\n    generateLearningObjectives(contentType, topics, level) {\n        const objectives = [];\n        // Base objectives on content type\n        switch(contentType){\n            case \"news\":\n                objectives.push(\"Understand current events vocabulary\");\n                objectives.push(\"Practice reading news articles\");\n                break;\n            case \"blog\":\n                objectives.push(\"Learn informal writing style\");\n                objectives.push(\"Understand personal opinions and experiences\");\n                break;\n            case \"tutorial\":\n                objectives.push(\"Follow step-by-step instructions\");\n                objectives.push(\"Learn technical vocabulary\");\n                break;\n            case \"encyclopedia\":\n                objectives.push(\"Understand factual information\");\n                objectives.push(\"Learn academic vocabulary\");\n                break;\n            default:\n                objectives.push(\"Improve reading comprehension\");\n                objectives.push(\"Expand vocabulary knowledge\");\n        }\n        // Add topic-specific objectives\n        topics.slice(0, 2).forEach((topic)=>{\n            objectives.push(`Discuss topics related to ${topic.toLowerCase()}`);\n        });\n        return objectives.slice(0, 4);\n    }\n    getAudienceLevel(cefrLevel) {\n        const levelMap = {\n            \"A1\": \"beginner\",\n            \"A2\": \"beginner\",\n            \"B1\": \"general\",\n            \"B2\": \"general\",\n            \"C1\": \"expert\"\n        };\n        return levelMap[cefrLevel] || \"general\";\n    }\n    // Enhanced fallback lesson generation with context\n    generateEnhancedFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, contentMetadata, structuredContent } = params;\n        console.log(\"\\uD83D\\uDD04 Generating enhanced fallback lesson with contextual warm-up...\");\n        // Use available context even in fallback\n        const topics = structuredContent?.headings?.map((h)=>h.text).slice(0, 3) || [];\n        const contentType = contentMetadata?.contentType || \"general\";\n        // Create mock content analysis for fallback warm-up generation\n        const mockContentAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: this.determineSourceCountry(contentMetadata?.domain || \"\"),\n            culturalContext: this.determineCulturalContext(contentMetadata?.domain || \"\", sourceText)\n        };\n        // Generate contextual warm-up questions even in fallback\n        const contextualWarmup = this.getContextualWarmupFallback(studentLevel, mockContentAnalysis, contentMetadata);\n        console.log(\"\\uD83D\\uDD25 Generated fallback contextual warm-up:\", contextualWarmup);\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: contextualWarmup,\n                vocabulary: this.extractContextualVocabulary(sourceText, studentLevel, topics),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getContextualComprehension(lessonType, studentLevel, topics),\n                discussion: this.getContextualDiscussion(lessonType, studentLevel, topics),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getContextualWrapup(lessonType, topics)\n            }\n        };\n    }\n    getContextualWarmup(lessonType, studentLevel, topics, contentType) {\n        // Use the same contextual fallback logic\n        const mockAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: \"International\"\n        };\n        return this.getContextualWarmupFallback(studentLevel, mockAnalysis, {\n            title: topics[0] || \"Content\"\n        });\n    }\n    // Basic fallback for complete failures\n    generateBasicFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: [\n                    \"What do you already know about this topic?\",\n                    \"Have you had similar experiences?\",\n                    \"What would you like to learn?\"\n                ],\n                vocabulary: [],\n                reading: sourceText.substring(0, 400),\n                comprehension: [\n                    \"What is the main idea?\",\n                    \"What details can you identify?\"\n                ],\n                discussion: [\n                    \"What is your opinion?\",\n                    \"How would you handle this?\"\n                ],\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: {\n                    word: \"example\",\n                    ipa: \"/ɪɡˈz\\xe6mpəl/\",\n                    practice: \"Practice saying example.\"\n                },\n                wrapup: [\n                    \"What did you learn?\",\n                    \"What needs more practice?\"\n                ]\n            }\n        };\n    }\n    extractContextualVocabulary(text, studentLevel, topics) {\n        const vocabulary = this.extractVocabulary(text, studentLevel);\n        // Enhance with topic context if available\n        if (topics.length > 0) {\n            return vocabulary.map((vocab, index)=>({\n                    ...vocab,\n                    context: index < topics.length ? `Related to ${topics[index].toLowerCase()}` : vocab.meaning\n                }));\n        }\n        return vocabulary;\n    }\n    getContextualComprehension(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateComprehension(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is the main point about ${topics[0]?.toLowerCase()}?`,\n                `How does the text explain ${topics[1]?.toLowerCase() || \"the topic\"}?`,\n                \"What supporting details can you identify?\",\n                \"What conclusions can you draw from this information?\"\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualDiscussion(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateDiscussion(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is your opinion about ${topics[0]?.toLowerCase()}?`,\n                `How would you apply this information about ${topics[1]?.toLowerCase() || \"this topic\"}?`,\n                `What are the implications of what you learned about ${topics[0]?.toLowerCase()}?`\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualWrapup(lessonType, topics) {\n        if (topics.length > 0) {\n            return [\n                `What new vocabulary did you learn about ${topics[0]?.toLowerCase()}?`,\n                `Which concepts about ${topics[1]?.toLowerCase() || \"this topic\"} need more practice?`,\n                \"How will you use this knowledge in real situations?\",\n                \"What questions do you still have about this content?\"\n            ];\n        }\n        return this.getTemplateWrapup(lessonType);\n    }\n    // Smart template-based lesson generation\n    generateSmartTemplateLesson(sourceText, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFA8 Generating smart template lesson...\");\n        const topics = contentAnalysis.topics;\n        const vocabulary = contentAnalysis.keyVocabulary;\n        const title = metadata?.title || \"Content\";\n        return {\n            warmup: this.generateSmartWarmupQuestions(topics, studentLevel, contentAnalysis),\n            vocabulary: this.generateSmartVocabulary(vocabulary, sourceText, studentLevel),\n            reading: this.generateSmartReading(sourceText, studentLevel),\n            comprehension: this.generateSmartComprehension(topics, studentLevel),\n            discussion: this.generateSmartDiscussion(topics, lessonType, studentLevel),\n            grammar: this.generateSmartGrammar(studentLevel, sourceText),\n            pronunciation: this.generateSmartPronunciation(vocabulary),\n            wrapup: this.generateSmartWrapup(topics, studentLevel)\n        };\n    }\n    // Smart warm-up questions based on content (prior knowledge activation)\n    generateSmartWarmupQuestions(topics, studentLevel, contentAnalysis) {\n        const topic = topics[0] || \"this topic\";\n        const secondTopic = topics[1] || \"technology\";\n        // Focus on activating prior knowledge, not assuming content knowledge\n        const levelQuestions = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} popular in your country?`,\n                `Do you like ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you heard about ${topic.toLowerCase()} before?`,\n                `What do you already know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} common in your country?`\n            ],\n            \"B1\": [\n                `What comes to mind when you hear about ${topic.toLowerCase()}?`,\n                `Have you had any experience with ${topic.toLowerCase()}?`,\n                `What would you like to know about ${topic.toLowerCase()}?`\n            ],\n            \"B2\": [\n                `What is your general opinion about ${topic.toLowerCase()}?`,\n                `How familiar are you with ${topic.toLowerCase()}?`,\n                `What role does ${topic.toLowerCase()} play in your daily life?`\n            ],\n            \"C1\": [\n                `How would you describe the significance of ${topic.toLowerCase()} in modern society?`,\n                `What are your thoughts on the current state of ${topic.toLowerCase()}?`,\n                `How do you think ${topic.toLowerCase()} has evolved over time?`\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Smart vocabulary with contextual examples\n    generateSmartVocabulary(vocabulary, sourceText, studentLevel) {\n        return vocabulary.slice(0, 6).map((word)=>{\n            // Find the word in context\n            const sentences = sourceText.split(/[.!?]+/);\n            const contextSentence = sentences.find((s)=>s.toLowerCase().includes(word.toLowerCase()));\n            return {\n                word: word,\n                meaning: this.generateWordMeaning(word, studentLevel),\n                example: contextSentence ? contextSentence.trim().substring(0, 100) + (contextSentence.length > 100 ? \"...\" : \"\") : `This is an example sentence with ${word}.`\n            };\n        });\n    }\n    // Generate word meanings based on level\n    generateWordMeaning(word, level) {\n        // Simple definitions based on level\n        const commonMeanings = {\n            \"efficient\": level === \"A1\" || level === \"A2\" ? \"working well and fast\" : \"achieving maximum productivity with minimum wasted effort\",\n            \"technology\": level === \"A1\" || level === \"A2\" ? \"computers and machines\" : \"the application of scientific knowledge for practical purposes\",\n            \"privacy\": level === \"A1\" || level === \"A2\" ? \"keeping things secret\" : \"the state of being free from public attention\",\n            \"device\": level === \"A1\" || level === \"A2\" ? \"a machine or tool\" : \"a piece of equipment designed for a particular purpose\",\n            \"processing\": level === \"A1\" || level === \"A2\" ? \"working with information\" : \"performing operations on data\",\n            \"compact\": level === \"A1\" || level === \"A2\" ? \"small and neat\" : \"closely and neatly packed together\",\n            \"version\": level === \"A1\" || level === \"A2\" ? \"a type of something\" : \"a particular form of something\",\n            \"family\": level === \"A1\" || level === \"A2\" ? \"a group of related things\" : \"a group of related objects or concepts\",\n            \"nano\": level === \"A1\" || level === \"A2\" ? \"very small\" : \"extremely small in scale\",\n            \"gemini\": level === \"A1\" || level === \"A2\" ? \"a type of AI\" : \"an artificial intelligence system developed by Google\"\n        };\n        return commonMeanings[word.toLowerCase()] || `A word meaning ${word.toLowerCase()}`;\n    }\n    // Smart reading passage adaptation\n    generateSmartReading(sourceText, studentLevel) {\n        const maxLength = {\n            \"A1\": 200,\n            \"A2\": 300,\n            \"B1\": 400,\n            \"B2\": 500,\n            \"C1\": 600\n        };\n        const targetLength = maxLength[studentLevel] || 400;\n        // Simplify sentences for lower levels\n        if (studentLevel === \"A1\" || studentLevel === \"A2\") {\n            const sentences = sourceText.split(/[.!?]+/);\n            const simplifiedSentences = sentences.filter((s)=>s.trim().length > 10).map((s)=>s.trim()).slice(0, 8) // Limit number of sentences\n            ;\n            return simplifiedSentences.join(\". \").substring(0, targetLength);\n        }\n        return sourceText.substring(0, targetLength);\n    }\n    // Smart comprehension questions\n    generateSmartComprehension(topics, studentLevel) {\n        const topic = topics[0] || \"the content\";\n        const levelQuestions = {\n            \"A1\": [\n                `What is ${topic.toLowerCase()}?`,\n                \"What is the main idea?\",\n                \"Is this information new to you?\"\n            ],\n            \"A2\": [\n                `What does the text say about ${topic.toLowerCase()}?`,\n                \"What are the main points?\",\n                \"Do you agree with the information?\"\n            ],\n            \"B1\": [\n                `How does the text explain ${topic.toLowerCase()}?`,\n                \"What supporting details are provided?\",\n                \"What conclusions can you draw?\",\n                \"How does this relate to your experience?\"\n            ],\n            \"B2\": [\n                `What is the author's perspective on ${topic.toLowerCase()}?`,\n                \"What evidence supports the main arguments?\",\n                \"What are the implications of this information?\",\n                \"How might this affect different groups of people?\"\n            ],\n            \"C1\": [\n                `How does the author's treatment of ${topic.toLowerCase()} reflect broader themes?`,\n                \"What underlying assumptions can you identify?\",\n                \"How might this information be interpreted differently in various contexts?\",\n                \"What are the potential long-term consequences discussed?\"\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Smart discussion questions\n    generateSmartDiscussion(topics, lessonType, studentLevel) {\n        const topic = topics[0] || \"this topic\";\n        const secondTopic = topics[1] || \"technology\";\n        const levelQuestions = {\n            \"A1\": [\n                `Do you like ${topic.toLowerCase()}? Why?`,\n                `Is ${topic.toLowerCase()} good or bad?`,\n                `Would you recommend ${topic.toLowerCase()} to friends?`\n            ],\n            \"A2\": [\n                `What is your opinion about ${topic.toLowerCase()}?`,\n                `How do you use ${topic.toLowerCase()} in your life?`,\n                `What problems can ${topic.toLowerCase()} cause?`\n            ],\n            \"B1\": [\n                `What are the advantages and disadvantages of ${topic.toLowerCase()}?`,\n                `How has ${topic.toLowerCase()} changed over time?`,\n                `What would happen if ${topic.toLowerCase()} didn't exist?`\n            ],\n            \"B2\": [\n                `How might ${topic.toLowerCase()} impact society in the next decade?`,\n                `What ethical considerations surround ${topic.toLowerCase()}?`,\n                `How does ${topic.toLowerCase()} differ across cultures?`\n            ],\n            \"C1\": [\n                `What are the broader societal implications of ${topic.toLowerCase()}?`,\n                `How might ${topic.toLowerCase()} reshape our understanding of ${secondTopic.toLowerCase()}?`,\n                `What role should regulation play in ${topic.toLowerCase()}?`\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Smart grammar focus\n    generateSmartGrammar(studentLevel, sourceText) {\n        const grammarFocus = {\n            \"A1\": {\n                focus: \"Present Simple\",\n                examples: [\n                    \"It is efficient.\",\n                    \"This works well.\",\n                    \"People use technology.\"\n                ],\n                exercise: [\n                    \"It _____ (be) very useful.\",\n                    \"Technology _____ (help) people.\",\n                    \"This _____ (work) on phones.\"\n                ]\n            },\n            \"A2\": {\n                focus: \"Present Continuous and Simple\",\n                examples: [\n                    \"It is working on your device.\",\n                    \"People are using this technology.\",\n                    \"It helps with privacy.\"\n                ],\n                exercise: [\n                    \"It _____ (work) right now.\",\n                    \"People _____ (use) it every day.\",\n                    \"This _____ (help) with security.\"\n                ]\n            },\n            \"B1\": {\n                focus: \"Present Perfect\",\n                examples: [\n                    \"Technology has improved significantly.\",\n                    \"It has become more efficient.\",\n                    \"Users have experienced better privacy.\"\n                ],\n                exercise: [\n                    \"Technology _____ (improve) a lot.\",\n                    \"It _____ (become) very popular.\",\n                    \"People _____ (start) using it more.\"\n                ]\n            },\n            \"B2\": {\n                focus: \"Passive Voice\",\n                examples: [\n                    \"It is designed for mobile devices.\",\n                    \"Privacy is enhanced by this technology.\",\n                    \"Data is processed locally.\"\n                ],\n                exercise: [\n                    \"It _____ (design) for phones.\",\n                    \"Privacy _____ (improve) significantly.\",\n                    \"Information _____ (process) safely.\"\n                ]\n            },\n            \"C1\": {\n                focus: \"Complex Sentence Structures\",\n                examples: [\n                    \"Having been designed for efficiency, it operates seamlessly.\",\n                    \"The technology, which prioritizes privacy, has gained popularity.\"\n                ],\n                exercise: [\n                    \"_____ (design) for mobile use, it works offline.\",\n                    \"The system, _____ (focus) on privacy, appeals to users.\"\n                ]\n            }\n        };\n        return grammarFocus[studentLevel] || grammarFocus[\"B1\"];\n    }\n    // Smart pronunciation\n    generateSmartPronunciation(vocabulary) {\n        const word = vocabulary.find((w)=>w.length > 6) || vocabulary[0] || \"technology\";\n        const pronunciations = {\n            \"technology\": \"/tekˈnɒlədʒi/\",\n            \"efficient\": \"/ɪˈfɪʃənt/\",\n            \"privacy\": \"/ˈpraɪvəsi/\",\n            \"processing\": \"/ˈprəʊsesɪŋ/\",\n            \"device\": \"/dɪˈvaɪs/\",\n            \"artificial\": \"/ˌɑːtɪˈfɪʃəl/\",\n            \"intelligence\": \"/ɪnˈtelɪdʒəns/\",\n            \"compact\": \"/kəmˈp\\xe6kt/\",\n            \"version\": \"/ˈvɜːʃən/\",\n            \"family\": \"/ˈf\\xe6məli/\",\n            \"nano\": \"/ˈn\\xe6noʊ/\",\n            \"gemini\": \"/ˈdʒemɪnaɪ/\"\n        };\n        return {\n            word: word,\n            ipa: pronunciations[word.toLowerCase()] || `/ˈwɜːrd/`,\n            practice: `Practice saying \"${word}\" in this sentence: This ${word} is very useful.`\n        };\n    }\n    // Smart wrap-up questions\n    generateSmartWrapup(topics, studentLevel) {\n        const topic = topics[0] || \"this topic\";\n        return [\n            `What new vocabulary did you learn about ${topic.toLowerCase()}?`,\n            `Which concepts about ${topic.toLowerCase()} need more practice?`,\n            \"How will you use this knowledge in real situations?\",\n            \"What questions do you still have about this content?\"\n        ];\n    }\n    // Helper method to determine source country from domain\n    determineSourceCountry(domain) {\n        const countryMap = {\n            \"bbc.com\": \"United Kingdom\",\n            \"bbc.co.uk\": \"United Kingdom\",\n            \"cnn.com\": \"United States\",\n            \"nytimes.com\": \"United States\",\n            \"theguardian.com\": \"United Kingdom\",\n            \"washingtonpost.com\": \"United States\",\n            \"reuters.com\": \"International\",\n            \"ap.org\": \"United States\",\n            \"npr.org\": \"United States\",\n            \"abc.net.au\": \"Australia\",\n            \"cbc.ca\": \"Canada\"\n        };\n        for (const [domainKey, country] of Object.entries(countryMap)){\n            if (domain.includes(domainKey)) {\n                return country;\n            }\n        }\n        return \"International\";\n    }\n    // Fallback warm-up question generator\n    getFallbackWarmupQuestion(level, contentAnalysis, questionIndex) {\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const contentType = contentAnalysis.contentType;\n        const fallbackQuestions = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} important in your country?`,\n                `Do you like to read about ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you heard about ${topic.toLowerCase()} before?`,\n                `What do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} different in your country?`\n            ],\n            \"B1\": [\n                `What do you think about ${topic.toLowerCase()}?`,\n                `How is ${topic.toLowerCase()} important in your daily life?`,\n                `What would you like to know about ${topic.toLowerCase()}?`\n            ],\n            \"B2\": [\n                `What are your thoughts on ${topic.toLowerCase()}?`,\n                `How might ${topic.toLowerCase()} affect people in different countries?`,\n                `What questions would you ask about ${topic.toLowerCase()}?`\n            ],\n            \"C1\": [\n                `How do cultural perspectives influence attitudes toward ${topic.toLowerCase()}?`,\n                `What are the broader implications of ${topic.toLowerCase()} in modern society?`,\n                `How might ${topic.toLowerCase()} evolve in the coming years?`\n            ]\n        };\n        const levelQuestions = fallbackQuestions[level] || fallbackQuestions[\"B1\"];\n        return levelQuestions[questionIndex] || levelQuestions[0];\n    }\n    // Contextual warm-up fallback when AI fails\n    getContextualWarmupFallback(level, contentAnalysis, metadata) {\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const sourceCountry = contentAnalysis.sourceCountry || \"this country\";\n        const title = metadata?.title || \"this content\";\n        const fallbackSets = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is this topic common in your country?`,\n                `Do you want to learn about ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you experienced ${topic.toLowerCase()} before?`,\n                `What is ${topic.toLowerCase()} like in your country?`,\n                `Why is ${topic.toLowerCase()} interesting to you?`\n            ],\n            \"B1\": [\n                `What do you think about ${topic.toLowerCase()}?`,\n                `How is ${topic.toLowerCase()} different in your country compared to ${sourceCountry}?`,\n                `What would you expect to learn from this ${contentAnalysis.contentType}?`\n            ],\n            \"B2\": [\n                `What are your thoughts on how ${topic.toLowerCase()} is presented in ${sourceCountry} media?`,\n                `What challenges do you think people face with ${topic.toLowerCase()}?`,\n                `How might your perspective on ${topic.toLowerCase()} differ from the author's?`\n            ],\n            \"C1\": [\n                `How do cultural attitudes toward ${topic.toLowerCase()} vary between ${sourceCountry} and your country?`,\n                `What are the broader societal implications of ${topic.toLowerCase()}?`,\n                `How might the perspective in this ${contentAnalysis.contentType} reflect ${sourceCountry} values?`\n            ]\n        };\n        return fallbackSets[level] || fallbackSets[\"B1\"];\n    }\n    constructor(){\n        this.googleAI = null;\n    }\n}\nconst lessonAIServerGenerator = new LessonAIServerGenerator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/lesson-ai-generator-server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-smart-template%2Froute&page=%2Fapi%2Ftest-smart-template%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-smart-template%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();