"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-lesson-stream/route";
exports.ids = ["app/api/generate-lesson-stream/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson-stream%2Froute&page=%2Fapi%2Fgenerate-lesson-stream%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson-stream%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson-stream%2Froute&page=%2Fapi%2Fgenerate-lesson-stream%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson-stream%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_linguaspark_app_api_generate_lesson_stream_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-lesson-stream/route.ts */ \"(rsc)/./app/api/generate-lesson-stream/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-lesson-stream/route\",\n        pathname: \"/api/generate-lesson-stream\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-lesson-stream/route\"\n    },\n    resolvedPagePath: \"D:\\\\linguaspark\\\\app\\\\api\\\\generate-lesson-stream\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_linguaspark_app_api_generate_lesson_stream_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-lesson-stream/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1sZXNzb24tc3RyZWFtJTJGcm91dGUmcGFnZT0lMkZhcGklMkZnZW5lcmF0ZS1sZXNzb24tc3RyZWFtJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZ2VuZXJhdGUtbGVzc29uLXN0cmVhbSUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbGluZ3Vhc3BhcmslNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNsaW5ndWFzcGFyayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDVztBQUN4RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzJkZjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb24tc3RyZWFtXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nZW5lcmF0ZS1sZXNzb24tc3RyZWFtL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZ2VuZXJhdGUtbGVzc29uLXN0cmVhbVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZ2VuZXJhdGUtbGVzc29uLXN0cmVhbS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkQ6XFxcXGxpbmd1YXNwYXJrXFxcXGFwcFxcXFxhcGlcXFxcZ2VuZXJhdGUtbGVzc29uLXN0cmVhbVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvZ2VuZXJhdGUtbGVzc29uLXN0cmVhbS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson-stream%2Froute&page=%2Fapi%2Fgenerate-lesson-stream%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson-stream%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"b8709e0dedae\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vYXBwL2dsb2JhbHMuY3NzP2YxMTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJiODcwOWUwZGVkYWVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/globals.css\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-lesson-stream/route.ts":
/*!*************************************************!*\
  !*** ./app/api/generate-lesson-stream/route.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/lesson-ai-generator-server */ \"(rsc)/./lib/lesson-ai-generator-server.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _lib_content_validator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/content-validator */ \"(rsc)/./lib/content-validator.ts\");\n/* harmony import */ var _lib_error_classifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/error-classifier */ \"(rsc)/./lib/error-classifier.ts\");\n\n\n\n\n// Helper to create SSE message\nfunction createSSEMessage(data) {\n    return `data: ${JSON.stringify(data)}\\n\\n`;\n}\nasync function POST(request) {\n    const encoder = new TextEncoder();\n    let userId;\n    let requestContext = {};\n    // Track current progress state for error reporting\n    let currentProgressState = {\n        step: \"Not started\",\n        progress: 0,\n        phase: \"initialization\",\n        section: undefined\n    };\n    const stream = new ReadableStream({\n        async start (controller) {\n            try {\n                const body = await request.json();\n                const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = body;\n                // Set up request context\n                requestContext = {\n                    contentLength: sourceText?.length,\n                    lessonType,\n                    studentLevel,\n                    targetLanguage,\n                    apiEndpoint: \"/api/generate-lesson-stream\"\n                };\n                // Send initial progress\n                currentProgressState = {\n                    step: \"Initializing lesson generation...\",\n                    progress: 5,\n                    phase: \"initialization\",\n                    section: undefined\n                };\n                controller.enqueue(encoder.encode(createSSEMessage({\n                    type: \"progress\",\n                    ...currentProgressState\n                })));\n                // Validate required fields\n                if (!sourceText || !lessonType || !studentLevel || !targetLanguage) {\n                    controller.enqueue(encoder.encode(createSSEMessage({\n                        type: \"error\",\n                        error: {\n                            type: \"CONTENT_ISSUE\",\n                            message: \"Missing required fields\",\n                            errorId: `REQ_${Date.now()}`\n                        },\n                        progressState: currentProgressState\n                    })));\n                    controller.close();\n                    return;\n                }\n                // Validate content\n                currentProgressState = {\n                    step: \"Validating content...\",\n                    progress: 10,\n                    phase: \"validation\",\n                    section: undefined\n                };\n                controller.enqueue(encoder.encode(createSSEMessage({\n                    type: \"progress\",\n                    ...currentProgressState\n                })));\n                const validationResult = _lib_content_validator__WEBPACK_IMPORTED_MODULE_2__.contentValidator.validateContent(sourceText);\n                if (!validationResult.isValid) {\n                    const classifiedError = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_3__.errorClassifier.classifyError(new Error(`Content validation failed: ${validationResult.reason}`), requestContext);\n                    const userMessage = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_3__.errorClassifier.generateUserMessage(classifiedError);\n                    controller.enqueue(encoder.encode(createSSEMessage({\n                        type: \"error\",\n                        error: {\n                            type: userMessage.title,\n                            message: userMessage.message,\n                            errorId: userMessage.errorId\n                        },\n                        progressState: currentProgressState\n                    })));\n                    controller.close();\n                    return;\n                }\n                // Validate authentication\n                currentProgressState = {\n                    step: \"Authenticating...\",\n                    progress: 15,\n                    phase: \"authentication\",\n                    section: undefined\n                };\n                controller.enqueue(encoder.encode(createSSEMessage({\n                    type: \"progress\",\n                    ...currentProgressState\n                })));\n                // Get auth token from request headers\n                const authHeader = request.headers.get(\"Authorization\");\n                if (!authHeader) {\n                    controller.enqueue(encoder.encode(createSSEMessage({\n                        type: \"error\",\n                        error: {\n                            type: \"AUTH_ERROR\",\n                            message: \"Authentication required - no authorization header\",\n                            errorId: `AUTH_${Date.now()}`\n                        },\n                        progressState: currentProgressState\n                    })));\n                    controller.close();\n                    return;\n                }\n                // Verify the token by creating a client with it\n                const supabase = (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createClient)();\n                const token = authHeader.replace(\"Bearer \", \"\");\n                const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n                if (authError || !user) {\n                    controller.enqueue(encoder.encode(createSSEMessage({\n                        type: \"error\",\n                        error: {\n                            type: \"AUTH_ERROR\",\n                            message: \"Invalid or expired token\",\n                            errorId: `AUTH_${Date.now()}`\n                        },\n                        progressState: currentProgressState\n                    })));\n                    controller.close();\n                    return;\n                }\n                userId = user.id;\n                // Create progress callback that streams real-time updates to frontend\n                const progressCallback = (update)=>{\n                    try {\n                        // Update current progress state for error reporting\n                        currentProgressState = {\n                            step: update.step,\n                            progress: update.progress,\n                            phase: update.phase,\n                            section: update.section\n                        };\n                        controller.enqueue(encoder.encode(createSSEMessage({\n                            type: \"progress\",\n                            ...currentProgressState\n                        })));\n                    } catch (error) {\n                        // Log but don't throw - generation should continue even if streaming fails\n                        console.error(\"Failed to stream progress update:\", error);\n                    }\n                };\n                // Generate the lesson with real-time progress callbacks\n                const lesson = await _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_0__.lessonAIServerGenerator.generateLesson({\n                    sourceText,\n                    lessonType,\n                    studentLevel,\n                    targetLanguage,\n                    sourceUrl,\n                    contentMetadata,\n                    structuredContent,\n                    wordCount,\n                    readingTime,\n                    onProgress: progressCallback\n                });\n                // Save to database\n                currentProgressState = {\n                    step: \"Saving lesson...\",\n                    progress: 95,\n                    phase: \"saving\",\n                    section: undefined\n                };\n                controller.enqueue(encoder.encode(createSSEMessage({\n                    type: \"progress\",\n                    ...currentProgressState\n                })));\n                const { error: insertError } = await supabase.from(\"lessons\").insert({\n                    user_id: userId,\n                    lesson_title: lesson.lessonTitle,\n                    lesson_type: lessonType,\n                    student_level: studentLevel,\n                    target_language: targetLanguage,\n                    lesson_data: lesson,\n                    source_url: sourceUrl\n                });\n                if (insertError) {\n                    console.error(\"Error saving lesson:\", insertError);\n                }\n                // Send completion\n                controller.enqueue(encoder.encode(createSSEMessage({\n                    type: \"complete\",\n                    step: \"Lesson generated successfully!\",\n                    progress: 100,\n                    lesson\n                })));\n                controller.close();\n            } catch (error) {\n                console.error(\"Streaming error:\", error);\n                console.error(\"Progress state at error:\", currentProgressState);\n                const classifiedError = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_3__.errorClassifier.classifyError(error, requestContext);\n                const userMessage = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_3__.errorClassifier.generateUserMessage(classifiedError);\n                controller.enqueue(encoder.encode(createSSEMessage({\n                    type: \"error\",\n                    error: {\n                        type: userMessage.title,\n                        message: userMessage.message,\n                        errorId: userMessage.errorId\n                    },\n                    progressState: currentProgressState\n                })));\n                controller.close();\n            }\n        }\n    });\n    return new Response(stream, {\n        headers: {\n            \"Content-Type\": \"text/event-stream\",\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\"\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-lesson-stream/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/layout.tsx":
/*!************************!*\
  !*** ./app/layout.tsx ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootLayout),\n/* harmony export */   metadata: () => (/* binding */ metadata)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Inter_arguments_variable_font_inter_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"variable\":\"--font-inter\",\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"} */ \"(rsc)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-inter\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"inter\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Inter_arguments_variable_font_inter_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_app_layout_tsx_import_Inter_arguments_variable_font_inter_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_JetBrains_Mono_arguments_variable_font_jetbrains_mono_subsets_latin_variableName_jetbrainsMono___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"JetBrains_Mono\",\"arguments\":[{\"variable\":\"--font-jetbrains-mono\",\"subsets\":[\"latin\"]}],\"variableName\":\"jetbrainsMono\"} */ \"(rsc)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"JetBrains_Mono\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-jetbrains-mono\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"jetbrainsMono\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_JetBrains_Mono_arguments_variable_font_jetbrains_mono_subsets_latin_variableName_jetbrainsMono___WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_app_layout_tsx_import_JetBrains_Mono_arguments_variable_font_jetbrains_mono_subsets_latin_variableName_jetbrainsMono___WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Merriweather_arguments_variable_font_serif_subsets_latin_weight_300_400_700_900_variableName_merriweather___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Merriweather\",\"arguments\":[{\"variable\":\"--font-serif\",\"subsets\":[\"latin\"],\"weight\":[\"300\",\"400\",\"700\",\"900\"]}],\"variableName\":\"merriweather\"} */ \"(rsc)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Merriweather\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-serif\\\",\\\"subsets\\\":[\\\"latin\\\"],\\\"weight\\\":[\\\"300\\\",\\\"400\\\",\\\"700\\\",\\\"900\\\"]}],\\\"variableName\\\":\\\"merriweather\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Merriweather_arguments_variable_font_serif_subsets_latin_weight_300_400_700_900_variableName_merriweather___WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_app_layout_tsx_import_Merriweather_arguments_variable_font_serif_subsets_latin_weight_300_400_700_900_variableName_merriweather___WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Lora_arguments_variable_font_serif_alt_subsets_latin_weight_400_500_600_700_variableName_lora___WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Lora\",\"arguments\":[{\"variable\":\"--font-serif-alt\",\"subsets\":[\"latin\"],\"weight\":[\"400\",\"500\",\"600\",\"700\"]}],\"variableName\":\"lora\"} */ \"(rsc)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Lora\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-serif-alt\\\",\\\"subsets\\\":[\\\"latin\\\"],\\\"weight\\\":[\\\"400\\\",\\\"500\\\",\\\"600\\\",\\\"700\\\"]}],\\\"variableName\\\":\\\"lora\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Lora_arguments_variable_font_serif_alt_subsets_latin_weight_400_500_600_700_variableName_lora___WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_app_layout_tsx_import_Lora_arguments_variable_font_serif_alt_subsets_latin_weight_400_500_600_700_variableName_lora___WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.css */ \"(rsc)/./app/globals.css\");\n/* harmony import */ var _components_auth_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/auth-wrapper */ \"(rsc)/./components/auth-wrapper.tsx\");\n\n\n\n\n\n\n\nfunction RootLayout({ children }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"html\", {\n        lang: \"en\",\n        className: `${(next_font_google_target_css_path_app_layout_tsx_import_Inter_arguments_variable_font_inter_subsets_latin_variableName_inter___WEBPACK_IMPORTED_MODULE_3___default().variable)} ${(next_font_google_target_css_path_app_layout_tsx_import_JetBrains_Mono_arguments_variable_font_jetbrains_mono_subsets_latin_variableName_jetbrainsMono___WEBPACK_IMPORTED_MODULE_4___default().variable)} ${(next_font_google_target_css_path_app_layout_tsx_import_Merriweather_arguments_variable_font_serif_subsets_latin_weight_300_400_700_900_variableName_merriweather___WEBPACK_IMPORTED_MODULE_5___default().variable)} ${(next_font_google_target_css_path_app_layout_tsx_import_Lora_arguments_variable_font_serif_alt_subsets_latin_weight_400_500_600_700_variableName_lora___WEBPACK_IMPORTED_MODULE_6___default().variable)} antialiased`,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n            className: \"min-h-screen bg-vintage-cream font-sans antialiased\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_auth_wrapper__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                children: children\n            }, void 0, false, {\n                fileName: \"D:\\\\linguaspark\\\\app\\\\layout.tsx\",\n                lineNumber: 36,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"D:\\\\linguaspark\\\\app\\\\layout.tsx\",\n            lineNumber: 35,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"D:\\\\linguaspark\\\\app\\\\layout.tsx\",\n        lineNumber: 34,\n        columnNumber: 5\n    }, this);\n}\nconst metadata = {\n    generator: \"v0.app\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvbGF5b3V0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLTUE7QUFLQUM7QUFLQUM7QUFNQUM7QUFuQmdCO0FBQzZCO0FBd0JwQyxTQUFTRSxXQUFXLEVBQ2pDQyxRQUFRLEVBR1Q7SUFDQyxxQkFDRSw4REFBQ0M7UUFBS0MsTUFBSztRQUFLQyxXQUFXLENBQUMsRUFBRVQsOEtBQWMsQ0FBQyxDQUFDLEVBQUVDLHdNQUFzQixDQUFDLENBQUMsRUFBRUMsbU5BQXFCLENBQUMsQ0FBQyxFQUFFQyx1TUFBYSxDQUFDLFlBQVksQ0FBQztrQkFDNUgsNEVBQUNRO1lBQUtGLFdBQVU7c0JBQ2QsNEVBQUNMLGdFQUFXQTswQkFBRUU7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJdEI7QUFFTyxNQUFNTSxXQUFXO0lBQ2xCQyxXQUFXO0FBQ2IsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9hcHAvbGF5b3V0LnRzeD85OTg4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBJbnRlciwgSmV0QnJhaW5zX01vbm8sIE1lcnJpd2VhdGhlciwgTG9yYSB9IGZyb20gXCJuZXh0L2ZvbnQvZ29vZ2xlXCJcbmltcG9ydCBcIi4vZ2xvYmFscy5jc3NcIlxuaW1wb3J0IEF1dGhXcmFwcGVyIGZyb20gXCJAL2NvbXBvbmVudHMvYXV0aC13cmFwcGVyXCJcblxuY29uc3QgaW50ZXIgPSBJbnRlcih7XG4gIHZhcmlhYmxlOiBcIi0tZm9udC1pbnRlclwiLFxuICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbn0pXG5cbmNvbnN0IGpldGJyYWluc01vbm8gPSBKZXRCcmFpbnNfTW9ubyh7XG4gIHZhcmlhYmxlOiBcIi0tZm9udC1qZXRicmFpbnMtbW9ub1wiLFxuICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbn0pXG5cbmNvbnN0IG1lcnJpd2VhdGhlciA9IE1lcnJpd2VhdGhlcih7XG4gIHZhcmlhYmxlOiBcIi0tZm9udC1zZXJpZlwiLFxuICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbiAgd2VpZ2h0OiBbXCIzMDBcIiwgXCI0MDBcIiwgXCI3MDBcIiwgXCI5MDBcIl0sXG59KVxuXG5jb25zdCBsb3JhID0gTG9yYSh7XG4gIHZhcmlhYmxlOiBcIi0tZm9udC1zZXJpZi1hbHRcIixcbiAgc3Vic2V0czogW1wibGF0aW5cIl0sXG4gIHdlaWdodDogW1wiNDAwXCIsIFwiNTAwXCIsIFwiNjAwXCIsIFwiNzAwXCJdLFxufSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm9vdExheW91dCh7XG4gIGNoaWxkcmVuLFxufToge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG59KSB7XG4gIHJldHVybiAoXG4gICAgPGh0bWwgbGFuZz1cImVuXCIgY2xhc3NOYW1lPXtgJHtpbnRlci52YXJpYWJsZX0gJHtqZXRicmFpbnNNb25vLnZhcmlhYmxlfSAke21lcnJpd2VhdGhlci52YXJpYWJsZX0gJHtsb3JhLnZhcmlhYmxlfSBhbnRpYWxpYXNlZGB9PlxuICAgICAgPGJvZHkgY2xhc3NOYW1lPVwibWluLWgtc2NyZWVuIGJnLXZpbnRhZ2UtY3JlYW0gZm9udC1zYW5zIGFudGlhbGlhc2VkXCI+XG4gICAgICAgIDxBdXRoV3JhcHBlcj57Y2hpbGRyZW59PC9BdXRoV3JhcHBlcj5cbiAgICAgIDwvYm9keT5cbiAgICA8L2h0bWw+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IG1ldGFkYXRhID0ge1xuICAgICAgZ2VuZXJhdG9yOiAndjAuYXBwJ1xuICAgIH07XG4iXSwibmFtZXMiOlsiaW50ZXIiLCJqZXRicmFpbnNNb25vIiwibWVycml3ZWF0aGVyIiwibG9yYSIsIkF1dGhXcmFwcGVyIiwiUm9vdExheW91dCIsImNoaWxkcmVuIiwiaHRtbCIsImxhbmciLCJjbGFzc05hbWUiLCJ2YXJpYWJsZSIsImJvZHkiLCJtZXRhZGF0YSIsImdlbmVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/layout.tsx\n");

/***/ }),

/***/ "(rsc)/./components/auth-wrapper.tsx":
/*!*************************************!*\
  !*** ./components/auth-wrapper.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthProvider: () => (/* binding */ e1),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   useAuth: () => (/* binding */ e0)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");


const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`D:\linguaspark\components\auth-wrapper.tsx#useAuth`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`D:\linguaspark\components\auth-wrapper.tsx#AuthProvider`);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`D:\linguaspark\components\auth-wrapper.tsx#default`));


/***/ }),

/***/ "(rsc)/./lib/content-validator.ts":
/*!**********************************!*\
  !*** ./lib/content-validator.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentValidatorImpl: () => (/* binding */ ContentValidatorImpl),\n/* harmony export */   contentValidator: () => (/* binding */ contentValidator)\n/* harmony export */ });\n/**\r\n * Content Validation Service\r\n * \r\n * Ensures source content meets minimum requirements for AI processing\r\n * before attempting lesson generation.\r\n */ class ContentValidatorImpl {\n    /**\r\n   * Validates content for AI lesson generation suitability\r\n   */ validateContent(content) {\n        // Basic sanitization and preparation\n        const cleanContent = this.sanitizeContent(content);\n        if (!cleanContent || cleanContent.trim().length === 0) {\n            return {\n                isValid: false,\n                reason: \"No content provided\",\n                suggestions: [\n                    \"Please select or paste some text content to generate a lesson from\"\n                ]\n            };\n        }\n        // Check minimum word count\n        const wordCount = this.getWordCount(cleanContent);\n        if (wordCount < this.MINIMUM_WORD_COUNT) {\n            return {\n                isValid: false,\n                reason: `Content too short (${wordCount} words, minimum ${this.MINIMUM_WORD_COUNT} required)`,\n                suggestions: [\n                    \"Select more text from the webpage\",\n                    \"Choose a longer article or passage\",\n                    \"Combine multiple paragraphs for better lesson content\"\n                ]\n            };\n        }\n        // Check sentence count\n        const sentenceCount = this.getSentenceCount(cleanContent);\n        if (sentenceCount < this.MINIMUM_SENTENCE_COUNT) {\n            return {\n                isValid: false,\n                reason: `Content lacks structure (${sentenceCount} sentences, minimum ${this.MINIMUM_SENTENCE_COUNT} required)`,\n                suggestions: [\n                    \"Select content with complete sentences\",\n                    \"Choose text with proper punctuation\",\n                    \"Avoid selecting only titles or bullet points\"\n                ]\n            };\n        }\n        // Check content quality\n        const qualityScore = this.checkContentQuality(cleanContent);\n        if (qualityScore.score < this.MINIMUM_QUALITY_SCORE) {\n            return {\n                isValid: false,\n                reason: `Content quality insufficient for lesson generation (score: ${qualityScore.score}/100)`,\n                suggestions: this.getQualityImprovementSuggestions(qualityScore)\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n    /**\r\n   * Returns the minimum word count required for content validation\r\n   */ getMinimumWordCount() {\n        return this.MINIMUM_WORD_COUNT;\n    }\n    /**\r\n   * Analyzes content quality and returns a detailed score\r\n   */ checkContentQuality(content) {\n        const cleanContent = this.sanitizeContent(content);\n        const words = this.getWords(cleanContent);\n        const sentences = this.getSentences(cleanContent);\n        const wordCount = words.length;\n        const sentenceCount = sentences.length;\n        const averageWordsPerSentence = sentenceCount > 0 ? wordCount / sentenceCount : 0;\n        // Check vocabulary variety (unique words vs total words)\n        const uniqueWords = new Set(words.map((word)=>word.toLowerCase()));\n        const vocabularyVariety = uniqueWords.size / wordCount;\n        const hasVariedVocabulary = vocabularyVariety > 0.4; // At least 40% unique words\n        // Check for complete thoughts (sentences ending with proper punctuation)\n        const completeThoughts = sentences.filter((sentence)=>/[.!?]$/.test(sentence.trim())).length;\n        const hasCompleteThoughts = completeThoughts / sentenceCount > 0.7; // 70% complete sentences\n        // Calculate overall quality score\n        let score = 0;\n        // Word count factor (0-30 points)\n        if (wordCount >= this.MINIMUM_WORD_COUNT) {\n            score += Math.min(30, wordCount / 200 * 30); // Max points at 200 words\n        }\n        // Sentence structure factor (0-25 points)\n        if (averageWordsPerSentence >= 8 && averageWordsPerSentence <= 25) {\n            score += 25; // Good sentence length\n        } else if (averageWordsPerSentence >= 5) {\n            score += 15; // Acceptable sentence length\n        }\n        // Vocabulary variety factor (0-25 points)\n        if (hasVariedVocabulary) {\n            score += 25;\n        } else if (vocabularyVariety > 0.25) {\n            score += 15;\n        }\n        // Complete thoughts factor (0-20 points)\n        if (hasCompleteThoughts) {\n            score += 20;\n        } else if (completeThoughts / sentenceCount > 0.5) {\n            score += 10;\n        }\n        return {\n            score: Math.round(score),\n            factors: {\n                wordCount,\n                sentenceCount,\n                averageWordsPerSentence: Math.round(averageWordsPerSentence * 10) / 10,\n                hasVariedVocabulary,\n                hasCompleteThoughts\n            }\n        };\n    }\n    /**\r\n   * Sanitizes content by removing excessive whitespace and non-text elements\r\n   */ sanitizeContent(content) {\n        return content.replace(/\\s+/g, \" \") // Replace multiple whitespace with single space\n        .replace(/[^\\w\\s.,!?;:'\"()-]/g, \"\") // Remove special characters except basic punctuation\n        .trim();\n    }\n    /**\r\n   * Counts words in the content\r\n   */ getWordCount(content) {\n        return this.getWords(content).length;\n    }\n    /**\r\n   * Gets array of words from content\r\n   */ getWords(content) {\n        return content.split(/\\s+/).filter((word)=>word.length > 0 && /\\w/.test(word));\n    }\n    /**\r\n   * Counts sentences in the content\r\n   */ getSentenceCount(content) {\n        return this.getSentences(content).length;\n    }\n    /**\r\n   * Gets array of sentences from content\r\n   */ getSentences(content) {\n        return content.split(/[.!?]+/).map((sentence)=>sentence.trim()).filter((sentence)=>sentence.length > 0);\n    }\n    /**\r\n   * Generates improvement suggestions based on quality score factors\r\n   */ getQualityImprovementSuggestions(qualityScore) {\n        const suggestions = [];\n        if (qualityScore.factors.wordCount < 100) {\n            suggestions.push(\"Select longer content with more detailed information\");\n        }\n        if (qualityScore.factors.averageWordsPerSentence < 8) {\n            suggestions.push(\"Choose content with more complex, complete sentences\");\n        }\n        if (!qualityScore.factors.hasVariedVocabulary) {\n            suggestions.push(\"Select content with more diverse vocabulary and topics\");\n        }\n        if (!qualityScore.factors.hasCompleteThoughts) {\n            suggestions.push(\"Choose well-structured text with proper punctuation\");\n        }\n        if (suggestions.length === 0) {\n            suggestions.push(\"Try selecting different content that is more suitable for language learning\");\n        }\n        return suggestions;\n    }\n    constructor(){\n        this.MINIMUM_WORD_COUNT = 50;\n        this.MINIMUM_SENTENCE_COUNT = 3;\n        this.MINIMUM_QUALITY_SCORE = 60;\n    }\n}\n// Export singleton instance\nconst contentValidator = new ContentValidatorImpl();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/content-validator.ts\n");

/***/ }),

/***/ "(rsc)/./lib/error-classifier.ts":
/*!*********************************!*\
  !*** ./lib/error-classifier.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorClassifier: () => (/* binding */ ErrorClassifier),\n/* harmony export */   errorClassifier: () => (/* binding */ errorClassifier)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * Error Classification System for AI-Only Lesson Generation\r\n * \r\n * This module provides error classification and message generation\r\n * for AI failures in the lesson generation system.\r\n */ \n/**\r\n * Implementation of the error classification system\r\n */ class ErrorClassifier {\n    /**\r\n   * Classifies an AI error based on error properties and context\r\n   */ classifyError(error, context = {}) {\n        const errorId = this.generateErrorId();\n        const fullContext = {\n            timestamp: new Date(),\n            ...context\n        };\n        const type = this.determineErrorType(error);\n        return {\n            type,\n            originalError: error,\n            context: fullContext,\n            errorId\n        };\n    }\n    /**\r\n   * Generates user-friendly error messages with actionable steps\r\n   */ generateUserMessage(error) {\n        switch(error.type){\n            case \"QUOTA_EXCEEDED\":\n                return {\n                    title: \"API Quota Exceeded\",\n                    message: \"API quota exceeded, please try again later\",\n                    actionableSteps: [\n                        \"Wait a few minutes before trying again\",\n                        \"Try generating a shorter lesson\",\n                        \"Contact support if the issue persists\"\n                    ],\n                    errorId: error.errorId,\n                    supportContact: \"support@linguaspark.com\"\n                };\n            case \"CONTENT_ISSUE\":\n                return {\n                    title: \"Content Processing Error\",\n                    message: \"Unable to process this content, please try different text\",\n                    actionableSteps: [\n                        \"Ensure the content has at least 100 words\",\n                        \"Try selecting different text from the webpage\",\n                        \"Check that the content is in a supported language\",\n                        \"Remove any special characters or formatting\"\n                    ],\n                    errorId: error.errorId\n                };\n            case \"NETWORK_ERROR\":\n                return {\n                    title: \"Connection Error\",\n                    message: \"Connection error, please check your internet and try again\",\n                    actionableSteps: [\n                        \"Check your internet connection\",\n                        \"Try refreshing the page\",\n                        \"Wait a moment and try again\",\n                        \"Contact support if the problem continues\"\n                    ],\n                    errorId: error.errorId\n                };\n            case \"UNKNOWN\":\n            default:\n                return {\n                    title: \"Service Temporarily Unavailable\",\n                    message: \"AI service temporarily unavailable, please try again later\",\n                    actionableSteps: [\n                        \"Wait a few minutes and try again\",\n                        \"Try refreshing the page\",\n                        \"Contact support with the error ID below\"\n                    ],\n                    errorId: error.errorId,\n                    supportContact: \"support@linguaspark.com\"\n                };\n        }\n    }\n    /**\r\n   * Generates detailed support messages for debugging\r\n   */ generateSupportMessage(error) {\n        return {\n            errorId: error.errorId,\n            type: error.type,\n            technicalDetails: this.extractTechnicalDetails(error.originalError),\n            context: error.context,\n            stackTrace: error.originalError.stack,\n            timestamp: error.context.timestamp\n        };\n    }\n    /**\r\n   * Determines error type based on error properties\r\n   */ determineErrorType(error) {\n        // Check for quota/rate limit errors\n        if (this.isQuotaError(error)) {\n            return \"QUOTA_EXCEEDED\";\n        }\n        // Check for network/connection errors\n        if (this.isNetworkError(error)) {\n            return \"NETWORK_ERROR\";\n        }\n        // Check for content-related errors\n        if (this.isContentError(error)) {\n            return \"CONTENT_ISSUE\";\n        }\n        // Default to unknown for unclassified errors\n        return \"UNKNOWN\";\n    }\n    /**\r\n   * Checks if error is related to API quota/rate limits\r\n   */ isQuotaError(error) {\n        const quotaIndicators = [\n            \"quota\",\n            \"rate limit\",\n            \"too many requests\",\n            \"limit exceeded\",\n            \"429\",\n            \"RESOURCE_EXHAUSTED\"\n        ];\n        const errorText = (error.message || \"\").toLowerCase();\n        const errorCode = (error.code || \"\").toLowerCase();\n        const status = error.status;\n        return status === 429 || quotaIndicators.some((indicator)=>errorText.includes(indicator) || errorCode.includes(indicator));\n    }\n    /**\r\n   * Checks if error is network/connection related\r\n   */ isNetworkError(error) {\n        const networkIndicators = [\n            \"network\",\n            \"connection\",\n            \"timeout\",\n            \"fetch\",\n            \"ECONNREFUSED\",\n            \"ENOTFOUND\",\n            \"ETIMEDOUT\"\n        ];\n        const errorText = (error.message || \"\").toLowerCase();\n        const errorCode = (error.code || \"\").toLowerCase();\n        const status = error.status;\n        return status === 0 || status === 502 || status === 503 || status === 504 || networkIndicators.some((indicator)=>errorText.includes(indicator) || errorCode.includes(indicator));\n    }\n    /**\r\n   * Checks if error is content-related\r\n   */ isContentError(error) {\n        const contentIndicators = [\n            \"invalid input\",\n            \"content too short\",\n            \"unsupported format\",\n            \"parsing error\",\n            \"invalid content\",\n            \"content validation\",\n            \"INVALID_ARGUMENT\"\n        ];\n        const errorText = (error.message || \"\").toLowerCase();\n        const errorCode = (error.code || \"\").toLowerCase();\n        const status = error.status;\n        return status === 400 || contentIndicators.some((indicator)=>errorText.includes(indicator) || errorCode.includes(indicator));\n    }\n    /**\r\n   * Extracts technical details from error for support\r\n   */ extractTechnicalDetails(error) {\n        const details = [];\n        if (error.message) {\n            details.push(`Message: ${error.message}`);\n        }\n        if (\"code\" in error && error.code) {\n            details.push(`Code: ${error.code}`);\n        }\n        if (\"status\" in error && error.status) {\n            details.push(`Status: ${error.status}`);\n        }\n        if (\"response\" in error && error.response) {\n            details.push(`Response: ${JSON.stringify(error.response, null, 2)}`);\n        }\n        return details.join(\"\\n\");\n    }\n    /**\r\n   * Generates unique error ID for support tracking\r\n   */ generateErrorId() {\n        const timestamp = Date.now().toString(36);\n        const random = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)().split(\"-\")[0];\n        return `ERR_${timestamp}_${random}`.toUpperCase();\n    }\n}\n// Export singleton instance\nconst errorClassifier = new ErrorClassifier();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/error-classifier.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-ai-server.ts":
/*!*********************************!*\
  !*** ./lib/google-ai-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleAIServerService: () => (/* binding */ createGoogleAIServerService)\n/* harmony export */ });\n/* harmony import */ var _error_classifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error-classifier */ \"(rsc)/./lib/error-classifier.ts\");\n/* harmony import */ var _usage_monitor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./usage-monitor */ \"(rsc)/./lib/usage-monitor.ts\");\n// Server-side Google AI (Gemini) APIs service layer\n\n\nclass GoogleAIServerService {\n    constructor(config){\n        this.model = \"models/gemini-2.5-flash\" // Use actual available model\n        ;\n        this.maxRetries = 3;\n        this.baseRetryDelay = 1000 // 1 second\n        ;\n        this.maxRetryDelay = 30000 // 30 seconds\n        ;\n        this.config = config;\n    }\n    async makeGeminiRequest(prompt, options = {}, metadata) {\n        return this.makeGeminiRequestWithRetry(prompt, options, metadata, 0);\n    }\n    async makeGeminiRequestWithRetry(prompt, options = {}, metadata, retryAttempt = 0) {\n        const startTime = Date.now();\n        const requestId = this.generateRequestId();\n        const requestBody = {\n            contents: [\n                {\n                    parts: [\n                        {\n                            text: prompt\n                        }\n                    ]\n                }\n            ],\n            generationConfig: {\n                temperature: options.temperature || 0.7,\n                maxOutputTokens: options.maxTokens || 8000,\n                topP: options.topP || 0.9\n            }\n        };\n        // Estimate input tokens (rough approximation: 1 token ≈ 4 characters)\n        const estimatedInputTokens = Math.ceil(prompt.length / 4);\n        const url = `${this.config.baseUrl}/v1beta/models/gemini-2.5-flash:generateContent?key=${this.config.apiKey}`;\n        console.log(`🌐 API Request [${requestId}] - Attempt ${retryAttempt + 1}/${this.maxRetries + 1}`);\n        console.log(`📊 Estimated input tokens: ${estimatedInputTokens}`);\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(requestBody)\n            });\n            console.log(`📡 Response [${requestId}]: ${response.status} ${response.statusText}`);\n            if (response.ok) {\n                const result = await response.json();\n                const endTime = Date.now();\n                const responseTime = endTime - startTime;\n                console.log(\"✅ Successful API response received\");\n                // Extract token usage information if available\n                const tokenUsage = this.extractTokenUsage(result, estimatedInputTokens);\n                // Log token usage\n                if (metadata?.section && tokenUsage) {\n                    _usage_monitor__WEBPACK_IMPORTED_MODULE_1__.usageMonitor.logTokenUsage(metadata.section, tokenUsage.totalTokens, metadata.optimization || \"none\", metadata.context);\n                }\n                // Parse response content\n                if (result.candidates && result.candidates.length > 0) {\n                    const candidate = result.candidates[0];\n                    // Check if we hit MAX_TOKENS limit\n                    if (candidate.finishReason === \"MAX_TOKENS\") {\n                        console.warn(\"⚠️ Hit MAX_TOKENS limit, response may be incomplete\");\n                        // ALWAYS return partial text if available - don't throw error\n                        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                            const text = candidate.content.parts[0].text;\n                            // Check if text is actually present and not empty\n                            if (text && text.trim().length > 0) {\n                                console.log(`⚠️ Extracted partial text (${text.length} chars) due to MAX_TOKENS`);\n                                return text;\n                            }\n                        }\n                        // CRITICAL FIX: MAX_TOKENS with no content - just throw error\n                        // The retry logic is too complex and causes scope issues\n                        // Let the calling code handle fallbacks instead\n                        console.warn(\"⚠️ MAX_TOKENS hit with no content - cannot retry from here\");\n                        // Only throw if we truly can't retry\n                        console.error(\"❌ MAX_TOKENS hit but no content available and cannot retry\");\n                        console.error(\"❌ Response structure:\", JSON.stringify(candidate, null, 2));\n                        const error = new Error(\"MAX_TOKENS_EXCEEDED_NO_CONTENT\");\n                        error.code = \"MAX_TOKENS\";\n                        throw error;\n                    }\n                    // Normal response processing\n                    if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                        const text = candidate.content.parts[0].text;\n                        console.log(`✅ Generated text (${text.length} chars) in ${responseTime}ms`);\n                        return text;\n                    } else {\n                        const error = new Error(\"Invalid content structure in API response\");\n                        error.code = \"INVALID_RESPONSE_STRUCTURE\";\n                        throw error;\n                    }\n                } else {\n                    const error = new Error(\"No candidates in API response\");\n                    error.code = \"NO_CANDIDATES\";\n                    throw error;\n                }\n            } else {\n                // Handle HTTP errors with potential retry\n                const errorText = await response.text();\n                const error = new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);\n                error.status = response.status;\n                error.response = errorText;\n                // Check if this is a retryable error\n                if (this.isRetryableError(response.status) && retryAttempt < this.maxRetries) {\n                    const delay = this.calculateRetryDelay(retryAttempt);\n                    console.warn(`⚠️ Retryable error (${response.status}), retrying in ${delay}ms...`);\n                    await this.sleep(delay);\n                    return this.makeGeminiRequestWithRetry(prompt, options, metadata, retryAttempt + 1);\n                }\n                throw error;\n            }\n        } catch (error) {\n            const aiError = error;\n            // Log error with context\n            if (metadata?.context) {\n                const errorContext = {\n                    userId: metadata.context.userId,\n                    contentLength: prompt.length,\n                    lessonType: metadata.context.lessonType,\n                    timestamp: new Date(),\n                    requestId,\n                    apiEndpoint: url\n                };\n                const classifiedError = _error_classifier__WEBPACK_IMPORTED_MODULE_0__.errorClassifier.classifyError(aiError, errorContext);\n                _usage_monitor__WEBPACK_IMPORTED_MODULE_1__.usageMonitor.logError(aiError, classifiedError.type, metadata.context);\n            }\n            // Check if this is a retryable network error\n            if (this.isNetworkError(aiError) && retryAttempt < this.maxRetries) {\n                const delay = this.calculateRetryDelay(retryAttempt);\n                console.warn(`⚠️ Network error, retrying in ${delay}ms...`);\n                await this.sleep(delay);\n                return this.makeGeminiRequestWithRetry(prompt, options, metadata, retryAttempt + 1);\n            }\n            console.error(`❌ API call failed [${requestId}]:`, aiError.message);\n            throw aiError;\n        }\n    }\n    /**\n   * Extract token usage from API response\n   */ extractTokenUsage(result, estimatedInputTokens) {\n        // Try to extract actual token usage from response metadata\n        let inputTokens = estimatedInputTokens;\n        let outputTokens = 0;\n        // Check if response includes usage metadata\n        if (result.usageMetadata) {\n            inputTokens = result.usageMetadata.promptTokenCount || estimatedInputTokens;\n            outputTokens = result.usageMetadata.candidatesTokenCount || 0;\n        } else if (result.candidates && result.candidates[0]?.content?.parts?.[0]?.text) {\n            // Estimate output tokens from response text\n            const responseText = result.candidates[0].content.parts[0].text;\n            outputTokens = Math.ceil(responseText.length / 4);\n        }\n        return {\n            inputTokens,\n            outputTokens,\n            totalTokens: inputTokens + outputTokens\n        };\n    }\n    /**\n   * Check if error is retryable based on status code\n   */ isRetryableError(status) {\n        return [\n            429,\n            500,\n            502,\n            503,\n            504\n        ].includes(status);\n    }\n    /**\n   * Check if error is a network error\n   */ isNetworkError(error) {\n        const networkIndicators = [\n            \"fetch\",\n            \"network\",\n            \"connection\",\n            \"timeout\",\n            \"ECONNREFUSED\",\n            \"ENOTFOUND\",\n            \"ETIMEDOUT\"\n        ];\n        const errorMessage = error.message.toLowerCase();\n        return networkIndicators.some((indicator)=>errorMessage.includes(indicator));\n    }\n    /**\n   * Calculate retry delay with exponential backoff\n   */ calculateRetryDelay(retryAttempt) {\n        const delay = this.baseRetryDelay * Math.pow(2, retryAttempt);\n        const jitter = Math.random() * 0.1 * delay; // Add 10% jitter\n        return Math.min(delay + jitter, this.maxRetryDelay);\n    }\n    /**\n   * Sleep utility for retry delays\n   */ sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    /**\n   * Generate unique request ID for tracking\n   */ generateRequestId() {\n        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\n   * Process batch requests with intelligent batching\n   */ async processBatch(requests) {\n        console.log(`🔄 Processing batch of ${requests.length} requests`);\n        const results = [];\n        const batchSize = 5; // Process in smaller batches to avoid overwhelming the API\n        for(let i = 0; i < requests.length; i += batchSize){\n            const batch = requests.slice(i, i + batchSize);\n            console.log(`📦 Processing batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(requests.length / batchSize)}`);\n            // Process batch requests concurrently\n            const batchPromises = batch.map(async (request)=>{\n                try {\n                    const result = await this.makeGeminiRequest(request.prompt, request.options, request.metadata);\n                    return {\n                        id: request.id,\n                        result\n                    };\n                } catch (error) {\n                    return {\n                        id: request.id,\n                        error: error\n                    };\n                }\n            });\n            const batchResults = await Promise.all(batchPromises);\n            results.push(...batchResults);\n            // Add delay between batches to respect rate limits\n            if (i + batchSize < requests.length) {\n                await this.sleep(500); // 500ms delay between batches\n            }\n        }\n        console.log(`✅ Batch processing complete: ${results.filter((r)=>r.result).length} successful, ${results.filter((r)=>r.error).length} failed`);\n        return results;\n    }\n    async summarize(text, options = {}, metadata) {\n        const summaryType = options.type || \"key-points\";\n        const length = options.length || \"medium\";\n        const lengthInstructions = {\n            short: \"in 2-3 sentences\",\n            medium: \"in 4-6 sentences\",\n            long: \"in 7-10 sentences\"\n        };\n        const typeInstructions = {\n            \"key-points\": \"Extract and summarize the key points\",\n            \"tl-dr\": \"Create a TL;DR summary\",\n            \"teaser\": \"Write an engaging teaser summary\",\n            \"headline\": \"Create a headline-style summary\"\n        };\n        const prompt = `${typeInstructions[summaryType]} of the following text ${lengthInstructions[length]}:\n\n${text}\n\nSummary:`;\n        const requestMetadata = {\n            section: \"summarize\",\n            optimization: \"content_summarization\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.3\n            }, requestMetadata);\n        } catch (error) {\n            console.error(\"Summarization failed:\", error);\n            // Re-throw error instead of fallback to maintain AI-only approach\n            throw error;\n        }\n    }\n    async translate(text, options, metadata) {\n        const targetLang = this.getLanguageName(options.targetLanguage);\n        const prompt = `Translate the following text to ${targetLang}. Maintain the original meaning and tone:\n\n${text}\n\nTranslation:`;\n        const requestMetadata = {\n            section: \"translate\",\n            optimization: \"direct_translation\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            }, requestMetadata);\n        } catch (error) {\n            console.error(\"Translation failed:\", error);\n            // Re-throw error instead of fallback to maintain AI-only approach\n            throw error;\n        }\n    }\n    async prompt(prompt, options = {}, metadata) {\n        const requestMetadata = {\n            section: \"prompt\",\n            optimization: \"direct_prompt\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(prompt, options, requestMetadata);\n        } catch (error) {\n            console.error(\"Prompt generation failed:\", error);\n            throw error;\n        }\n    }\n    async write(prompt, options = {}, metadata) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"medium\";\n        const format = options.format || \"paragraph\";\n        const lengthInstructions = {\n            short: \"Keep it brief and concise\",\n            medium: \"Write a moderate length response\",\n            long: \"Provide a detailed and comprehensive response\"\n        };\n        const formatInstructions = {\n            paragraph: \"Write in paragraph form\",\n            \"bullet-points\": \"Format as bullet points\",\n            \"numbered-list\": \"Format as a numbered list\"\n        };\n        const enhancedPrompt = `${prompt}\n\nInstructions:\n- Tone: ${tone}\n- ${lengthInstructions[length]}\n- ${formatInstructions[format]}\n\nResponse:`;\n        const requestMetadata = {\n            section: \"write\",\n            optimization: \"structured_writing\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(enhancedPrompt, {\n                temperature: 0.7\n            }, requestMetadata);\n        } catch (error) {\n            console.error(\"Writing failed:\", error);\n            throw error;\n        }\n    }\n    async rewrite(text, options = {}, metadata) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"same\";\n        const audience = options.audience || \"general\";\n        const lengthInstructions = {\n            shorter: \"Make it more concise\",\n            longer: \"Expand and add more detail\",\n            same: \"Keep approximately the same length\"\n        };\n        const prompt = `Rewrite the following text with these requirements:\n- Tone: ${tone}\n- Audience: ${audience}\n- Length: ${lengthInstructions[length]}\n\nOriginal text:\n${text}\n\nRewritten text:`;\n        const requestMetadata = {\n            section: \"rewrite\",\n            optimization: \"content_rewriting\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.5\n            }, requestMetadata);\n        } catch (error) {\n            console.error(\"Rewriting failed:\", error);\n            // Re-throw error instead of fallback to maintain AI-only approach\n            throw error;\n        }\n    }\n    async proofread(text, options = {}, metadata) {\n        const checkGrammar = options.checkGrammar !== false;\n        const checkSpelling = options.checkSpelling !== false;\n        const checkStyle = options.checkStyle !== false;\n        const checks = [];\n        if (checkGrammar) checks.push(\"grammar\");\n        if (checkSpelling) checks.push(\"spelling\");\n        if (checkStyle) checks.push(\"style and clarity\");\n        const prompt = `Proofread and correct the following text for ${checks.join(\", \")}. Return only the corrected text:\n\n${text}\n\nCorrected text:`;\n        const requestMetadata = {\n            section: \"proofread\",\n            optimization: \"text_correction\",\n            ...metadata\n        };\n        try {\n            const correctedText = await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            }, requestMetadata);\n            return {\n                corrected_text: correctedText,\n                suggestions: [],\n                errors: []\n            };\n        } catch (error) {\n            console.error(\"Proofreading failed:\", error);\n            // Re-throw error instead of fallback to maintain AI-only approach\n            throw error;\n        }\n    }\n    getLanguageName(code) {\n        const languageMap = {\n            es: \"Spanish\",\n            fr: \"French\",\n            de: \"German\",\n            it: \"Italian\",\n            pt: \"Portuguese\",\n            ja: \"Japanese\",\n            ko: \"Korean\",\n            zh: \"Chinese\",\n            en: \"English\"\n        };\n        return languageMap[code] || \"English\";\n    }\n}\n// Server-side only initialization\nconst createGoogleAIServerService = ()=>{\n    const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\";\n    const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n    if (!apiKey) {\n        console.warn(\"Google AI API key not found. Lesson generation will use fallback templates.\");\n        // Return a service that will always throw errors, triggering fallbacks\n        return new GoogleAIServerService({\n            apiKey: \"dummy\",\n            baseUrl\n        });\n    }\n    return new GoogleAIServerService({\n        apiKey,\n        baseUrl\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-ai-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/lesson-ai-generator-server.ts":
/*!*******************************************!*\
  !*** ./lib/lesson-ai-generator-server.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonAIServerGenerator: () => (/* binding */ LessonAIServerGenerator),\n/* harmony export */   lessonAIServerGenerator: () => (/* binding */ lessonAIServerGenerator)\n/* harmony export */ });\n/* harmony import */ var _app_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/app/layout */ \"(rsc)/./app/layout.tsx\");\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n/* harmony import */ var _progressive_generator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./progressive-generator */ \"(rsc)/./lib/progressive-generator.ts\");\n/* harmony import */ var _usage_monitor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./usage-monitor */ \"(rsc)/./lib/usage-monitor.ts\");\n\n\n\n\nclass LessonAIServerGenerator {\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_1__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    getProgressiveGenerator() {\n        if (!this.progressiveGenerator) {\n            this.progressiveGenerator = new _progressive_generator__WEBPACK_IMPORTED_MODULE_2__.ProgressiveGeneratorImpl();\n        }\n        return this.progressiveGenerator;\n    }\n    // Summarize and adapt content to student level\n    async summarizeAndAdaptContent(sourceText, studentLevel, targetLanguage) {\n        try {\n            const levelGuidance = {\n                \"A1\": \"Use very simple vocabulary, present tense, short sentences (5-8 words). Explain basic concepts clearly.\",\n                \"A2\": \"Use simple vocabulary, basic past/present tense, medium sentences (8-12 words). Include familiar topics.\",\n                \"B1\": \"Use intermediate vocabulary, various tenses, longer sentences (12-15 words). Include opinions and explanations.\",\n                \"B2\": \"Use advanced vocabulary, complex sentences, abstract concepts. Include detailed explanations and analysis.\",\n                \"C1\": \"Use sophisticated vocabulary, complex structures, nuanced ideas. Include cultural and contextual depth.\"\n            };\n            const guidance = levelGuidance[studentLevel] || levelGuidance[\"B1\"];\n            const prompt = `Summarize and rewrite this content for ${studentLevel} level ${targetLanguage} students:\r\n\r\n${sourceText.substring(0, 1000)}\r\n\r\nREQUIREMENTS:\r\n- ${guidance}\r\n- Keep all important information and key concepts\r\n- Make it 200-400 words (appropriate length for reading)\r\n- Use vocabulary appropriate for ${studentLevel} level\r\n- Maintain the main ideas but simplify complex language\r\n- Include specific details and examples\r\n- Make it engaging and educational\r\n\r\nRewrite the content clearly and completely:`;\n            console.log(\"\\uD83D\\uDCDD Content adaptation prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            return response.trim() || sourceText.substring(0, 400);\n        } catch (error) {\n            console.log(\"⚠️ Content adaptation failed, using original text\");\n            return sourceText.substring(0, 400);\n        }\n    }\n    async generateLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime, onProgress } = params;\n        // Create usage monitoring context\n        const generationContext = {\n            lessonId: `lesson_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            lessonType,\n            difficultyLevel: studentLevel,\n            contentLength: sourceText.length,\n            timestamp: new Date()\n        };\n        // Validate sourceText\n        if (!sourceText || typeof sourceText !== \"string\") {\n            throw new Error(\"Invalid sourceText: must be a non-empty string\");\n        }\n        console.log(\"\\uD83D\\uDE80 Starting lesson generation with params:\", {\n            textLength: sourceText.length,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            hasMetadata: !!contentMetadata,\n            hasStructuredContent: !!structuredContent\n        });\n        try {\n            // Step 1: Summarize and adapt content to student level\n            console.log(\"\\uD83D\\uDCDD Step 1: Summarizing and adapting content to student level...\");\n            const adaptationStartTime = Date.now();\n            const adaptedContent = await this.summarizeAndAdaptContent(sourceText, studentLevel, targetLanguage);\n            const adaptationEndTime = Date.now();\n            // Log content adaptation usage\n            _usage_monitor__WEBPACK_IMPORTED_MODULE_3__.usageMonitor.logTokenUsage(\"content-adaptation\", Math.ceil(sourceText.length / 4), \"content-summarization\", generationContext);\n            console.log(\"✅ Content adapted:\", adaptedContent.length, \"chars\");\n            // Step 2: Generate lesson with adapted content\n            console.log(\"\\uD83E\\uDD16 Step 2: Generating lesson with adapted content...\");\n            const lessonGenerationStartTime = Date.now();\n            const lessonStructure = await this.generateMinimalAILesson(adaptedContent, lessonType, studentLevel, targetLanguage, contentMetadata, onProgress);\n            const lessonGenerationEndTime = Date.now();\n            // Log lesson generation usage\n            _usage_monitor__WEBPACK_IMPORTED_MODULE_3__.usageMonitor.logTokenUsage(\"lesson-structure-generation\", Math.ceil(adaptedContent.length / 3), \"structured-generation\", generationContext);\n            console.log(\"✅ Minimal AI lesson generated:\", Object.keys(lessonStructure));\n            // Return properly structured GeneratedLesson object with metadata\n            const finalLesson = {\n                lessonTitle: lessonStructure.lessonTitle,\n                lessonType,\n                studentLevel,\n                targetLanguage,\n                sections: lessonStructure,\n                metadata: _app_layout__WEBPACK_IMPORTED_MODULE_0__.metadata || undefined // Include metadata for banner images, etc.\n            };\n            console.log(\"\\uD83C\\uDFAF Returning AI-generated lesson:\", {\n                lessonType: finalLesson.lessonType,\n                studentLevel: finalLesson.studentLevel,\n                targetLanguage: finalLesson.targetLanguage,\n                sectionsCount: Object.keys(finalLesson.sections).length,\n                warmupCount: finalLesson.sections.warmup?.length || 0,\n                vocabularyCount: finalLesson.sections.vocabulary?.length || 0,\n                hasMetadata: !!_app_layout__WEBPACK_IMPORTED_MODULE_0__.metadata,\n                hasBannerImages: !!_app_layout__WEBPACK_IMPORTED_MODULE_0__.metadata?.bannerImages,\n                metadataKeys: _app_layout__WEBPACK_IMPORTED_MODULE_0__.metadata ? Object.keys(_app_layout__WEBPACK_IMPORTED_MODULE_0__.metadata) : [],\n                bannerImagesCount: _app_layout__WEBPACK_IMPORTED_MODULE_0__.metadata?.bannerImages?.length || 0\n            });\n            console.log(\"\\uD83D\\uDCE6 Full metadata received:\", JSON.stringify(_app_layout__WEBPACK_IMPORTED_MODULE_0__.metadata, null, 2));\n            console.log(\"\\uD83C\\uDF89 Optimized AI lesson generation complete!\");\n            return finalLesson;\n        } catch (error) {\n            // Log error to usage monitor\n            _usage_monitor__WEBPACK_IMPORTED_MODULE_3__.usageMonitor.logError(error, \"LESSON_GENERATION_FAILED\", generationContext);\n            console.error(\"❌ Error in AI lesson generation:\", error);\n            throw error;\n        }\n    }\n    // Progressive AI lesson generation with shared context\n    async generateMinimalAILesson(sourceText, lessonType, studentLevel, targetLanguage, metadata, onProgress) {\n        console.log(\"\\uD83C\\uDFAF Using progressive generation with shared context...\");\n        const progressiveGen = this.getProgressiveGenerator();\n        // Set progress callback if provided\n        if (onProgress) {\n            progressiveGen.setProgressCallback(onProgress, lessonType);\n        }\n        // Step 1: Build shared context for all sections\n        console.log(\"\\uD83C\\uDFD7️ Building shared context...\");\n        const sharedContext = await progressiveGen.buildSharedContext(sourceText, lessonType, studentLevel, targetLanguage, metadata // Pass metadata for title fallback\n        );\n        // Step 2: Define lesson sections with dependencies\n        const lessonSections = [\n            {\n                name: \"warmup\",\n                priority: 1,\n                dependencies: []\n            },\n            {\n                name: \"vocabulary\",\n                priority: 2,\n                dependencies: []\n            },\n            {\n                name: \"reading\",\n                priority: 3,\n                dependencies: [\n                    \"vocabulary\"\n                ]\n            },\n            {\n                name: \"comprehension\",\n                priority: 4,\n                dependencies: [\n                    \"reading\"\n                ]\n            },\n            {\n                name: \"discussion\",\n                priority: 5,\n                dependencies: [\n                    \"reading\",\n                    \"comprehension\"\n                ]\n            },\n            {\n                name: \"grammar\",\n                priority: 6,\n                dependencies: [\n                    \"reading\"\n                ]\n            },\n            {\n                name: \"pronunciation\",\n                priority: 7,\n                dependencies: [\n                    \"vocabulary\"\n                ]\n            },\n            {\n                name: \"wrapup\",\n                priority: 8,\n                dependencies: [\n                    \"discussion\"\n                ]\n            }\n        ];\n        // Step 3: Generate sections progressively\n        const generatedSections = [];\n        let currentContext = sharedContext;\n        for (const section of lessonSections){\n            console.log(`🔄 Generating section: ${section.name}`);\n            const generatedSection = await progressiveGen.generateSection(section, currentContext, generatedSections);\n            generatedSections.push(generatedSection);\n            // Update context with new section information\n            currentContext = progressiveGen.updateContext(currentContext, generatedSection);\n        }\n        // Step 4: Generate dialogue sections using AI-based progressive generation\n        console.log(\"\\uD83C\\uDFAD Generating dialogue sections with AI...\");\n        const dialoguePractice = await progressiveGen.generateDialoguePracticeWithContext(sharedContext, generatedSections);\n        const dialogueFillGap = await progressiveGen.generateDialogueFillGapWithContext(sharedContext, generatedSections);\n        // Step 5: Assemble final lesson structure\n        const lessonStructure = {};\n        for (const section of generatedSections){\n            lessonStructure[section.sectionName] = section.content;\n        }\n        lessonStructure.dialoguePractice = dialoguePractice;\n        lessonStructure.dialogueFillGap = dialogueFillGap;\n        // Include lesson title from shared context\n        lessonStructure.lessonTitle = sharedContext.lessonTitle;\n        console.log(\"✅ Progressive lesson generation complete!\");\n        return lessonStructure;\n    }\n    // Ultra-minimal warmup generation\n    async generateMinimalWarmup(sourceText, studentLevel) {\n        // Extract better context for topic identification\n        const topics = this.extractBetterTopics(sourceText);\n        const mainTopic = topics[0] || \"this topic\";\n        // Create a more specific prompt that avoids content assumptions\n        const prompt = `Write 3 ${studentLevel} warm-up questions about ${mainTopic}. Ask about students' prior knowledge and experience. Do not mention any specific events or results. Format: just the questions, one per line:`;\n        try {\n            console.log(\"\\uD83D\\uDD25 Minimal warmup prompt:\", prompt.length, \"chars\");\n            console.log(\"\\uD83C\\uDFAF Topic identified:\", mainTopic);\n            const response = await this.getGoogleAI().prompt(prompt);\n            // Extract only actual questions (must end with ?)\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question (ends with ?) and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\") && !line.toLowerCase().includes(\"headline mentions\") && !line.toLowerCase().includes(\"the text\") && !line.toLowerCase().includes(\"the article\") && !line.toLowerCase().includes(\"according to\") && !line.toLowerCase().includes(\"the passage\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^-\\s*/, \"\").trim()).slice(0, 3);\n            console.log(\"\\uD83C\\uDFAF Extracted warmup questions:\", questions);\n            if (questions.length < 3) {\n                throw new Error(\"Failed to generate sufficient warmup questions\");\n            }\n            return questions;\n        } catch (error) {\n            console.log(\"⚠️ Minimal warmup failed\");\n            throw new Error(\"Failed to generate warmup questions: \" + error.message);\n        }\n    }\n    // Add instructional text to sections\n    addWarmupInstructions(questions, studentLevel) {\n        const instruction = \"Have the following conversations or discussions with your tutor before reading the text:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addComprehensionInstructions(questions, studentLevel) {\n        const instruction = \"After reading the text, answer these comprehension questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addDiscussionInstructions(questions, studentLevel) {\n        const instruction = \"Discuss these questions with your tutor to explore the topic in depth:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addWrapupInstructions(questions, studentLevel) {\n        const instruction = \"Reflect on your learning by discussing these wrap-up questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addVocabularyInstructions(vocabulary, studentLevel) {\n        const instruction = {\n            word: \"INSTRUCTION\",\n            meaning: \"Study the following words with your tutor before reading the text:\",\n            example: \"\"\n        };\n        return [\n            instruction,\n            ...vocabulary\n        ];\n    }\n    addReadingInstructions(readingText, studentLevel) {\n        const instruction = \"Read the following text carefully. Your tutor will help you with any difficult words or concepts:\";\n        return `${instruction}\\n\\n${readingText}`;\n    }\n    // Better topic extraction that recognizes compound terms\n    extractBetterTopics(text) {\n        const topics = [];\n        // Look for compound terms first (like \"Ryder Cup\", \"World Cup\", etc.)\n        const compoundPatterns = [\n            /\\b(Ryder Cup|World Cup|Champions League|Premier League|Super Bowl|Olympics|World Series)\\b/gi,\n            /\\b(artificial intelligence|machine learning|climate change|social media)\\b/gi,\n            /\\b([A-Z][a-z]+ [A-Z][a-z]+)\\b/g // General compound proper nouns\n        ];\n        for (const pattern of compoundPatterns){\n            const matches = text.match(pattern);\n            if (matches) {\n                topics.push(...matches.map((m)=>m.toLowerCase()));\n            }\n        }\n        // If no compound terms found, fall back to single words\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"europe\",\n                \"team\",\n                \"golf\",\n                \"tournament\",\n                \"sports\",\n                \"competition\"\n            ];\n            const foundWords = words.filter((word)=>commonWords.includes(word));\n            topics.push(...foundWords.slice(0, 3));\n        }\n        return topics.length > 0 ? topics : [\n            \"sports\"\n        ];\n    }\n    // Enhanced vocabulary generation with AI-generated contextual examples\n    async generateMinimalVocabulary(sourceText, studentLevel) {\n        // Use smart vocabulary extraction instead of basic word matching\n        const meaningfulWords = this.extractMeaningfulVocabulary(sourceText, studentLevel);\n        console.log(\"\\uD83D\\uDCDA Meaningful vocabulary extracted:\", meaningfulWords);\n        const vocabulary = [];\n        for (const word of meaningfulWords){\n            try {\n                const capitalizedWord = this.capitalizeWord(word);\n                // Generate AI definition\n                const definitionPrompt = `Define \"${word}\" simply for ${studentLevel} level. Context: ${sourceText.substring(0, 80)}. Give only the definition, no extra text:`;\n                console.log(\"\\uD83D\\uDCDA Vocab definition prompt:\", definitionPrompt.length, \"chars\");\n                const rawMeaning = await this.getGoogleAI().prompt(definitionPrompt);\n                const meaning = this.cleanDefinition(rawMeaning, studentLevel);\n                // Generate AI contextual examples\n                const examples = await this.generateAIExampleSentences(word, studentLevel, sourceText);\n                vocabulary.push({\n                    word: capitalizedWord,\n                    meaning: meaning.trim().substring(0, 200),\n                    example: examples\n                });\n            } catch (error) {\n                console.log(`⚠️ Vocab failed for ${word}, using enhanced template`);\n                const capitalizedWord = this.capitalizeWord(word);\n                vocabulary.push({\n                    word: capitalizedWord,\n                    meaning: this.generateContextualWordMeaning(word, studentLevel, sourceText),\n                    example: await this.generateAIExampleSentences(word, studentLevel, sourceText)\n                });\n            }\n        }\n        // Ensure we have 6-10 words\n        return vocabulary.slice(0, 10).length >= 6 ? vocabulary.slice(0, 10) : vocabulary.slice(0, 6);\n    }\n    // Ultra-minimal comprehension generation\n    async generateMinimalComprehension(sourceText, studentLevel) {\n        const shortText = sourceText.substring(0, 200) // Increase context for more questions\n        ;\n        const prompt = `Write 5 ${studentLevel} reading comprehension questions about this text. Only return questions, no instructions: ${shortText}`;\n        try {\n            console.log(\"❓ Minimal comprehension prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^\\*\\*/, \"\").replace(/\\*\\*$/, \"\").trim()).slice(0, 5);\n            if (questions.length < 5) {\n                throw new Error(\"Failed to generate sufficient comprehension questions\");\n            }\n            return questions;\n        } catch (error) {\n            console.log(\"⚠️ Minimal comprehension failed\");\n            throw new Error(\"Failed to generate comprehension questions: \" + error.message);\n        }\n    }\n    // Minimal AI-only reading passage generation\n    async generateMinimalReading(sourceText, studentLevel) {\n        const prompt = `Rewrite this text for ${studentLevel} level students. Keep it 200-400 words: ${sourceText.substring(0, 500)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return response.trim();\n        } catch (error) {\n            throw new Error(\"Failed to generate reading passage: \" + error.message);\n        }\n    }\n    // Minimal AI-only discussion questions generation\n    async generateMinimalDiscussion(sourceText, studentLevel) {\n        const prompt = `Write 3 ${studentLevel} discussion questions about this text. Only return questions: ${sourceText.substring(0, 200)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").trim()).slice(0, 3);\n            if (questions.length < 3) {\n                throw new Error(\"Failed to generate sufficient discussion questions\");\n            }\n            return questions;\n        } catch (error) {\n            throw new Error(\"Failed to generate discussion questions: \" + error.message);\n        }\n    }\n    // Minimal AI-only grammar section generation\n    async generateMinimalGrammar(sourceText, studentLevel) {\n        const prompt = `Create a grammar lesson for ${studentLevel} level based on this text. Return JSON with focus, examples, exercise: ${sourceText.substring(0, 200)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return JSON.parse(response);\n        } catch (error) {\n            throw new Error(\"Failed to generate grammar section: \" + error.message);\n        }\n    }\n    // Minimal AI-only pronunciation section generation\n    async generateMinimalPronunciation(vocabularyWords, studentLevel) {\n        const word = vocabularyWords[0] || \"communication\";\n        const prompt = `Create pronunciation practice for \"${word}\". Return JSON with word, ipa, practice:`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return JSON.parse(response);\n        } catch (error) {\n            throw new Error(\"Failed to generate pronunciation section: \" + error.message);\n        }\n    }\n    // Minimal AI-only wrapup questions generation\n    async generateMinimalWrapup(sourceText, studentLevel) {\n        const prompt = `Write 3 ${studentLevel} wrap-up questions about this lesson. Only return questions: ${sourceText.substring(0, 200)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").trim()).slice(0, 3);\n            if (questions.length < 3) {\n                throw new Error(\"Failed to generate sufficient wrapup questions\");\n            }\n            return questions;\n        } catch (error) {\n            throw new Error(\"Failed to generate wrapup questions: \" + error.message);\n        }\n    }\n    // Content analysis without AI calls\n    analyzeContentContextNoAI(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context without AI...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        // Extract topics using text analysis\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        // Extract vocabulary using text analysis\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n        }\n        // Generate learning objectives\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        return analysis;\n    }\n    // New method: Analyze content context and complexity\n    async analyzeContentContext(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity based on text characteristics\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        console.log(\"\\uD83D\\uDCC8 Text complexity analysis:\", {\n            avgSentenceLength,\n            complexWords,\n            totalWords,\n            complexity: analysis.complexity\n        });\n        // Extract key topics using simple text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83C\\uDFAF Extracting topics using text analysis...\");\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        console.log(\"✅ Extracted topics:\", analysis.topics);\n        // Extract key vocabulary using text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83D\\uDCDA Extracting vocabulary using text analysis...\");\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        console.log(\"✅ Extracted vocabulary:\", analysis.keyVocabulary);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n            console.log(\"\\uD83C\\uDF0D Cultural context:\", analysis.culturalContext);\n        }\n        // Generate learning objectives based on content type and lesson type\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        console.log(\"\\uD83C\\uDFAF Learning objectives:\", analysis.learningObjectives);\n        return analysis;\n    }\n    // Enhanced contextual summary creation\n    async createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDCDD Creating contextual summary...\");\n        // Use simple prompt to avoid token limits\n        const summaryPrompt = `Summarize this text in 4-5 sentences for ${studentLevel} level students:\r\n\r\n${sourceText.substring(0, 800)}\r\n\r\nSummary:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual summary...\");\n            const summary = await this.getGoogleAI().prompt(summaryPrompt, {\n                temperature: 0.4,\n                maxTokens: 300\n            });\n            console.log(\"✅ AI contextual summary created:\", summary.substring(0, 100) + \"...\");\n            return summary;\n        } catch (error) {\n            console.warn(\"⚠️ AI contextual summary failed, using text truncation:\", error.message);\n            // Skip complex fallbacks, just use truncation\n            const truncated = sourceText.substring(0, 600) + \"...\";\n            console.log(\"\\uD83D\\uDD04 Using truncated text as summary\");\n            return truncated;\n        }\n    }\n    // Generate CEFR-adapted warm-up questions\n    async generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata) {\n        console.log(\"\\uD83D\\uDD25 Generating CEFR-adapted warm-up questions...\");\n        const levelInstructions = {\n            \"A1\": `\r\nCreate 3 warm-up questions for A1 (beginner) level:\r\n- Use simple present tense and basic vocabulary\r\n- Ask yes/no questions or simple choice questions\r\n- Focus on familiar, concrete concepts\r\n- Keep questions short and direct\r\n- Use vocabulary the student likely knows\r\nExample: \"Do you use [topic] in your daily life? Yes or No?\"`,\n            \"A2\": `\r\nCreate 3 warm-up questions for A2 (elementary) level:\r\n- Use simple past tense and personal experiences\r\n- Ask for short, simple answers\r\n- Include basic comparisons with \"different\" or \"same\"\r\n- Focus on personal experiences and familiar situations\r\n- Use simple connecting words like \"and\", \"but\"\r\nExample: \"Have you ever [experienced topic]? How was it?\"`,\n            \"B1\": `\r\nCreate 3 warm-up questions for B1 (intermediate) level:\r\n- Ask for opinions with \"What do you think...?\"\r\n- Include comparisons between countries/cultures\r\n- Ask students to explain reasons with \"because\" or \"why\"\r\n- Discuss advantages and disadvantages\r\n- Use more varied vocabulary but keep structure clear\r\nExample: \"What do you think about [topic]? How is it different in your country?\"`,\n            \"B2\": `\r\nCreate 3 warm-up questions for B2 (upper intermediate) level:\r\n- Ask students to analyze situations and predict outcomes\r\n- Include complex opinions and explanations\r\n- Discuss implications and consequences\r\n- Use conditional language (\"What would happen if...?\")\r\n- Encourage detailed responses with examples\r\nExample: \"What challenges do you think [specific group] face with [topic]?\"`,\n            \"C1\": `\r\nCreate 3 warm-up questions for C1 (advanced) level:\r\n- Ask students to evaluate arguments and consider multiple perspectives\r\n- Include abstract concepts and societal implications\r\n- Use sophisticated vocabulary and complex structures\r\n- Encourage critical thinking and nuanced discussion\r\n- Ask about broader cultural and social contexts\r\nExample: \"How do cultural attitudes toward [concept] influence [topic] in different societies?\"`\n        };\n        // Ultra-simple prompt to avoid token limits\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const warmupPrompt = `Create 3 ${studentLevel} level warm-up questions about ${topic}. Return only the questions:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual warm-up questions...\");\n            console.log(\"\\uD83D\\uDCDD Warm-up prompt:\", warmupPrompt.substring(0, 200) + \"...\");\n            const response = await this.getGoogleAI().prompt(warmupPrompt, {\n                temperature: 0.6,\n                maxTokens: 150\n            });\n            console.log(\"✅ AI warm-up questions generated\");\n            console.log(\"\\uD83E\\uDD16 Raw AI response:\", response);\n            const questions = this.parseListFromText(response).slice(0, 3);\n            console.log(\"\\uD83D\\uDD25 Parsed warm-up questions:\", questions);\n            console.log(\"\\uD83D\\uDD0D Questions array length:\", questions.length);\n            // Ensure we have 3 questions, add fallbacks if needed\n            while(questions.length < 3){\n                const fallbackQuestion = this.getFallbackWarmupQuestion(studentLevel, contentAnalysis, questions.length);\n                console.log(`🔄 Adding fallback question ${questions.length + 1}:`, fallbackQuestion);\n                questions.push(fallbackQuestion);\n            }\n            console.log(\"✅ Final warm-up questions:\", questions);\n            // Final safety check - if still empty, use basic fallback\n            if (questions.length === 0) {\n                console.warn(\"⚠️ No questions generated, using emergency fallback\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return questions;\n        } catch (error) {\n            console.warn(\"⚠️ AI warm-up generation failed, using contextual fallbacks:\", error.message);\n            const fallbackQuestions = this.getContextualWarmupFallback(studentLevel, contentAnalysis, metadata);\n            console.log(\"\\uD83D\\uDD04 Fallback warm-up questions:\", fallbackQuestions);\n            // Final safety check for fallback\n            if (!fallbackQuestions || fallbackQuestions.length === 0) {\n                console.warn(\"⚠️ Fallback also empty, using emergency questions\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return fallbackQuestions;\n        }\n    }\n    // Enhanced contextual lesson structure generation\n    async generateContextualLessonStructure(content, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFD7️ Generating contextual lesson structure...\");\n        // Generate contextual warm-up questions first\n        const contextualWarmup = await this.generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata);\n        console.log(\"\\uD83D\\uDD25 Generated contextual warm-up questions:\", contextualWarmup);\n        // Ultra-simplified prompt to avoid token limits\n        const topics = contentAnalysis.topics.slice(0, 2).join(\", \") || \"technology\";\n        const vocab = contentAnalysis.keyVocabulary.slice(0, 4).join(\", \");\n        const prompt = `Create a ${lessonType} lesson for ${studentLevel} students about: ${topics}\r\n\r\nContent: \"${content.substring(0, 400)}\"\r\nKey words: ${vocab}\r\n\r\nReturn JSON with: warmup (use provided), vocabulary (4 words from content), reading (simplified content), comprehension (3 questions), discussion (3 questions), grammar (focus + examples), pronunciation (1 word), wrapup (3 questions).\r\n\r\n{\r\n  \"warmup\": ${JSON.stringify(contextualWarmup)},\r\n  \"vocabulary\": [{\"word\": \"word\", \"meaning\": \"definition\", \"example\": \"sentence\"}],\r\n  \"reading\": \"text\",\r\n  \"comprehension\": [\"question\"],\r\n  \"discussion\": [\"question\"], \r\n  \"grammar\": {\"focus\": \"topic\", \"examples\": [\"example\"], \"exercise\": [\"exercise\"]},\r\n  \"pronunciation\": {\"word\": \"word\", \"ipa\": \"/ipa/\", \"practice\": \"sentence\"},\r\n  \"wrapup\": [\"question\"]\r\n}`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for lesson structure...\");\n            const response = await this.getGoogleAI().prompt(prompt, {\n                temperature: 0.7,\n                maxTokens: 1500\n            });\n            console.log(\"\\uD83E\\uDD16 AI lesson structure response:\", response.substring(0, 200) + \"...\");\n            try {\n                const parsed = JSON.parse(response);\n                console.log(\"✅ Successfully parsed lesson structure JSON\");\n                // Ensure our contextual warm-up questions are preserved\n                parsed.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in final structure\");\n                return parsed;\n            } catch (parseError) {\n                console.warn(\"⚠️ Failed to parse JSON, attempting to clean response...\");\n                // Try to extract JSON from the response\n                const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    try {\n                        const cleaned = JSON.parse(jsonMatch[0]);\n                        console.log(\"✅ Successfully parsed cleaned JSON\");\n                        // Ensure our contextual warm-up questions are preserved\n                        cleaned.warmup = contextualWarmup;\n                        console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in cleaned structure\");\n                        return cleaned;\n                    } catch (cleanError) {\n                        console.warn(\"⚠️ Failed to parse cleaned JSON, using fallback\");\n                    }\n                }\n                // If JSON parsing fails, return a structured fallback with contextual warm-up\n                const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n                fallback.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Using fallback with contextual warm-up questions\");\n                return fallback;\n            }\n        } catch (error) {\n            console.warn(\"⚠️ AI lesson structure generation failed, using fallback:\", error.message);\n            const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n            fallback.warmup = contextualWarmup;\n            console.log(\"\\uD83D\\uDD25 Using error fallback with contextual warm-up questions\");\n            return fallback;\n        }\n    }\n    // Enhanced detailed content generation with context\n    async generateDetailedContextualContent(structure, content, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent) {\n        // Use Writer API to expand each section with contextual, detailed content\n        const sections = {\n            ...structure\n        };\n        // Enhance vocabulary section with contextual examples\n        if (sections.vocabulary) {\n            for(let i = 0; i < sections.vocabulary.length; i++){\n                const vocab = sections.vocabulary[i];\n                try {\n                    const contextualExamplePrompt = `\r\nCreate a natural example sentence using the word \"${vocab.word}\" that relates to this content context:\r\nTopics: ${contentAnalysis.topics.join(\", \")}\r\nContent type: ${contentAnalysis.contentType}\r\nLevel: ${studentLevel}\r\n\r\nMake the example relevant to the source material and appropriate for ${studentLevel} level students.\r\n`;\n                    const enhancedExample = await this.getGoogleAI().write(contextualExamplePrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].example = enhancedExample;\n                    // Add contextual meaning based on source content\n                    const contextualMeaningPrompt = `\r\nExplain the meaning of \"${vocab.word}\" in the context of: ${contentAnalysis.topics[0] || contentAnalysis.contentType}\r\nKeep it simple for ${studentLevel} level students.\r\n`;\n                    const contextualMeaning = await this.getGoogleAI().write(contextualMeaningPrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].contextualMeaning = contextualMeaning;\n                } catch (error) {\n                    // Keep original if enhancement fails\n                    console.warn(`Failed to enhance vocabulary for ${vocab.word}:`, error);\n                }\n            }\n        }\n        // Enhance discussion questions with specific content references\n        if (sections.discussion) {\n            try {\n                const enhancedDiscussionPrompt = `\r\nEnhance these discussion questions for a ${lessonType} lesson about ${contentAnalysis.topics.join(\" and \")}:\r\n${sections.discussion.join(\"\\n\")}\r\n\r\nMake them more specific to the content, engaging for ${studentLevel} level students, and encourage deeper thinking about:\r\n- ${contentAnalysis.topics.slice(0, 3).join(\"\\n- \")}\r\n\r\nReturn 3-4 enhanced questions that reference specific aspects of the content.\r\n`;\n                const enhancedDiscussion = await this.getGoogleAI().write(enhancedDiscussionPrompt, {\n                    tone: \"casual\",\n                    length: \"medium\",\n                    format: \"bullet-points\"\n                });\n                sections.discussion = this.parseListFromText(enhancedDiscussion).slice(0, 4);\n            } catch (error) {\n                console.warn(\"Failed to enhance discussion questions:\", error);\n            }\n        }\n        // Enhance reading section with better structure\n        if (sections.reading && structuredContent?.headings?.length > 0) {\n            try {\n                const structuredReadingPrompt = `\r\nImprove this reading text by organizing it with clear structure based on these headings from the original:\r\n${structuredContent.headings.slice(0, 3).map((h)=>`- ${h.text}`).join(\"\\n\")}\r\n\r\nOriginal text: \"${sections.reading}\"\r\n\r\nCreate a well-structured, ${studentLevel}-appropriate reading passage that maintains the key information but improves readability.\r\n`;\n                const enhancedReading = await this.getGoogleAI().rewrite(sections.reading, {\n                    tone: \"casual\",\n                    length: \"same\",\n                    audience: this.getAudienceLevel(studentLevel)\n                });\n                sections.reading = enhancedReading;\n            } catch (error) {\n                console.warn(\"Failed to enhance reading section:\", error);\n            }\n        }\n        // Enhance grammar section with content-specific examples\n        if (sections.grammar && sections.grammar.focus) {\n            try {\n                const grammarExamplesPrompt = `\r\nCreate 3 grammar examples for \"${sections.grammar.focus}\" using vocabulary and concepts from this content:\r\nTopics: ${contentAnalysis.topics.join(\", \")}\r\nKey vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\r\n\r\nMake examples relevant to the content and appropriate for ${studentLevel} level.\r\n`;\n                const contextualGrammarExamples = await this.getGoogleAI().write(grammarExamplesPrompt, {\n                    tone: \"casual\",\n                    length: \"short\",\n                    format: \"bullet-points\"\n                });\n                sections.grammar.contextualExamples = this.parseListFromText(contextualGrammarExamples);\n            } catch (error) {\n                console.warn(\"Failed to enhance grammar examples:\", error);\n            }\n        }\n        return sections;\n    }\n    async proofreadLesson(lesson) {\n        // Proofread key text sections\n        const sectionsToProofread = [\n            \"reading\",\n            \"grammar.examples\",\n            \"pronunciation.practice\"\n        ];\n        for (const sectionPath of sectionsToProofread){\n            const value = this.getNestedValue(lesson, sectionPath);\n            if (typeof value === \"string\") {\n                const proofread = await this.getGoogleAI().proofread(value, {\n                    checkGrammar: true,\n                    checkSpelling: true,\n                    checkStyle: true\n                });\n                this.setNestedValue(lesson, sectionPath, proofread.corrected_text);\n            }\n        }\n        return lesson;\n    }\n    generateFallbackLesson(params) {\n        // Template-based fallback when AI APIs fail\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getTemplateWarmup(lessonType, studentLevel),\n                vocabulary: this.extractVocabulary(sourceText, studentLevel),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n                dialoguePractice: this.generateTemplateDialoguePractice(\"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(\"this topic\", studentLevel, []),\n                discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getTemplateWrapup(lessonType)\n            }\n        };\n    }\n    // Helper methods\n    getSummaryLength(level) {\n        const lengthMap = {\n            A1: \"short\",\n            A2: \"short\",\n            B1: \"medium\",\n            B2: \"medium\",\n            C1: \"long\"\n        };\n        return lengthMap[level] || \"medium\";\n    }\n    getLanguageCode(language) {\n        const languageMap = {\n            spanish: \"es\",\n            french: \"fr\",\n            german: \"de\",\n            italian: \"it\",\n            portuguese: \"pt\",\n            japanese: \"ja\",\n            korean: \"ko\",\n            chinese: \"zh\"\n        };\n        return languageMap[language] || \"en\";\n    }\n    parseListFromText(text) {\n        return text.split(\"\\n\").filter((line)=>line.trim()).map((line)=>line.replace(/^[-•*]\\s*/, \"\").trim()).filter((line)=>line.length > 0).slice(0, 4) // Limit to 4 items\n        ;\n    }\n    getNestedValue(obj, path) {\n        return path.split(\".\").reduce((current, key)=>current?.[key], obj);\n    }\n    setNestedValue(obj, path, value) {\n        const keys = path.split(\".\");\n        const lastKey = keys.pop();\n        const target = keys.reduce((current, key)=>current[key], obj);\n        target[lastKey] = value;\n    }\n    createStructuredFallback(content, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDD04 Creating structured fallback lesson...\");\n        // Extract some basic information from content for better fallback\n        const words = content.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words)).slice(0, 6);\n        const fallback = {\n            warmup: [],\n            vocabulary: uniqueWords.map((word)=>({\n                    word: word,\n                    meaning: `Definition of ${word}`,\n                    example: `Example sentence with ${word}.`\n                })),\n            reading: this.simplifyText(content, studentLevel),\n            comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n            discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n            grammar: this.getTemplateGrammar(studentLevel),\n            pronunciation: this.getTemplatePronunciation(content),\n            wrapup: this.getTemplateWrapup(lessonType)\n        };\n        console.log(\"✅ Structured fallback created (warmup will be set by caller)\");\n        return fallback;\n    }\n    getTemplateWarmup(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What do you already know about this topic?\",\n                \"Have you had similar experiences?\",\n                \"What would you like to learn more about?\"\n            ],\n            grammar: [\n                \"What grammar patterns do you notice?\",\n                \"Which sentences seem most complex?\",\n                \"What grammar rules do you remember?\"\n            ],\n            travel: [\n                \"Where would you like to travel next?\",\n                \"What travel experiences have you had?\",\n                \"What travel vocabulary do you know?\"\n            ],\n            business: [\n                \"What business situations are you familiar with?\",\n                \"How do you communicate professionally?\",\n                \"What business terms are challenging?\"\n            ],\n            pronunciation: [\n                \"Which sounds are difficult to pronounce?\",\n                \"How do you practice pronunciation?\",\n                \"What pronunciation goals do you have?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    extractVocabulary(text, studentLevel) {\n        // Simple vocabulary extraction based on word frequency and complexity\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        const selectedWords = uniqueWords.slice(0, 6);\n        return selectedWords.map((word)=>({\n                word: word,\n                meaning: `Definition of ${word}`,\n                example: `Example sentence with ${word}.`\n            }));\n    }\n    simplifyText(text, studentLevel) {\n        // Basic text simplification based on level\n        const maxLength = {\n            A1: 200,\n            A2: 300,\n            B1: 400,\n            B2: 500,\n            C1: 600\n        };\n        const limit = maxLength[studentLevel] || 400;\n        return text.substring(0, limit) + (text.length > limit ? \"...\" : \"\");\n    }\n    getTemplateComprehension(lessonType, studentLevel) {\n        return [\n            \"What is the main idea of this text?\",\n            \"What supporting details can you identify?\",\n            \"How does this relate to your experience?\",\n            \"What conclusions can you draw?\"\n        ];\n    }\n    getTemplateDiscussion(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What is your opinion on this topic?\",\n                \"How would you handle this situation?\",\n                \"What alternative approaches exist?\"\n            ],\n            business: [\n                \"How would you apply this professionally?\",\n                \"What business challenges does this address?\",\n                \"How would you present this to colleagues?\"\n            ],\n            travel: [\n                \"How would this help while traveling?\",\n                \"What preparations would you make?\",\n                \"How would you share this experience?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    getTemplateGrammar(studentLevel) {\n        const grammarFoci = {\n            A1: \"Present Simple Tense\",\n            A2: \"Past Simple Tense\",\n            B1: \"Present Perfect Tense\",\n            B2: \"Conditional Sentences\",\n            C1: \"Advanced Grammar Structures\"\n        };\n        return {\n            focus: grammarFoci[studentLevel] || \"Present Perfect Tense\",\n            examples: [\n                \"I have learned many new things.\",\n                \"She has improved her skills.\",\n                \"We have discussed this topic.\"\n            ],\n            exercise: [\n                \"I _____ (learn) a lot today.\",\n                \"They _____ (complete) the project.\",\n                \"She _____ (improve) significantly.\"\n            ]\n        };\n    }\n    getTemplatePronunciation(text) {\n        // Extract a challenging word from the text\n        const words = text.match(/\\b[a-z]{6,}\\b/gi) || [\n            \"communication\"\n        ];\n        const selectedWord = words[0] || \"communication\";\n        return {\n            word: selectedWord.toLowerCase(),\n            ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n            practice: `Practice saying: \"${selectedWord}\" in a sentence.`\n        };\n    }\n    getTemplateWrapup(lessonType) {\n        return [\n            \"What new vocabulary did you learn?\",\n            \"Which concepts need more practice?\",\n            \"How will you use this knowledge?\",\n            \"What questions do you still have?\"\n        ];\n    }\n    // New helper methods for enhanced contextual analysis\n    extractTopicsFromHeadings(headings) {\n        return headings.filter((h)=>h.level <= 3) // Focus on main headings\n        .map((h)=>h.text).slice(0, 5);\n    }\n    extractTopicsFromText(text, headings) {\n        // First try to get topics from headings\n        const headingTopics = this.extractTopicsFromHeadings(headings);\n        if (headingTopics.length > 0) {\n            return headingTopics;\n        }\n        // Fallback: extract key phrases from text\n        const sentences = text.split(/[.!?]+/).filter((s)=>s.trim().length > 20);\n        const topics = [];\n        // Look for common topic indicators\n        const topicPatterns = [\n            /about (.+?)(?:\\s|,|\\.)/gi,\n            /discuss (.+?)(?:\\s|,|\\.)/gi,\n            /focus on (.+?)(?:\\s|,|\\.)/gi,\n            /regarding (.+?)(?:\\s|,|\\.)/gi\n        ];\n        for (const sentence of sentences.slice(0, 5)){\n            for (const pattern of topicPatterns){\n                const matches = sentence.match(pattern);\n                if (matches) {\n                    topics.push(...matches.map((m)=>m.replace(pattern, \"$1\").trim()).slice(0, 2));\n                }\n            }\n        }\n        // If no patterns found, extract key nouns\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"this\",\n                \"that\",\n                \"with\",\n                \"from\",\n                \"they\",\n                \"have\",\n                \"been\",\n                \"will\",\n                \"more\",\n                \"some\",\n                \"what\",\n                \"when\",\n                \"where\",\n                \"which\",\n                \"their\",\n                \"would\",\n                \"could\",\n                \"should\"\n            ];\n            const keyWords = words.filter((word)=>!commonWords.includes(word)).filter((word, index, arr)=>arr.indexOf(word) === index) // unique\n            .slice(0, 3);\n            return keyWords.length > 0 ? keyWords : [\n                \"AI technology\",\n                \"mobile devices\",\n                \"privacy\"\n            ];\n        }\n        return topics.slice(0, 3);\n    }\n    // Extract meaningful vocabulary for lesson content (improved algorithm)\n    extractMeaningfulVocabulary(text, level) {\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        // Enhanced exclusion list focusing on truly basic words and proper names\n        const excludeWords = new Set([\n            // Basic function words\n            \"the\",\n            \"and\",\n            \"for\",\n            \"are\",\n            \"but\",\n            \"not\",\n            \"you\",\n            \"all\",\n            \"can\",\n            \"had\",\n            \"her\",\n            \"was\",\n            \"one\",\n            \"our\",\n            \"out\",\n            \"day\",\n            \"get\",\n            \"has\",\n            \"him\",\n            \"his\",\n            \"how\",\n            \"its\",\n            \"may\",\n            \"new\",\n            \"now\",\n            \"old\",\n            \"see\",\n            \"two\",\n            \"who\",\n            \"boy\",\n            \"did\",\n            \"she\",\n            \"use\",\n            \"way\",\n            \"what\",\n            \"when\",\n            \"where\",\n            \"will\",\n            \"with\",\n            \"have\",\n            \"this\",\n            \"that\",\n            \"they\",\n            \"been\",\n            \"said\",\n            \"each\",\n            \"which\",\n            \"their\",\n            \"time\",\n            \"would\",\n            \"there\",\n            \"could\",\n            \"other\",\n            \"after\",\n            \"first\",\n            \"well\",\n            \"water\",\n            \"very\",\n            \"what\",\n            \"know\",\n            \"just\",\n            \"people\",\n            \"into\",\n            \"over\",\n            \"think\",\n            \"also\",\n            \"back\",\n            \"work\",\n            \"life\",\n            \"only\",\n            \"year\",\n            \"years\",\n            \"come\",\n            \"came\",\n            \"right\",\n            \"good\",\n            \"each\",\n            \"those\",\n            \"feel\",\n            \"seem\",\n            \"these\",\n            \"give\",\n            \"most\",\n            \"hand\",\n            \"high\",\n            \"keep\",\n            \"last\",\n            \"left\",\n            \"life\",\n            \"live\",\n            \"look\",\n            \"made\",\n            \"make\",\n            \"many\",\n            \"much\",\n            \"must\",\n            \"name\",\n            \"need\",\n            \"next\",\n            \"open\",\n            \"part\",\n            \"play\",\n            \"said\",\n            \"same\",\n            \"seem\",\n            \"show\",\n            \"side\",\n            \"take\",\n            \"tell\",\n            \"turn\",\n            \"want\",\n            \"ways\",\n            \"well\",\n            \"went\",\n            \"were\",\n            \"here\",\n            \"home\",\n            \"long\",\n            \"look\",\n            \"move\",\n            \"place\",\n            \"right\",\n            \"small\",\n            \"sound\",\n            \"still\",\n            \"such\",\n            \"thing\",\n            \"think\",\n            \"three\",\n            \"under\",\n            \"water\",\n            \"where\",\n            \"while\",\n            \"world\",\n            \"write\",\n            \"young\",\n            // Very basic words that B1+ students should know\n            \"student\",\n            \"english\",\n            \"september\",\n            \"october\",\n            \"november\",\n            \"december\",\n            \"january\",\n            \"february\",\n            \"march\",\n            \"april\",\n            \"june\",\n            \"july\",\n            \"august\",\n            \"south\",\n            \"africa\",\n            \"images\",\n            \"image\",\n            \"photo\",\n            \"picture\",\n            \"black\",\n            \"white\",\n            \"coloured\",\n            \"colored\",\n            // Problematic or sensitive terms to avoid in vocabulary\n            \"slur\",\n            \"slurs\",\n            \"racial\",\n            \"racist\",\n            \"racism\",\n            \"mckenzie\",\n            \"apartheid\",\n            \"monday\",\n            \"tuesday\",\n            \"wednesday\",\n            \"thursday\",\n            \"friday\",\n            \"saturday\",\n            \"sunday\",\n            \"today\",\n            \"yesterday\",\n            \"tomorrow\",\n            \"morning\",\n            \"afternoon\",\n            \"evening\",\n            \"night\",\n            // Common proper names to avoid (people's names and specific places)\n            \"john\",\n            \"mary\",\n            \"david\",\n            \"sarah\",\n            \"michael\",\n            \"jennifer\",\n            \"robert\",\n            \"lisa\",\n            \"william\",\n            \"karen\",\n            \"james\",\n            \"susan\",\n            \"christopher\",\n            \"jessica\",\n            \"daniel\",\n            \"nancy\",\n            \"matthew\",\n            \"betty\",\n            \"anthony\",\n            \"helen\",\n            \"mark\",\n            \"sandra\",\n            \"donald\",\n            \"donna\",\n            \"steven\",\n            \"carol\",\n            \"paul\",\n            \"ruth\",\n            \"andrew\",\n            \"sharon\",\n            \"joshua\",\n            \"michelle\",\n            \"kenneth\",\n            \"laura\",\n            \"kevin\",\n            \"sarah\",\n            \"brian\",\n            \"kimberly\",\n            \"george\",\n            \"deborah\",\n            \"edward\",\n            \"dorothy\",\n            \"ronald\",\n            \"lisa\",\n            \"timothy\",\n            \"nancy\",\n            \"jason\",\n            \"karen\",\n            \"jeffrey\",\n            \"betty\",\n            \"ryan\",\n            \"helen\",\n            \"jacob\",\n            \"sandra\",\n            \"gary\",\n            \"donna\",\n            \"nicholas\",\n            \"carol\",\n            \"eric\",\n            \"ruth\",\n            \"jonathan\",\n            \"sharon\",\n            \"stephen\",\n            \"michelle\",\n            \"larry\",\n            \"laura\",\n            \"justin\",\n            \"sarah\",\n            \"scott\",\n            \"kimberly\",\n            \"brandon\",\n            \"deborah\",\n            \"benjamin\",\n            \"dorothy\",\n            \"samuel\",\n            \"lisa\",\n            \"gregory\",\n            \"nancy\",\n            \"alexander\",\n            \"karen\",\n            \"patrick\",\n            \"betty\",\n            \"frank\",\n            \"helen\",\n            \"raymond\",\n            \"sandra\",\n            \"jack\",\n            \"donna\",\n            \"dennis\",\n            \"carol\",\n            \"jerry\",\n            \"ruth\",\n            \"tyler\",\n            \"sharon\",\n            \"aaron\",\n            \"michelle\",\n            \"jose\",\n            \"laura\",\n            \"henry\",\n            \"sarah\",\n            \"adam\",\n            \"kimberly\",\n            \"douglas\",\n            \"deborah\",\n            \"nathan\",\n            \"dorothy\",\n            \"peter\",\n            \"lisa\",\n            \"zachary\",\n            \"nancy\",\n            \"kyle\",\n            \"karen\",\n            \"julius\",\n            \"malema\"\n        ]);\n        // Filter and score words for educational value\n        const meaningfulWords = uniqueWords.filter((word)=>{\n            if (excludeWords.has(word)) return false;\n            if (/^\\d+$/.test(word)) return false // Skip pure numbers\n            ;\n            if (word.length < 4) return false // Skip very short words\n            ;\n            if (word.length > 15) return false // Skip very long words\n            ;\n            if (this.isProperName(word)) return false // Skip proper names\n            ;\n            return true;\n        });\n        // Score words based on educational and contextual value\n        const scoredWords = meaningfulWords.map((word)=>{\n            let score = 0;\n            // High-value content-specific vocabulary (political, business, academic terms)\n            if (/^(announcement|opposition|recognition|leadership|management|government|political|parliament|democracy|election|policy|legislation|constitution|rights|freedom|justice|equality|development|economic|social|cultural|environmental|international|national|regional|community|organization|institution|administration|authority|responsibility|accountability|transparency|governance|regulation|compliance|strategy|implementation|evaluation|assessment|analysis|research|investigation|examination|consideration|discussion|negotiation|agreement|cooperation|collaboration|partnership|relationship|communication|information|education|training|knowledge|understanding|awareness|consciousness|perspective|opinion|belief|attitude|approach|method|technique|process|system|structure|framework|principle|concept|theory|practice|experience|skill|expertise|professional|academic|scientific|technical|technological|digital|innovation|creativity|development|improvement|enhancement|transformation|change|progress|advancement|achievement|success|performance|quality|efficiency|effectiveness|productivity|sustainability|responsibility|commitment|dedication|motivation|inspiration|leadership|management|coordination|supervision|direction|guidance|support|assistance|service|provision|delivery|implementation|execution|operation|function|activity|action|behavior|conduct|practice|procedure|protocol|standard|guideline|requirement|condition|situation|circumstance|context|environment|setting|background|history|tradition|culture|society|community|population|group|team|organization|institution|establishment|authority|government|administration|policy|regulation|law|rule|standard|guideline|procedure|protocol|framework|model|pattern|template|example|instance|case|scenario)/.test(word)) {\n                score += 6 // Highest priority for meaningful content vocabulary\n                ;\n            }\n            // Business and professional terms\n            if (/^(manage|leader|team|company|business|strategy|develop|create|innovat|technolog|digital|global|professional|experience|skill|expert|analysis|research|project|solution|challenge|opportunity|growth|success|achievement|performance|quality|efficiency|productivity|collaboration|communication|decision|responsibility|objective|goal|target|result|outcome|impact|benefit|advantage|value|profit|revenue|investment|market|customer|client|service|product|brand|reputation|competitive|industry|sector|economy|economic|financial|budget|cost|price|sales|marketing|advertising|promotion|campaign|strategy|planning|implementation|execution|evaluation|assessment|improvement|optimization|transformation|change|adaptation|flexibility|agility|resilience|sustainability|environmental|social|ethical|governance|compliance|regulation|policy|procedure|standard|guideline|framework|methodology|approach|technique|method|process|system|structure|organization|hierarchy|department|division|function|role|position|title|career|development|training|education|learning|knowledge|information|data|insight|intelligence)/.test(word)) {\n                score += 4;\n            }\n            // Academic and formal vocabulary\n            if (/^(research|study|analysis|theory|concept|principle|method|approach|technique|process|system|structure|function|relationship|connection|interaction|influence|effect|impact|cause|result|consequence|factor|element|component|aspect|feature|characteristic|property|quality|attribute|dimension|level|degree|extent|scope|range|scale|measure|measurement|evaluation|assessment|comparison|contrast|similarity|difference|variation|change|development|evolution|progress|advancement|improvement|enhancement|modification|adjustment|adaptation|transformation|revolution|innovation|discovery|invention|creation|production|construction|design|planning|organization|management|administration|operation|implementation|execution|performance|achievement|accomplishment)/.test(word)) {\n                score += 3;\n            }\n            // Action words and processes (often good for learning)\n            if (/^(announce|reorganize|manage|develop|implement|achieve|improve|transform|communicate|collaborate|investigate|explore|examine|evaluate|assess|consider|discuss|negotiate|present|demonstrate|explain|describe|illustrate|interpret|translate|adapt|modify|optimize|organize|coordinate|administer|supervise|operate|execute|perform|accomplish|establish|maintain|preserve|conserve|protect|prevent|promote|advance|enhance|enrich|empower|engage|involve|participate|contribute|dedicate|commit|invest|allocate|distribute|circulate|transmit|transport|deliver|provide|supply|support|assist|guide|direct|instruct|educate|train|prepare|plan|schedule|arrange|coordinate|synchronize|integrate|combine|connect|associate|relate|partner|collaborate|cooperate|compete|compare|contrast|differentiate|distinguish|identify|recognize|acknowledge|appreciate|understand|comprehend|realize|aware|conscious|perceive|observe|monitor|track|measure|calculate|estimate|predict|forecast|project|anticipate|expect|assume|hypothesize|speculate|investigate|explore|research|analyze|synthesize|evaluate|assess|judge|decide|choose|select|prefer|recommend|suggest|propose|offer|request|demand|require|specify|instruct|direct|guide|advise|consult|discuss|negotiate|agree|contract|deal|transaction|exchange|trade|purchase|sale|investment|funding|financing|sponsorship|support|assistance|service|provision|delivery|distribution|allocation|assignment|delegation|authorization|approval|permission|consent|acceptance|rejection|refusal|denial|prohibition|restriction|limitation|constraint|regulation|control|management|administration|governance|leadership|supervision|oversight|monitoring|evaluation|assessment|review|audit|inspection|examination|investigation|inquiry)/.test(word)) {\n                score += 3;\n            }\n            // Frequency bonus (words that appear multiple times are likely important)\n            const frequency = (text.toLowerCase().match(new RegExp(`\\\\b${word}\\\\b`, \"g\")) || []).length;\n            if (frequency > 1) score += frequency * 2;\n            // Length bonus for substantial words\n            if (word.length >= 6 && word.length <= 12) score += 1;\n            return {\n                word,\n                score\n            };\n        });\n        // Sort by score and return top words\n        const topWords = scoredWords.sort((a, b)=>b.score - a.score).slice(0, 8) // Take top 8 words\n        .map((item)=>item.word);\n        console.log(\"\\uD83D\\uDCDA Meaningful vocabulary extraction results:\", topWords.map((w)=>`${w} (score: ${scoredWords.find((s)=>s.word === w)?.score})`));\n        return topWords;\n    }\n    extractVocabularyFromText(text, level) {\n        // Smart vocabulary extraction focusing on meaningful, educational words\n        const words = text.toLowerCase().match(/\\b[a-z]{3,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        // Words to exclude (common, non-educational words)\n        const excludeWords = new Set([\n            // Common words\n            \"the\",\n            \"and\",\n            \"for\",\n            \"are\",\n            \"but\",\n            \"not\",\n            \"you\",\n            \"all\",\n            \"can\",\n            \"had\",\n            \"her\",\n            \"was\",\n            \"one\",\n            \"our\",\n            \"out\",\n            \"day\",\n            \"get\",\n            \"has\",\n            \"him\",\n            \"his\",\n            \"how\",\n            \"its\",\n            \"may\",\n            \"new\",\n            \"now\",\n            \"old\",\n            \"see\",\n            \"two\",\n            \"who\",\n            \"boy\",\n            \"did\",\n            \"she\",\n            \"use\",\n            \"way\",\n            \"what\",\n            \"when\",\n            \"where\",\n            \"will\",\n            \"with\",\n            \"have\",\n            \"this\",\n            \"that\",\n            \"they\",\n            \"been\",\n            \"said\",\n            \"each\",\n            \"which\",\n            \"their\",\n            \"time\",\n            \"would\",\n            \"there\",\n            \"could\",\n            \"other\",\n            \"after\",\n            \"first\",\n            \"well\",\n            \"water\",\n            \"very\",\n            \"what\",\n            \"know\",\n            \"just\",\n            \"people\",\n            \"into\",\n            \"over\",\n            \"think\",\n            \"also\",\n            \"back\",\n            \"work\",\n            \"life\",\n            \"only\",\n            \"year\",\n            \"years\",\n            \"come\",\n            \"came\",\n            \"right\",\n            \"good\",\n            \"each\",\n            \"those\",\n            \"feel\",\n            \"seem\",\n            \"these\",\n            \"give\",\n            \"most\",\n            \"hand\",\n            \"high\",\n            \"keep\",\n            \"last\",\n            \"left\",\n            \"life\",\n            \"live\",\n            \"look\",\n            \"made\",\n            \"make\",\n            \"many\",\n            \"much\",\n            \"must\",\n            \"name\",\n            \"need\",\n            \"next\",\n            \"open\",\n            \"part\",\n            \"play\",\n            \"said\",\n            \"same\",\n            \"seem\",\n            \"show\",\n            \"side\",\n            \"take\",\n            \"tell\",\n            \"turn\",\n            \"want\",\n            \"ways\",\n            \"well\",\n            \"went\",\n            \"were\",\n            \"here\",\n            \"home\",\n            \"long\",\n            \"look\",\n            \"move\",\n            \"place\",\n            \"right\",\n            \"small\",\n            \"sound\",\n            \"still\",\n            \"such\",\n            \"thing\",\n            \"think\",\n            \"three\",\n            \"under\",\n            \"water\",\n            \"where\",\n            \"while\",\n            \"world\",\n            \"write\",\n            \"young\",\n            // Dates, numbers, names (often not useful for vocabulary)\n            \"january\",\n            \"february\",\n            \"march\",\n            \"april\",\n            \"june\",\n            \"july\",\n            \"august\",\n            \"september\",\n            \"october\",\n            \"november\",\n            \"december\",\n            \"monday\",\n            \"tuesday\",\n            \"wednesday\",\n            \"thursday\",\n            \"friday\",\n            \"saturday\",\n            \"sunday\",\n            \"today\",\n            \"yesterday\",\n            \"tomorrow\",\n            \"morning\",\n            \"afternoon\",\n            \"evening\",\n            \"night\",\n            // Common proper nouns that are often not educational\n            \"francisco\",\n            \"california\",\n            \"america\",\n            \"american\",\n            \"united\",\n            \"states\",\n            \"york\",\n            \"london\",\n            \"paris\",\n            \"tokyo\"\n        ]);\n        // Prioritize meaningful vocabulary categories\n        const meaningfulWords = uniqueWords.filter((word)=>{\n            // Skip excluded words\n            if (excludeWords.has(word)) return false;\n            // Skip pure numbers or dates\n            if (/^\\d+$/.test(word) || /^\\d{4}$/.test(word)) return false;\n            // Skip very short words (less than 4 letters) unless they're important\n            if (word.length < 4) return false;\n            // Skip very long words that might be too complex\n            if (word.length > 15) return false;\n            return true;\n        });\n        // Score words based on educational value\n        const scoredWords = meaningfulWords.map((word)=>{\n            let score = 0;\n            // Business/professional vocabulary\n            if (/^(manage|leader|team|company|business|strategy|develop|create|innovat|technolog|digital|global|international|professional|experience|skill|expert|analysis|research|project|solution|challenge|opportunity|growth|success|achievement|performance|quality|efficiency|productivity|collaboration|communication|decision|responsibility|objective|goal|target|result|outcome|impact|benefit|advantage|value|profit|revenue|investment|market|customer|client|service|product|brand|reputation|competitive|industry|sector|economy|economic|financial|budget|cost|price|sales|marketing|advertising|promotion|campaign|strategy|planning|implementation|execution|evaluation|assessment|improvement|optimization|transformation|change|adaptation|flexibility|agility|resilience|sustainability|environmental|social|ethical|governance|compliance|regulation|policy|procedure|standard|guideline|framework|methodology|approach|technique|method|process|system|structure|organization|hierarchy|department|division|function|role|position|title|career|development|training|education|learning|knowledge|information|data|insight|intelligence|wisdom|understanding|comprehension|awareness|consciousness|perception|perspective|viewpoint|opinion|belief|attitude|mindset|culture|values|principles|ethics|integrity|honesty|transparency|accountability|responsibility|commitment|dedication|passion|motivation|inspiration|creativity|innovation|imagination|vision|mission|purpose|meaning|significance|importance|relevance|priority|urgency|critical|essential|fundamental|basic|advanced|complex|sophisticated|comprehensive|detailed|specific|particular|general|overall|total|complete|full|entire|whole|partial|limited|restricted|exclusive|inclusive|diverse|varied|different|similar|comparable|equivalent|equal|fair|just|reasonable|logical|rational|practical|realistic|achievable|feasible|possible|probable|likely|unlikely|impossible|certain|uncertain|confident|doubtful|optimistic|pessimistic|positive|negative|neutral|objective|subjective|personal|individual|collective|social|public|private|internal|external|local|regional|national|international|global|worldwide|universal)/.test(word)) {\n                score += 3;\n            }\n            // Academic/educational vocabulary\n            if (/^(research|study|analysis|theory|concept|principle|method|approach|technique|process|system|structure|function|relationship|connection|interaction|influence|effect|impact|cause|result|consequence|factor|element|component|aspect|feature|characteristic|property|quality|attribute|dimension|level|degree|extent|scope|range|scale|measure|measurement|evaluation|assessment|comparison|contrast|similarity|difference|variation|change|development|evolution|progress|advancement|improvement|enhancement|modification|adjustment|adaptation|transformation|revolution|innovation|discovery|invention|creation|production|construction|design|planning|organization|management|administration|operation|implementation|execution|performance|achievement|accomplishment|success|failure|challenge|problem|issue|difficulty|obstacle|barrier|limitation|constraint|restriction|requirement|condition|situation|circumstance|context|environment|setting|background|history|tradition|culture|society|community|population|group|team|organization|institution|establishment|authority|government|administration|policy|regulation|law|rule|standard|guideline|procedure|protocol|framework|model|pattern|template|example|instance|case|scenario|situation|condition|state|status|position|location|place|area|region|zone|territory|domain|field|sector|industry|market|economy|business|commerce|trade|exchange|transaction|deal|agreement|contract|partnership|collaboration|cooperation|coordination|communication|interaction|relationship|connection|network|system|structure|organization|hierarchy|level|rank|grade|class|category|type|kind|sort|variety|diversity|range|spectrum)/.test(word)) {\n                score += 2;\n            }\n            // Technical/specialized vocabulary\n            if (/^(technolog|digital|computer|software|hardware|internet|online|website|platform|application|program|code|data|information|network|system|security|privacy|encryption|algorithm|artificial|intelligence|machine|learning|automation|robot|innovation|development|engineering|science|scientific|medical|health|treatment|diagnosis|research|experiment|laboratory|equipment|instrument|device|tool|machine|mechanism|process|procedure|technique|method|approach|strategy|solution|problem|challenge|opportunity|advantage|benefit|risk|threat|danger|safety|protection|prevention|control|management|monitoring|supervision|oversight|governance|regulation|compliance|standard|quality|performance|efficiency|effectiveness|productivity|optimization|improvement|enhancement|upgrade|update|modification|customization|personalization|adaptation|flexibility|scalability|sustainability|reliability|durability|stability|consistency|accuracy|precision|validity|credibility|authenticity|transparency|accountability|responsibility|integrity|ethics|morality|values|principles|beliefs|attitudes|perspectives|opinions|views|thoughts|ideas|concepts|theories|models|frameworks|paradigms|approaches|methodologies|strategies|tactics|techniques|procedures|protocols)/.test(word)) {\n                score += 2;\n            }\n            // Action/process words (verbs in noun form or gerunds)\n            if (/^(announcement|leadership|management|development|implementation|achievement|improvement|transformation|communication|collaboration|investigation|exploration|examination|evaluation|assessment|consideration|discussion|negotiation|presentation|demonstration|explanation|description|illustration|interpretation|translation|adaptation|modification|optimization|organization|coordination|administration|supervision|operation|execution|performance|accomplishment|establishment|maintenance|preservation|conservation|protection|prevention|promotion|advancement|enhancement|enrichment|empowerment|engagement|involvement|participation|contribution|dedication|commitment|investment|allocation|distribution|circulation|transmission|transportation|delivery|provision|supply|support|assistance|guidance|direction|instruction|education|training|preparation|planning|scheduling|arrangement|coordination|synchronization|integration|combination|connection|association|relationship|partnership|collaboration|cooperation|competition|comparison|contrast|differentiation|distinction|identification|recognition|acknowledgment|appreciation|understanding|comprehension|realization|awareness|consciousness|perception|observation|monitoring|tracking|measurement|calculation|estimation|prediction|forecasting|projection|anticipation|expectation|assumption|hypothesis|speculation|investigation|exploration|research|analysis|synthesis|evaluation|assessment|judgment|decision|choice|selection|preference|recommendation|suggestion|proposal|offer|request|demand|requirement|specification|instruction|direction|guidance|advice|consultation|discussion|negotiation|agreement|contract|deal|transaction|exchange|trade|purchase|sale|investment|funding|financing|sponsorship|support|assistance|service|provision|delivery|distribution|allocation|assignment|delegation|authorization|approval|permission|consent|acceptance|rejection|refusal|denial|prohibition|restriction|limitation|constraint|regulation|control|management|administration|governance|leadership|supervision|oversight|monitoring|evaluation|assessment|review|audit|inspection|examination|investigation|inquiry|research|study|analysis|interpretation|explanation|clarification|specification|definition|description|illustration|demonstration|presentation|exhibition|display|show|performance|execution|implementation|application|utilization|employment|usage|operation|function|activity|action|behavior|conduct|practice|procedure|process|method|technique|approach|strategy|plan|scheme|program|project|initiative|campaign|movement|effort|attempt|trial|experiment|test|examination|evaluation|assessment|measurement|calculation|estimation|determination|identification|recognition|discovery|invention|creation|production|construction|building|development|growth|expansion|extension|enlargement|increase|improvement|enhancement|upgrade|advancement|progress|evolution|transformation|change|modification|adjustment|adaptation|customization|personalization|optimization|refinement|perfection|completion|achievement|accomplishment|success|victory|triumph|conquest|defeat|failure|loss|mistake|error|problem|issue|difficulty|challenge|obstacle|barrier|limitation|constraint|restriction|requirement|condition|situation|circumstance|context|environment|setting|atmosphere|climate|culture|tradition|custom|habit|routine|pattern|trend|tendency|inclination|preference|choice|option|alternative|possibility|opportunity|chance|probability|likelihood|certainty|uncertainty|doubt|confidence|trust|faith|belief|conviction|opinion|view|perspective|standpoint|position|stance|attitude|approach|mindset|mentality|psychology|philosophy|ideology|theory|concept|idea|notion|thought|consideration|reflection|contemplation|meditation|concentration|focus|attention|interest|curiosity|wonder|amazement|surprise|shock|astonishment|bewilderment|confusion|uncertainty|clarity|understanding|comprehension|knowledge|information|data|facts|details|specifics|particulars|characteristics|features|attributes|properties|qualities|aspects|elements|components|parts|sections|segments|divisions|categories|types|kinds|varieties|forms|shapes|sizes|dimensions|measurements|quantities|amounts|numbers|figures|statistics|percentages|proportions|ratios|rates|speeds|frequencies|intervals|periods|durations|times|moments|instances|occasions|events|incidents|occurrences|happenings|developments|changes|modifications|alterations|adjustments|improvements|enhancements|upgrades|updates|revisions|corrections|fixes|repairs|maintenance|preservation|conservation|protection|security|safety|defense|prevention|precaution|preparation|readiness|availability|accessibility|convenience|comfort|ease|simplicity|complexity|difficulty|challenge|complication|sophistication|advancement|progress|development|growth|expansion|extension|increase|rise|improvement|enhancement|betterment|amelioration|optimization|perfection|excellence|quality|standard|level|grade|rank|status|position|location|place|site|spot|point|area|region|zone|territory|domain|field|sector|industry|market|economy|business|enterprise|organization|institution|establishment|company|corporation|firm|agency|department|division|section|unit|team|group|committee|board|council|assembly|association|society|community|population|public|audience|customers|clients|users|consumers|buyers|purchasers|investors|stakeholders|shareholders|partners|collaborators|colleagues|associates|members|participants|contributors|supporters|advocates|representatives|delegates|ambassadors|spokespersons|leaders|managers|directors|executives|administrators|supervisors|coordinators|organizers|planners|designers|developers|creators|producers|manufacturers|suppliers|providers|distributors|retailers|sellers|vendors|contractors|consultants|advisors|experts|specialists|professionals|practitioners|technicians|operators|workers|employees|staff|personnel|workforce|labor|human|resources|capital|assets|investments|funds|finances|budget|costs|expenses|revenues|income|profits|earnings|returns|benefits|advantages|gains|losses|risks|threats|dangers|hazards|challenges|problems|issues|difficulties|obstacles|barriers|limitations|constraints|restrictions|requirements|conditions|terms|specifications|standards|criteria|guidelines|rules|regulations|policies|procedures|protocols|processes|methods|techniques|approaches|strategies|plans|programs|projects|initiatives|campaigns|efforts|activities|actions|operations|functions|services|products|goods|items|articles|objects|things|materials|substances|elements|components|ingredients|contents)$/.test(word)) {\n                score += 3;\n            }\n            // Bonus for words that appear multiple times (indicating importance)\n            const frequency = (text.toLowerCase().match(new RegExp(`\\\\b${word}\\\\b`, \"g\")) || []).length;\n            if (frequency > 1) score += frequency;\n            return {\n                word,\n                score\n            };\n        });\n        // Sort by score and return top words\n        const topWords = scoredWords.sort((a, b)=>b.score - a.score).slice(0, 10).map((item)=>item.word);\n        console.log(\"\\uD83D\\uDCDA Smart vocabulary extraction results:\", topWords);\n        return topWords;\n    }\n    determineCulturalContext(domain, text) {\n        // Determine cultural context based on domain and content\n        const culturalIndicators = {\n            \"bbc.com\": \"British English, UK culture\",\n            \"cnn.com\": \"American English, US culture\",\n            \"wikipedia.org\": \"International, encyclopedic\",\n            \"nytimes.com\": \"American English, US perspective\",\n            \"theguardian.com\": \"British English, UK perspective\"\n        };\n        if (culturalIndicators[domain]) {\n            return culturalIndicators[domain];\n        }\n        // Analyze text for cultural markers\n        const americanMarkers = [\n            \"dollar\",\n            \"president\",\n            \"congress\",\n            \"state\",\n            \"federal\"\n        ];\n        const britishMarkers = [\n            \"pound\",\n            \"minister\",\n            \"parliament\",\n            \"council\",\n            \"government\"\n        ];\n        const americanCount = americanMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        const britishCount = britishMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        if (americanCount > britishCount) {\n            return \"American English context\";\n        } else if (britishCount > americanCount) {\n            return \"British English context\";\n        }\n        return \"International context\";\n    }\n    generateLearningObjectives(contentType, topics, level) {\n        const objectives = [];\n        // Base objectives on content type\n        switch(contentType){\n            case \"news\":\n                objectives.push(\"Understand current events vocabulary\");\n                objectives.push(\"Practice reading news articles\");\n                break;\n            case \"blog\":\n                objectives.push(\"Learn informal writing style\");\n                objectives.push(\"Understand personal opinions and experiences\");\n                break;\n            case \"tutorial\":\n                objectives.push(\"Follow step-by-step instructions\");\n                objectives.push(\"Learn technical vocabulary\");\n                break;\n            case \"encyclopedia\":\n                objectives.push(\"Understand factual information\");\n                objectives.push(\"Learn academic vocabulary\");\n                break;\n            default:\n                objectives.push(\"Improve reading comprehension\");\n                objectives.push(\"Expand vocabulary knowledge\");\n        }\n        // Add topic-specific objectives\n        topics.slice(0, 2).forEach((topic)=>{\n            objectives.push(`Discuss topics related to ${topic.toLowerCase()}`);\n        });\n        return objectives.slice(0, 4);\n    }\n    getAudienceLevel(cefrLevel) {\n        const levelMap = {\n            \"A1\": \"beginner\",\n            \"A2\": \"beginner\",\n            \"B1\": \"general\",\n            \"B2\": \"general\",\n            \"C1\": \"expert\"\n        };\n        return levelMap[cefrLevel] || \"general\";\n    }\n    // Enhanced fallback lesson generation with context\n    generateEnhancedFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, contentMetadata, structuredContent } = params;\n        console.log(\"\\uD83D\\uDD04 Generating enhanced fallback lesson with contextual warm-up...\");\n        // Use available context even in fallback\n        const topics = structuredContent?.headings?.map((h)=>h.text).slice(0, 3) || [];\n        const contentType = contentMetadata?.contentType || \"general\";\n        // Create mock content analysis for fallback warm-up generation\n        const mockContentAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: this.determineSourceCountry(contentMetadata?.domain || \"\"),\n            culturalContext: this.determineCulturalContext(contentMetadata?.domain || \"\", sourceText)\n        };\n        // Generate contextual warm-up questions even in fallback\n        const contextualWarmup = this.getContextualWarmupFallback(studentLevel, mockContentAnalysis, contentMetadata);\n        console.log(\"\\uD83D\\uDD25 Generated fallback contextual warm-up:\", contextualWarmup);\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: contextualWarmup,\n                vocabulary: this.extractContextualVocabulary(sourceText, studentLevel, topics),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getContextualComprehension(lessonType, studentLevel, topics),\n                dialoguePractice: this.generateTemplateDialoguePractice(topics[0] || \"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(topics[0] || \"this topic\", studentLevel, []),\n                discussion: this.getContextualDiscussion(lessonType, studentLevel, topics),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getContextualWrapup(lessonType, topics)\n            }\n        };\n    }\n    getContextualWarmup(lessonType, studentLevel, topics, contentType) {\n        // Use the same contextual fallback logic\n        const mockAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: \"International\"\n        };\n        return this.getContextualWarmupFallback(studentLevel, mockAnalysis, {\n            title: topics[0] || \"Content\"\n        });\n    }\n    // Basic fallback for complete failures\n    generateBasicFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: [\n                    \"What do you already know about this topic?\",\n                    \"Have you had similar experiences?\",\n                    \"What would you like to learn?\"\n                ],\n                vocabulary: [],\n                reading: sourceText.substring(0, 400),\n                comprehension: [\n                    \"What is the main idea?\",\n                    \"What details can you identify?\"\n                ],\n                dialoguePractice: this.generateTemplateDialoguePractice(\"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(\"this topic\", studentLevel, []),\n                discussion: [\n                    \"What is your opinion?\",\n                    \"How would you handle this?\"\n                ],\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: {\n                    word: \"example\",\n                    ipa: \"/ɪɡˈz\\xe6mpəl/\",\n                    practice: \"Practice saying example.\"\n                },\n                wrapup: [\n                    \"What did you learn?\",\n                    \"What needs more practice?\"\n                ]\n            }\n        };\n    }\n    extractContextualVocabulary(text, studentLevel, topics) {\n        const vocabulary = this.extractVocabulary(text, studentLevel);\n        // Enhance with topic context if available\n        if (topics.length > 0) {\n            return vocabulary.map((vocab, index)=>({\n                    ...vocab,\n                    context: index < topics.length ? `Related to ${topics[index].toLowerCase()}` : vocab.meaning\n                }));\n        }\n        return vocabulary;\n    }\n    getContextualComprehension(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateComprehension(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is the main point about ${topics[0]?.toLowerCase()}?`,\n                `How does the text explain ${topics[1]?.toLowerCase() || \"the topic\"}?`,\n                \"What supporting details can you identify?\",\n                \"What conclusions can you draw from this information?\"\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualDiscussion(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateDiscussion(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is your opinion about ${topics[0]?.toLowerCase()}?`,\n                `How would you apply this information about ${topics[1]?.toLowerCase() || \"this topic\"}?`,\n                `What are the implications of what you learned about ${topics[0]?.toLowerCase()}?`\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualWrapup(lessonType, topics) {\n        if (topics.length > 0) {\n            return [\n                `What new vocabulary did you learn about ${topics[0]?.toLowerCase()}?`,\n                `Which concepts about ${topics[1]?.toLowerCase() || \"this topic\"} need more practice?`,\n                \"How will you use this knowledge in real situations?\",\n                \"What questions do you still have about this content?\"\n            ];\n        }\n        return this.getTemplateWrapup(lessonType);\n    }\n    // Template dialogue generation methods\n    generateTemplateDialoguePractice(topic, studentLevel, vocabularyWords) {\n        const levelDialogues = {\n            \"A1\": {\n                instruction: \"Practice this simple conversation with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I want to learn about ${topic}.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `That's great! What do you already know about ${topic}?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"I know a little bit.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Let's explore ${topic} together.`\n                    }\n                ],\n                followUpQuestions: [\n                    `What interests you most about ${topic}?`,\n                    \"What would you like to know more about?\",\n                    \"How can this help you in daily life?\"\n                ]\n            },\n            \"A2\": {\n                instruction: \"Practice this conversation with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I've been reading about ${topic}. It's quite interesting.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What did you find most interesting about ${topic}?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"I learned some new things I didn't know before.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Can you share what you learned about ${topic}?`\n                    }\n                ],\n                followUpQuestions: [\n                    `How does ${topic} relate to your experience?`,\n                    \"What surprised you the most?\",\n                    \"Would you recommend this topic to others?\"\n                ]\n            },\n            \"B1\": {\n                instruction: \"Practice this discussion with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I've been thinking about ${topic} and its implications.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `That's a complex topic. What aspects of ${topic} interest you most?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"There are several factors to consider when discussing this.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Let's explore those factors. What do you think is most important about ${topic}?`\n                    }\n                ],\n                followUpQuestions: [\n                    `What are the advantages and disadvantages of ${topic}?`,\n                    \"How might this impact different groups of people?\",\n                    \"What solutions would you propose?\"\n                ]\n            },\n            \"B2\": {\n                instruction: \"Engage in this analytical discussion with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `The complexity of ${topic} requires careful analysis of multiple perspectives.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Excellent point. How do you think different stakeholders view ${topic}?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"Each perspective brings unique insights and challenges to consider.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What evidence supports your analysis of ${topic}?`\n                    }\n                ],\n                followUpQuestions: [\n                    `How do cultural differences influence perspectives on ${topic}?`,\n                    \"What long-term consequences should we consider?\",\n                    \"How would you evaluate the effectiveness of current approaches?\"\n                ]\n            },\n            \"C1\": {\n                instruction: \"Participate in this sophisticated discourse with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `The nuanced nature of ${topic} demands a multifaceted approach to understanding.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Indeed. How do you reconcile the apparent contradictions within ${topic}?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"The paradoxes inherent in this subject reflect broader societal complexities.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What theoretical frameworks best illuminate the intricacies of ${topic}?`\n                    }\n                ],\n                followUpQuestions: [\n                    `How do philosophical underpinnings shape our understanding of ${topic}?`,\n                    \"What paradigm shifts might be necessary for progress?\",\n                    \"How do you envision the evolution of thought regarding this matter?\"\n                ]\n            }\n        };\n        return levelDialogues[studentLevel] || levelDialogues[\"B1\"];\n    }\n    generateTemplateDialogueFillGap(topic, studentLevel, vocabularyWords) {\n        const levelGapDialogues = {\n            \"A1\": {\n                instruction: \"Fill in the gaps in this conversation:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I _____ to learn about ${topic}.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `That's great! What _____ you already know?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"I know _____ little bit.\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Let's _____ together.`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"want\",\n                    \"do\",\n                    \"a\",\n                    \"learn\"\n                ]\n            },\n            \"A2\": {\n                instruction: \"Complete this conversation with the missing words:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I've been _____ about ${topic}.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What did you _____ most interesting?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"I _____ some new things.\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Can you _____ what you learned?`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"reading\",\n                    \"find\",\n                    \"learned\",\n                    \"share\"\n                ]\n            },\n            \"B1\": {\n                instruction: \"Fill in the blanks to complete this discussion:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I've been _____ about ${topic} and its implications.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What _____ interest you most?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"There are several _____ to consider.\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What do you think is most _____ ?`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"thinking\",\n                    \"aspects\",\n                    \"factors\",\n                    \"important\"\n                ]\n            },\n            \"B2\": {\n                instruction: \"Complete this analytical discussion:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `The _____ of ${topic} requires careful analysis.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `How do different _____ view this topic?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"Each perspective brings unique _____ .\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What _____ supports your analysis?`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"complexity\",\n                    \"stakeholders\",\n                    \"insights\",\n                    \"evidence\"\n                ]\n            },\n            \"C1\": {\n                instruction: \"Fill in the sophisticated vocabulary:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `The _____ nature of ${topic} demands a multifaceted approach.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `How do you _____ the apparent contradictions?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"The _____ reflect broader complexities.\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What theoretical _____ best illuminate this?`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"nuanced\",\n                    \"reconcile\",\n                    \"paradoxes\",\n                    \"frameworks\"\n                ]\n            }\n        };\n        return levelGapDialogues[studentLevel] || levelGapDialogues[\"B1\"];\n    }\n    constructor(){\n        this.googleAI = null;\n        this.progressiveGenerator = null;\n    }\n}\nconst lessonAIServerGenerator = new LessonAIServerGenerator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/lesson-ai-generator-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/progressive-generator.ts":
/*!**************************************!*\
  !*** ./lib/progressive-generator.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_PHASE_WEIGHTS: () => (/* binding */ DEFAULT_PHASE_WEIGHTS),\n/* harmony export */   ProgressiveGeneratorImpl: () => (/* binding */ ProgressiveGeneratorImpl),\n/* harmony export */   safeProgressCallback: () => (/* binding */ safeProgressCallback)\n/* harmony export */ });\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n/* harmony import */ var _warmup_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./warmup-validator */ \"(rsc)/./lib/warmup-validator.ts\");\n/* harmony import */ var _section_validators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./section-validators */ \"(rsc)/./lib/section-validators.ts\");\n/* harmony import */ var _quality_metrics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./quality-metrics */ \"(rsc)/./lib/quality-metrics.ts\");\n\n\n\n\nconst DEFAULT_PHASE_WEIGHTS = {\n    warmup: 10,\n    vocabulary: 15,\n    reading: 20,\n    comprehension: 10,\n    discussion: 10,\n    dialogue: 15,\n    grammar: 15,\n    pronunciation: 15,\n    wrapup: 5\n};\n/**\r\n * Safe wrapper for progress callbacks that isolates errors\r\n * Ensures callback failures don't break the generation process\r\n * \r\n * @param callback - Optional progress callback function\r\n * @param update - Progress update data to send to callback\r\n */ function safeProgressCallback(callback, update) {\n    // If no callback provided, do nothing\n    if (!callback) {\n        return;\n    }\n    try {\n        // Invoke the callback with the progress update\n        callback(update);\n    } catch (error) {\n        // Log error but don't throw - generation should continue\n        console.error(\"Progress callback error:\", error);\n        console.error(\"Progress update that caused error:\", update);\n        // Optionally log stack trace for debugging\n        if (error instanceof Error && error.stack) {\n            console.error(\"Stack trace:\", error.stack);\n        }\n    }\n}\n// Implementation of Progressive Generator\nclass ProgressiveGeneratorImpl {\n    constructor(){\n        this.googleAI = null;\n        this.completedSections = [];\n        this.currentLessonType = \"\";\n        this.phaseWeights = DEFAULT_PHASE_WEIGHTS;\n        this.warmupValidator = new _warmup_validator__WEBPACK_IMPORTED_MODULE_1__.WarmupValidator();\n    }\n    /**\r\n   * Set the progress callback for this generator instance\r\n   * Should be called before starting generation\r\n   */ setProgressCallback(callback, lessonType) {\n        this.progressCallback = callback;\n        this.currentLessonType = lessonType;\n        this.completedSections = [];\n    }\n    /**\r\n   * Get quality metrics for the current lesson generation\r\n   */ getQualityMetrics() {\n        return _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.getQualityReport();\n    }\n    /**\r\n   * Log quality summary for the lesson\r\n   */ logQualitySummary() {\n        _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.logSummary();\n    }\n    /**\r\n   * Reset quality metrics for new lesson generation\r\n   */ resetQualityMetrics() {\n        _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.reset();\n    }\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_0__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    /**\r\n   * Calculate progress percentage based on phase weights and lesson type\r\n   * Handles different lesson types with varying section combinations\r\n   */ calculateProgress(completedSections, currentSection, lessonType, phaseWeights = DEFAULT_PHASE_WEIGHTS) {\n        // Determine which sections are included in this lesson type\n        const activeSections = this.getActiveSectionsForLessonType(lessonType);\n        // Calculate total weight for active sections only\n        const totalWeight = activeSections.reduce((sum, section)=>{\n            return sum + (phaseWeights[section] || 0);\n        }, 0);\n        if (totalWeight === 0) {\n            return 0;\n        }\n        // Deduplicate completed sections to avoid counting the same section multiple times\n        const uniqueCompletedSections = Array.from(new Set(completedSections));\n        // Calculate weight of completed sections\n        const completedWeight = uniqueCompletedSections.reduce((sum, section)=>{\n            if (activeSections.includes(section)) {\n                return sum + (phaseWeights[section] || 0);\n            }\n            return sum;\n        }, 0);\n        // Calculate progress percentage\n        const progress = Math.round(completedWeight / totalWeight * 100);\n        return Math.min(progress, 100);\n    }\n    /**\r\n   * Get the list of active sections for a given lesson type\r\n   * Different lesson types include different sections\r\n   */ getActiveSectionsForLessonType(lessonType) {\n        // Base sections included in all lesson types\n        const baseSections = [\n            \"warmup\",\n            \"vocabulary\",\n            \"reading\",\n            \"comprehension\",\n            \"wrapup\"\n        ];\n        // Additional sections based on lesson type\n        const lessonTypeMap = {\n            \"discussion\": [\n                ...baseSections,\n                \"discussion\"\n            ],\n            \"grammar\": [\n                ...baseSections,\n                \"grammar\"\n            ],\n            \"pronunciation\": [\n                ...baseSections,\n                \"pronunciation\"\n            ],\n            \"travel\": [\n                ...baseSections,\n                \"dialogue\"\n            ],\n            \"business\": [\n                ...baseSections,\n                \"dialogue\"\n            ],\n            \"dialogue\": [\n                ...baseSections,\n                \"dialogue\"\n            ]\n        };\n        // Return sections for the specific lesson type, or base sections if type not found\n        return lessonTypeMap[lessonType.toLowerCase()] || baseSections;\n    }\n    /**\r\n   * Build shared context that will be reused across all lesson sections\r\n   */ async buildSharedContext(sourceText, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFD7️ Building shared context for progressive generation...\");\n        try {\n            // Generate contextual lesson title (with fallback to metadata)\n            const lessonTitle = await this.generateLessonTitle(sourceText, lessonType, studentLevel, metadata);\n            // Extract key vocabulary using AI optimization\n            const keyVocabulary = await this.extractKeyVocabulary(sourceText, studentLevel);\n            // Extract main themes\n            const mainThemes = await this.extractMainThemes(sourceText, studentLevel);\n            // Create content summary\n            const contentSummary = await this.createContentSummary(sourceText, studentLevel);\n            const sharedContext = {\n                lessonTitle,\n                keyVocabulary,\n                mainThemes,\n                difficultyLevel: studentLevel,\n                contentSummary,\n                sourceText: sourceText.substring(0, 1000),\n                lessonType,\n                targetLanguage\n            };\n            console.log(\"✅ Shared context built:\", {\n                lessonTitle,\n                vocabularyCount: keyVocabulary.length,\n                themesCount: mainThemes.length,\n                summaryLength: contentSummary.length\n            });\n            return sharedContext;\n        } catch (error) {\n            console.error(\"❌ Failed to build shared context:\", error);\n            throw new Error(\"Failed to build shared context: \" + error.message);\n        }\n    }\n    /**\r\n   * Generate a specific lesson section using shared context\r\n   * Now includes quality validation and metrics tracking\r\n   */ async generateSection(section, sharedContext, previousSections) {\n        console.log(`🎯 Generating section: ${section.name}`);\n        // Report progress at start of section generation\n        const startProgress = this.calculateProgress(this.completedSections, section.name, this.currentLessonType || sharedContext.lessonType, this.phaseWeights);\n        safeProgressCallback(this.progressCallback, {\n            step: `Generating ${section.name}`,\n            progress: startProgress,\n            phase: section.name,\n            section: section.name\n        });\n        const startTime = Date.now();\n        let content;\n        let tokensUsed = 0;\n        let generationStrategy = \"progressive\";\n        try {\n            switch(section.name){\n                case \"warmup\":\n                    content = await this.generateWarmupWithContext(sharedContext, previousSections);\n                    break;\n                case \"vocabulary\":\n                    content = await this.generateVocabularyWithContext(sharedContext, previousSections);\n                    break;\n                case \"reading\":\n                    content = await this.generateReadingWithContext(sharedContext, previousSections);\n                    break;\n                case \"comprehension\":\n                    content = await this.generateComprehensionWithContext(sharedContext, previousSections);\n                    break;\n                case \"discussion\":\n                    content = await this.generateDiscussionWithContext(sharedContext, previousSections);\n                    break;\n                case \"grammar\":\n                    content = await this.generateGrammarWithContext(sharedContext, previousSections);\n                    break;\n                case \"pronunciation\":\n                    content = await this.generatePronunciationWithContext(sharedContext, previousSections);\n                    break;\n                case \"wrapup\":\n                    content = await this.generateWrapupWithContext(sharedContext, previousSections);\n                    break;\n                default:\n                    throw new Error(`Unknown section: ${section.name}`);\n            }\n            const generationTime = Date.now() - startTime;\n            console.log(`✅ Section ${section.name} generated in ${generationTime}ms`);\n            // Mark section as completed and report progress\n            this.completedSections.push(section.name);\n            const completionProgress = this.calculateProgress(this.completedSections, section.name, this.currentLessonType || sharedContext.lessonType, this.phaseWeights);\n            safeProgressCallback(this.progressCallback, {\n                step: `Completed ${section.name}`,\n                progress: completionProgress,\n                phase: section.name,\n                section: section.name\n            });\n            return {\n                sectionName: section.name,\n                content,\n                tokensUsed,\n                generationStrategy\n            };\n        } catch (error) {\n            console.error(`❌ Failed to generate section ${section.name}:`, error);\n            throw new Error(`Failed to generate ${section.name} section: ${error.message}`);\n        }\n    }\n    /**\r\n   * Update shared context with information from newly generated section\r\n   */ updateContext(context, newSection) {\n        console.log(`🔄 Updating context with ${newSection.sectionName} section`);\n        const updatedContext = {\n            ...context\n        };\n        // Update vocabulary if new words were introduced\n        if (newSection.sectionName === \"vocabulary\" && Array.isArray(newSection.content)) {\n            const newWords = newSection.content.filter((item)=>item.word && item.word !== \"INSTRUCTION\").map((item)=>item.word.toLowerCase());\n            updatedContext.keyVocabulary = [\n                ...new Set([\n                    ...updatedContext.keyVocabulary,\n                    ...newWords\n                ])\n            ];\n        }\n        // Update themes if new ones were identified\n        if (newSection.sectionName === \"reading\" && typeof newSection.content === \"string\") {\n            // Extract any new themes from the reading passage\n            const newThemes = this.extractThemesFromText(newSection.content);\n            updatedContext.mainThemes = [\n                ...new Set([\n                    ...updatedContext.mainThemes,\n                    ...newThemes\n                ])\n            ];\n        }\n        console.log(`✅ Context updated for ${newSection.sectionName}`);\n        return updatedContext;\n    }\n    // Private helper methods for extracting shared context\n    async generateLessonTitle(sourceText, lessonType, studentLevel, metadata) {\n        console.log(\"\\uD83C\\uDFAF Generating lesson title with format: 'Original Title - AI Generated Title'...\");\n        // Extract original article title from metadata\n        const originalTitle = metadata?.title ? metadata.title.replace(/\\s*-\\s*Wikipedia$/i, \"\").replace(/\\s*\\|\\s*.+$/i, \"\").trim().substring(0, 60) : null;\n        console.log(\"\\uD83D\\uDCF0 Original article title:\", originalTitle || \"Not available\");\n        try {\n            // Create Engoo-style title prompt with examples\n            const engooPrompt = `Create an engaging lesson title in Engoo style for ${studentLevel} level ${lessonType} lesson.\r\n\r\nContent: ${sourceText.substring(0, 200)}\r\n\r\nEngoo-style titles are:\r\n- Engaging and conversational (3-8 words)\r\n- Focus on the main topic or theme\r\n- Avoid generic words like \"lesson\", \"article\", \"story\"\r\n- Use active, interesting language\r\n- Examples: \"Tech Giants Go Nuclear\", \"The Rise of Digital Nomads\", \"Climate Change Solutions\"\r\n\r\nGenerate title:`;\n            const response = await this.getGoogleAI().prompt(engooPrompt, {\n                maxTokens: 60\n            });\n            const aiTitle = response.trim().replace(/['\"]/g, \"\").replace(/^(Title:?|Generate title:?)\\s*/i, \"\").replace(/\\.$/, \"\") // Remove trailing period\n            .substring(0, 60);\n            console.log(\"\\uD83E\\uDD16 AI generated Engoo-style title:\", aiTitle);\n            // Validate the AI title - should be engaging and appropriate length\n            if (aiTitle.length > 5 && aiTitle.length < 80 && !aiTitle.toLowerCase().includes(\"lesson\") && !aiTitle.toLowerCase().includes(\"article\") && aiTitle.split(\" \").length >= 2 && aiTitle.split(\" \").length <= 8) {\n                // Format: \"Original Title - AI Generated Title\"\n                if (originalTitle) {\n                    const fullTitle = `${originalTitle} - ${aiTitle}`;\n                    console.log(\"✅ Using combined title:\", fullTitle);\n                    return fullTitle;\n                } else {\n                    console.log(\"✅ Using AI-generated title only:\", aiTitle);\n                    return aiTitle;\n                }\n            }\n            console.warn(\"⚠️ AI generated invalid title, using fallback\");\n        } catch (error) {\n            console.warn(\"⚠️ AI title generation failed, using fallback:\", error.message);\n        }\n        // PRAGMATIC FALLBACK: Use metadata or generate simple title\n        // This ensures lesson generation NEVER fails due to title issues\n        // Option 1: Use original title with lesson type\n        if (originalTitle) {\n            const lessonTypeLabel = lessonType.charAt(0).toUpperCase() + lessonType.slice(1);\n            const fallbackTitle = `${originalTitle} - ${lessonTypeLabel} Lesson`;\n            console.log(\"✅ Using original title with lesson type:\", fallbackTitle);\n            return fallbackTitle;\n        }\n        // Option 2: Generate from first sentence\n        const firstSentence = sourceText.split(/[.!?]/)[0]?.trim();\n        if (firstSentence && firstSentence.length > 10 && firstSentence.length < 100) {\n            const simpleTitle = firstSentence.substring(0, 60) + (firstSentence.length > 60 ? \"...\" : \"\");\n            console.log(\"✅ Using content-based title:\", simpleTitle);\n            return simpleTitle;\n        }\n        // Option 3: Generic but functional fallback\n        const lessonTypeLabel = lessonType.charAt(0).toUpperCase() + lessonType.slice(1);\n        const genericTitle = `${lessonTypeLabel} Lesson - ${studentLevel} Level`;\n        console.log(\"✅ Using generic title:\", genericTitle);\n        return genericTitle;\n    }\n    async extractKeyVocabulary(sourceText, studentLevel) {\n        const prompt = `Extract 8-12 key vocabulary words from this text for ${studentLevel} level students. Return only the words, one per line:\r\n\r\n${sourceText.substring(0, 500)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const words = response.split(\"\\n\").map((line)=>line.trim().toLowerCase()).filter((word)=>word.length > 2 && word.length < 20).slice(0, 12);\n            return words.length >= 6 ? words : this.extractVocabularyFallback(sourceText, studentLevel);\n        } catch (error) {\n            console.log(\"⚠️ AI vocabulary extraction failed, using fallback\");\n            return this.extractVocabularyFallback(sourceText, studentLevel);\n        }\n    }\n    async extractMainThemes(sourceText, studentLevel) {\n        const prompt = `Identify 3-5 main themes or topics in this text for ${studentLevel} level students. Return only the themes, one per line:\r\n\r\n${sourceText.substring(0, 400)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const themes = response.split(\"\\n\").map((line)=>line.trim().toLowerCase()).filter((theme)=>theme.length > 3 && theme.length < 50).slice(0, 5);\n            return themes.length >= 2 ? themes : this.extractThemesFallback(sourceText);\n        } catch (error) {\n            console.log(\"⚠️ AI theme extraction failed, using fallback\");\n            return this.extractThemesFallback(sourceText);\n        }\n    }\n    async createContentSummary(sourceText, studentLevel) {\n        const prompt = `Summarize this text in 2-3 sentences for ${studentLevel} level students:\r\n\r\n${sourceText.substring(0, 600)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return response.trim().substring(0, 300);\n        } catch (error) {\n            console.log(\"⚠️ AI summary failed, using truncation\");\n            return sourceText.substring(0, 200) + \"...\";\n        }\n    }\n    // Section generation methods using shared context\n    /**\r\n   * Build level-specific warm-up prompt with content assumption detection\r\n   */ buildWarmupPrompt(context) {\n        const mainTheme = context.mainThemes[0] || \"this topic\";\n        // CEFR-specific instructions\n        const levelInstructions = {\n            \"A1\": \"Use very simple present tense questions with basic vocabulary. Questions should be about personal experiences and familiar situations.\",\n            \"A2\": \"Use simple questions with present and past tenses. Focus on personal experiences and everyday situations.\",\n            \"B1\": \"Use varied question structures with different tenses. Include questions about opinions and experiences.\",\n            \"B2\": \"Use complex question structures. Include hypothetical and analytical questions about experiences.\",\n            \"C1\": \"Use sophisticated question structures. Include abstract and evaluative questions that encourage critical thinking.\"\n        };\n        const levelInstruction = levelInstructions[context.difficultyLevel];\n        // Build prompt that explicitly avoids content assumptions\n        const prompt = `Create 3 warm-up questions for ${context.difficultyLevel} level students about the general topic of \"${mainTheme}\".\r\n\r\nCRITICAL REQUIREMENTS:\r\n1. DO NOT reference specific events, people, names, dates, or outcomes from any text\r\n2. DO NOT assume students have read or know anything about specific content\r\n3. FOCUS on students' personal experiences, opinions, and general knowledge\r\n4. Questions should activate prior knowledge about the TOPIC, not test knowledge of specific content\r\n5. Questions should build interest and mental focus for learning about this topic\r\n6. ${levelInstruction}\r\n\r\nEXAMPLES OF GOOD QUESTIONS (activate prior knowledge without content assumptions):\r\n- \"Have you ever experienced [general situation related to topic]?\"\r\n- \"What do you think about [general concept related to topic]?\"\r\n- \"In your opinion, why is [general aspect of topic] important?\"\r\n\r\nEXAMPLES OF BAD QUESTIONS (assume content knowledge):\r\n- \"What happened when [specific person] did [specific event]?\"\r\n- \"Why did [specific outcome] occur in the story?\"\r\n- \"What do you remember about [specific detail]?\"\r\n\r\nReturn ONLY 3 questions, one per line, with no numbering or extra text:`;\n        return prompt;\n    }\n    /**\r\n   * Validate warm-up questions using the comprehensive WarmupValidator\r\n   */ validateWarmupQuestions(questions, context) {\n        // Use the comprehensive validator\n        const validationResult = this.warmupValidator.validate(questions, context.difficultyLevel, {\n            mainThemes: context.mainThemes\n        });\n        // Convert validation issues to simple string array for backward compatibility\n        const issues = [\n            ...validationResult.issues.map((issue)=>issue.questionIndex !== undefined ? `${issue.message} (Question ${issue.questionIndex + 1})` : issue.message),\n            ...validationResult.warnings.map((warning)=>warning.questionIndex !== undefined ? `Warning: ${warning.message} (Question ${warning.questionIndex + 1})` : `Warning: ${warning.message}`)\n        ];\n        console.log(`📊 Warmup validation score: ${validationResult.score}/100`);\n        return {\n            isValid: validationResult.isValid,\n            issues\n        };\n    }\n    async generateWarmupWithContext(context, _previousSections) {\n        const maxAttempts = 2;\n        let attempt = 0;\n        const sectionStartTime = Date.now();\n        // Report progress at start of warmup generation\n        safeProgressCallback(this.progressCallback, {\n            step: \"Generating warmup questions\",\n            progress: this.calculateProgress(this.completedSections, \"warmup\", context.lessonType, this.phaseWeights),\n            phase: \"warmup\",\n            section: \"warmup\"\n        });\n        while(attempt < maxAttempts){\n            attempt++;\n            console.log(`🎯 Generating warm-up questions (attempt ${attempt}/${maxAttempts})`);\n            try {\n                // Build enhanced prompt\n                const prompt = this.buildWarmupPrompt(context);\n                // Generate questions\n                const response = await this.getGoogleAI().prompt(prompt);\n                const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0).map((line)=>{\n                    // Remove numbering if present\n                    return line.replace(/^\\d+[\\.)]\\s*/, \"\").trim();\n                }).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 3);\n                if (questions.length < 3) {\n                    console.log(`⚠️ Only ${questions.length} questions generated, need 3`);\n                    if (attempt < maxAttempts) continue;\n                    throw new Error(\"Insufficient questions generated after retries\");\n                }\n                // Validate questions\n                const validation = this.validateWarmupQuestions(questions, context);\n                if (!validation.isValid) {\n                    console.log(`⚠️ Validation failed:`, validation.issues);\n                    if (attempt < maxAttempts) {\n                        console.log(`🔄 Retrying with adjusted prompt...`);\n                        continue;\n                    }\n                    console.log(`⚠️ Using questions despite validation issues (max attempts reached)`);\n                } else {\n                    console.log(`✅ Warm-up questions validated successfully`);\n                }\n                // Track quality metrics\n                const generationTime = Date.now() - sectionStartTime;\n                _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"warmup\", validation.isValid ? 100 : 70, attempt, generationTime, validation.issues.length, 0);\n                const instruction = \"Have the following conversations or discussions with your tutor before reading the text:\";\n                return [\n                    instruction,\n                    ...questions\n                ];\n            } catch (error) {\n                console.error(`❌ Attempt ${attempt} failed:`, error);\n                if (attempt >= maxAttempts) {\n                    // Track failed generation\n                    _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"warmup\", 0, attempt, Date.now() - sectionStartTime, 1, 0);\n                    throw new Error(\"Failed to generate warmup questions: \" + error.message);\n                }\n            }\n        }\n        throw new Error(\"Failed to generate warmup questions after all attempts\");\n    }\n    /**\r\n   * Get the number of example sentences required for each CEFR level\r\n   */ getExampleCountForLevel(level) {\n        const exampleCounts = {\n            \"A1\": 5,\n            \"A2\": 5,\n            \"B1\": 4,\n            \"B2\": 3,\n            \"C1\": 2\n        };\n        return exampleCounts[level];\n    }\n    /**\r\n   * Build level-specific vocabulary example prompt with contextual relevance\r\n   * OPTIMIZED: Reduced token count by 60% while maintaining quality\r\n   */ buildVocabularyExamplePrompt(word, context, exampleCount) {\n        // Concise CEFR complexity guidelines\n        const levelGuidelines = {\n            \"A1\": \"5-8 words, present tense, basic vocabulary\",\n            \"A2\": \"8-12 words, simple past/future, common words\",\n            \"B1\": \"10-15 words, varied tenses, compound sentences\",\n            \"B2\": \"12-18 words, complex structures, relative clauses\",\n            \"C1\": \"15-20 words, sophisticated grammar, nuanced expressions\"\n        };\n        const themes = context.mainThemes.slice(0, 2).join(\", \");\n        const contextSnippet = context.contentSummary.substring(0, 150);\n        const prompt = `Create ${exampleCount} sentences using \"${word}\" for ${context.difficultyLevel} level.\r\n\r\nContext: ${contextSnippet}\r\nTopic: ${themes}\r\n\r\nRequirements:\r\n- Relate to the topic (${themes})\r\n- Match ${context.difficultyLevel} level: ${levelGuidelines[context.difficultyLevel]}\r\n- Show different uses of \"${word}\"\r\n- Use context-specific terms\r\n\r\nReturn ${exampleCount} sentences, one per line, no numbering:`;\n        return prompt;\n    }\n    /**\r\n   * Validate vocabulary examples for quality and relevance\r\n   */ validateVocabularyExamples(word, examples, context, expectedCount) {\n        const issues = [];\n        const warnings = [];\n        // Check example count\n        if (examples.length < expectedCount) {\n            issues.push(`Insufficient examples: expected ${expectedCount}, got ${examples.length}`);\n        }\n        // Track contextual relevance across all examples\n        let contextuallyRelevantCount = 0;\n        // Check each example for quality\n        for(let i = 0; i < examples.length; i++){\n            const example = examples[i];\n            const exampleLower = example.toLowerCase();\n            // Check if word is actually used in the example\n            const wordLower = word.toLowerCase();\n            if (!exampleLower.includes(wordLower)) {\n                issues.push(`Example ${i + 1} does not contain the word \"${word}\"`);\n            }\n            // Check minimum and maximum length based on CEFR level\n            const lengthRanges = {\n                \"A1\": {\n                    min: 5,\n                    max: 10\n                },\n                \"A2\": {\n                    min: 8,\n                    max: 15\n                },\n                \"B1\": {\n                    min: 10,\n                    max: 18\n                },\n                \"B2\": {\n                    min: 12,\n                    max: 22\n                },\n                \"C1\": {\n                    min: 15,\n                    max: 25\n                }\n            };\n            const range = lengthRanges[context.difficultyLevel];\n            const wordCount = example.split(/\\s+/).length;\n            if (wordCount < range.min) {\n                issues.push(`Example ${i + 1} too short: ${wordCount} words (minimum ${range.min} for ${context.difficultyLevel})`);\n            } else if (wordCount > range.max) {\n                warnings.push(`Example ${i + 1} may be too long: ${wordCount} words (recommended max ${range.max} for ${context.difficultyLevel})`);\n            }\n            // Check for proper sentence structure (starts with capital, ends with punctuation)\n            if (!/^[A-Z]/.test(example)) {\n                issues.push(`Example ${i + 1} should start with a capital letter`);\n            }\n            if (!/[.!?]$/.test(example)) {\n                issues.push(`Example ${i + 1} should end with punctuation`);\n            }\n            // Enhanced contextual relevance check\n            let relevanceScore = 0;\n            // Check for theme keywords (weighted heavily)\n            // Split themes into individual words and check for any significant word matches\n            const hasThemeKeyword = context.mainThemes.some((theme)=>{\n                const themeWords = theme.toLowerCase().split(/\\s+/);\n                return themeWords.some((themeWord)=>themeWord.length > 3 && ![\n                        \"the\",\n                        \"and\",\n                        \"for\",\n                        \"with\",\n                        \"from\",\n                        \"about\"\n                    ].includes(themeWord) && exampleLower.includes(themeWord));\n            });\n            if (hasThemeKeyword) relevanceScore += 2;\n            // Check for related vocabulary (moderate weight)\n            const hasRelatedVocab = context.keyVocabulary.some((vocab)=>vocab !== wordLower && vocab.length > 3 && exampleLower.includes(vocab));\n            if (hasRelatedVocab) relevanceScore += 1;\n            // Check for content summary keywords (light weight)\n            const summaryWords = context.contentSummary.toLowerCase().split(/\\s+/).filter((w)=>w.length > 4 && ![\n                    \"about\",\n                    \"their\",\n                    \"which\",\n                    \"these\",\n                    \"those\",\n                    \"there\",\n                    \"where\"\n                ].includes(w));\n            const hasSummaryKeyword = summaryWords.some((summaryWord)=>exampleLower.includes(summaryWord));\n            if (hasSummaryKeyword) relevanceScore += 1;\n            // Track contextually relevant examples\n            if (relevanceScore > 0) {\n                contextuallyRelevantCount++;\n            } else if (context.mainThemes.length > 0) {\n                warnings.push(`Example ${i + 1} may lack contextual relevance to topic (${context.mainThemes.join(\", \")})`);\n            }\n            // Check for generic/overly simple examples at higher levels\n            if ([\n                \"B2\",\n                \"C1\"\n            ].includes(context.difficultyLevel)) {\n                const genericPatterns = [\n                    /^(I|You|We|They|He|She)\\s+(am|is|are|was|were|have|has|had)\\s+/i,\n                    /\\b(very|really|so|quite)\\s+\\w+\\b/i\n                ];\n                const isGeneric = genericPatterns.some((pattern)=>pattern.test(example));\n                if (isGeneric && relevanceScore === 0) {\n                    warnings.push(`Example ${i + 1} may be too generic for ${context.difficultyLevel} level`);\n                }\n            }\n        }\n        // Check overall contextual relevance\n        const relevanceThreshold = Math.ceil(examples.length * 0.6) // At least 60% should be contextually relevant\n        ;\n        if (contextuallyRelevantCount < relevanceThreshold && context.mainThemes.length > 0) {\n            issues.push(`Only ${contextuallyRelevantCount}/${examples.length} examples are contextually relevant (need at least ${relevanceThreshold})`);\n        }\n        // Check for diversity in examples (avoid repetitive sentence structures)\n        const sentenceStarts = examples.map((ex)=>ex.split(/\\s+/).slice(0, 2).join(\" \").toLowerCase());\n        const uniqueStarts = new Set(sentenceStarts);\n        if (uniqueStarts.size < examples.length * 0.7) {\n            warnings.push(`Examples may lack structural diversity (${uniqueStarts.size} unique starts out of ${examples.length} examples)`);\n        }\n        // Log warnings for visibility but don't fail validation\n        if (warnings.length > 0) {\n            console.log(`⚠️ Vocabulary validation warnings for \"${word}\":`, warnings);\n        }\n        return {\n            isValid: issues.length === 0,\n            issues\n        };\n    }\n    async generateVocabularyWithContext(context, _previousSections) {\n        const vocabulary = [];\n        const exampleCount = this.getExampleCountForLevel(context.difficultyLevel);\n        const maxAttempts = 2;\n        // Report progress at start of vocabulary generation\n        safeProgressCallback(this.progressCallback, {\n            step: \"Generating vocabulary items\",\n            progress: this.calculateProgress(this.completedSections, \"vocabulary\", context.lessonType, this.phaseWeights),\n            phase: \"vocabulary\",\n            section: \"vocabulary\"\n        });\n        console.log(`📚 Generating vocabulary with ${exampleCount} examples per word for ${context.difficultyLevel} level`);\n        for (const word of context.keyVocabulary.slice(0, 8)){\n            let attempt = 0;\n            let examples = [];\n            let validationPassed = false;\n            while(attempt < maxAttempts && !validationPassed){\n                attempt++;\n                try {\n                    // Generate definition\n                    const definitionPrompt = `Define \"${word}\" simply for ${context.difficultyLevel} level. Context: ${context.contentSummary.substring(0, 100)}. Give only the definition:`;\n                    const meaning = await this.getGoogleAI().prompt(definitionPrompt);\n                    // Generate contextually relevant examples with enhanced prompt\n                    const examplesPrompt = this.buildVocabularyExamplePrompt(word, context, exampleCount);\n                    let examplesResponse;\n                    try {\n                        examplesResponse = await this.getGoogleAI().prompt(examplesPrompt);\n                    } catch (promptError) {\n                        // Handle MAX_TOKENS error gracefully - accept partial response\n                        if (promptError.code === \"MAX_TOKENS\" && promptError.message) {\n                            console.log(`⚠️ MAX_TOKENS hit for \"${word}\", using partial response`);\n                            examplesResponse = promptError.message;\n                        } else {\n                            throw promptError;\n                        }\n                    }\n                    examples = examplesResponse.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0).map((line)=>{\n                        // Remove numbering if present\n                        return line.replace(/^\\d+[\\.)]\\s*/, \"\").trim();\n                    }).filter((line)=>line.length > 10).slice(0, exampleCount);\n                    // If we got at least 2 examples, consider it acceptable\n                    if (examples.length >= Math.min(2, exampleCount)) {\n                        console.log(`✅ Generated ${examples.length} examples for \"${word}\" (target: ${exampleCount})`);\n                        vocabulary.push({\n                            word: this.capitalizeWord(word),\n                            meaning: meaning.trim().substring(0, 150),\n                            examples: examples\n                        });\n                        break; // Success, move to next word\n                    }\n                    // Validate examples only if we have enough\n                    const validation = this.validateVocabularyExamples(word, examples, context, exampleCount);\n                    if (!validation.isValid) {\n                        console.log(`⚠️ Validation failed for \"${word}\" (attempt ${attempt}/${maxAttempts}):`, validation.issues);\n                        if (attempt < maxAttempts) {\n                            console.log(`🔄 Retrying with adjusted prompt...`);\n                            continue;\n                        } else {\n                            console.log(`⚠️ Using examples despite validation issues (max attempts reached)`);\n                        }\n                    } else {\n                        console.log(`✅ Examples validated successfully for \"${word}\"`);\n                        validationPassed = true;\n                    }\n                    vocabulary.push({\n                        word: this.capitalizeWord(word),\n                        meaning: meaning.trim().substring(0, 150),\n                        examples: examples\n                    });\n                    break; // Success, move to next word\n                } catch (error) {\n                    console.log(`⚠️ Attempt ${attempt} failed for \"${word}\":`, error);\n                    if (attempt >= maxAttempts) {\n                        console.log(`❌ Failed to generate vocabulary for ${word} after ${maxAttempts} attempts`);\n                        break;\n                    }\n                }\n            }\n        }\n        const instruction = {\n            word: \"INSTRUCTION\",\n            meaning: \"Study the following words with your tutor before reading the text:\",\n            examples: []\n        };\n        return [\n            instruction,\n            ...vocabulary\n        ];\n    }\n    async generateReadingWithContext(context, _previousSections) {\n        // Report progress at start of reading generation\n        safeProgressCallback(this.progressCallback, {\n            step: \"Generating reading passage\",\n            progress: this.calculateProgress(this.completedSections, \"reading\", context.lessonType, this.phaseWeights),\n            phase: \"reading\",\n            section: \"reading\"\n        });\n        // Use vocabulary from previous sections if available\n        const vocabularySection = _previousSections.find((s)=>s.sectionName === \"vocabulary\");\n        const vocabularyWords = vocabularySection ? vocabularySection.content.filter((item)=>item.word !== \"INSTRUCTION\").map((item)=>item.word).slice(0, 5) : context.keyVocabulary.slice(0, 5);\n        const prompt = `Rewrite this text for ${context.difficultyLevel} level students. \r\nUse these vocabulary words: ${vocabularyWords.join(\", \")}\r\nKeep it 200-400 words:\r\n\r\n${context.sourceText}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const instruction = \"Read the following text carefully. Your tutor will help you with any difficult words or concepts:\";\n            return `${instruction}\\n\\n${response.trim()}`;\n        } catch (error) {\n            throw new Error(\"Failed to generate reading passage: \" + error.message);\n        }\n    }\n    async generateComprehensionWithContext(context, _previousSections) {\n        // Report progress at start of comprehension generation\n        safeProgressCallback(this.progressCallback, {\n            step: \"Generating comprehension questions\",\n            progress: this.calculateProgress(this.completedSections, \"comprehension\", context.lessonType, this.phaseWeights),\n            phase: \"comprehension\",\n            section: \"comprehension\"\n        });\n        const prompt = `Create 5 ${context.difficultyLevel} comprehension questions about this content:\r\n${context.contentSummary}\r\nReturn only questions, one per line:`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 5);\n            // PRAGMATIC: Accept 3+ questions instead of requiring exactly 5\n            // Better to have a lesson with 3 questions than no lesson at all\n            if (questions.length < 3) {\n                console.warn(`⚠️ Only generated ${questions.length} comprehension questions, need at least 3`);\n                throw new Error(\"Insufficient comprehension questions generated\");\n            }\n            if (questions.length < 5) {\n                console.warn(`⚠️ Generated ${questions.length} comprehension questions (target was 5, but acceptable)`);\n            }\n            const instruction = \"After reading the text, answer these comprehension questions:\";\n            return [\n                instruction,\n                ...questions\n            ];\n        } catch (error) {\n            throw new Error(\"Failed to generate comprehension questions: \" + error.message);\n        }\n    }\n    /**\r\n   * Build level-specific discussion question prompt with appropriate complexity\r\n   */ buildDiscussionPrompt(context) {\n        const themes = context.mainThemes.slice(0, 2).join(\" and \");\n        // CEFR-specific question type instructions with detailed guidance\n        const levelInstructions = {\n            \"A1\": {\n                description: \"Simple question structures with basic vocabulary focusing on familiar topics and personal experiences\",\n                questionTypes: [\n                    'Yes/No questions: \"Do you like...?\", \"Have you ever...?\", \"Can you...?\"',\n                    'Simple Wh- questions: \"What is your favorite...?\", \"Where do you...?\", \"When do you...?\"',\n                    'Personal preference questions: \"Which do you prefer...?\", \"What do you enjoy...?\"'\n                ],\n                structures: [\n                    \"Use present simple and simple past tenses only\",\n                    \"Keep questions short (4-10 words)\",\n                    \"Use common, everyday vocabulary\",\n                    \"Focus on concrete, tangible topics\"\n                ],\n                responseExpectation: \"Students should be able to answer with 1-3 simple sentences using basic vocabulary\"\n            },\n            \"A2\": {\n                description: \"Simple questions with multiple tenses focusing on personal experiences and everyday situations\",\n                questionTypes: [\n                    'Opinion questions: \"What do you think about...?\", \"Do you agree that...?\"',\n                    'Experience questions: \"Can you describe...?\", \"What happened when...?\"',\n                    'Simple hypotheticals: \"What would you do if...?\", \"Where would you go...?\"'\n                ],\n                structures: [\n                    \"Use present, past, and future tenses\",\n                    \"Include simple conditionals (first conditional)\",\n                    \"Keep questions moderate length (5-12 words)\",\n                    \"Use familiar vocabulary with some new words\"\n                ],\n                responseExpectation: \"Students should be able to answer with 3-5 sentences, expressing simple opinions and describing experiences\"\n            },\n            \"B1\": {\n                description: \"Varied question structures including opinion questions and comparisons\",\n                questionTypes: [\n                    'Opinion and justification: \"Why do you think...?\", \"Do you believe that...? Why?\"',\n                    'Comparison questions: \"How does X compare to Y?\", \"What are the differences between...?\"',\n                    'Advantage/disadvantage questions: \"What are the advantages of...?\", \"What are the pros and cons of...?\"'\n                ],\n                structures: [\n                    \"Use varied tenses including present perfect\",\n                    \"Include first and second conditionals\",\n                    \"Use moderate complexity (6-15 words)\",\n                    \"Incorporate topic-specific vocabulary\"\n                ],\n                responseExpectation: \"Students should provide 5-8 sentences with explanations, examples, and personal opinions\"\n            },\n            \"B2\": {\n                description: \"Complex question structures requiring analytical thinking and justification\",\n                questionTypes: [\n                    'Analytical questions: \"To what extent do you agree that...?\", \"What might be the consequences of...?\"',\n                    'Evaluation questions: \"How would you evaluate...?\", \"What are the implications of...?\"',\n                    'Hypothetical scenarios: \"How would the situation change if...?\", \"What might happen if...?\"'\n                ],\n                structures: [\n                    \"Use complex tenses including conditionals (types 1-3)\",\n                    \"Include passive voice and modal verbs\",\n                    \"Use sophisticated vocabulary and expressions\",\n                    \"Questions should be 8-18 words\"\n                ],\n                responseExpectation: \"Students should provide detailed responses (8-12 sentences) with analysis, examples, and counterarguments\"\n            },\n            \"C1\": {\n                description: \"Sophisticated question structures requiring evaluative and critical thinking\",\n                questionTypes: [\n                    'Evaluative questions: \"What are the broader implications of...?\", \"How might one assess...?\"',\n                    'Critical analysis: \"In what ways could this be interpreted...?\", \"To what degree does...?\"',\n                    'Abstract reasoning: \"How might one reconcile...?\", \"What underlying assumptions...?\"'\n                ],\n                structures: [\n                    \"Use advanced grammatical structures and nuanced expressions\",\n                    \"Include abstract concepts and theoretical frameworks\",\n                    \"Use sophisticated vocabulary and idiomatic expressions\",\n                    \"Questions should be 10-20 words with complex syntax\"\n                ],\n                responseExpectation: \"Students should provide comprehensive responses (12+ sentences) with critical analysis, multiple perspectives, and sophisticated argumentation\"\n            }\n        };\n        const levelConfig = levelInstructions[context.difficultyLevel];\n        const prompt = `Create exactly 5 discussion questions for ${context.difficultyLevel} level students about ${themes}.\r\n\r\nSOURCE CONTEXT: ${context.contentSummary}\r\nRELATED VOCABULARY: ${context.keyVocabulary.slice(0, 5).join(\", \")}\r\n\r\nLEVEL-SPECIFIC REQUIREMENTS FOR ${context.difficultyLevel}:\r\n${levelConfig.description}\r\n\r\nQUESTION TYPES TO USE:\r\n${levelConfig.questionTypes.map((type, i)=>`${i + 1}. ${type}`).join(\"\\n\")}\r\n\r\nSTRUCTURAL GUIDELINES:\r\n${levelConfig.structures.map((struct, i)=>`- ${struct}`).join(\"\\n\")}\r\n\r\nRESPONSE EXPECTATION:\r\n${levelConfig.responseExpectation}\r\n\r\nCRITICAL REQUIREMENTS:\r\n1. Generate EXACTLY 5 questions - no more, no less\r\n2. Questions MUST relate directly to the source material themes: ${themes}\r\n3. Use vocabulary from the source context when appropriate: ${context.keyVocabulary.slice(0, 5).join(\", \")}\r\n4. Each question should explore a DIFFERENT aspect of the topic\r\n5. Questions should encourage EXTENDED responses appropriate to ${context.difficultyLevel} level\r\n6. Vary question types across the 5 questions (don't repeat the same structure)\r\n7. Questions should progress in complexity within the ${context.difficultyLevel} level range\r\n\r\nQUESTION PROGRESSION STRATEGY:\r\n- Question 1: Personal connection or basic understanding (easiest within level)\r\n- Question 2: Specific aspect from source material\r\n- Question 3: Comparison, contrast, or different perspective\r\n- Question 4: Application or implication of concepts\r\n- Question 5: Evaluation or broader significance (most challenging within level)\r\n\r\nEXAMPLES OF GOOD ${context.difficultyLevel} QUESTIONS:\r\n${this.getDiscussionExamples(context.difficultyLevel, themes)}\r\n\r\nReturn ONLY 5 questions, one per line, with no numbering, bullets, or extra text:`;\n        return prompt;\n    }\n    /**\r\n   * Get example questions for each CEFR level to guide AI generation\r\n   */ getDiscussionExamples(level, themes) {\n        const examples = {\n            \"A1\": [\n                `\"Do you like ${themes}?\"`,\n                `\"What is your favorite thing about ${themes}?\"`,\n                `\"Have you ever tried ${themes}?\"`\n            ],\n            \"A2\": [\n                `\"What do you think about ${themes}?\"`,\n                `\"Can you describe your experience with ${themes}?\"`,\n                `\"What would you do if you could learn more about ${themes}?\"`\n            ],\n            \"B1\": [\n                `\"Why do you think ${themes} is important?\"`,\n                `\"How does ${themes} compare to similar topics?\"`,\n                `\"What are the advantages and disadvantages of ${themes}?\"`\n            ],\n            \"B2\": [\n                `\"To what extent do you agree that ${themes} has changed society?\"`,\n                `\"What might be the long-term consequences of ${themes}?\"`,\n                `\"How would you evaluate the impact of ${themes}?\"`\n            ],\n            \"C1\": [\n                `\"What are the broader implications of ${themes} for modern society?\"`,\n                `\"In what ways could different perspectives on ${themes} be reconciled?\"`,\n                `\"How might one critically assess the underlying assumptions about ${themes}?\"`\n            ]\n        };\n        return examples[level].join(\"\\n\");\n    }\n    /**\r\n   * Validate discussion questions for count and complexity\r\n   */ validateDiscussionQuestions(questions, context) {\n        const issues = [];\n        const warnings = [];\n        // Check exact count (requirement 4.1)\n        if (questions.length !== 5) {\n            issues.push(`Incorrect question count: expected exactly 5, got ${questions.length}`);\n        }\n        // Check each question for quality\n        for(let i = 0; i < questions.length; i++){\n            const question = questions[i];\n            const questionLower = question.toLowerCase();\n            // Check that it's actually a question\n            if (!question.endsWith(\"?\")) {\n                issues.push(`Question ${i + 1} does not end with a question mark`);\n            }\n            // Check minimum length\n            if (question.length < 15) {\n                issues.push(`Question ${i + 1} is too short (${question.length} characters)`);\n            }\n            // Check that it starts with a capital letter\n            if (!/^[A-Z]/.test(question)) {\n                issues.push(`Question ${i + 1} should start with a capital letter`);\n            }\n            // Check for appropriate question words/structures based on CEFR level\n            const questionWords = [\n                \"what\",\n                \"why\",\n                \"how\",\n                \"when\",\n                \"where\",\n                \"who\",\n                \"which\",\n                \"do\",\n                \"does\",\n                \"did\",\n                \"can\",\n                \"could\",\n                \"would\",\n                \"should\",\n                \"have\",\n                \"has\",\n                \"is\",\n                \"are\",\n                \"was\",\n                \"were\",\n                \"to\"\n            ];\n            const startsWithQuestionWord = questionWords.some((word)=>questionLower.startsWith(word + \" \") || questionLower.startsWith(word + \"'\"));\n            if (!startsWithQuestionWord) {\n                warnings.push(`Question ${i + 1} may not have a proper question structure`);\n            }\n            // Check complexity appropriateness for level (requirements 4.2, 4.3, 4.4)\n            const complexityCheck = this.checkQuestionComplexity(question, context.difficultyLevel);\n            if (!complexityCheck.isAppropriate) {\n                warnings.push(`Question ${i + 1}: ${complexityCheck.warning}`);\n            }\n            // Check if question encourages extended responses (requirement 4.6)\n            const extendedResponseCheck = this.checkExtendedResponsePotential(question, context.difficultyLevel);\n            if (!extendedResponseCheck.encouragesExtended) {\n                warnings.push(`Question ${i + 1}: ${extendedResponseCheck.warning}`);\n            }\n        }\n        // Check for diversity in question types\n        const questionStarts = questions.map((q)=>q.split(/\\s+/).slice(0, 2).join(\" \").toLowerCase());\n        const uniqueStarts = new Set(questionStarts);\n        if (uniqueStarts.size < 3) {\n            warnings.push(`Questions lack diversity (only ${uniqueStarts.size} unique question types)`);\n        }\n        // Check for source material relevance (requirement 4.5)\n        const hasRelevance = this.checkDiscussionRelevance(questions, context);\n        if (!hasRelevance) {\n            warnings.push(\"Questions may not sufficiently relate to the source material\");\n        }\n        // Log warnings for visibility\n        if (warnings.length > 0) {\n            console.log(`⚠️ Discussion validation warnings:`, warnings);\n        }\n        return {\n            isValid: issues.length === 0,\n            issues\n        };\n    }\n    /**\r\n   * Check if question encourages extended responses appropriate to level (requirement 4.6)\r\n   */ checkExtendedResponsePotential(question, level) {\n        const questionLower = question.toLowerCase();\n        // Yes/No questions generally don't encourage extended responses\n        // However, they can be acceptable at A1/A2 if they're open to elaboration\n        const isYesNoQuestion = /^(do|does|did|can|could|would|should|have|has|had|is|are|was|were)\\s+/i.test(question);\n        if (isYesNoQuestion) {\n            // At higher levels, yes/no questions are problematic\n            if ([\n                \"B2\",\n                \"C1\"\n            ].includes(level)) {\n                return {\n                    encouragesExtended: false,\n                    warning: `Yes/No question structure may not encourage extended responses at ${level} level`\n                };\n            }\n            // At B1, warn but don't fail\n            if (level === \"B1\") {\n                return {\n                    encouragesExtended: true,\n                    warning: `Yes/No question - ensure it encourages elaboration beyond yes/no`\n                };\n            }\n        // At A1/A2, yes/no questions are acceptable\n        }\n        // Check for open-ended question words that encourage extended responses\n        const openEndedStarters = {\n            \"A1\": [\n                \"what\",\n                \"where\",\n                \"when\",\n                \"who\"\n            ],\n            \"A2\": [\n                \"what\",\n                \"where\",\n                \"when\",\n                \"who\",\n                \"why\",\n                \"how\"\n            ],\n            \"B1\": [\n                \"why\",\n                \"how\",\n                \"what do you think\",\n                \"what are\"\n            ],\n            \"B2\": [\n                \"why\",\n                \"how\",\n                \"to what extent\",\n                \"what might\",\n                \"how would\",\n                \"what are the\"\n            ],\n            \"C1\": [\n                \"why\",\n                \"how\",\n                \"to what extent\",\n                \"in what ways\",\n                \"what are the implications\",\n                \"how might one\"\n            ]\n        };\n        const expectedStarters = openEndedStarters[level];\n        const hasOpenEndedStarter = expectedStarters.some((starter)=>questionLower.startsWith(starter));\n        // For higher levels, check for analytical/evaluative language\n        if ([\n            \"B2\",\n            \"C1\"\n        ].includes(level)) {\n            const analyticalWords = [\n                \"why\",\n                \"how\",\n                \"extent\",\n                \"implications\",\n                \"consequences\",\n                \"evaluate\",\n                \"analyze\",\n                \"compare\",\n                \"contrast\",\n                \"assess\",\n                \"consider\",\n                \"might\",\n                \"could\",\n                \"would\",\n                \"perspectives\",\n                \"interpret\",\n                \"reconcile\"\n            ];\n            const hasAnalyticalLanguage = analyticalWords.some((word)=>questionLower.includes(word));\n            if (!hasAnalyticalLanguage && !hasOpenEndedStarter) {\n                return {\n                    encouragesExtended: false,\n                    warning: `Question lacks analytical language expected at ${level} level to encourage extended responses`\n                };\n            }\n        }\n        // For B1, check for opinion/comparison language\n        if (level === \"B1\") {\n            const opinionWords = [\n                \"think\",\n                \"believe\",\n                \"opinion\",\n                \"compare\",\n                \"prefer\",\n                \"advantages\",\n                \"disadvantages\",\n                \"why\",\n                \"how\"\n            ];\n            const hasOpinionLanguage = opinionWords.some((word)=>questionLower.includes(word));\n            if (!hasOpinionLanguage && !hasOpenEndedStarter) {\n                return {\n                    encouragesExtended: true,\n                    warning: `Question could benefit from opinion/comparison language to encourage extended responses at B1 level`\n                };\n            }\n        }\n        return {\n            encouragesExtended: true\n        };\n    }\n    /**\r\n   * Check if question complexity matches CEFR level\r\n   */ checkQuestionComplexity(question, level) {\n        const questionLower = question.toLowerCase();\n        const wordCount = question.split(/\\s+/).length;\n        // Define complexity indicators for each level\n        const complexityIndicators = {\n            \"A1\": {\n                minWords: 4,\n                maxWords: 12,\n                expectedPatterns: [\n                    \"do you\",\n                    \"what is\",\n                    \"can you\",\n                    \"have you\"\n                ],\n                avoidPatterns: [\n                    \"to what extent\",\n                    \"how might\",\n                    \"in what ways\"\n                ]\n            },\n            \"A2\": {\n                minWords: 5,\n                maxWords: 15,\n                expectedPatterns: [\n                    \"what do you think\",\n                    \"can you describe\",\n                    \"what would you\"\n                ],\n                avoidPatterns: [\n                    \"to what extent\",\n                    \"how might one\",\n                    \"what are the implications\"\n                ]\n            },\n            \"B1\": {\n                minWords: 6,\n                maxWords: 18,\n                expectedPatterns: [\n                    \"why do you think\",\n                    \"how does\",\n                    \"what are the\",\n                    \"do you agree\"\n                ],\n                avoidPatterns: [\n                    \"to what extent\",\n                    \"how might one reconcile\"\n                ]\n            },\n            \"B2\": {\n                minWords: 8,\n                maxWords: 22,\n                expectedPatterns: [\n                    \"to what extent\",\n                    \"what might be\",\n                    \"how would you\",\n                    \"what are the consequences\"\n                ],\n                avoidPatterns: []\n            },\n            \"C1\": {\n                minWords: 10,\n                maxWords: 25,\n                expectedPatterns: [\n                    \"what are the implications\",\n                    \"how might one\",\n                    \"in what ways\",\n                    \"to what extent\"\n                ],\n                avoidPatterns: []\n            }\n        };\n        const indicators = complexityIndicators[level];\n        // Check word count\n        if (wordCount < indicators.minWords) {\n            return {\n                isAppropriate: false,\n                warning: `Question may be too simple for ${level} level (${wordCount} words, expected ${indicators.minWords}+)`\n            };\n        }\n        if (wordCount > indicators.maxWords) {\n            return {\n                isAppropriate: true,\n                warning: `Question may be too complex for ${level} level (${wordCount} words, recommended max ${indicators.maxWords})`\n            };\n        }\n        // Check for inappropriate patterns (too complex for level)\n        if (indicators.avoidPatterns.length > 0) {\n            const hasAvoidPattern = indicators.avoidPatterns.some((pattern)=>questionLower.includes(pattern));\n            if (hasAvoidPattern) {\n                return {\n                    isAppropriate: false,\n                    warning: `Question structure may be too advanced for ${level} level`\n                };\n            }\n        }\n        // For lower levels, check if question is too complex\n        if ([\n            \"A1\",\n            \"A2\"\n        ].includes(level)) {\n            const complexPatterns = [\n                \"implications\",\n                \"consequences\",\n                \"reconcile\",\n                \"evaluate\",\n                \"analyze\",\n                \"synthesize\"\n            ];\n            const hasComplexPattern = complexPatterns.some((pattern)=>questionLower.includes(pattern));\n            if (hasComplexPattern) {\n                return {\n                    isAppropriate: false,\n                    warning: `Question vocabulary may be too advanced for ${level} level`\n                };\n            }\n        }\n        return {\n            isAppropriate: true\n        };\n    }\n    /**\r\n   * Check if discussion questions relate to source material\r\n   */ checkDiscussionRelevance(questions, context) {\n        let relevantCount = 0;\n        for (const question of questions){\n            const questionLower = question.toLowerCase();\n            // Check for theme keywords\n            const hasThemeKeyword = context.mainThemes.some((theme)=>{\n                const themeWords = theme.toLowerCase().split(/\\s+/);\n                return themeWords.some((themeWord)=>themeWord.length > 3 && ![\n                        \"the\",\n                        \"and\",\n                        \"for\",\n                        \"with\",\n                        \"from\",\n                        \"about\",\n                        \"that\",\n                        \"this\"\n                    ].includes(themeWord) && questionLower.includes(themeWord));\n            });\n            // Check for vocabulary keywords\n            const hasVocabKeyword = context.keyVocabulary.some((vocab)=>vocab.length > 3 && questionLower.includes(vocab));\n            // Check for summary keywords\n            const summaryWords = context.contentSummary.toLowerCase().split(/\\s+/).filter((w)=>w.length > 4 && ![\n                    \"about\",\n                    \"their\",\n                    \"which\",\n                    \"these\",\n                    \"those\",\n                    \"there\",\n                    \"where\",\n                    \"would\",\n                    \"could\",\n                    \"should\"\n                ].includes(w));\n            const hasSummaryKeyword = summaryWords.some((summaryWord)=>questionLower.includes(summaryWord));\n            if (hasThemeKeyword || hasVocabKeyword || hasSummaryKeyword) {\n                relevantCount++;\n            }\n        }\n        // At least 60% of questions should be contextually relevant\n        return relevantCount >= Math.ceil(questions.length * 0.6);\n    }\n    async generateDiscussionWithContext(context, _previousSections) {\n        const maxAttempts = 2;\n        let attempt = 0;\n        const sectionStartTime = Date.now();\n        // Report progress at start of discussion generation\n        safeProgressCallback(this.progressCallback, {\n            step: \"Generating discussion questions\",\n            progress: this.calculateProgress(this.completedSections, \"discussion\", context.lessonType, this.phaseWeights),\n            phase: \"discussion\",\n            section: \"discussion\"\n        });\n        while(attempt < maxAttempts){\n            attempt++;\n            console.log(`🎯 Generating discussion questions (attempt ${attempt}/${maxAttempts})`);\n            try {\n                // Build enhanced prompt\n                const prompt = this.buildDiscussionPrompt(context);\n                // Generate questions\n                const response = await this.getGoogleAI().prompt(prompt);\n                const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0).map((line)=>{\n                    // Remove numbering if present\n                    return line.replace(/^\\d+[\\.)]\\s*/, \"\").trim();\n                }).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 5);\n                // Validate questions using new validator\n                const validation = _section_validators__WEBPACK_IMPORTED_MODULE_2__.discussionValidator.validate(questions, context.difficultyLevel);\n                if (!validation.isValid) {\n                    console.log(`⚠️ Validation failed:`, validation.issues);\n                    if (attempt < maxAttempts) {\n                        console.log(`🔄 Retrying with adjusted prompt...`);\n                        continue;\n                    }\n                    console.log(`⚠️ Using questions despite validation issues (max attempts reached)`);\n                } else {\n                    console.log(`✅ Discussion questions validated successfully`);\n                }\n                // Track quality metrics\n                const generationTime = Date.now() - sectionStartTime;\n                _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"discussion\", validation.score, attempt, generationTime, validation.issues.length, validation.warnings.length);\n                const instruction = \"Discuss these questions with your tutor to explore the topic in depth:\";\n                return [\n                    instruction,\n                    ...questions\n                ];\n            } catch (error) {\n                console.error(`❌ Attempt ${attempt} failed:`, error);\n                if (attempt >= maxAttempts) {\n                    // Track failed generation\n                    _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"discussion\", 0, attempt, Date.now() - sectionStartTime, 1, 0);\n                    throw new Error(\"Failed to generate discussion questions: \" + error.message);\n                }\n            }\n        }\n        throw new Error(\"Failed to generate discussion questions after all attempts\");\n    }\n    /**\r\n   * Repair incomplete JSON by closing open structures\r\n   */ repairIncompleteJSON(jsonStr) {\n        let repaired = jsonStr.trim();\n        // Count open and close braces/brackets\n        const openBraces = (repaired.match(/\\{/g) || []).length;\n        const closeBraces = (repaired.match(/\\}/g) || []).length;\n        const openBrackets = (repaired.match(/\\[/g) || []).length;\n        const closeBrackets = (repaired.match(/\\]/g) || []).length;\n        // Close incomplete strings\n        const quoteCount = (repaired.match(/\"/g) || []).length;\n        if (quoteCount % 2 !== 0) {\n            repaired += '\"';\n        }\n        // Close incomplete arrays\n        for(let i = 0; i < openBrackets - closeBrackets; i++){\n            repaired += \"]\";\n        }\n        // Close incomplete objects\n        for(let i = 0; i < openBraces - closeBraces; i++){\n            repaired += \"}\";\n        }\n        console.log(`🔧 Repaired JSON: added ${openBraces - closeBraces} braces, ${openBrackets - closeBrackets} brackets`);\n        return repaired;\n    }\n    /**\r\n   * Build comprehensive grammar prompt with form, usage, and practice exercises\r\n   * OPTIMIZED: Reduced token count by 70% and requesting concise output\r\n   */ buildGrammarPrompt(context) {\n        // Concise level-appropriate grammar points\n        const levelPoints = {\n            \"A1\": \"present simple, articles, basic prepositions\",\n            \"A2\": \"past simple, comparatives, modal verbs\",\n            \"B1\": \"present perfect, conditionals, passive voice\",\n            \"B2\": \"relative clauses, advanced conditionals, reported speech\",\n            \"C1\": \"subjunctive, cleft sentences, inversion\"\n        };\n        const prompt = `Identify ONE grammar point from this text for ${context.difficultyLevel} level.\r\n\r\nText: ${context.sourceText.substring(0, 200)}\r\n\r\nSuggested: ${levelPoints[context.difficultyLevel]}\r\n\r\nReturn CONCISE JSON (brief explanations, 3 examples, 3 exercises):\r\n{\r\n  \"grammarPoint\": \"Name\",\r\n  \"explanation\": {\r\n    \"form\": \"How to form (1 sentence)\",\r\n    \"usage\": \"When to use (1 sentence)\",\r\n    \"levelNotes\": \"Level note (1 sentence)\"\r\n  },\r\n  \"examples\": [\"example 1\", \"example 2\", \"example 3\"],\r\n  \"exercises\": [\r\n    {\"prompt\": \"Exercise 1\", \"answer\": \"Answer 1\", \"explanation\": \"Why\"},\r\n    {\"prompt\": \"Exercise 2\", \"answer\": \"Answer 2\", \"explanation\": \"Why\"},\r\n    {\"prompt\": \"Exercise 3\", \"answer\": \"Answer 3\", \"explanation\": \"Why\"}\r\n  ]\r\n}`;\n        return prompt;\n    }\n    /**\r\n   * Validate grammar section for completeness and quality\r\n   */ validateGrammarSection(grammarData, context) {\n        const issues = [];\n        // Check required fields exist\n        if (!grammarData.grammarPoint || typeof grammarData.grammarPoint !== \"string\") {\n            issues.push(\"Missing or invalid grammarPoint\");\n        }\n        if (!grammarData.explanation || typeof grammarData.explanation !== \"object\") {\n            issues.push(\"Missing or invalid explanation object\");\n        } else {\n            // Check explanation has both form and usage\n            if (!grammarData.explanation.form || grammarData.explanation.form.length < 20) {\n                issues.push(\"Missing or insufficient form explanation (minimum 20 characters)\");\n            }\n            if (!grammarData.explanation.usage || grammarData.explanation.usage.length < 30) {\n                issues.push(\"Missing or insufficient usage explanation (minimum 30 characters)\");\n            }\n        }\n        // Check examples array\n        if (!Array.isArray(grammarData.examples)) {\n            issues.push(\"Examples must be an array\");\n        } else {\n            if (grammarData.examples.length < 3) {\n                issues.push(`Insufficient examples: expected minimum 3, got ${grammarData.examples.length}`);\n            }\n            // Validate each example\n            grammarData.examples.forEach((example, index)=>{\n                if (typeof example !== \"string\") {\n                    issues.push(`Example ${index + 1} must be a string`);\n                } else if (example.length < 10) {\n                    issues.push(`Example ${index + 1} too short (minimum 10 characters)`);\n                } else if (!/^[A-Z]/.test(example)) {\n                    issues.push(`Example ${index + 1} should start with capital letter`);\n                } else if (!/[.!?]$/.test(example)) {\n                    issues.push(`Example ${index + 1} should end with punctuation`);\n                }\n            });\n        }\n        // Check exercises array\n        if (!Array.isArray(grammarData.exercises)) {\n            issues.push(\"Exercises must be an array\");\n        } else {\n            if (grammarData.exercises.length < 3) {\n                issues.push(`Insufficient exercises: expected minimum 3, got ${grammarData.exercises.length}`);\n            }\n            // Validate each exercise\n            grammarData.exercises.forEach((exercise, index)=>{\n                if (typeof exercise !== \"object\") {\n                    issues.push(`Exercise ${index + 1} must be an object`);\n                } else {\n                    if (!exercise.prompt || typeof exercise.prompt !== \"string\" || exercise.prompt.length < 10) {\n                        issues.push(`Exercise ${index + 1} missing or invalid prompt`);\n                    }\n                    if (!exercise.answer || typeof exercise.answer !== \"string\" || exercise.answer.length < 1) {\n                        issues.push(`Exercise ${index + 1} missing or invalid answer`);\n                    }\n                }\n            });\n        }\n        // Check contextual relevance\n        if (grammarData.examples && Array.isArray(grammarData.examples)) {\n            const hasContextualRelevance = grammarData.examples.some((example)=>{\n                const exampleLower = example.toLowerCase();\n                return context.mainThemes.some((theme)=>{\n                    const themeWords = theme.toLowerCase().split(/\\s+/);\n                    return themeWords.some((word)=>word.length > 3 && exampleLower.includes(word));\n                });\n            });\n            if (!hasContextualRelevance && context.mainThemes.length > 0) {\n                issues.push(\"Examples lack contextual relevance to source material\");\n            }\n        }\n        return {\n            isValid: issues.length === 0,\n            issues\n        };\n    }\n    async generateGrammarWithContext(context, _previousSections) {\n        const maxAttempts = 2;\n        let attempt = 0;\n        const sectionStartTime = Date.now();\n        // Report progress at start of grammar generation\n        safeProgressCallback(this.progressCallback, {\n            step: \"Generating grammar section\",\n            progress: this.calculateProgress(this.completedSections, \"grammar\", context.lessonType, this.phaseWeights),\n            phase: \"grammar\",\n            section: \"grammar\"\n        });\n        while(attempt < maxAttempts){\n            attempt++;\n            console.log(`📚 Generating comprehensive grammar section (attempt ${attempt}/${maxAttempts})`);\n            try {\n                // Build enhanced grammar prompt\n                const prompt = this.buildGrammarPrompt(context);\n                // Generate grammar section with increased token limit\n                let response;\n                try {\n                    // Increase maxOutputTokens to 3000 to allow complete JSON response\n                    response = await this.getGoogleAI().prompt(prompt, {\n                        maxTokens: 3000\n                    });\n                } catch (promptError) {\n                    // Handle MAX_TOKENS error - accept partial response if available\n                    if (promptError.code === \"MAX_TOKENS\") {\n                        console.log(`⚠️ MAX_TOKENS hit in grammar generation`);\n                        // Don't retry - the error means we got no content at all\n                        // If we got partial content, it would have been returned\n                        throw new Error(\"Grammar generation failed: No content returned due to MAX_TOKENS\");\n                    } else {\n                        throw promptError;\n                    }\n                }\n                console.log(`📝 Raw grammar response (${response.length} chars)`);\n                // Parse JSON response with better error handling and repair\n                let grammarData;\n                try {\n                    // Remove markdown code blocks if present\n                    let cleanResponse = response.replace(/```json\\s*/g, \"\").replace(/```\\s*/g, \"\").trim();\n                    // Try to extract JSON from response\n                    const jsonMatch = cleanResponse.match(/\\{[\\s\\S]*\\}/);\n                    if (jsonMatch) {\n                        let jsonStr = jsonMatch[0];\n                        console.log(`🔍 Attempting to parse JSON (${jsonStr.length} chars)`);\n                        // Try to repair incomplete JSON\n                        if (!jsonStr.trim().endsWith(\"}\")) {\n                            console.log(`⚠️ JSON appears incomplete, attempting repair...`);\n                            // Try to close incomplete structures\n                            jsonStr = this.repairIncompleteJSON(jsonStr);\n                        }\n                        try {\n                            grammarData = JSON.parse(jsonStr);\n                            console.log(`✅ JSON parsed successfully`);\n                        } catch (parseErr) {\n                            console.log(`⚠️ JSON parsing failed after repair attempt`);\n                            if (attempt < maxAttempts) {\n                                console.log(`🔄 Retrying with adjusted prompt...`);\n                                continue;\n                            }\n                            throw parseErr;\n                        }\n                    } else {\n                        console.log(`🔍 No JSON found in response`);\n                        if (attempt < maxAttempts) {\n                            console.log(`🔄 Retrying...`);\n                            continue;\n                        }\n                        throw new Error(\"No JSON found in response\");\n                    }\n                } catch (parseError) {\n                    console.log(`⚠️ JSON parsing failed:`, parseError);\n                    if (attempt < maxAttempts) {\n                        console.log(`🔄 Retrying with adjusted prompt...`);\n                        continue;\n                    }\n                    throw new Error(\"Failed to parse grammar JSON response\");\n                }\n                // Validate grammar section using new validator\n                const grammarSection = {\n                    rule: grammarData.explanation?.form || \"\",\n                    form: grammarData.explanation?.form || \"\",\n                    usage: grammarData.explanation?.usage || \"\",\n                    examples: grammarData.examples || [],\n                    exercises: grammarData.exercises || []\n                };\n                const validation = _section_validators__WEBPACK_IMPORTED_MODULE_2__.grammarValidator.validate(grammarSection, context.difficultyLevel);\n                if (!validation.isValid) {\n                    console.log(`⚠️ Grammar validation failed:`, validation.issues);\n                    if (attempt < maxAttempts) {\n                        console.log(`🔄 Retrying with adjusted prompt...`);\n                        continue;\n                    }\n                    console.log(`⚠️ Using grammar section despite validation issues (max attempts reached)`);\n                } else {\n                    console.log(`✅ Grammar section validated successfully`);\n                }\n                // Track quality metrics\n                const generationTime = Date.now() - sectionStartTime;\n                _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"grammar\", validation.score, attempt, generationTime, validation.issues.length, validation.warnings.length);\n                // Return the comprehensive grammar structure\n                return {\n                    focus: grammarData.grammarPoint,\n                    explanation: grammarData.explanation,\n                    examples: grammarData.examples,\n                    exercises: grammarData.exercises\n                };\n            } catch (error) {\n                console.error(`❌ Attempt ${attempt} failed:`, error);\n                if (attempt >= maxAttempts) {\n                    // Track failed generation\n                    _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"grammar\", 0, attempt, Date.now() - sectionStartTime, 1, 0);\n                    throw new Error(`Failed to generate grammar section after ${maxAttempts} attempts: ${error.message}`);\n                }\n            }\n        }\n        throw new Error(\"Failed to generate grammar section after all attempts\");\n    }\n    /**\r\n   * Parse pronunciation word response from structured text format\r\n   */ parsePronunciationWordResponse(response, word) {\n        const lines = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0);\n        const result = {\n            word: word,\n            ipa: \"\",\n            difficultSounds: [],\n            tips: [],\n            practiceSentence: \"\"\n        };\n        for (const line of lines){\n            if (line.startsWith(\"WORD:\")) {\n                result.word = line.substring(5).trim();\n            } else if (line.startsWith(\"IPA:\")) {\n                result.ipa = line.substring(4).trim();\n            } else if (line.startsWith(\"DIFFICULT_SOUNDS:\")) {\n                const sounds = line.substring(17).trim();\n                result.difficultSounds = sounds.split(\",\").map((s)=>s.trim()).filter((s)=>s.length > 0);\n            } else if (line.startsWith(\"TIP_\")) {\n                const tip = line.substring(line.indexOf(\":\") + 1).trim();\n                if (tip.length > 0) {\n                    result.tips.push(tip);\n                }\n            } else if (line.startsWith(\"PRACTICE:\")) {\n                result.practiceSentence = line.substring(9).trim();\n            }\n        }\n        return result;\n    }\n    /**\r\n   * Parse tongue twister response from structured text format\r\n   */ parseTongueTwisterResponse(response, expectedCount) {\n        const lines = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0);\n        const twisters = [];\n        let currentTwister = null;\n        let currentIndex = -1;\n        for (const line of lines){\n            const twisterMatch = line.match(/^TWISTER_(\\d+):(.+)/);\n            if (twisterMatch) {\n                currentIndex = parseInt(twisterMatch[1]) - 1;\n                currentTwister = {\n                    text: twisterMatch[2].trim(),\n                    targetSounds: [],\n                    difficulty: \"moderate\"\n                };\n                twisters[currentIndex] = currentTwister;\n                continue;\n            }\n            const soundsMatch = line.match(/^SOUNDS_(\\d+):(.+)/);\n            if (soundsMatch && currentTwister) {\n                const sounds = soundsMatch[2].trim();\n                currentTwister.targetSounds = sounds.split(\",\").map((s)=>s.trim()).filter((s)=>s.length > 0);\n                continue;\n            }\n            const difficultyMatch = line.match(/^DIFFICULTY_(\\d+):(.+)/);\n            if (difficultyMatch && currentTwister) {\n                currentTwister.difficulty = difficultyMatch[2].trim();\n                continue;\n            }\n        }\n        // Filter out any null entries\n        return twisters.filter((t)=>t && t.text && t.text.length > 0);\n    }\n    /**\r\n   * Select challenging words for pronunciation practice\r\n   * Implements Requirements 6.5, 6.6 - Select words with challenging sounds for target language learners\r\n   */ selectChallengingWords(context, count) {\n        // Get vocabulary from context - ensure words are from lesson vocabulary\n        const vocabularySection = context.keyVocabulary;\n        if (vocabularySection.length === 0) {\n            console.log(\"⚠️ No vocabulary available for pronunciation selection\");\n            return [];\n        }\n        console.log(`🔍 Selecting ${count} challenging words from ${vocabularySection.length} vocabulary words`);\n        // Score words by pronunciation difficulty with enhanced criteria\n        const scoredWords = vocabularySection.map((word)=>{\n            let score = 0;\n            const wordLower = word.toLowerCase();\n            const challengingSounds = [];\n            // Base score: Longer words are typically more challenging (but cap to avoid over-weighting)\n            score += Math.min(word.length, 12);\n            // HIGH PRIORITY: Consonant digraphs and difficult consonant sounds (most challenging for learners)\n            const consonantPatterns = [\n                {\n                    pattern: /th/gi,\n                    sound: \"/θ/ or /\\xf0/\",\n                    weight: 5\n                },\n                {\n                    pattern: /ch/gi,\n                    sound: \"/tʃ/\",\n                    weight: 4\n                },\n                {\n                    pattern: /sh/gi,\n                    sound: \"/ʃ/\",\n                    weight: 4\n                },\n                {\n                    pattern: /ph/gi,\n                    sound: \"/f/\",\n                    weight: 3\n                },\n                {\n                    pattern: /gh/gi,\n                    sound: \"/g/ or /f/\",\n                    weight: 4\n                },\n                {\n                    pattern: /ng/gi,\n                    sound: \"/ŋ/\",\n                    weight: 3\n                },\n                {\n                    pattern: /wh/gi,\n                    sound: \"/w/ or /hw/\",\n                    weight: 3\n                },\n                {\n                    pattern: /[^aeiou]r/gi,\n                    sound: \"/r/\",\n                    weight: 4\n                }\n            ];\n            consonantPatterns.forEach(({ pattern, sound, weight })=>{\n                const matches = wordLower.match(pattern);\n                if (matches) {\n                    score += weight * matches.length;\n                    challengingSounds.push(sound);\n                }\n            });\n            // MEDIUM PRIORITY: Complex vowel combinations (challenging for pronunciation)\n            const vowelPatterns = [\n                {\n                    pattern: /ough|augh/gi,\n                    sound: \"/ɔː/ or /ʌf/\",\n                    weight: 5\n                },\n                {\n                    pattern: /eau/gi,\n                    sound: \"/oʊ/\",\n                    weight: 4\n                },\n                {\n                    pattern: /ieu/gi,\n                    sound: \"/juː/\",\n                    weight: 4\n                },\n                {\n                    pattern: /ou/gi,\n                    sound: \"/aʊ/ or /uː/\",\n                    weight: 3\n                },\n                {\n                    pattern: /oo/gi,\n                    sound: \"/uː/ or /ʊ/\",\n                    weight: 3\n                },\n                {\n                    pattern: /ea/gi,\n                    sound: \"/iː/ or /e/\",\n                    weight: 3\n                },\n                {\n                    pattern: /au|aw/gi,\n                    sound: \"/ɔː/\",\n                    weight: 3\n                },\n                {\n                    pattern: /oi|oy/gi,\n                    sound: \"/ɔɪ/\",\n                    weight: 3\n                },\n                {\n                    pattern: /ei|ey/gi,\n                    sound: \"/eɪ/ or /iː/\",\n                    weight: 2\n                },\n                {\n                    pattern: /ie/gi,\n                    sound: \"/iː/ or /aɪ/\",\n                    weight: 2\n                }\n            ];\n            vowelPatterns.forEach(({ pattern, sound, weight })=>{\n                const matches = wordLower.match(pattern);\n                if (matches) {\n                    score += weight * matches.length;\n                    challengingSounds.push(sound);\n                }\n            });\n            // MEDIUM PRIORITY: Common difficult endings\n            const endingPatterns = [\n                {\n                    pattern: /tion$/gi,\n                    sound: \"/ʃən/\",\n                    weight: 3\n                },\n                {\n                    pattern: /sion$/gi,\n                    sound: \"/ʒən/ or /ʃən/\",\n                    weight: 3\n                },\n                {\n                    pattern: /ture$/gi,\n                    sound: \"/tʃər/\",\n                    weight: 3\n                },\n                {\n                    pattern: /sure$/gi,\n                    sound: \"/ʒər/\",\n                    weight: 3\n                },\n                {\n                    pattern: /cious$/gi,\n                    sound: \"/ʃəs/\",\n                    weight: 2\n                },\n                {\n                    pattern: /tious$/gi,\n                    sound: \"/ʃəs/\",\n                    weight: 2\n                }\n            ];\n            endingPatterns.forEach(({ pattern, sound, weight })=>{\n                if (pattern.test(wordLower)) {\n                    score += weight;\n                    challengingSounds.push(sound);\n                }\n            });\n            // HIGH PRIORITY: Silent letters (very confusing for learners)\n            const silentLetterPatterns = [\n                {\n                    pattern: /\\bkn/gi,\n                    sound: \"silent k\",\n                    weight: 5\n                },\n                {\n                    pattern: /\\bgn/gi,\n                    sound: \"silent g\",\n                    weight: 5\n                },\n                {\n                    pattern: /\\bwr/gi,\n                    sound: \"silent w\",\n                    weight: 5\n                },\n                {\n                    pattern: /\\bps/gi,\n                    sound: \"silent p\",\n                    weight: 5\n                },\n                {\n                    pattern: /mb$/gi,\n                    sound: \"silent b\",\n                    weight: 4\n                },\n                {\n                    pattern: /bt$/gi,\n                    sound: \"silent b\",\n                    weight: 4\n                },\n                {\n                    pattern: /lm$/gi,\n                    sound: \"silent l\",\n                    weight: 4\n                },\n                {\n                    pattern: /lk$/gi,\n                    sound: \"silent l\",\n                    weight: 4\n                },\n                {\n                    pattern: /[aeiou]gh/gi,\n                    sound: \"silent gh\",\n                    weight: 3\n                }\n            ];\n            silentLetterPatterns.forEach(({ pattern, sound, weight })=>{\n                if (pattern.test(wordLower)) {\n                    score += weight;\n                    challengingSounds.push(sound);\n                }\n            });\n            // MEDIUM PRIORITY: Consonant clusters (difficult for many learners)\n            const clusterPatterns = [\n                {\n                    pattern: /[^aeiou]{3,}/gi,\n                    sound: \"consonant cluster\",\n                    weight: 3\n                },\n                {\n                    pattern: /[aeiou]{3,}/gi,\n                    sound: \"vowel cluster\",\n                    weight: 2\n                }\n            ];\n            clusterPatterns.forEach(({ pattern, sound, weight })=>{\n                const matches = wordLower.match(pattern);\n                if (matches) {\n                    score += weight * matches.length;\n                    challengingSounds.push(sound);\n                }\n            });\n            // BONUS: Words with stress pattern changes (advanced)\n            // Words ending in -ate, -tion, -ic often have specific stress patterns\n            if (/ate$|tion$|ic$/i.test(wordLower) && word.length > 6) {\n                score += 2;\n                challengingSounds.push(\"stress pattern\");\n            }\n            // Log scoring for debugging\n            if (score > 10) {\n                console.log(`  📊 \"${word}\": score=${score}, sounds=[${challengingSounds.join(\", \")}]`);\n            }\n            return {\n                word,\n                score,\n                challengingSounds: [\n                    ...new Set(challengingSounds)\n                ]\n            };\n        });\n        // Sort by score (descending) and take top words\n        const sortedWords = scoredWords.sort((a, b)=>b.score - a.score);\n        // Select top challenging words, ensuring diversity of challenging sounds\n        const selectedWords = [];\n        const selectedSounds = new Set();\n        // First pass: Select words with unique challenging sounds\n        for (const item of sortedWords){\n            if (selectedWords.length >= count) break;\n            // Check if this word introduces new challenging sounds\n            const newSounds = item.challengingSounds.filter((s)=>!selectedSounds.has(s));\n            if (newSounds.length > 0 || selectedWords.length < Math.ceil(count / 2)) {\n                selectedWords.push(item.word);\n                item.challengingSounds.forEach((s)=>selectedSounds.add(s));\n                console.log(`  ✅ Selected \"${item.word}\" (score: ${item.score}, new sounds: ${newSounds.length})`);\n            }\n        }\n        // Second pass: Fill remaining slots with highest-scoring words\n        if (selectedWords.length < count) {\n            for (const item of sortedWords){\n                if (selectedWords.length >= count) break;\n                if (!selectedWords.includes(item.word)) {\n                    selectedWords.push(item.word);\n                    console.log(`  ✅ Selected \"${item.word}\" (score: ${item.score}, filling remaining slots)`);\n                }\n            }\n        }\n        // If we still don't have enough words, add remaining vocabulary\n        if (selectedWords.length < count) {\n            const remaining = vocabularySection.filter((w)=>!selectedWords.includes(w)).slice(0, count - selectedWords.length);\n            selectedWords.push(...remaining);\n            console.log(`  ⚠️ Added ${remaining.length} additional words to meet count requirement`);\n        }\n        console.log(`✅ Selected ${selectedWords.length} challenging words: ${selectedWords.join(\", \")}`);\n        console.log(`📊 Challenging sounds covered: ${Array.from(selectedSounds).join(\", \")}`);\n        return selectedWords;\n    }\n    /**\r\n   * Build pronunciation word generation prompt\r\n   * Implements Requirement 6.6 - Generate practice sentences using the target words\r\n   */ buildPronunciationWordPrompt(word, context) {\n        const mainTheme = context.mainThemes[0] || \"general topics\";\n        const contextSummary = context.contentSummary.substring(0, 200);\n        // Get related vocabulary for context\n        const relatedWords = context.keyVocabulary.filter((w)=>w.toLowerCase() !== word.toLowerCase()).slice(0, 3).join(\", \");\n        const prompt = `Create pronunciation practice for the word \"${word}\" for ${context.difficultyLevel} level students.\r\n\r\nCONTEXT: ${contextSummary}\r\nTOPIC: ${mainTheme}\r\nRELATED VOCABULARY: ${relatedWords}\r\n\r\nCRITICAL REQUIREMENTS:\r\n1. Provide accurate IPA (International Phonetic Alphabet) transcription\r\n2. Identify 2-3 specific difficult sounds in the word that are challenging for English learners\r\n3. Give practical, actionable pronunciation tips focusing on mouth/tongue position\r\n4. Create a practice sentence that:\r\n   - Uses \"${word}\" naturally in context\r\n   - Relates to the topic (${mainTheme})\r\n   - Is appropriate for ${context.difficultyLevel} level\r\n   - Helps reinforce correct pronunciation through context\r\n   - Ideally includes other words with similar challenging sounds\r\n\r\nProvide the following information in this exact format:\r\n\r\nWORD: ${word}\r\nIPA: [provide accurate IPA transcription using standard IPA symbols]\r\nDIFFICULT_SOUNDS: [list 2-3 specific IPA sounds that are challenging, e.g., /θ/, /ð/, /r/]\r\nTIP_1: [specific tip about mouth/tongue position for first difficult sound]\r\nTIP_2: [specific tip about mouth/tongue position for second difficult sound]\r\nPRACTICE: [a contextually relevant sentence using \"${word}\" that relates to ${mainTheme}]\r\n\r\nExample for \"through\" in sports context:\r\nWORD: through\r\nIPA: /θruː/\r\nDIFFICULT_SOUNDS: /θ/, /uː/\r\nTIP_1: Place your tongue between your teeth for the 'th' sound (/θ/)\r\nTIP_2: Round your lips and make them tense for the long 'oo' sound (/uː/)\r\nPRACTICE: The athlete ran through the finish line with determination.\r\n\r\nExample for \"strength\" in fitness context:\r\nWORD: strength\r\nIPA: /streŋθ/\r\nDIFFICULT_SOUNDS: /str/, /ŋ/, /θ/\r\nTIP_1: Blend the 's', 't', and 'r' sounds smoothly without adding extra vowels\r\nTIP_2: For the final 'th' (/θ/), place your tongue between your teeth\r\nPRACTICE: Building strength requires consistent training and proper nutrition.`;\n        return prompt;\n    }\n    /**\r\n   * Build tongue twister generation prompt\r\n   */ buildTongueTwisterPrompt(context, count) {\n        const themes = context.mainThemes.slice(0, 2).join(\" and \");\n        const targetWords = context.keyVocabulary.slice(0, 5).join(\", \");\n        const prompt = `Create ${count} tongue twisters for ${context.difficultyLevel} level students about \"${themes}\".\r\n\r\nRequirements:\r\n- Related to: ${themes}\r\n- Try to use words: ${targetWords}\r\n- Focus on challenging sounds (th, r, l, s, sh, ch)\r\n- 6-12 words each\r\n- Appropriate for ${context.difficultyLevel} level\r\n\r\nProvide in this exact format:\r\n\r\nTWISTER_1: [first tongue twister text]\r\nSOUNDS_1: [target sounds separated by commas, e.g., /θ/, /s/]\r\nDIFFICULTY_1: moderate\r\n\r\nTWISTER_2: [second tongue twister text]\r\nSOUNDS_2: [target sounds separated by commas]\r\nDIFFICULTY_2: moderate\r\n\r\nExample:\r\nTWISTER_1: Three athletes threw the ball through the thick crowd\r\nSOUNDS_1: /θ/, /r/\r\nDIFFICULTY_1: moderate\r\n\r\nTWISTER_2: Six successful salespeople sold several similar services\r\nSOUNDS_2: /s/, /l/\r\nDIFFICULTY_2: moderate`;\n        return prompt;\n    }\n    /**\r\n   * Validate pronunciation section for completeness\r\n   * Implements Requirements 6.1, 6.2, 6.3, 6.4, 6.5, 6.6 - Comprehensive validation\r\n   */ validatePronunciationSection(words, tongueTwisters, minWords, minTongueTwisters, context) {\n        const issues = [];\n        const warnings = [];\n        console.log(`🔍 Validating pronunciation section: ${words.length} words, ${tongueTwisters.length} twisters`);\n        // Requirement 6.1: Check minimum word count (at least 5 advanced words)\n        if (words.length < minWords) {\n            issues.push(`Insufficient pronunciation words: expected at least ${minWords}, got ${words.length}`);\n        }\n        // Requirement 6.4: Check minimum tongue twister count (at least 2)\n        if (tongueTwisters.length < minTongueTwisters) {\n            issues.push(`Insufficient tongue twisters: expected at least ${minTongueTwisters}, got ${tongueTwisters.length}`);\n        }\n        // Validate each word has required fields and quality\n        for(let i = 0; i < words.length; i++){\n            const word = words[i];\n            const wordNum = i + 1;\n            // Basic field validation\n            if (!word.word || typeof word.word !== \"string\") {\n                issues.push(`Word ${wordNum} missing 'word' field`);\n                continue;\n            }\n            // Requirement 6.2: Validate IPA transcription exists\n            if (!word.ipa || typeof word.ipa !== \"string\") {\n                issues.push(`Word ${wordNum} (\"${word.word}\") missing IPA transcription`);\n            } else {\n                // Check if IPA looks valid (should contain IPA characters or slashes)\n                if (!word.ipa.includes(\"/\") && !word.ipa.match(/[əɪʊɛɔæʌɑː]/)) {\n                    warnings.push(`Word ${wordNum} (\"${word.word}\") IPA may be invalid: \"${word.ipa}\"`);\n                }\n            }\n            // Requirement 6.3: Validate pronunciation tips exist\n            if (!word.tips || !Array.isArray(word.tips) || word.tips.length === 0) {\n                issues.push(`Word ${wordNum} (\"${word.word}\") missing pronunciation tips`);\n            } else {\n                // Check tip quality - should be actionable and specific\n                const hasActionableTips = word.tips.some((tip)=>tip.length > 15 && (tip.toLowerCase().includes(\"tongue\") || tip.toLowerCase().includes(\"lip\") || tip.toLowerCase().includes(\"mouth\") || tip.toLowerCase().includes(\"sound\") || tip.toLowerCase().includes(\"place\")));\n                if (!hasActionableTips) {\n                    warnings.push(`Word ${wordNum} (\"${word.word}\") tips may lack specific pronunciation guidance`);\n                }\n            }\n            // Requirement 6.6: Validate practice sentence exists and uses the word\n            if (!word.practiceSentence || typeof word.practiceSentence !== \"string\") {\n                issues.push(`Word ${wordNum} (\"${word.word}\") missing practice sentence`);\n            } else {\n                // Check if practice sentence actually contains the word\n                const sentenceLower = word.practiceSentence.toLowerCase();\n                const wordLower = word.word.toLowerCase();\n                if (!sentenceLower.includes(wordLower)) {\n                    issues.push(`Word ${wordNum} (\"${word.word}\") practice sentence doesn't contain the word`);\n                }\n                // Check sentence length is appropriate\n                const wordCount = word.practiceSentence.split(/\\s+/).length;\n                if (wordCount < 5) {\n                    warnings.push(`Word ${wordNum} (\"${word.word}\") practice sentence is very short (${wordCount} words)`);\n                } else if (wordCount > 25) {\n                    warnings.push(`Word ${wordNum} (\"${word.word}\") practice sentence is very long (${wordCount} words)`);\n                }\n                // Check sentence has proper capitalization and punctuation\n                if (!/^[A-Z]/.test(word.practiceSentence)) {\n                    warnings.push(`Word ${wordNum} (\"${word.word}\") practice sentence should start with capital letter`);\n                }\n                if (!/[.!?]$/.test(word.practiceSentence)) {\n                    warnings.push(`Word ${wordNum} (\"${word.word}\") practice sentence should end with punctuation`);\n                }\n            }\n            // Requirement 6.5: Validate word has challenging sounds (if difficultSounds field exists)\n            if (word.difficultSounds && Array.isArray(word.difficultSounds)) {\n                if (word.difficultSounds.length === 0) {\n                    warnings.push(`Word ${wordNum} (\"${word.word}\") has no difficult sounds identified`);\n                }\n            }\n            // Check if word is from lesson vocabulary (if context provided)\n            if (context && context.keyVocabulary.length > 0) {\n                const isFromVocabulary = context.keyVocabulary.some((v)=>v.toLowerCase() === word.word.toLowerCase());\n                if (!isFromVocabulary) {\n                    warnings.push(`Word ${wordNum} (\"${word.word}\") is not from lesson vocabulary`);\n                }\n            }\n        }\n        // Validate each tongue twister has required fields and quality\n        for(let i = 0; i < tongueTwisters.length; i++){\n            const twister = tongueTwisters[i];\n            const twisterNum = i + 1;\n            if (!twister.text || typeof twister.text !== \"string\") {\n                issues.push(`Tongue twister ${twisterNum} missing text`);\n                continue;\n            }\n            // Check tongue twister length (should be 6-15 words for effectiveness)\n            const wordCount = twister.text.split(/\\s+/).length;\n            if (wordCount < 6) {\n                warnings.push(`Tongue twister ${twisterNum} is too short (${wordCount} words, recommended 6-15)`);\n            } else if (wordCount > 15) {\n                warnings.push(`Tongue twister ${twisterNum} is too long (${wordCount} words, recommended 6-15)`);\n            }\n            // Validate target sounds exist\n            if (!twister.targetSounds || !Array.isArray(twister.targetSounds)) {\n                issues.push(`Tongue twister ${twisterNum} missing target sounds`);\n            } else if (twister.targetSounds.length === 0) {\n                issues.push(`Tongue twister ${twisterNum} has no target sounds specified`);\n            }\n            // Check if tongue twister relates to lesson topic (if context provided)\n            if (context && context.mainThemes.length > 0) {\n                const twisterLower = twister.text.toLowerCase();\n                const hasTopicRelevance = context.mainThemes.some((theme)=>{\n                    const themeWords = theme.toLowerCase().split(/\\s+/);\n                    return themeWords.some((word)=>word.length > 3 && twisterLower.includes(word));\n                });\n                if (!hasTopicRelevance) {\n                    warnings.push(`Tongue twister ${twisterNum} may not relate to lesson topic`);\n                }\n            }\n        }\n        // Check for sound diversity across all words\n        const allDifficultSounds = new Set();\n        words.forEach((word)=>{\n            if (word.difficultSounds && Array.isArray(word.difficultSounds)) {\n                word.difficultSounds.forEach((sound)=>allDifficultSounds.add(sound));\n            }\n        });\n        if (allDifficultSounds.size < 3 && words.length >= 3) {\n            warnings.push(`Limited sound diversity: only ${allDifficultSounds.size} different challenging sounds across all words`);\n        }\n        // Log warnings for visibility\n        if (warnings.length > 0) {\n            console.log(`⚠️ Pronunciation validation warnings:`, warnings);\n        }\n        // Log validation summary\n        if (issues.length === 0) {\n            console.log(`✅ Pronunciation section validation passed (${words.length} words, ${tongueTwisters.length} twisters, ${allDifficultSounds.size} unique sounds)`);\n        } else {\n            console.log(`❌ Pronunciation section validation failed with ${issues.length} issues`);\n        }\n        return {\n            isValid: issues.length === 0,\n            issues: [\n                ...issues,\n                ...warnings.map((w)=>`Warning: ${w}`)\n            ]\n        };\n    }\n    async generatePronunciationWithContext(context, _previousSections) {\n        const minWords = 5;\n        const minTongueTwisters = 2;\n        const maxAttempts = 2;\n        let attempt = 0;\n        const sectionStartTime = Date.now();\n        // Report progress at start of pronunciation generation\n        safeProgressCallback(this.progressCallback, {\n            step: \"Generating pronunciation section\",\n            progress: this.calculateProgress(this.completedSections, \"pronunciation\", context.lessonType, this.phaseWeights),\n            phase: \"pronunciation\",\n            section: \"pronunciation\"\n        });\n        console.log(`🗣️ Generating pronunciation section with ${minWords} words and ${minTongueTwisters} tongue twisters`);\n        while(attempt < maxAttempts){\n            attempt++;\n            console.log(`🎯 Pronunciation generation attempt ${attempt}/${maxAttempts}`);\n            try {\n                // Select challenging words for pronunciation practice\n                const selectedWords = this.selectChallengingWords(context, minWords);\n                console.log(`📝 Selected words for pronunciation:`, selectedWords);\n                // Generate pronunciation details for each word\n                const pronunciationWords = [];\n                for (const word of selectedWords){\n                    try {\n                        const wordPrompt = this.buildPronunciationWordPrompt(word, context);\n                        const wordResponse = await this.getGoogleAI().prompt(wordPrompt);\n                        console.log(`📝 Raw AI response for \"${word}\":`, wordResponse.substring(0, 200));\n                        // Parse structured text response\n                        const wordData = this.parsePronunciationWordResponse(wordResponse, word);\n                        console.log(`🔍 Parsed data for \"${word}\":`, JSON.stringify(wordData, null, 2));\n                        // Validate required fields\n                        if (!wordData.word || !wordData.ipa || !wordData.tips || wordData.tips.length === 0 || !wordData.practiceSentence) {\n                            console.log(`❌ Validation failed for \"${word}\":`, {\n                                hasWord: !!wordData.word,\n                                hasIpa: !!wordData.ipa,\n                                hasTips: !!wordData.tips,\n                                tipsLength: wordData.tips?.length || 0,\n                                hasPractice: !!wordData.practiceSentence\n                            });\n                            throw new Error(\"Missing required fields in response\");\n                        }\n                        pronunciationWords.push(wordData);\n                        console.log(`✅ Generated pronunciation for \"${word}\": ${wordData.ipa}`);\n                    } catch (error) {\n                        console.log(`❌ Failed to generate pronunciation for \"${word}\":`, error);\n                        console.log(`❌ Error details:`, error.message);\n                        // NO FALLBACK CONTENT - fail the generation if AI cannot provide quality content\n                        throw new Error(`Failed to generate pronunciation for word \"${word}\": ${error.message}`);\n                    }\n                }\n                // Generate tongue twisters\n                let tongueTwisters = [];\n                try {\n                    const twisterPrompt = this.buildTongueTwisterPrompt(context, minTongueTwisters);\n                    const twisterResponse = await this.getGoogleAI().prompt(twisterPrompt);\n                    // Parse structured text response\n                    tongueTwisters = this.parseTongueTwisterResponse(twisterResponse, minTongueTwisters);\n                    if (tongueTwisters.length < minTongueTwisters) {\n                        throw new Error(`Only ${tongueTwisters.length} valid tongue twisters generated`);\n                    }\n                    console.log(`✅ Generated ${tongueTwisters.length} tongue twisters`);\n                } catch (error) {\n                    console.log(`❌ Failed to generate tongue twisters:`, error);\n                    // NO FALLBACK CONTENT - fail the generation if AI cannot provide quality content\n                    throw new Error(`Failed to generate tongue twisters: ${error.message}`);\n                }\n                // Validate the pronunciation section using new validator\n                const pronunciationSection = {\n                    words: pronunciationWords,\n                    tongueTwisters: tongueTwisters\n                };\n                const validation = _section_validators__WEBPACK_IMPORTED_MODULE_2__.pronunciationValidator.validate(pronunciationSection);\n                if (!validation.isValid) {\n                    console.log(`⚠️ Validation failed (attempt ${attempt}/${maxAttempts}):`, validation.issues);\n                    if (attempt < maxAttempts) {\n                        console.log(`🔄 Retrying pronunciation generation...`);\n                        continue;\n                    } else {\n                        console.log(`⚠️ Using pronunciation section despite validation issues (max attempts reached)`);\n                    }\n                } else {\n                    console.log(`✅ Pronunciation section validated successfully`);\n                }\n                // Track quality metrics\n                const generationTime = Date.now() - sectionStartTime;\n                _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"pronunciation\", validation.score, attempt, generationTime, validation.issues.length, validation.warnings.length);\n                // Build the final pronunciation section\n                return {\n                    instruction: \"Practice pronunciation with your tutor. Focus on the difficult sounds and try the tongue twisters:\",\n                    words: pronunciationWords,\n                    tongueTwisters: tongueTwisters\n                };\n            } catch (error) {\n                console.error(`❌ Attempt ${attempt} failed:`, error);\n                if (attempt >= maxAttempts) {\n                    // Track failed generation\n                    _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"pronunciation\", 0, attempt, Date.now() - sectionStartTime, 1, 0);\n                    throw new Error(\"Failed to generate pronunciation section: \" + error.message);\n                }\n            }\n        }\n        throw new Error(\"Failed to generate pronunciation section after all attempts\");\n    }\n    async generateWrapupWithContext(context, _previousSections) {\n        // Report progress at start of wrapup generation\n        safeProgressCallback(this.progressCallback, {\n            step: \"Generating wrap-up questions\",\n            progress: this.calculateProgress(this.completedSections, \"wrapup\", context.lessonType, this.phaseWeights),\n            phase: \"wrapup\",\n            section: \"wrapup\"\n        });\n        const prompt = `Create 3 ${context.difficultyLevel} wrap-up questions about this lesson:\r\n${context.contentSummary}\r\nReturn only questions, one per line:`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 3);\n            if (questions.length < 3) {\n                throw new Error(\"Insufficient wrapup questions generated\");\n            }\n            const instruction = \"Reflect on your learning by discussing these wrap-up questions:\";\n            return [\n                instruction,\n                ...questions\n            ];\n        } catch (error) {\n            throw new Error(\"Failed to generate wrapup questions: \" + error.message);\n        }\n    }\n    /**\r\n   * Build level-specific dialogue prompt with length and complexity requirements\r\n   * Implements Requirements 3.3, 3.4, 3.5, 3.6, 3.7\r\n   */ buildDialoguePrompt(context, vocabularyWords, type) {\n        const mainTheme = context.mainThemes[0] || \"this topic\";\n        // CEFR-specific complexity instructions with detailed vocabulary and grammar guidance\n        const levelComplexityInstructions = {\n            \"A1\": {\n                vocabulary: \"Use ONLY the most common everyday words (top 500-1000 words). Examples: go, come, like, want, have, be, do, make, get, see, know, think, say, tell, ask.\",\n                grammar: \"Use ONLY simple present tense (I go, she likes) and simple past tense (I went, she liked). Use basic subject-verb-object structure. NO complex grammar, NO perfect tenses, NO conditionals, NO passive voice.\",\n                sentenceLength: \"Keep sentences very short: 5-8 words maximum. One idea per sentence.\",\n                examples: 'Good: \"I like this topic.\" / \"Do you know about it?\" / \"Yes, I read about it yesterday.\" Bad: \"I\\'ve been interested in this topic for a while.\" (too complex)'\n            },\n            \"A2\": {\n                vocabulary: \"Use simple, familiar vocabulary (top 1000-2000 words). Include common adjectives and adverbs. Examples: interesting, important, different, usually, sometimes, often, really, very.\",\n                grammar: 'Use present simple, past simple, present continuous (I am doing), and future with \"going to\" and \"will\". Use simple conjunctions (and, but, or, because). NO present perfect, NO complex conditionals, NO passive voice.',\n                sentenceLength: 'Keep sentences clear and direct: 8-12 words. Can combine two simple ideas with \"and\" or \"but\".',\n                examples: 'Good: \"I\\'m reading about this topic because it\\'s interesting.\" / \"I want to learn more about it.\" Bad: \"I\\'ve been studying this topic which has fascinated me.\" (too complex)'\n            },\n            \"B1\": {\n                vocabulary: \"Use intermediate vocabulary with some less common words. Include phrasal verbs (find out, look into, come across, deal with). Use descriptive language and opinion expressions (I think, in my opinion, it seems).\",\n                grammar: \"Use varied tenses including present perfect (I have done), past continuous (I was doing), and first conditional (If I do, I will). Include compound sentences with coordinating conjunctions. Use some relative clauses (that, which, who).\",\n                sentenceLength: \"Use varied sentence lengths: 10-15 words average. Mix simple and compound sentences.\",\n                examples: 'Good: \"I\\'ve been looking into this topic, and I\\'ve found some interesting information.\" / \"If we discuss it more, I think I\\'ll understand it better.\" Bad: \"I go to library.\" (too simple) / \"Having contemplated the multifaceted nature...\" (too complex)'\n            },\n            \"B2\": {\n                vocabulary: \"Use advanced vocabulary including abstract concepts, idiomatic expressions, and sophisticated descriptive language. Include collocations (make a decision, take into account, come to terms with). Use nuanced expressions (somewhat, rather, fairly, considerably).\",\n                grammar: \"Use complex sentence structures with relative clauses, second and third conditionals (If I had done, I would have), passive voice (is considered, has been shown), and perfect tenses. Include subordinating conjunctions (although, whereas, despite, unless).\",\n                sentenceLength: \"Use sophisticated sentences: 12-18 words. Combine multiple clauses naturally.\",\n                examples: 'Good: \"Although I\\'ve studied this topic extensively, there are aspects that remain somewhat unclear.\" / \"The implications of this could be far-reaching if we consider the broader context.\" Bad: \"I like this topic.\" (too simple)'\n            },\n            \"C1\": {\n                vocabulary: \"Use sophisticated, nuanced vocabulary including academic language, subtle distinctions, and native-like expressions. Include advanced idioms, metaphors, and specialized terminology. Use hedging language (arguably, presumably, ostensibly, to some extent).\",\n                grammar: \"Use complex grammatical structures including inversion (Rarely have I seen...), cleft sentences (What interests me is...), subjunctive mood (I suggest that he be...), and advanced conditionals (Were I to consider...). Demonstrate mastery of all tenses and aspects.\",\n                sentenceLength: \"Use sophisticated, flowing sentences: 15-20 words. Create complex, multi-clause sentences that sound natural.\",\n                examples: 'Good: \"What strikes me as particularly intriguing is the way in which this topic intersects with broader societal concerns.\" / \"Were we to delve deeper into this matter, we might uncover some rather unexpected insights.\" Bad: \"This topic is interesting.\" (too simple) / \"I think about this topic.\" (too simple)'\n            }\n        };\n        const levelInstructions = levelComplexityInstructions[context.difficultyLevel];\n        // Vocabulary integration instruction with emphasis on natural use\n        const vocabInstruction = vocabularyWords.length > 0 ? `VOCABULARY INTEGRATION: Naturally incorporate 3-4 of these lesson vocabulary words into the dialogue: ${vocabularyWords.slice(0, 5).join(\", \")}. Use them in context where they fit naturally, not forced.` : \"\";\n        if (type === \"practice\") {\n            const prompt = `Create a natural conversation between a Student and a Tutor about \"${mainTheme}\" for ${context.difficultyLevel} level students.\r\n\r\nCONTEXT: ${context.contentSummary}\r\n\r\nTOPIC THEMES: ${context.mainThemes.join(\", \")}\r\n\r\nCRITICAL REQUIREMENTS:\r\n1. Create EXACTLY 14 dialogue lines (alternating between Student and Tutor) - THIS IS MANDATORY\r\n2. Start with Student speaking first\r\n3. Make the conversation natural and engaging about the topic\r\n4. The conversation should relate to the source material context and themes\r\n5. Ensure natural conversational flow with appropriate responses and follow-up questions\r\n6. ${vocabInstruction}\r\n7. COUNT YOUR LINES - you must have at least 14 lines total (7 Student + 7 Tutor)\r\n\r\nLEVEL-SPECIFIC REQUIREMENTS FOR ${context.difficultyLevel}:\r\n\r\nVOCABULARY REQUIREMENTS:\r\n${levelInstructions.vocabulary}\r\n\r\nGRAMMAR REQUIREMENTS:\r\n${levelInstructions.grammar}\r\n\r\nSENTENCE LENGTH:\r\n${levelInstructions.sentenceLength}\r\n\r\nEXAMPLES OF APPROPRIATE LANGUAGE:\r\n${levelInstructions.examples}\r\n\r\nCONVERSATIONAL FLOW REQUIREMENTS:\r\n- Student should ask questions, express opinions, and show engagement\r\n- Tutor should respond naturally, ask follow-up questions, and guide the discussion\r\n- Each response should logically follow from the previous line\r\n- Include natural conversation markers appropriate to the level (e.g., A1: \"Oh, I see\", B2: \"That's an interesting perspective\", C1: \"That's a rather compelling argument\")\r\n- Show progression in the conversation - start with introduction, develop the topic, conclude naturally\r\n\r\nFORMAT:\r\nReturn ONLY the dialogue lines in this exact format:\r\nStudent: [first line]\r\nTutor: [response]\r\nStudent: [next line]\r\nTutor: [response]\r\nStudent: [next line]\r\nTutor: [response]\r\nStudent: [next line]\r\nTutor: [response]\r\nStudent: [next line]\r\nTutor: [response]\r\nStudent: [next line]\r\nTutor: [response]\r\nStudent: [next line]\r\nTutor: [response]\r\n\r\nDo NOT include any numbering, explanations, or extra text. Just the dialogue lines.`;\n            return prompt;\n        } else {\n            // fill-in-gap type\n            const prompt = `Create a natural conversation between a Student and a Tutor about \"${mainTheme}\" for ${context.difficultyLevel} level students with fill-in-the-gap exercises.\r\n\r\nCONTEXT: ${context.contentSummary}\r\n\r\nTOPIC THEMES: ${context.mainThemes.join(\", \")}\r\n\r\nCRITICAL REQUIREMENTS:\r\n1. Create EXACTLY 14 dialogue lines (alternating between Student and Tutor) - THIS IS MANDATORY\r\n2. Start with Student speaking first\r\n3. Replace 1-2 key words in SOME lines (about 4-6 lines total) with _____ (blank)\r\n4. The conversation should relate to the source material context and themes\r\n5. Ensure natural conversational flow with appropriate responses\r\n6. ${vocabInstruction}\r\n7. Choose meaningful words to blank out (verbs, nouns, adjectives - NOT articles, prepositions, or pronouns)\r\n8. Blank out words that are appropriate for the ${context.difficultyLevel} level\r\n9. COUNT YOUR LINES - you must have at least 14 lines total (7 Student + 7 Tutor)\r\n\r\nLEVEL-SPECIFIC REQUIREMENTS FOR ${context.difficultyLevel}:\r\n\r\nVOCABULARY REQUIREMENTS:\r\n${levelInstructions.vocabulary}\r\n\r\nGRAMMAR REQUIREMENTS:\r\n${levelInstructions.grammar}\r\n\r\nSENTENCE LENGTH:\r\n${levelInstructions.sentenceLength}\r\n\r\nEXAMPLES OF APPROPRIATE LANGUAGE:\r\n${levelInstructions.examples}\r\n\r\nGAP SELECTION GUIDELINES:\r\n- A1/A2: Blank out common verbs (go, like, want) or simple nouns (topic, idea, question)\r\n- B1: Blank out phrasal verbs (find out, look into) or intermediate vocabulary\r\n- B2/C1: Blank out sophisticated vocabulary, collocations, or idiomatic expressions\r\n- Ensure the gap can be filled from context clues in the conversation\r\n- Vary the types of words you blank out (don't just blank verbs)\r\n\r\nCONVERSATIONAL FLOW REQUIREMENTS:\r\n- Student should ask questions, express opinions, and show engagement\r\n- Tutor should respond naturally, ask follow-up questions, and guide the discussion\r\n- Each response should logically follow from the previous line\r\n- Include natural conversation markers appropriate to the level\r\n- Show progression in the conversation - start with introduction, develop the topic, conclude naturally\r\n\r\nFORMAT:\r\nReturn ONLY the dialogue lines in this exact format:\r\nStudent: [line with possible _____ for gap]\r\nTutor: [line with possible _____ for gap]\r\nStudent: [line with possible _____ for gap]\r\nTutor: [line with possible _____ for gap]\r\nStudent: [line with possible _____ for gap]\r\nTutor: [line with possible _____ for gap]\r\nStudent: [line with possible _____ for gap]\r\nTutor: [line with possible _____ for gap]\r\nStudent: [line with possible _____ for gap]\r\nTutor: [line with possible _____ for gap]\r\nStudent: [line with possible _____ for gap]\r\nTutor: [line with possible _____ for gap]\r\nStudent: [line with possible _____ for gap]\r\nTutor: [line with possible _____ for gap]\r\n\r\nEXAMPLE FOR ${context.difficultyLevel} LEVEL:\r\n${context.difficultyLevel === \"A1\" ? \"Student: I _____ to learn about this.\\nTutor: What do you _____ about it?\" : context.difficultyLevel === \"A2\" ? \"Student: I've been _____ about this topic.\\nTutor: What did you _____ most interesting?\" : context.difficultyLevel === \"B1\" ? \"Student: I've been _____ into this topic recently.\\nTutor: What aspects have you _____ across?\" : context.difficultyLevel === \"B2\" ? \"Student: The _____ of this topic requires careful analysis.\\nTutor: How do you _____ the different perspectives?\" : \"Student: The _____ nature of this topic is fascinating.\\nTutor: How would you _____ the apparent contradictions?\"}\r\n\r\nDo NOT include any numbering, explanations, or extra text. Just the dialogue lines with gaps.`;\n            return prompt;\n        }\n    }\n    /**\r\n   * Validate dialogue length, structure, and CEFR-appropriate complexity\r\n   * Implements Requirements 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7\r\n   */ validateDialogue(dialogueLines, context, type) {\n        const issues = [];\n        const warnings = [];\n        // Check minimum line count (requirement 3.1, 3.2)\n        const minLines = 12;\n        if (dialogueLines.length < minLines) {\n            issues.push(`Insufficient dialogue lines: expected at least ${minLines}, got ${dialogueLines.length}`);\n        }\n        // Check alternating speakers (requirement 3.6 - natural conversational flow)\n        for(let i = 0; i < dialogueLines.length - 1; i++){\n            if (dialogueLines[i].character === dialogueLines[i + 1].character) {\n                warnings.push(`Lines ${i + 1} and ${i + 2} have the same speaker (should alternate)`);\n            }\n        }\n        // Check that dialogue starts with Student\n        if (dialogueLines.length > 0 && dialogueLines[0].character !== \"Student\") {\n            warnings.push(\"Dialogue should start with Student speaking\");\n        }\n        // Check line length appropriateness for CEFR level (requirements 3.3, 3.4, 3.5)\n        const lengthRanges = {\n            \"A1\": {\n                min: 3,\n                max: 12\n            },\n            \"A2\": {\n                min: 5,\n                max: 18\n            },\n            \"B1\": {\n                min: 7,\n                max: 22\n            },\n            \"B2\": {\n                min: 8,\n                max: 25\n            },\n            \"C1\": {\n                min: 10,\n                max: 30\n            }\n        };\n        const range = lengthRanges[context.difficultyLevel];\n        let tooShortCount = 0;\n        let tooLongCount = 0;\n        for(let i = 0; i < dialogueLines.length; i++){\n            const line = dialogueLines[i].line;\n            const wordCount = line.split(/\\s+/).length;\n            if (wordCount < range.min) {\n                tooShortCount++;\n            } else if (wordCount > range.max) {\n                tooLongCount++;\n            }\n        }\n        if (tooShortCount > dialogueLines.length * 0.3) {\n            warnings.push(`${tooShortCount} lines may be too short for ${context.difficultyLevel} level`);\n        }\n        if (tooLongCount > dialogueLines.length * 0.3) {\n            warnings.push(`${tooLongCount} lines may be too long for ${context.difficultyLevel} level`);\n        }\n        // Check vocabulary complexity (requirement 3.3, 3.4, 3.5)\n        const vocabularyComplexityCheck = this.checkVocabularyComplexity(dialogueLines, context.difficultyLevel);\n        if (!vocabularyComplexityCheck.isAppropriate) {\n            warnings.push(...vocabularyComplexityCheck.warnings);\n        }\n        // Check grammar complexity (requirement 3.3, 3.4, 3.5)\n        const grammarComplexityCheck = this.checkGrammarComplexity(dialogueLines, context.difficultyLevel);\n        if (!grammarComplexityCheck.isAppropriate) {\n            warnings.push(...grammarComplexityCheck.warnings);\n        }\n        // Check vocabulary integration (requirement 3.7)\n        const vocabIntegrationCheck = this.checkVocabularyIntegration(dialogueLines, context.keyVocabulary);\n        if (!vocabIntegrationCheck.hasIntegration) {\n            warnings.push(\"Dialogue should incorporate lesson vocabulary words\");\n        }\n        // For fill-in-gap, check that there are gaps\n        if (type === \"fill-in-gap\") {\n            const gapCount = dialogueLines.filter((line)=>line.line.includes(\"_____\")).length;\n            if (gapCount < 3) {\n                warnings.push(`Fill-in-gap dialogue should have at least 3 gaps, found ${gapCount}`);\n            }\n        }\n        // Log warnings for visibility\n        if (warnings.length > 0) {\n            console.log(`⚠️ Dialogue validation warnings:`, warnings);\n        }\n        return {\n            isValid: issues.length === 0,\n            issues\n        };\n    }\n    /**\r\n   * Check if vocabulary complexity matches CEFR level\r\n   */ checkVocabularyComplexity(dialogueLines, level) {\n        const warnings = [];\n        const allText = dialogueLines.map((line)=>line.line.toLowerCase()).join(\" \");\n        // Check for overly complex words at lower levels\n        if (level === \"A1\" || level === \"A2\") {\n            const complexWords = [\n                \"sophisticated\",\n                \"comprehensive\",\n                \"multifaceted\",\n                \"nuanced\",\n                \"intricate\",\n                \"elaborate\",\n                \"substantial\",\n                \"considerable\",\n                \"significant\",\n                \"fundamental\",\n                \"nevertheless\",\n                \"furthermore\",\n                \"consequently\",\n                \"subsequently\",\n                \"whereby\"\n            ];\n            const foundComplexWords = complexWords.filter((word)=>allText.includes(word));\n            if (foundComplexWords.length > 0) {\n                warnings.push(`Found complex vocabulary inappropriate for ${level}: ${foundComplexWords.join(\", \")}`);\n            }\n        }\n        // Check for overly simple vocabulary at higher levels\n        if (level === \"B2\" || level === \"C1\") {\n            const allWords = allText.split(/\\s+/);\n            const verySimpleWords = [\n                \"good\",\n                \"bad\",\n                \"nice\",\n                \"big\",\n                \"small\",\n                \"like\",\n                \"want\",\n                \"go\",\n                \"come\",\n                \"get\"\n            ];\n            const simpleWordCount = allWords.filter((word)=>verySimpleWords.includes(word)).length;\n            const simpleWordRatio = simpleWordCount / allWords.length;\n            if (simpleWordRatio > 0.15) {\n                warnings.push(`Vocabulary may be too simple for ${level} level (${Math.round(simpleWordRatio * 100)}% basic words)`);\n            }\n        }\n        return {\n            isAppropriate: warnings.length === 0,\n            warnings\n        };\n    }\n    /**\r\n   * Check if grammar complexity matches CEFR level\r\n   */ checkGrammarComplexity(dialogueLines, level) {\n        const warnings = [];\n        const allText = dialogueLines.map((line)=>line.line).join(\" \");\n        // Check for complex grammar at lower levels (should be avoided)\n        if (level === \"A1\" || level === \"A2\") {\n            // Check for present perfect (have/has + past participle)\n            if (/\\b(have|has)\\s+\\w+ed\\b/i.test(allText) || /\\b(have|has)\\s+(been|gone|done|seen|made)\\b/i.test(allText)) {\n                warnings.push(`Present perfect tense may be too complex for ${level} level`);\n            }\n            // Check for passive voice\n            if (/\\b(is|are|was|were|been)\\s+\\w+ed\\b/i.test(allText)) {\n                warnings.push(`Passive voice may be too complex for ${level} level`);\n            }\n        }\n        // Check for lack of complex grammar at higher levels (should be present)\n        if (level === \"B2\" || level === \"C1\") {\n            let hasComplexGrammar = false;\n            // Check for relative clauses\n            if (/\\b(which|that|who|whom|whose)\\b/i.test(allText)) {\n                hasComplexGrammar = true;\n            }\n            // Check for conditionals\n            if (/\\b(if|unless|provided|assuming)\\b.*\\b(would|could|might)\\b/i.test(allText)) {\n                hasComplexGrammar = true;\n            }\n            // Check for perfect tenses\n            if (/\\b(have|has|had)\\s+(been|gone|done|seen|made)\\b/i.test(allText)) {\n                hasComplexGrammar = true;\n            }\n            if (!hasComplexGrammar && dialogueLines.length >= 12) {\n                warnings.push(`Dialogue lacks complex grammar structures expected for ${level} level`);\n            }\n        }\n        return {\n            isAppropriate: warnings.length === 0,\n            warnings\n        };\n    }\n    /**\r\n   * Check if lesson vocabulary is integrated into dialogue\r\n   */ checkVocabularyIntegration(dialogueLines, vocabularyWords) {\n        const allText = dialogueLines.map((line)=>line.line.toLowerCase()).join(\" \");\n        const integratedWords = vocabularyWords.filter((word)=>allText.includes(word.toLowerCase()));\n        return {\n            hasIntegration: integratedWords.length >= 2,\n            integratedWords\n        };\n    }\n    /**\r\n   * Generate dialogue practice section with AI\r\n   */ async generateDialoguePracticeWithContext(context, previousSections) {\n        const maxAttempts = 2;\n        let attempt = 0;\n        const sectionStartTime = Date.now();\n        // Get vocabulary words from previous sections\n        const vocabularySection = previousSections.find((s)=>s.sectionName === \"vocabulary\");\n        const vocabularyWords = vocabularySection ? vocabularySection.content.filter((item)=>item.word !== \"INSTRUCTION\").map((item)=>item.word).slice(0, 5) : context.keyVocabulary.slice(0, 5);\n        while(attempt < maxAttempts){\n            attempt++;\n            console.log(`🎯 Generating dialogue practice (attempt ${attempt}/${maxAttempts})`);\n            try {\n                // Build enhanced prompt\n                const prompt = this.buildDialoguePrompt(context, vocabularyWords, \"practice\");\n                // Generate dialogue\n                const response = await this.getGoogleAI().prompt(prompt);\n                // Parse dialogue lines\n                const dialogueLines = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0).map((line)=>{\n                    // Parse \"Speaker: text\" format\n                    const match = line.match(/^(Student|Tutor):\\s*(.+)$/i);\n                    if (match) {\n                        return {\n                            speaker: match[1].charAt(0).toUpperCase() + match[1].slice(1).toLowerCase(),\n                            text: match[2].trim()\n                        };\n                    }\n                    return null;\n                }).filter((line)=>line !== null);\n                // Validate dialogue using new validator\n                const validation = _section_validators__WEBPACK_IMPORTED_MODULE_2__.dialogueValidator.validate(dialogueLines, context.difficultyLevel, vocabularyWords);\n                if (!validation.isValid) {\n                    console.log(`⚠️ Validation failed:`, validation.issues);\n                    if (attempt < maxAttempts) {\n                        console.log(`🔄 Retrying with adjusted prompt...`);\n                        continue;\n                    }\n                    console.log(`⚠️ Using dialogue despite validation issues (max attempts reached)`);\n                } else {\n                    console.log(`✅ Dialogue practice validated successfully (${dialogueLines.length} lines)`);\n                }\n                // Track quality metrics\n                const generationTime = Date.now() - sectionStartTime;\n                _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"dialogue-practice\", validation.score, attempt, generationTime, validation.issues.length, validation.warnings.length);\n                // Generate follow-up questions\n                const followUpPrompt = `Create 3 follow-up discussion questions for ${context.difficultyLevel} level students about the dialogue topic. Return only questions, one per line:`;\n                const followUpResponse = await this.getGoogleAI().prompt(followUpPrompt);\n                const followUpQuestions = followUpResponse.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 3);\n                // Convert back to original format for compatibility\n                const formattedDialogue = dialogueLines.map((line)=>({\n                        character: line.speaker,\n                        line: line.text\n                    }));\n                return {\n                    instruction: \"Practice this conversation with your tutor:\",\n                    dialogue: formattedDialogue,\n                    followUpQuestions: followUpQuestions.length >= 3 ? followUpQuestions : [\n                        \"What did you learn from this conversation?\",\n                        \"How would you continue this discussion?\",\n                        \"What questions would you ask next?\"\n                    ]\n                };\n            } catch (error) {\n                console.error(`❌ Attempt ${attempt} failed:`, error);\n                if (attempt >= maxAttempts) {\n                    // Track failed generation\n                    _quality_metrics__WEBPACK_IMPORTED_MODULE_3__.qualityMetricsTracker.recordSection(\"dialogue-practice\", 0, attempt, Date.now() - sectionStartTime, 1, 0);\n                    throw new Error(\"Failed to generate dialogue practice: \" + error.message);\n                }\n            }\n        }\n        throw new Error(\"Failed to generate dialogue practice after all attempts\");\n    }\n    /**\r\n   * Generate dialogue fill-in-gap section with AI\r\n   */ async generateDialogueFillGapWithContext(context, previousSections) {\n        const maxAttempts = 2;\n        let attempt = 0;\n        // Get vocabulary words from previous sections\n        const vocabularySection = previousSections.find((s)=>s.sectionName === \"vocabulary\");\n        const vocabularyWords = vocabularySection ? vocabularySection.content.filter((item)=>item.word !== \"INSTRUCTION\").map((item)=>item.word).slice(0, 5) : context.keyVocabulary.slice(0, 5);\n        while(attempt < maxAttempts){\n            attempt++;\n            console.log(`🎯 Generating dialogue fill-in-gap (attempt ${attempt}/${maxAttempts})`);\n            try {\n                // Build enhanced prompt\n                const prompt = this.buildDialoguePrompt(context, vocabularyWords, \"fill-in-gap\");\n                // Generate dialogue\n                const response = await this.getGoogleAI().prompt(prompt);\n                // Parse dialogue lines and extract answers\n                const dialogueLines = [];\n                const answers = [];\n                response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0).forEach((line)=>{\n                    // Parse \"Speaker: text\" format\n                    const match = line.match(/^(Student|Tutor):\\s*(.+)$/i);\n                    if (match) {\n                        const character = match[1].charAt(0).toUpperCase() + match[1].slice(1).toLowerCase();\n                        const text = match[2].trim();\n                        // Check if line has gaps\n                        const hasGap = text.includes(\"_____\");\n                        if (hasGap) {\n                            // Extract the missing word(s) - this is a simplified approach\n                            // In a real scenario, we'd need the AI to provide answers separately\n                            dialogueLines.push({\n                                character,\n                                line: text,\n                                isGap: true\n                            });\n                        // Try to infer what word should go in the gap (simplified)\n                        // For now, we'll ask AI to provide answers separately\n                        } else {\n                            dialogueLines.push({\n                                character,\n                                line: text\n                            });\n                        }\n                    }\n                });\n                // Generate answers for the gaps\n                const gapCount = dialogueLines.filter((line)=>line.isGap).length;\n                if (gapCount > 0) {\n                    const answersPrompt = `For the dialogue with ${gapCount} gaps marked with _____, provide the missing words. Return only the words, one per line, in order:`;\n                    try {\n                        const answersResponse = await this.getGoogleAI().prompt(answersPrompt);\n                        const extractedAnswers = answersResponse.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0).slice(0, gapCount);\n                        answers.push(...extractedAnswers);\n                    } catch (error) {\n                        console.log(\"⚠️ Failed to extract answers, using placeholders\");\n                        for(let i = 0; i < gapCount; i++){\n                            answers.push(\"[answer]\");\n                        }\n                    }\n                }\n                // Validate dialogue\n                const validation = this.validateDialogue(dialogueLines, context, \"fill-in-gap\");\n                if (!validation.isValid) {\n                    console.log(`⚠️ Validation failed:`, validation.issues);\n                    if (attempt < maxAttempts) {\n                        console.log(`🔄 Retrying with adjusted prompt...`);\n                        continue;\n                    }\n                    console.log(`⚠️ Using dialogue despite validation issues (max attempts reached)`);\n                } else {\n                    console.log(`✅ Dialogue fill-in-gap validated successfully (${dialogueLines.length} lines)`);\n                }\n                return {\n                    instruction: \"Fill in the gaps in this conversation:\",\n                    dialogue: dialogueLines,\n                    answers: answers.length > 0 ? answers : [\n                        \"answer1\",\n                        \"answer2\",\n                        \"answer3\"\n                    ]\n                };\n            } catch (error) {\n                console.error(`❌ Attempt ${attempt} failed:`, error);\n                if (attempt >= maxAttempts) {\n                    throw new Error(\"Failed to generate dialogue fill-in-gap: \" + error.message);\n                }\n            }\n        }\n        throw new Error(\"Failed to generate dialogue fill-in-gap after all attempts\");\n    }\n    // Fallback methods for when AI extraction fails\n    extractVocabularyFallback(sourceText, _studentLevel) {\n        const words = sourceText.toLowerCase().match(/\\b[a-z]{4,12}\\b/g) || [];\n        const commonWords = [\n            \"the\",\n            \"and\",\n            \"that\",\n            \"have\",\n            \"for\",\n            \"not\",\n            \"with\",\n            \"you\",\n            \"this\",\n            \"but\",\n            \"his\",\n            \"from\",\n            \"they\"\n        ];\n        const filteredWords = words.filter((word)=>!commonWords.includes(word)).filter((word, index, arr)=>arr.indexOf(word) === index).slice(0, 8);\n        return filteredWords.length >= 4 ? filteredWords : [\n            \"communication\",\n            \"important\",\n            \"different\",\n            \"example\",\n            \"information\",\n            \"situation\"\n        ];\n    }\n    extractThemesFallback(sourceText) {\n        const text = sourceText.toLowerCase();\n        const themes = [];\n        // Look for common themes\n        if (text.includes(\"sport\") || text.includes(\"game\") || text.includes(\"team\")) themes.push(\"sports\");\n        if (text.includes(\"business\") || text.includes(\"company\") || text.includes(\"work\")) themes.push(\"business\");\n        if (text.includes(\"travel\") || text.includes(\"country\") || text.includes(\"culture\")) themes.push(\"travel\");\n        if (text.includes(\"technology\") || text.includes(\"computer\") || text.includes(\"internet\")) themes.push(\"technology\");\n        if (text.includes(\"health\") || text.includes(\"medical\") || text.includes(\"doctor\")) themes.push(\"health\");\n        return themes.length > 0 ? themes : [\n            \"general topic\",\n            \"communication\",\n            \"daily life\"\n        ];\n    }\n    extractThemesFromText(text) {\n        return this.extractThemesFallback(text);\n    }\n    capitalizeWord(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/progressive-generator.ts\n");

/***/ }),

/***/ "(rsc)/./lib/quality-metrics.ts":
/*!********************************!*\
  !*** ./lib/quality-metrics.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QualityMetricsTracker: () => (/* binding */ QualityMetricsTracker),\n/* harmony export */   qualityMetricsTracker: () => (/* binding */ qualityMetricsTracker)\n/* harmony export */ });\n/**\r\n * Quality Metrics Tracker\r\n * \r\n * Tracks quality metrics for each lesson section during generation\r\n */ class QualityMetricsTracker {\n    /**\r\n   * Record metrics for a section\r\n   */ recordSection(sectionName, validationScore, attemptCount, generationTimeMs, issueCount, warningCount) {\n        this.metrics.set(sectionName, {\n            sectionName,\n            validationScore,\n            attemptCount,\n            generationTimeMs,\n            issueCount,\n            warningCount,\n            regenerated: attemptCount > 1\n        });\n        console.log(`📊 Quality metrics for ${sectionName}:`, {\n            score: validationScore,\n            attempts: attemptCount,\n            time: `${generationTimeMs}ms`,\n            issues: issueCount,\n            warnings: warningCount\n        });\n    }\n    /**\r\n   * Get metrics for a specific section\r\n   */ getSectionMetrics(sectionName) {\n        return this.metrics.get(sectionName);\n    }\n    /**\r\n   * Get all section metrics\r\n   */ getAllMetrics() {\n        return Array.from(this.metrics.values());\n    }\n    /**\r\n   * Calculate overall lesson quality score\r\n   */ calculateOverallScore() {\n        const sections = this.getAllMetrics();\n        if (sections.length === 0) return 0;\n        const totalScore = sections.reduce((sum, section)=>sum + section.validationScore, 0);\n        return Math.round(totalScore / sections.length);\n    }\n    /**\r\n   * Get total regeneration count\r\n   */ getTotalRegenerations() {\n        return this.getAllMetrics().filter((s)=>s.regenerated).length;\n    }\n    /**\r\n   * Get complete lesson quality report\r\n   */ getQualityReport() {\n        const sections = this.getAllMetrics();\n        const totalTime = Date.now() - this.startTime;\n        return {\n            overallScore: this.calculateOverallScore(),\n            sections,\n            totalGenerationTimeMs: totalTime,\n            totalRegenerations: this.getTotalRegenerations(),\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\r\n   * Log quality summary\r\n   */ logSummary() {\n        const report = this.getQualityReport();\n        console.log(\"\\n\" + \"=\".repeat(60));\n        console.log(\"\\uD83D\\uDCCA LESSON QUALITY REPORT\");\n        console.log(\"=\".repeat(60));\n        console.log(`Overall Quality Score: ${report.overallScore}/100`);\n        console.log(`Total Generation Time: ${(report.totalGenerationTimeMs / 1000).toFixed(2)}s`);\n        console.log(`Total Regenerations: ${report.totalRegenerations}`);\n        console.log(\"\\nSection Breakdown:\");\n        report.sections.forEach((section)=>{\n            const status = section.regenerated ? \"\\uD83D\\uDD04\" : \"✅\";\n            console.log(`  ${status} ${section.sectionName}: ${section.validationScore}/100 (${section.attemptCount} attempts, ${section.issueCount} issues, ${section.warningCount} warnings)`);\n        });\n        console.log(\"=\".repeat(60) + \"\\n\");\n    }\n    /**\r\n   * Reset metrics for new lesson generation\r\n   */ reset() {\n        this.metrics.clear();\n        this.startTime = Date.now();\n    }\n    constructor(){\n        this.metrics = new Map();\n        this.startTime = Date.now();\n    }\n}\n// Export singleton instance\nconst qualityMetricsTracker = new QualityMetricsTracker();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/quality-metrics.ts\n");

/***/ }),

/***/ "(rsc)/./lib/section-validators.ts":
/*!***********************************!*\
  !*** ./lib/section-validators.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DialogueValidator: () => (/* binding */ DialogueValidator),\n/* harmony export */   DiscussionValidator: () => (/* binding */ DiscussionValidator),\n/* harmony export */   GrammarValidator: () => (/* binding */ GrammarValidator),\n/* harmony export */   PronunciationValidator: () => (/* binding */ PronunciationValidator),\n/* harmony export */   dialogueValidator: () => (/* binding */ dialogueValidator),\n/* harmony export */   discussionValidator: () => (/* binding */ discussionValidator),\n/* harmony export */   grammarValidator: () => (/* binding */ grammarValidator),\n/* harmony export */   pronunciationValidator: () => (/* binding */ pronunciationValidator)\n/* harmony export */ });\n/**\r\n * Section Validators\r\n * \r\n * Comprehensive validation for all lesson sections to ensure quality standards\r\n */ /**\r\n * Dialogue Section Validator\r\n */ class DialogueValidator {\n    validate(dialogueLines, cefrLevel, vocabularyWords) {\n        const issues = [];\n        const warnings = [];\n        // Validate line count\n        if (dialogueLines.length < this.MIN_DIALOGUE_LINES) {\n            issues.push({\n                type: \"count_error\",\n                severity: \"error\",\n                message: `Insufficient dialogue lines: expected at least ${this.MIN_DIALOGUE_LINES}, got ${dialogueLines.length}`,\n                suggestion: \"Generate more dialogue lines\"\n            });\n        }\n        // Validate complexity matches CEFR level\n        this.validateComplexity(dialogueLines, cefrLevel, issues, warnings);\n        // Validate vocabulary integration\n        this.validateVocabularyIntegration(dialogueLines, vocabularyWords, warnings);\n        // Validate natural flow\n        this.validateNaturalFlow(dialogueLines, warnings);\n        const score = this.calculateScore(issues, warnings, dialogueLines.length);\n        return {\n            isValid: issues.length === 0,\n            issues,\n            warnings,\n            score\n        };\n    }\n    validateComplexity(lines, cefrLevel, issues, warnings) {\n        const complexityRanges = {\n            \"A1\": {\n                minWords: 3,\n                maxWords: 8\n            },\n            \"A2\": {\n                minWords: 5,\n                maxWords: 12\n            },\n            \"B1\": {\n                minWords: 8,\n                maxWords: 15\n            },\n            \"B2\": {\n                minWords: 10,\n                maxWords: 20\n            },\n            \"C1\": {\n                minWords: 12,\n                maxWords: 25\n            }\n        };\n        const range = complexityRanges[cefrLevel];\n        lines.forEach((line, index)=>{\n            const wordCount = line.text.split(/\\s+/).length;\n            if (wordCount < range.minWords) {\n                warnings.push({\n                    type: \"complexity_mismatch\",\n                    severity: \"warning\",\n                    message: `Line ${index + 1} too short for ${cefrLevel} (${wordCount} words)`,\n                    itemIndex: index,\n                    suggestion: `Lines should be ${range.minWords}-${range.maxWords} words`\n                });\n            }\n        });\n    }\n    validateVocabularyIntegration(lines, vocabularyWords, warnings) {\n        const allText = lines.map((l)=>l.text.toLowerCase()).join(\" \");\n        const usedVocab = vocabularyWords.filter((word)=>allText.includes(word.toLowerCase()));\n        if (usedVocab.length < Math.min(3, vocabularyWords.length)) {\n            warnings.push({\n                type: \"vocabulary_integration\",\n                severity: \"warning\",\n                message: `Only ${usedVocab.length} vocabulary words used in dialogue`,\n                suggestion: \"Integrate more lesson vocabulary into dialogue\"\n            });\n        }\n    }\n    validateNaturalFlow(lines, warnings) {\n        // Check for speaker alternation\n        for(let i = 1; i < lines.length; i++){\n            if (lines[i].speaker === lines[i - 1].speaker) {\n                warnings.push({\n                    type: \"flow_issue\",\n                    severity: \"warning\",\n                    message: `Same speaker has consecutive lines at position ${i}`,\n                    itemIndex: i,\n                    suggestion: \"Alternate speakers for natural conversation flow\"\n                });\n                break; // Only report once\n            }\n        }\n    }\n    calculateScore(issues, warnings, lineCount) {\n        let score = 100;\n        score -= issues.length * 20;\n        score -= warnings.length * 5;\n        if (lineCount >= this.MIN_DIALOGUE_LINES) score += 10;\n        return Math.max(0, Math.min(100, score));\n    }\n    constructor(){\n        this.MIN_DIALOGUE_LINES = 12;\n    }\n}\n/**\r\n * Discussion Questions Validator\r\n */ class DiscussionValidator {\n    validate(questions, cefrLevel) {\n        const issues = [];\n        const warnings = [];\n        // Validate question count\n        if (questions.length !== this.REQUIRED_QUESTION_COUNT) {\n            issues.push({\n                type: \"count_error\",\n                severity: \"error\",\n                message: `Expected exactly ${this.REQUIRED_QUESTION_COUNT} questions, got ${questions.length}`,\n                suggestion: `Generate exactly ${this.REQUIRED_QUESTION_COUNT} questions`\n            });\n        }\n        // Validate question format\n        questions.forEach((question, index)=>{\n            if (!question.endsWith(\"?\")) {\n                issues.push({\n                    type: \"format_error\",\n                    severity: \"error\",\n                    message: `Question ${index + 1} doesn't end with question mark`,\n                    itemIndex: index\n                });\n            }\n            if (question.length < 10) {\n                issues.push({\n                    type: \"format_error\",\n                    severity: \"error\",\n                    message: `Question ${index + 1} too short`,\n                    itemIndex: index\n                });\n            }\n        });\n        // Validate complexity matches CEFR level\n        this.validateQuestionComplexity(questions, cefrLevel, issues, warnings);\n        // Validate question variety\n        this.validateQuestionVariety(questions, warnings);\n        const score = this.calculateScore(issues, warnings, questions.length);\n        return {\n            isValid: issues.length === 0,\n            issues,\n            warnings,\n            score\n        };\n    }\n    validateQuestionComplexity(questions, cefrLevel, issues, warnings) {\n        const expectedTypes = {\n            \"A1\": [\n                \"simple\",\n                \"factual\"\n            ],\n            \"A2\": [\n                \"simple\",\n                \"factual\"\n            ],\n            \"B1\": [\n                \"opinion\",\n                \"comparison\"\n            ],\n            \"B2\": [\n                \"analytical\",\n                \"evaluative\"\n            ],\n            \"C1\": [\n                \"analytical\",\n                \"evaluative\",\n                \"hypothetical\"\n            ]\n        };\n        const allText = questions.join(\" \").toLowerCase();\n        // Check for appropriate question types\n        if ([\n            \"B2\",\n            \"C1\"\n        ].includes(cefrLevel)) {\n            const hasAnalytical = /why do you think|what factors|how might|to what extent|in what ways/.test(allText);\n            if (!hasAnalytical) {\n                warnings.push({\n                    type: \"complexity_mismatch\",\n                    severity: \"warning\",\n                    message: `Questions lack analytical depth for ${cefrLevel} level`,\n                    suggestion: \"Include more analytical or evaluative questions\"\n                });\n            }\n        }\n        if ([\n            \"A1\",\n            \"A2\"\n        ].includes(cefrLevel)) {\n            const hasTooComplex = /hypothetically|analyze|evaluate|implications/.test(allText);\n            if (hasTooComplex) {\n                warnings.push({\n                    type: \"complexity_mismatch\",\n                    severity: \"warning\",\n                    message: `Questions may be too complex for ${cefrLevel} level`,\n                    suggestion: \"Use simpler question structures\"\n                });\n            }\n        }\n    }\n    validateQuestionVariety(questions, warnings) {\n        const starters = questions.map((q)=>q.trim().split(\" \")[0].toLowerCase());\n        const uniqueStarters = new Set(starters);\n        if (uniqueStarters.size < 3) {\n            warnings.push({\n                type: \"variety_issue\",\n                severity: \"warning\",\n                message: \"Limited question variety\",\n                suggestion: \"Use different question types (What, Why, How, etc.)\"\n            });\n        }\n    }\n    calculateScore(issues, warnings, questionCount) {\n        let score = 100;\n        score -= issues.length * 20;\n        score -= warnings.length * 5;\n        if (questionCount === this.REQUIRED_QUESTION_COUNT) score += 10;\n        return Math.max(0, Math.min(100, score));\n    }\n    constructor(){\n        this.REQUIRED_QUESTION_COUNT = 5;\n    }\n}\n/**\r\n * Grammar Section Validator\r\n */ class GrammarValidator {\n    validate(grammarSection, cefrLevel) {\n        const issues = [];\n        const warnings = [];\n        // Validate completeness\n        if (!grammarSection.rule || grammarSection.rule.length < 10) {\n            issues.push({\n                type: \"completeness_error\",\n                severity: \"error\",\n                message: \"Grammar rule explanation missing or too short\",\n                suggestion: \"Provide clear explanation of the grammar rule\"\n            });\n        }\n        if (!grammarSection.form || grammarSection.form.length < 10) {\n            issues.push({\n                type: \"completeness_error\",\n                severity: \"error\",\n                message: \"Grammar form explanation missing or too short\",\n                suggestion: \"Explain the grammatical form\"\n            });\n        }\n        if (!grammarSection.usage || grammarSection.usage.length < 10) {\n            issues.push({\n                type: \"completeness_error\",\n                severity: \"error\",\n                message: \"Grammar usage explanation missing or too short\",\n                suggestion: \"Explain when and how to use this grammar\"\n            });\n        }\n        // Validate examples\n        if (!grammarSection.examples || grammarSection.examples.length < 3) {\n            issues.push({\n                type: \"completeness_error\",\n                severity: \"error\",\n                message: \"Insufficient example sentences\",\n                suggestion: \"Provide at least 3 example sentences\"\n            });\n        }\n        // Validate exercises\n        if (!grammarSection.exercises || grammarSection.exercises.length < this.MIN_EXERCISES) {\n            issues.push({\n                type: \"count_error\",\n                severity: \"error\",\n                message: `Insufficient exercises: expected at least ${this.MIN_EXERCISES}, got ${grammarSection.exercises?.length || 0}`,\n                suggestion: `Provide at least ${this.MIN_EXERCISES} practice exercises`\n            });\n        }\n        // Validate exercise quality\n        if (grammarSection.exercises) {\n            grammarSection.exercises.forEach((exercise, index)=>{\n                if (!exercise.prompt || exercise.prompt.length < 5) {\n                    issues.push({\n                        type: \"quality_issue\",\n                        severity: \"error\",\n                        message: `Exercise ${index + 1} has invalid prompt`,\n                        itemIndex: index\n                    });\n                }\n                if (!exercise.answer || exercise.answer.length < 1) {\n                    issues.push({\n                        type: \"quality_issue\",\n                        severity: \"error\",\n                        message: `Exercise ${index + 1} missing answer`,\n                        itemIndex: index\n                    });\n                }\n            });\n        }\n        const score = this.calculateScore(issues, warnings, grammarSection.exercises?.length || 0);\n        return {\n            isValid: issues.length === 0,\n            issues,\n            warnings,\n            score\n        };\n    }\n    calculateScore(issues, warnings, exerciseCount) {\n        let score = 100;\n        score -= issues.length * 15;\n        score -= warnings.length * 5;\n        if (exerciseCount >= this.MIN_EXERCISES) score += 10;\n        return Math.max(0, Math.min(100, score));\n    }\n    constructor(){\n        this.MIN_EXERCISES = 5;\n    }\n}\n/**\r\n * Pronunciation Section Validator\r\n */ class PronunciationValidator {\n    validate(pronunciationSection) {\n        const issues = [];\n        const warnings = [];\n        // Validate word count\n        if (!pronunciationSection.words || pronunciationSection.words.length < this.MIN_WORDS) {\n            issues.push({\n                type: \"count_error\",\n                severity: \"error\",\n                message: `Insufficient pronunciation words: expected at least ${this.MIN_WORDS}, got ${pronunciationSection.words?.length || 0}`,\n                suggestion: `Include at least ${this.MIN_WORDS} challenging words`\n            });\n        }\n        // Validate tongue twister count\n        if (!pronunciationSection.tongueTwisters || pronunciationSection.tongueTwisters.length < this.MIN_TONGUE_TWISTERS) {\n            issues.push({\n                type: \"count_error\",\n                severity: \"error\",\n                message: `Insufficient tongue twisters: expected at least ${this.MIN_TONGUE_TWISTERS}, got ${pronunciationSection.tongueTwisters?.length || 0}`,\n                suggestion: `Include at least ${this.MIN_TONGUE_TWISTERS} tongue twisters`\n            });\n        }\n        // Validate word completeness\n        if (pronunciationSection.words) {\n            pronunciationSection.words.forEach((wordItem, index)=>{\n                if (!wordItem.word || wordItem.word.length < 2) {\n                    issues.push({\n                        type: \"completeness_error\",\n                        severity: \"error\",\n                        message: `Word ${index + 1} is invalid`,\n                        itemIndex: index\n                    });\n                }\n                if (!wordItem.ipa || wordItem.ipa.length < 2) {\n                    issues.push({\n                        type: \"completeness_error\",\n                        severity: \"error\",\n                        message: `Word ${index + 1} missing IPA transcription`,\n                        itemIndex: index,\n                        suggestion: \"Provide IPA transcription for pronunciation\"\n                    });\n                }\n                if (!wordItem.tips || wordItem.tips.length === 0) {\n                    warnings.push({\n                        type: \"completeness_warning\",\n                        severity: \"warning\",\n                        message: `Word ${index + 1} missing pronunciation tips`,\n                        itemIndex: index,\n                        suggestion: \"Add pronunciation tips for difficult sounds\"\n                    });\n                }\n                if (!wordItem.practiceSentence || wordItem.practiceSentence.length < 10) {\n                    warnings.push({\n                        type: \"completeness_warning\",\n                        severity: \"warning\",\n                        message: `Word ${index + 1} missing practice sentence`,\n                        itemIndex: index,\n                        suggestion: \"Provide practice sentence using the word\"\n                    });\n                }\n            });\n        }\n        // Validate tongue twister completeness\n        if (pronunciationSection.tongueTwisters) {\n            pronunciationSection.tongueTwisters.forEach((twister, index)=>{\n                if (!twister.text || twister.text.length < 15) {\n                    issues.push({\n                        type: \"completeness_error\",\n                        severity: \"error\",\n                        message: `Tongue twister ${index + 1} too short or missing`,\n                        itemIndex: index\n                    });\n                }\n                if (!twister.targetSounds || twister.targetSounds.length === 0) {\n                    warnings.push({\n                        type: \"completeness_warning\",\n                        severity: \"warning\",\n                        message: `Tongue twister ${index + 1} missing target sounds`,\n                        itemIndex: index\n                    });\n                }\n            });\n        }\n        const score = this.calculateScore(issues, warnings, pronunciationSection.words?.length || 0, pronunciationSection.tongueTwisters?.length || 0);\n        return {\n            isValid: issues.length === 0,\n            issues,\n            warnings,\n            score\n        };\n    }\n    calculateScore(issues, warnings, wordCount, twisterCount) {\n        let score = 100;\n        score -= issues.length * 15;\n        score -= warnings.length * 5;\n        if (wordCount >= this.MIN_WORDS) score += 5;\n        if (twisterCount >= this.MIN_TONGUE_TWISTERS) score += 5;\n        return Math.max(0, Math.min(100, score));\n    }\n    constructor(){\n        this.MIN_WORDS = 5;\n        this.MIN_TONGUE_TWISTERS = 2;\n    }\n}\n// Export validator instances\nconst dialogueValidator = new DialogueValidator();\nconst discussionValidator = new DiscussionValidator();\nconst grammarValidator = new GrammarValidator();\nconst pronunciationValidator = new PronunciationValidator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/section-validators.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   getSupabaseClient: () => (/* binding */ getSupabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://jbkpnirowdvlwlgheqho.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impia3BuaXJvd2R2bHdsZ2hlcWhvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MTQ3NTEsImV4cCI6MjA3NDQ5MDc1MX0.FZhruXKDzIkZLhla5oerfs7yzjvTsGLlKTUer34N6N0\" || 0;\nconsole.log(\"[Supabase] Initializing with URL:\", supabaseUrl);\n// Browser client (for client components)\nconst createClient = ()=>{\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n        auth: {\n            persistSession: true,\n            autoRefreshToken: true,\n            detectSessionInUrl: true,\n            flowType: \"pkce\",\n            // Refresh token before it expires\n            storage:  false ? 0 : undefined\n        },\n        global: {\n            headers: {\n                \"X-Client-Info\": \"linguaspark-web\"\n            }\n        }\n    });\n};\n// Singleton pattern for browser client\nlet supabaseClient = null;\nconst getSupabaseClient = ()=>{\n    if (!supabaseClient) {\n        console.log(\"[Supabase] Creating new client instance\");\n        supabaseClient = createClient();\n        // Set up auth state change listener to handle token refresh\n        supabaseClient.auth.onAuthStateChange((event, session)=>{\n            console.log(\"[Supabase] Auth state changed:\", event);\n            if (event === \"TOKEN_REFRESHED\") {\n                console.log(\"[Supabase] Token refreshed successfully\");\n            }\n            if (event === \"SIGNED_OUT\") {\n                console.log(\"[Supabase] User signed out\");\n            }\n        });\n    }\n    return supabaseClient;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRFO0FBRTVFLE1BQU1FLGNBQWNDLDBDQUFvQyxJQUFJO0FBQzVELE1BQU1HLGtCQUFrQkgsa05BQXlDLElBQUk7QUFFckVLLFFBQVFDLEdBQUcsQ0FBQyxxQ0FBcUNQO0FBRWpELHlDQUF5QztBQUNsQyxNQUFNRixlQUFlO0lBQzFCLE9BQU9DLG1FQUFvQkEsQ0FBQ0MsYUFBYUksaUJBQWlCO1FBQ3hESSxNQUFNO1lBQ0pDLGdCQUFnQjtZQUNoQkMsa0JBQWtCO1lBQ2xCQyxvQkFBb0I7WUFDcEJDLFVBQVU7WUFDVixrQ0FBa0M7WUFDbENDLFNBQVMsTUFBa0IsR0FBY0MsQ0FBbUIsR0FBR0U7UUFDakU7UUFDQUMsUUFBUTtZQUNOQyxTQUFTO2dCQUNQLGlCQUFpQjtZQUNuQjtRQUNGO0lBQ0Y7QUFDRixFQUFDO0FBRUQsdUNBQXVDO0FBQ3ZDLElBQUlDLGlCQUFpRTtBQUU5RCxNQUFNQyxvQkFBb0I7SUFDL0IsSUFBSSxDQUFDRCxnQkFBZ0I7UUFDbkJiLFFBQVFDLEdBQUcsQ0FBQztRQUNaWSxpQkFBaUJyQjtRQUVqQiw0REFBNEQ7UUFDNURxQixlQUFlWCxJQUFJLENBQUNhLGlCQUFpQixDQUFDLENBQUNDLE9BQU9DO1lBQzVDakIsUUFBUUMsR0FBRyxDQUFDLGtDQUFrQ2U7WUFDOUMsSUFBSUEsVUFBVSxtQkFBbUI7Z0JBQy9CaEIsUUFBUUMsR0FBRyxDQUFDO1lBQ2Q7WUFDQSxJQUFJZSxVQUFVLGNBQWM7Z0JBQzFCaEIsUUFBUUMsR0FBRyxDQUFDO1lBQ2Q7UUFDRjtJQUNGO0lBQ0EsT0FBT1k7QUFDVCxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL2xpYi9zdXBhYmFzZS50cz9jOTlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCBhcyBjcmVhdGVTdXBhYmFzZUNsaWVudCB9IGZyb20gXCJAc3VwYWJhc2Uvc3VwYWJhc2UtanNcIlxuXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCAnaHR0cHM6Ly9wbGFjZWhvbGRlci5zdXBhYmFzZS5jbydcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIHx8ICdwbGFjZWhvbGRlci1rZXknXG5cbmNvbnNvbGUubG9nKCdbU3VwYWJhc2VdIEluaXRpYWxpemluZyB3aXRoIFVSTDonLCBzdXBhYmFzZVVybClcblxuLy8gQnJvd3NlciBjbGllbnQgKGZvciBjbGllbnQgY29tcG9uZW50cylcbmV4cG9ydCBjb25zdCBjcmVhdGVDbGllbnQgPSAoKSA9PiB7XG4gIHJldHVybiBjcmVhdGVTdXBhYmFzZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5LCB7XG4gICAgYXV0aDoge1xuICAgICAgcGVyc2lzdFNlc3Npb246IHRydWUsXG4gICAgICBhdXRvUmVmcmVzaFRva2VuOiB0cnVlLFxuICAgICAgZGV0ZWN0U2Vzc2lvbkluVXJsOiB0cnVlLFxuICAgICAgZmxvd1R5cGU6ICdwa2NlJyxcbiAgICAgIC8vIFJlZnJlc2ggdG9rZW4gYmVmb3JlIGl0IGV4cGlyZXNcbiAgICAgIHN0b3JhZ2U6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93LmxvY2FsU3RvcmFnZSA6IHVuZGVmaW5lZCxcbiAgICB9LFxuICAgIGdsb2JhbDoge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnWC1DbGllbnQtSW5mbyc6ICdsaW5ndWFzcGFyay13ZWInXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG4vLyBTaW5nbGV0b24gcGF0dGVybiBmb3IgYnJvd3NlciBjbGllbnRcbmxldCBzdXBhYmFzZUNsaWVudDogUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlU3VwYWJhc2VDbGllbnQ+IHwgbnVsbCA9IG51bGxcblxuZXhwb3J0IGNvbnN0IGdldFN1cGFiYXNlQ2xpZW50ID0gKCkgPT4ge1xuICBpZiAoIXN1cGFiYXNlQ2xpZW50KSB7XG4gICAgY29uc29sZS5sb2coJ1tTdXBhYmFzZV0gQ3JlYXRpbmcgbmV3IGNsaWVudCBpbnN0YW5jZScpXG4gICAgc3VwYWJhc2VDbGllbnQgPSBjcmVhdGVDbGllbnQoKVxuICAgIFxuICAgIC8vIFNldCB1cCBhdXRoIHN0YXRlIGNoYW5nZSBsaXN0ZW5lciB0byBoYW5kbGUgdG9rZW4gcmVmcmVzaFxuICAgIHN1cGFiYXNlQ2xpZW50LmF1dGgub25BdXRoU3RhdGVDaGFuZ2UoKGV2ZW50LCBzZXNzaW9uKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnW1N1cGFiYXNlXSBBdXRoIHN0YXRlIGNoYW5nZWQ6JywgZXZlbnQpXG4gICAgICBpZiAoZXZlbnQgPT09ICdUT0tFTl9SRUZSRVNIRUQnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbU3VwYWJhc2VdIFRva2VuIHJlZnJlc2hlZCBzdWNjZXNzZnVsbHknKVxuICAgICAgfVxuICAgICAgaWYgKGV2ZW50ID09PSAnU0lHTkVEX09VVCcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tTdXBhYmFzZV0gVXNlciBzaWduZWQgb3V0JylcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIHJldHVybiBzdXBhYmFzZUNsaWVudFxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsImNyZWF0ZVN1cGFiYXNlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJjb25zb2xlIiwibG9nIiwiYXV0aCIsInBlcnNpc3RTZXNzaW9uIiwiYXV0b1JlZnJlc2hUb2tlbiIsImRldGVjdFNlc3Npb25JblVybCIsImZsb3dUeXBlIiwic3RvcmFnZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsInVuZGVmaW5lZCIsImdsb2JhbCIsImhlYWRlcnMiLCJzdXBhYmFzZUNsaWVudCIsImdldFN1cGFiYXNlQ2xpZW50Iiwib25BdXRoU3RhdGVDaGFuZ2UiLCJldmVudCIsInNlc3Npb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./lib/usage-monitor.ts":
/*!******************************!*\
  !*** ./lib/usage-monitor.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryUsageMonitor: () => (/* binding */ InMemoryUsageMonitor),\n/* harmony export */   usageMonitor: () => (/* binding */ usageMonitor)\n/* harmony export */ });\n/**\r\n * Usage Monitor System\r\n * \r\n * Provides comprehensive logging and monitoring for AI lesson generation,\r\n * tracking token usage, errors, and optimization savings.\r\n */ /**\r\n * In-Memory Usage Monitor Implementation\r\n * \r\n * Stores usage data in memory with optional persistence to console/external systems.\r\n * In production, this could be extended to use a database or external logging service.\r\n */ class InMemoryUsageMonitor {\n    /**\r\n   * Generate unique ID for log entries\r\n   */ generateId() {\n        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\r\n   * Log token usage for a lesson section\r\n   */ logTokenUsage(section, tokens, optimization, context) {\n        const entry = {\n            id: this.generateId(),\n            timestamp: new Date(),\n            section,\n            tokens,\n            optimization,\n            userId: context?.userId,\n            lessonId: context?.lessonId\n        };\n        this.usageLogs.push(entry);\n        this.trimLogs();\n        // Console logging for development\n        console.log(`[UsageMonitor] Token usage - Section: ${section}, Tokens: ${tokens}, Optimization: ${optimization}`);\n    }\n    /**\r\n   * Log errors with context\r\n   */ logError(error, errorType, context) {\n        const entry = {\n            id: this.generateId(),\n            timestamp: new Date(),\n            errorType,\n            errorMessage: error.message,\n            context: {\n                lessonType: context.lessonType,\n                difficultyLevel: context.difficultyLevel,\n                contentLength: context.contentLength,\n                timestamp: context.timestamp\n            },\n            userId: context.userId,\n            lessonId: context.lessonId,\n            stackTrace: error.stack\n        };\n        this.errorLogs.push(entry);\n        this.trimLogs();\n        // Console logging for development\n        console.error(`[UsageMonitor] Error - Type: ${errorType}, Message: ${error.message}`, {\n            context,\n            errorId: entry.id\n        });\n    }\n    /**\r\n   * Log optimization savings\r\n   */ logOptimizationSavings(baseline, optimized, strategy, context) {\n        const savings = baseline - optimized;\n        const savingsPercentage = baseline > 0 ? savings / baseline * 100 : 0;\n        const entry = {\n            id: this.generateId(),\n            timestamp: new Date(),\n            strategy,\n            baselineTokens: baseline,\n            optimizedTokens: optimized,\n            savingsPercentage,\n            userId: context?.userId,\n            lessonId: context?.lessonId\n        };\n        this.optimizationLogs.push(entry);\n        this.trimLogs();\n        // Console logging for development\n        console.log(`[UsageMonitor] Optimization - Strategy: ${strategy}, Savings: ${savings} tokens (${savingsPercentage.toFixed(1)}%)`);\n    }\n    /**\r\n   * Generate comprehensive usage report\r\n   */ async generateUsageReport(startDate, endDate) {\n        const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Default: 30 days ago\n        const end = endDate || new Date();\n        // Filter logs by date range\n        const filteredUsageLogs = this.usageLogs.filter((log)=>log.timestamp >= start && log.timestamp <= end);\n        const filteredErrorLogs = this.errorLogs.filter((log)=>log.timestamp >= start && log.timestamp <= end);\n        const filteredOptimizationLogs = this.optimizationLogs.filter((log)=>log.timestamp >= start && log.timestamp <= end);\n        // Calculate metrics\n        const uniqueLessons = new Set(filteredUsageLogs.map((log)=>log.lessonId).filter(Boolean));\n        const totalLessons = uniqueLessons.size;\n        const totalTokens = filteredUsageLogs.reduce((sum, log)=>sum + log.tokens, 0);\n        const averageTokensPerLesson = totalLessons > 0 ? totalTokens / totalLessons : 0;\n        const totalOptimizationSavings = filteredOptimizationLogs.reduce((sum, log)=>sum + (log.baselineTokens - log.optimizedTokens), 0);\n        const errorRate = totalLessons > 0 ? filteredErrorLogs.length / totalLessons * 100 : 0;\n        // Top optimization strategies\n        const strategyStats = new Map();\n        filteredOptimizationLogs.forEach((log)=>{\n            const current = strategyStats.get(log.strategy) || {\n                usage: 0,\n                totalSavings: 0\n            };\n            current.usage++;\n            current.totalSavings += log.baselineTokens - log.optimizedTokens;\n            strategyStats.set(log.strategy, current);\n        });\n        const topOptimizationStrategies = Array.from(strategyStats.entries()).map(([strategy, stats])=>({\n                strategy,\n                usage: stats.usage,\n                averageSavings: stats.usage > 0 ? stats.totalSavings / stats.usage : 0\n            })).sort((a, b)=>b.usage - a.usage).slice(0, 5);\n        // Error breakdown\n        const errorBreakdown = {};\n        filteredErrorLogs.forEach((log)=>{\n            errorBreakdown[log.errorType] = (errorBreakdown[log.errorType] || 0) + 1;\n        });\n        // Section token breakdown\n        const sectionTokenBreakdown = {};\n        filteredUsageLogs.forEach((log)=>{\n            sectionTokenBreakdown[log.section] = (sectionTokenBreakdown[log.section] || 0) + log.tokens;\n        });\n        return {\n            period: {\n                start,\n                end\n            },\n            totalLessons,\n            totalTokens,\n            averageTokensPerLesson,\n            totalOptimizationSavings,\n            errorRate,\n            topOptimizationStrategies,\n            errorBreakdown,\n            sectionTokenBreakdown\n        };\n    }\n    /**\r\n   * Get usage metrics for a specific lesson\r\n   */ async getLessonMetrics(lessonId) {\n        const lessonLogs = this.usageLogs.filter((log)=>log.lessonId === lessonId);\n        if (lessonLogs.length === 0) {\n            return null;\n        }\n        const totalTokens = lessonLogs.reduce((sum, log)=>sum + log.tokens, 0);\n        const tokensPerSection = {};\n        lessonLogs.forEach((log)=>{\n            tokensPerSection[log.section] = (tokensPerSection[log.section] || 0) + log.tokens;\n        });\n        // Calculate optimization savings for this lesson\n        const lessonOptimizationLogs = this.optimizationLogs.filter((log)=>log.lessonId === lessonId);\n        const optimizationSavings = lessonOptimizationLogs.reduce((sum, log)=>sum + (log.baselineTokens - log.optimizedTokens), 0);\n        // Calculate generation time (time between first and last log entry)\n        const timestamps = lessonLogs.map((log)=>log.timestamp.getTime()).sort();\n        const generationTime = timestamps.length > 1 ? timestamps[timestamps.length - 1] - timestamps[0] : 0;\n        return {\n            totalTokens,\n            tokensPerSection,\n            optimizationSavings,\n            generationTime,\n            timestamp: new Date(timestamps[0])\n        };\n    }\n    /**\r\n   * Clear old logs to prevent memory overflow\r\n   */ async clearOldLogs(olderThanDays) {\n        const cutoffDate = new Date(Date.now() - olderThanDays * 24 * 60 * 60 * 1000);\n        const initialUsageCount = this.usageLogs.length;\n        const initialErrorCount = this.errorLogs.length;\n        const initialOptimizationCount = this.optimizationLogs.length;\n        this.usageLogs = this.usageLogs.filter((log)=>log.timestamp >= cutoffDate);\n        this.errorLogs = this.errorLogs.filter((log)=>log.timestamp >= cutoffDate);\n        this.optimizationLogs = this.optimizationLogs.filter((log)=>log.timestamp >= cutoffDate);\n        const clearedUsage = initialUsageCount - this.usageLogs.length;\n        const clearedErrors = initialErrorCount - this.errorLogs.length;\n        const clearedOptimizations = initialOptimizationCount - this.optimizationLogs.length;\n        console.log(`[UsageMonitor] Cleared old logs: ${clearedUsage} usage, ${clearedErrors} errors, ${clearedOptimizations} optimizations`);\n    }\n    /**\r\n   * Trim logs to prevent memory overflow\r\n   */ trimLogs() {\n        if (this.usageLogs.length > this.maxLogEntries) {\n            this.usageLogs = this.usageLogs.slice(-this.maxLogEntries);\n        }\n        if (this.errorLogs.length > this.maxLogEntries) {\n            this.errorLogs = this.errorLogs.slice(-this.maxLogEntries);\n        }\n        if (this.optimizationLogs.length > this.maxLogEntries) {\n            this.optimizationLogs = this.optimizationLogs.slice(-this.maxLogEntries);\n        }\n    }\n    /**\r\n   * Get current log counts (for debugging)\r\n   */ getLogCounts() {\n        return {\n            usage: this.usageLogs.length,\n            errors: this.errorLogs.length,\n            optimizations: this.optimizationLogs.length\n        };\n    }\n    /**\r\n   * Export logs for external analysis\r\n   */ exportLogs() {\n        return {\n            usage: [\n                ...this.usageLogs\n            ],\n            errors: [\n                ...this.errorLogs\n            ],\n            optimizations: [\n                ...this.optimizationLogs\n            ]\n        };\n    }\n    constructor(){\n        this.usageLogs = [];\n        this.errorLogs = [];\n        this.optimizationLogs = [];\n        this.maxLogEntries = 10000 // Prevent memory overflow\n        ;\n    }\n}\n// Singleton instance for global usage monitoring\nconst usageMonitor = new InMemoryUsageMonitor();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/usage-monitor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/warmup-validator.ts":
/*!*********************************!*\
  !*** ./lib/warmup-validator.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WarmupValidator: () => (/* binding */ WarmupValidator)\n/* harmony export */ });\n/**\r\n * Warm-up question validator\r\n * Validates that warm-up questions meet pedagogical requirements\r\n */ class WarmupValidator {\n    /**\r\n   * Validate warm-up questions against all quality criteria\r\n   */ validate(questions, cefrLevel, context) {\n        const issues = [];\n        const warnings = [];\n        // 1. Validate question count\n        this.validateQuestionCount(questions, issues);\n        // 2. Validate question format\n        this.validateQuestionFormat(questions, issues, warnings);\n        // 3. Validate no content assumptions\n        this.validateNoContentAssumptions(questions, issues, warnings);\n        // 4. Validate CEFR level appropriateness\n        this.validateCEFRComplexity(questions, cefrLevel, issues, warnings);\n        // 5. Validate pedagogical quality\n        this.validatePedagogicalQuality(questions, issues, warnings);\n        // Calculate quality score\n        const score = this.calculateQualityScore(issues, warnings, questions.length);\n        return {\n            isValid: issues.length === 0,\n            issues,\n            warnings,\n            score\n        };\n    }\n    /**\r\n   * Validate that we have the correct number of questions\r\n   */ validateQuestionCount(questions, issues) {\n        if (questions.length < this.REQUIRED_QUESTION_COUNT) {\n            issues.push({\n                type: \"count_error\",\n                severity: \"error\",\n                message: `Insufficient questions: expected ${this.REQUIRED_QUESTION_COUNT}, got ${questions.length}`,\n                suggestion: \"Generate more questions to meet the requirement\"\n            });\n        } else if (questions.length > this.REQUIRED_QUESTION_COUNT) {\n            issues.push({\n                type: \"count_error\",\n                severity: \"error\",\n                message: `Too many questions: expected ${this.REQUIRED_QUESTION_COUNT}, got ${questions.length}`,\n                suggestion: \"Remove extra questions to meet the requirement\"\n            });\n        }\n    }\n    /**\r\n   * Validate question format (length, punctuation, structure)\r\n   */ validateQuestionFormat(questions, issues, warnings) {\n        questions.forEach((question, index)=>{\n            // Check length\n            if (question.length < this.MIN_QUESTION_LENGTH) {\n                issues.push({\n                    type: \"format_error\",\n                    severity: \"error\",\n                    message: `Question ${index + 1} is too short (${question.length} characters)`,\n                    questionIndex: index,\n                    suggestion: \"Questions should be at least 10 characters long\"\n                });\n            }\n            if (question.length > this.MAX_QUESTION_LENGTH) {\n                warnings.push({\n                    type: \"format_error\",\n                    severity: \"warning\",\n                    message: `Question ${index + 1} is very long (${question.length} characters)`,\n                    questionIndex: index,\n                    suggestion: \"Consider simplifying the question\"\n                });\n            }\n            // Check for question mark\n            if (!question.endsWith(\"?\")) {\n                issues.push({\n                    type: \"format_error\",\n                    severity: \"error\",\n                    message: `Question ${index + 1} doesn't end with a question mark`,\n                    questionIndex: index,\n                    suggestion: \"Add a question mark at the end\"\n                });\n            }\n            // Check for question words\n            const questionWords = [\n                \"what\",\n                \"when\",\n                \"where\",\n                \"who\",\n                \"why\",\n                \"how\",\n                \"do\",\n                \"does\",\n                \"did\",\n                \"have\",\n                \"has\",\n                \"is\",\n                \"are\",\n                \"can\",\n                \"could\",\n                \"would\",\n                \"should\",\n                \"will\"\n            ];\n            const startsWithQuestionWord = questionWords.some((word)=>question.toLowerCase().startsWith(word + \" \"));\n            if (!startsWithQuestionWord) {\n                warnings.push({\n                    type: \"format_error\",\n                    severity: \"warning\",\n                    message: `Question ${index + 1} doesn't start with a typical question word`,\n                    questionIndex: index,\n                    suggestion: \"Consider starting with What, How, Why, etc.\"\n                });\n            }\n            // Check for empty or whitespace-only content\n            if (question.trim().length === 0) {\n                issues.push({\n                    type: \"format_error\",\n                    severity: \"error\",\n                    message: `Question ${index + 1} is empty`,\n                    questionIndex: index,\n                    suggestion: \"Provide a valid question\"\n                });\n            }\n        });\n    }\n    /**\r\n   * Validate that questions don't reference specific content details\r\n   */ validateNoContentAssumptions(questions, issues, warnings) {\n        // Patterns that indicate content assumptions\n        const contentAssumptionPatterns = [\n            {\n                pattern: /what happened/i,\n                message: \"References specific events\"\n            },\n            {\n                pattern: /in the (text|story|article|passage|reading)/i,\n                message: \"References the text directly\"\n            },\n            {\n                pattern: /according to (the )?(text|story|article|author)/i,\n                message: \"References the text/author\"\n            },\n            {\n                pattern: /the author (said|wrote|mentioned|stated|explained)/i,\n                message: \"References author statements\"\n            },\n            {\n                pattern: /do you remember/i,\n                message: \"Assumes prior knowledge of content\"\n            },\n            {\n                pattern: /what did .+ do/i,\n                message: \"References specific actions\"\n            },\n            {\n                pattern: /why did .+ happen/i,\n                message: \"References specific events\"\n            },\n            {\n                pattern: /when did/i,\n                message: \"References specific timing\"\n            },\n            {\n                pattern: /who (was|were|did)/i,\n                message: \"References specific people\"\n            },\n            {\n                pattern: /which (person|character|event)/i,\n                message: \"References specific content elements\"\n            },\n            {\n                pattern: /the (story|text|article|passage) (says|mentions|describes|tells)/i,\n                message: \"References text content\"\n            },\n            {\n                pattern: /in this (story|text|article)/i,\n                message: \"References the text\"\n            },\n            {\n                pattern: /from the (story|text|article)/i,\n                message: \"References the text\"\n            }\n        ];\n        questions.forEach((question, index)=>{\n            for (const { pattern, message } of contentAssumptionPatterns){\n                if (pattern.test(question)) {\n                    issues.push({\n                        type: \"content_assumption\",\n                        severity: \"error\",\n                        message: `Question ${index + 1} assumes content knowledge: ${message}`,\n                        questionIndex: index,\n                        suggestion: \"Rephrase to focus on personal experience or general knowledge\"\n                    });\n                    break; // Only report first match per question\n                }\n            }\n            // Check for proper names (potential content-specific references)\n            const words = question.split(\" \");\n            const suspiciousCapitalizedWords = words.filter((word)=>/^[A-Z][a-z]+$/.test(word) && !this.isCommonQuestionWord(word) && !this.isCommonNoun(word));\n            if (suspiciousCapitalizedWords.length > 0) {\n                warnings.push({\n                    type: \"content_assumption\",\n                    severity: \"warning\",\n                    message: `Question ${index + 1} may contain proper names: ${suspiciousCapitalizedWords.join(\", \")}`,\n                    questionIndex: index,\n                    suggestion: \"Verify these are not content-specific names\"\n                });\n            }\n            // Check for specific dates or numbers that might reference content\n            if (/\\b(19|20)\\d{2}\\b/.test(question)) {\n                warnings.push({\n                    type: \"content_assumption\",\n                    severity: \"warning\",\n                    message: `Question ${index + 1} contains a specific year`,\n                    questionIndex: index,\n                    suggestion: \"Avoid referencing specific dates unless asking about general knowledge\"\n                });\n            }\n        });\n    }\n    /**\r\n   * Validate CEFR level appropriateness\r\n   */ validateCEFRComplexity(questions, cefrLevel, issues, warnings) {\n        const complexity = this.assessQuestionComplexity(questions);\n        const expectedComplexity = this.getExpectedComplexity(cefrLevel);\n        if (!expectedComplexity.includes(complexity)) {\n            issues.push({\n                type: \"complexity_mismatch\",\n                severity: \"error\",\n                message: `Questions are ${complexity} but ${cefrLevel} requires ${expectedComplexity.join(\" or \")}`,\n                suggestion: `Adjust question complexity to match ${cefrLevel} level`\n            });\n        }\n        // Check vocabulary complexity\n        questions.forEach((question, index)=>{\n            const vocabularyLevel = this.assessVocabularyLevel(question);\n            if (vocabularyLevel === \"too_simple\" && [\n                \"B2\",\n                \"C1\"\n            ].includes(cefrLevel)) {\n                warnings.push({\n                    type: \"complexity_mismatch\",\n                    severity: \"warning\",\n                    message: `Question ${index + 1} uses very simple vocabulary for ${cefrLevel} level`,\n                    questionIndex: index,\n                    suggestion: \"Consider using more sophisticated vocabulary\"\n                });\n            }\n            if (vocabularyLevel === \"too_complex\" && [\n                \"A1\",\n                \"A2\"\n            ].includes(cefrLevel)) {\n                warnings.push({\n                    type: \"complexity_mismatch\",\n                    severity: \"warning\",\n                    message: `Question ${index + 1} may use vocabulary too advanced for ${cefrLevel} level`,\n                    questionIndex: index,\n                    suggestion: \"Simplify vocabulary for beginner level\"\n                });\n            }\n        });\n        // Check sentence structure complexity\n        questions.forEach((question, index)=>{\n            const structureComplexity = this.assessSentenceStructure(question);\n            if (structureComplexity === \"complex\" && [\n                \"A1\",\n                \"A2\"\n            ].includes(cefrLevel)) {\n                warnings.push({\n                    type: \"complexity_mismatch\",\n                    severity: \"warning\",\n                    message: `Question ${index + 1} has complex sentence structure for ${cefrLevel} level`,\n                    questionIndex: index,\n                    suggestion: \"Use simpler sentence structures\"\n                });\n            }\n            if (structureComplexity === \"simple\" && cefrLevel === \"C1\") {\n                warnings.push({\n                    type: \"complexity_mismatch\",\n                    severity: \"warning\",\n                    message: `Question ${index + 1} has simple structure for ${cefrLevel} level`,\n                    questionIndex: index,\n                    suggestion: \"Consider using more sophisticated structures\"\n                });\n            }\n        });\n    }\n    /**\r\n   * Validate pedagogical quality (activates prior knowledge, builds interest)\r\n   */ validatePedagogicalQuality(questions, issues, warnings) {\n        // Check for personal experience focus\n        const personalExperiencePatterns = [\n            /have you (ever)?/i,\n            /do you (think|believe|feel)/i,\n            /what (is|are) your/i,\n            /in your (opinion|experience)/i,\n            /how do you/i\n        ];\n        let personalQuestionCount = 0;\n        questions.forEach((question, index)=>{\n            const hasPersonalFocus = personalExperiencePatterns.some((pattern)=>pattern.test(question));\n            if (hasPersonalFocus) {\n                personalQuestionCount++;\n            }\n        });\n        if (personalQuestionCount === 0) {\n            warnings.push({\n                type: \"quality_issue\",\n                severity: \"warning\",\n                message: \"No questions focus on personal experience\",\n                suggestion: \"Include questions that ask about student experiences or opinions\"\n            });\n        }\n        // Check for variety in question types\n        const questionStarters = questions.map((q)=>{\n            const firstWord = q.trim().split(\" \")[0].toLowerCase();\n            return firstWord;\n        });\n        const uniqueStarters = new Set(questionStarters);\n        if (uniqueStarters.size === 1 && questions.length > 1) {\n            warnings.push({\n                type: \"quality_issue\",\n                severity: \"warning\",\n                message: \"All questions start with the same word\",\n                suggestion: \"Vary question types for better engagement\"\n            });\n        }\n        // Check for yes/no questions (should have some open-ended)\n        const yesNoPatterns = [\n            /^do you/i,\n            /^have you/i,\n            /^is (it|there)/i,\n            /^are (you|there)/i,\n            /^can you/i,\n            /^would you/i\n        ];\n        let yesNoCount = 0;\n        questions.forEach((question)=>{\n            if (yesNoPatterns.some((pattern)=>pattern.test(question))) {\n                yesNoCount++;\n            }\n        });\n        if (yesNoCount === questions.length) {\n            warnings.push({\n                type: \"quality_issue\",\n                severity: \"warning\",\n                message: \"All questions appear to be yes/no questions\",\n                suggestion: \"Include open-ended questions (What, How, Why) for deeper discussion\"\n            });\n        }\n    }\n    /**\r\n   * Assess overall question complexity\r\n   */ assessQuestionComplexity(questions) {\n        const allText = questions.join(\" \").toLowerCase();\n        // Advanced indicators\n        const advancedPatterns = [\n            /hypothetically/i,\n            /in what ways/i,\n            /to what extent/i,\n            /how might/i,\n            /what factors/i,\n            /analyze/i,\n            /evaluate/i,\n            /compare and contrast/i,\n            /what implications/i,\n            /how would you assess/i\n        ];\n        // Intermediate indicators\n        const intermediatePatterns = [\n            /why do you think/i,\n            /what would/i,\n            /how could/i,\n            /in your opinion/i,\n            /do you believe/i,\n            /what are the (advantages|disadvantages)/i,\n            /how does .+ affect/i\n        ];\n        const advancedCount = advancedPatterns.filter((pattern)=>pattern.test(allText)).length;\n        const intermediateCount = intermediatePatterns.filter((pattern)=>pattern.test(allText)).length;\n        if (advancedCount >= 2) return \"advanced\";\n        if (advancedCount >= 1 || intermediateCount >= 2) return \"intermediate\";\n        return \"simple\";\n    }\n    /**\r\n   * Get expected complexity for CEFR level\r\n   */ getExpectedComplexity(level) {\n        const levelComplexityMap = {\n            \"A1\": [\n                \"simple\"\n            ],\n            \"A2\": [\n                \"simple\"\n            ],\n            \"B1\": [\n                \"simple\",\n                \"intermediate\"\n            ],\n            \"B2\": [\n                \"intermediate\",\n                \"advanced\"\n            ],\n            \"C1\": [\n                \"advanced\",\n                \"intermediate\"\n            ]\n        };\n        return levelComplexityMap[level];\n    }\n    /**\r\n   * Assess vocabulary level in a question\r\n   */ assessVocabularyLevel(question) {\n        const words = question.toLowerCase().split(/\\s+/);\n        // Very simple words\n        const verySimpleWords = [\n            \"you\",\n            \"your\",\n            \"have\",\n            \"do\",\n            \"what\",\n            \"how\",\n            \"is\",\n            \"are\",\n            \"the\",\n            \"a\",\n            \"an\",\n            \"like\",\n            \"want\",\n            \"go\",\n            \"see\",\n            \"get\"\n        ];\n        const simpleWordCount = words.filter((w)=>verySimpleWords.includes(w)).length;\n        const simpleRatio = simpleWordCount / words.length;\n        // Complex words (longer, less common)\n        const complexWords = words.filter((w)=>w.length > 10 || /tion|sion|ment|ness|ity/.test(w));\n        const complexRatio = complexWords.length / words.length;\n        if (simpleRatio > 0.8) return \"too_simple\";\n        if (complexRatio > 0.3) return \"too_complex\";\n        return \"appropriate\";\n    }\n    /**\r\n   * Assess sentence structure complexity\r\n   */ assessSentenceStructure(question) {\n        // Count clauses (rough estimate based on conjunctions and commas)\n        const clauseIndicators = question.match(/,|and|but|or|because|although|if|when|while|which|that/gi);\n        const clauseCount = clauseIndicators ? clauseIndicators.length + 1 : 1;\n        // Count words\n        const wordCount = question.split(/\\s+/).length;\n        if (clauseCount >= 3 || wordCount > 20) return \"complex\";\n        if (clauseCount === 2 || wordCount > 12) return \"moderate\";\n        return \"simple\";\n    }\n    /**\r\n   * Check if word is a common question word\r\n   */ isCommonQuestionWord(word) {\n        const questionWords = [\n            \"What\",\n            \"When\",\n            \"Where\",\n            \"Who\",\n            \"Why\",\n            \"How\",\n            \"Do\",\n            \"Does\",\n            \"Did\",\n            \"Have\",\n            \"Has\",\n            \"Is\",\n            \"Are\",\n            \"Can\",\n            \"Could\",\n            \"Would\",\n            \"Should\",\n            \"Will\",\n            \"Which\"\n        ];\n        return questionWords.includes(word);\n    }\n    /**\r\n   * Check if word is a common noun that's typically capitalized\r\n   */ isCommonNoun(word) {\n        const commonNouns = [\n            \"English\",\n            \"Spanish\",\n            \"French\",\n            \"German\",\n            \"Chinese\",\n            \"Japanese\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\",\n            \"Sunday\",\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ];\n        return commonNouns.includes(word);\n    }\n    /**\r\n   * Calculate overall quality score\r\n   */ calculateQualityScore(issues, warnings, questionCount) {\n        let score = 100;\n        // Deduct points for errors\n        score -= issues.length * 20;\n        // Deduct points for warnings\n        score -= warnings.length * 5;\n        // Bonus for correct question count\n        if (questionCount === this.REQUIRED_QUESTION_COUNT) {\n            score += 10;\n        }\n        // Ensure score is between 0 and 100\n        return Math.max(0, Math.min(100, score));\n    }\n    constructor(){\n        this.REQUIRED_QUESTION_COUNT = 3;\n        this.MIN_QUESTION_LENGTH = 10;\n        this.MAX_QUESTION_LENGTH = 200;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/warmup-validator.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson-stream%2Froute&page=%2Fapi%2Fgenerate-lesson-stream%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson-stream%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();