"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-lesson/route";
exports.ids = ["app/api/generate-lesson/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-lesson/route.ts */ \"(rsc)/./app/api/generate-lesson/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-lesson/route\",\n        pathname: \"/api/generate-lesson\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-lesson/route\"\n    },\n    resolvedPagePath: \"D:\\\\linguaspark\\\\app\\\\api\\\\generate-lesson\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-lesson/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1sZXNzb24lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbGluZ3Vhc3BhcmslNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNsaW5ndWFzcGFyayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDSTtBQUNqRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzI3ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlLWxlc3NvblwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZ2VuZXJhdGUtbGVzc29uL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-lesson/route.ts":
/*!******************************************!*\
  !*** ./app/api/generate-lesson/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/lesson-ai-generator-server */ \"(rsc)/./lib/lesson-ai-generator-server.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase-server */ \"(rsc)/./lib/supabase-server.ts\");\n\n // Updated import to use server-side generator\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = body;\n        // Validate required fields\n        if (!sourceText || !lessonType || !studentLevel || !targetLanguage) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing required fields\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate user authentication\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__.createServerSupabaseClient)();\n        const { data: { user }, error: authError } = await supabase.auth.getUser();\n        if (authError || !user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        // Generate lesson using enhanced AI pipeline with contextual information\n        const lesson = await _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__.lessonAIServerGenerator.generateLesson({\n            sourceText,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sourceUrl,\n            contentMetadata,\n            structuredContent,\n            wordCount,\n            readingTime\n        });\n        console.log(\"\\uD83C\\uDF93 Generated lesson structure:\", {\n            hasLesson: !!lesson,\n            hasSections: !!lesson?.sections,\n            sectionKeys: lesson?.sections ? Object.keys(lesson.sections) : [],\n            lessonType: lesson?.lessonType,\n            studentLevel: lesson?.studentLevel,\n            targetLanguage: lesson?.targetLanguage,\n            warmupQuestions: lesson?.sections?.warmup?.length || 0,\n            vocabularyItems: lesson?.sections?.vocabulary?.length || 0\n        });\n        // Check if we have a valid AI-generated lesson\n        if (lesson && lesson.sections && Object.keys(lesson.sections).length > 0) {\n            console.log(\"✅ Using AI-generated lesson content\");\n            // Use AI-generated content with minimal fallbacks only for missing properties\n            const finalLesson = {\n                lessonType: lesson.lessonType || lessonType,\n                studentLevel: lesson.studentLevel || studentLevel,\n                targetLanguage: lesson.targetLanguage || targetLanguage,\n                sections: lesson.sections // Use AI-generated sections as-is\n            };\n            console.log(\"\\uD83C\\uDF89 Returning AI-generated lesson with sections:\", Object.keys(finalLesson.sections));\n            // Save and return the AI-generated lesson\n            const { data: savedLesson, error: saveError } = await supabase.from(\"lessons\").insert({\n                tutor_id: user.id,\n                title: `${lessonType} Lesson - ${new Date().toLocaleDateString()}`,\n                lesson_type: lessonType,\n                student_level: studentLevel,\n                target_language: targetLanguage,\n                source_url: sourceUrl,\n                source_text: sourceText,\n                lesson_data: finalLesson\n            }).select().single();\n            if (saveError) {\n                console.error(\"Error saving lesson:\", saveError);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    lesson: finalLesson\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                lesson: {\n                    ...finalLesson,\n                    id: savedLesson.id\n                }\n            });\n        }\n        // Only use fallback if AI generation completely failed\n        console.warn(\"⚠️ AI generation failed, using fallback lesson structure\");\n        const safeLesson = {\n            lessonType: lessonType,\n            studentLevel: studentLevel,\n            targetLanguage: targetLanguage,\n            sections: {\n                warmup: [\n                    \"What do you already know about this topic?\",\n                    \"Have you had similar experiences?\",\n                    \"What would you like to learn more about?\"\n                ],\n                vocabulary: [],\n                reading: sourceText.substring(0, 500),\n                comprehension: [\n                    \"What is the main idea of this text?\",\n                    \"What supporting details can you identify?\"\n                ],\n                discussion: [\n                    \"What is your opinion on this topic?\",\n                    \"How would you handle this situation?\"\n                ],\n                grammar: {\n                    focus: \"Present Perfect Tense\",\n                    examples: [\n                        \"I have learned many new things.\",\n                        \"She has improved her skills.\"\n                    ],\n                    exercise: [\n                        \"I _____ (learn) a lot today.\",\n                        \"They _____ (complete) the project.\"\n                    ]\n                },\n                pronunciation: {\n                    word: \"communication\",\n                    ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n                    practice: \"Practice saying: communication in a sentence.\"\n                },\n                wrapup: [\n                    \"What new vocabulary did you learn?\",\n                    \"Which concepts need more practice?\"\n                ]\n            }\n        };\n        console.log(\"✅ Using fallback lesson structure\");\n        // Save fallback lesson to database\n        const { data: savedLesson, error: saveError } = await supabase.from(\"lessons\").insert({\n            tutor_id: user.id,\n            title: `${lessonType} Lesson - ${new Date().toLocaleDateString()}`,\n            lesson_type: lessonType,\n            student_level: studentLevel,\n            target_language: targetLanguage,\n            source_url: sourceUrl,\n            source_text: sourceText,\n            lesson_data: safeLesson\n        }).select().single();\n        if (saveError) {\n            console.error(\"Error saving lesson:\", saveError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                lesson: safeLesson\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            lesson: {\n                ...safeLesson,\n                id: savedLesson.id\n            }\n        });\n    } catch (error) {\n        console.error(\"Error generating lesson:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate lesson\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-lesson/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-ai-server.ts":
/*!*********************************!*\
  !*** ./lib/google-ai-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleAIServerService: () => (/* binding */ createGoogleAIServerService)\n/* harmony export */ });\n// Server-side Google AI (Gemini) APIs service layer\nclass GoogleAIServerService {\n    constructor(config){\n        this.model = \"models/gemini-2.5-flash\" // Use actual available model\n        ;\n        this.config = config;\n    }\n    async makeGeminiRequest(prompt, options = {}) {\n        // Use only the working model\n        const modelsToTry = [\n            \"models/gemini-2.5-flash\"\n        ];\n        const possibleUrls = [];\n        // Generate URLs for different combinations\n        for (const model of modelsToTry){\n            possibleUrls.push(`${this.config.baseUrl}/v1beta/models/${model}:generateContent?key=${this.config.apiKey}`);\n            possibleUrls.push(`${this.config.baseUrl}/v1/models/${model}:generateContent?key=${this.config.apiKey}`);\n        }\n        const requestBody = {\n            contents: [\n                {\n                    parts: [\n                        {\n                            text: prompt\n                        }\n                    ]\n                }\n            ],\n            generationConfig: {\n                temperature: options.temperature || 0.7,\n                maxOutputTokens: options.maxTokens || 2000,\n                topP: options.topP || 0.9\n            }\n        };\n        console.log(\"\\uD83D\\uDD17 Using working Gemini API endpoint...\");\n        // Use only the working endpoint\n        const url = `${this.config.baseUrl}/v1beta/models/gemini-2.5-flash:generateContent?key=${this.config.apiKey}`;\n        console.log(`🌐 API URL: ${url.replace(this.config.apiKey, \"API_KEY_HIDDEN\")}`);\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(requestBody)\n            });\n            console.log(`📡 Response status: ${response.status} ${response.statusText}`);\n            if (response.ok) {\n                const result = await response.json();\n                console.log(\"✅ Successful API response received\");\n                console.log(\"\\uD83D\\uDD0D Full API response structure:\", JSON.stringify(result, null, 2));\n                // More robust response parsing with MAX_TOKENS handling\n                if (result.candidates && result.candidates.length > 0) {\n                    const candidate = result.candidates[0];\n                    // Check if we hit MAX_TOKENS limit\n                    if (candidate.finishReason === \"MAX_TOKENS\") {\n                        console.warn(\"⚠️ Hit MAX_TOKENS limit, response may be incomplete\");\n                        // Still try to extract partial content if available\n                        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                            const text = candidate.content.parts[0].text;\n                            console.log(\"⚠️ Extracted partial text due to MAX_TOKENS:\", text.substring(0, 100) + \"...\");\n                            return text;\n                        } else {\n                            console.warn(\"❌ MAX_TOKENS hit and no content available\");\n                            throw new Error(\"API response hit token limit with no usable content\");\n                        }\n                    }\n                    // Normal response processing\n                    if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                        const text = candidate.content.parts[0].text;\n                        console.log(\"✅ Extracted text:\", text);\n                        return text;\n                    } else {\n                        console.warn(\"⚠️ Invalid content structure in candidate:\", candidate);\n                        throw new Error(\"Invalid content structure in API response\");\n                    }\n                } else {\n                    console.warn(\"⚠️ No candidates in response:\", result);\n                    throw new Error(\"No candidates in API response\");\n                }\n            } else {\n                const errorText = await response.text();\n                console.error(`❌ API call failed:`, response.status, errorText);\n                throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n        } catch (error) {\n            console.error(`❌ API call exception:`, error.message);\n            throw error;\n        }\n    }\n    async summarize(text, options = {}) {\n        const summaryType = options.type || \"key-points\";\n        const length = options.length || \"medium\";\n        const lengthInstructions = {\n            short: \"in 2-3 sentences\",\n            medium: \"in 4-6 sentences\",\n            long: \"in 7-10 sentences\"\n        };\n        const typeInstructions = {\n            \"key-points\": \"Extract and summarize the key points\",\n            \"tl-dr\": \"Create a TL;DR summary\",\n            \"teaser\": \"Write an engaging teaser summary\",\n            \"headline\": \"Create a headline-style summary\"\n        };\n        const prompt = `${typeInstructions[summaryType]} of the following text ${lengthInstructions[length]}:\n\n${text}\n\nSummary:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.3\n            });\n        } catch (error) {\n            console.error(\"Summarization failed:\", error);\n            // Fallback to simple truncation\n            return text.substring(0, 500) + \"...\";\n        }\n    }\n    async translate(text, options) {\n        const targetLang = this.getLanguageName(options.targetLanguage);\n        const prompt = `Translate the following text to ${targetLang}. Maintain the original meaning and tone:\n\n${text}\n\nTranslation:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n        } catch (error) {\n            console.error(\"Translation failed:\", error);\n            // Return original text if translation fails\n            return text;\n        }\n    }\n    async prompt(prompt, options = {}) {\n        try {\n            return await this.makeGeminiRequest(prompt, options);\n        } catch (error) {\n            console.error(\"Prompt generation failed:\", error);\n            throw error;\n        }\n    }\n    async write(prompt, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"medium\";\n        const format = options.format || \"paragraph\";\n        const lengthInstructions = {\n            short: \"Keep it brief and concise\",\n            medium: \"Write a moderate length response\",\n            long: \"Provide a detailed and comprehensive response\"\n        };\n        const formatInstructions = {\n            paragraph: \"Write in paragraph form\",\n            \"bullet-points\": \"Format as bullet points\",\n            \"numbered-list\": \"Format as a numbered list\"\n        };\n        const enhancedPrompt = `${prompt}\n\nInstructions:\n- Tone: ${tone}\n- ${lengthInstructions[length]}\n- ${formatInstructions[format]}\n\nResponse:`;\n        try {\n            return await this.makeGeminiRequest(enhancedPrompt, {\n                temperature: 0.7\n            });\n        } catch (error) {\n            console.error(\"Writing failed:\", error);\n            throw error;\n        }\n    }\n    async rewrite(text, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"same\";\n        const audience = options.audience || \"general\";\n        const lengthInstructions = {\n            shorter: \"Make it more concise\",\n            longer: \"Expand and add more detail\",\n            same: \"Keep approximately the same length\"\n        };\n        const prompt = `Rewrite the following text with these requirements:\n- Tone: ${tone}\n- Audience: ${audience}\n- Length: ${lengthInstructions[length]}\n\nOriginal text:\n${text}\n\nRewritten text:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.5\n            });\n        } catch (error) {\n            console.error(\"Rewriting failed:\", error);\n            return text // Return original if rewriting fails\n            ;\n        }\n    }\n    async proofread(text, options = {}) {\n        const checkGrammar = options.checkGrammar !== false;\n        const checkSpelling = options.checkSpelling !== false;\n        const checkStyle = options.checkStyle !== false;\n        const checks = [];\n        if (checkGrammar) checks.push(\"grammar\");\n        if (checkSpelling) checks.push(\"spelling\");\n        if (checkStyle) checks.push(\"style and clarity\");\n        const prompt = `Proofread and correct the following text for ${checks.join(\", \")}. Return only the corrected text:\n\n${text}\n\nCorrected text:`;\n        try {\n            const correctedText = await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n            return {\n                corrected_text: correctedText,\n                suggestions: [],\n                errors: []\n            };\n        } catch (error) {\n            console.error(\"Proofreading failed:\", error);\n            return {\n                corrected_text: text,\n                suggestions: [],\n                errors: []\n            };\n        }\n    }\n    getLanguageName(code) {\n        const languageMap = {\n            es: \"Spanish\",\n            fr: \"French\",\n            de: \"German\",\n            it: \"Italian\",\n            pt: \"Portuguese\",\n            ja: \"Japanese\",\n            ko: \"Korean\",\n            zh: \"Chinese\",\n            en: \"English\"\n        };\n        return languageMap[code] || \"English\";\n    }\n}\n// Server-side only initialization\nconst createGoogleAIServerService = ()=>{\n    const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\";\n    const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n    if (!apiKey) {\n        console.warn(\"Google AI API key not found. Lesson generation will use fallback templates.\");\n        // Return a service that will always throw errors, triggering fallbacks\n        return new GoogleAIServerService({\n            apiKey: \"dummy\",\n            baseUrl\n        });\n    }\n    return new GoogleAIServerService({\n        apiKey,\n        baseUrl\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1lBQ1o7UUFDRjtJQUNGO0lBRVF0QixnQkFBZ0J1QixJQUFZLEVBQVU7UUFDNUMsTUFBTUMsY0FBYztZQUNsQkMsSUFBSTtZQUNKQyxJQUFJO1lBQ0pDLElBQUk7WUFDSkMsSUFBSTtZQUNKQyxJQUFJO1lBQ0pDLElBQUk7WUFDSkMsSUFBSTtZQUNKQyxJQUFJO1lBQ0pDLElBQUk7UUFDTjtRQUNBLE9BQU9ULFdBQVcsQ0FBQ0QsS0FBSyxJQUFJO0lBQzlCO0FBQ0Y7QUFFQSxrQ0FBa0M7QUFDM0IsTUFBTVcsOEJBQThCO0lBQ3pDLE1BQU1qRixTQUFTa0YseUNBQXlDO0lBQ3hELE1BQU1uRixVQUFVbUYsMkNBQTBDLElBQUksQ0FBMkM7SUFFekcsSUFBSSxDQUFDbEYsUUFBUTtRQUNYVSxRQUFRb0IsSUFBSSxDQUFDO1FBQ2IsdUVBQXVFO1FBQ3ZFLE9BQU8sSUFBSXpDLHNCQUFzQjtZQUFFVyxRQUFRO1lBQVNEO1FBQVE7SUFDOUQ7SUFFQSxPQUFPLElBQUlWLHNCQUFzQjtRQUFFVztRQUFRRDtJQUFRO0FBQ3JELEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbGliL2dvb2dsZS1haS1zZXJ2ZXIudHM/NTJkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTZXJ2ZXItc2lkZSBHb29nbGUgQUkgKEdlbWluaSkgQVBJcyBzZXJ2aWNlIGxheWVyXG5pbnRlcmZhY2UgR29vZ2xlQUlDb25maWcge1xuICBhcGlLZXk6IHN0cmluZ1xuICBiYXNlVXJsOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIFN1bW1hcml6ZXJPcHRpb25zIHtcbiAgdHlwZT86IFwia2V5LXBvaW50c1wiIHwgXCJ0bC1kclwiIHwgXCJ0ZWFzZXJcIiB8IFwiaGVhZGxpbmVcIlxuICBsZW5ndGg/OiBcInNob3J0XCIgfCBcIm1lZGl1bVwiIHwgXCJsb25nXCJcbiAgZm9ybWF0PzogXCJtYXJrZG93blwiIHwgXCJwbGFpbi10ZXh0XCJcbn1cblxuaW50ZXJmYWNlIFRyYW5zbGF0b3JPcHRpb25zIHtcbiAgc291cmNlTGFuZ3VhZ2U/OiBzdHJpbmdcbiAgdGFyZ2V0TGFuZ3VhZ2U6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgUHJvbXB0T3B0aW9ucyB7XG4gIHRlbXBlcmF0dXJlPzogbnVtYmVyXG4gIG1heFRva2Vucz86IG51bWJlclxuICB0b3BQPzogbnVtYmVyXG59XG5cbmludGVyZmFjZSBXcml0ZXJPcHRpb25zIHtcbiAgdG9uZT86IFwiZm9ybWFsXCIgfCBcImNhc3VhbFwiIHwgXCJhY2FkZW1pY1wiIHwgXCJjcmVhdGl2ZVwiXG4gIGxlbmd0aD86IFwic2hvcnRcIiB8IFwibWVkaXVtXCIgfCBcImxvbmdcIlxuICBmb3JtYXQ/OiBcInBhcmFncmFwaFwiIHwgXCJidWxsZXQtcG9pbnRzXCIgfCBcIm51bWJlcmVkLWxpc3RcIlxufVxuXG5pbnRlcmZhY2UgUmV3cml0ZXJPcHRpb25zIHtcbiAgdG9uZT86IFwiZm9ybWFsXCIgfCBcImNhc3VhbFwiIHwgXCJhY2FkZW1pY1wiIHwgXCJjcmVhdGl2ZVwiXG4gIGxlbmd0aD86IFwic2hvcnRlclwiIHwgXCJsb25nZXJcIiB8IFwic2FtZVwiXG4gIGF1ZGllbmNlPzogXCJnZW5lcmFsXCIgfCBcImV4cGVydFwiIHwgXCJiZWdpbm5lclwiXG59XG5cbmludGVyZmFjZSBQcm9vZnJlYWRlck9wdGlvbnMge1xuICBjaGVja0dyYW1tYXI/OiBib29sZWFuXG4gIGNoZWNrU3BlbGxpbmc/OiBib29sZWFuXG4gIGNoZWNrU3R5bGU/OiBib29sZWFuXG4gIHN1Z2dlc3RJbXByb3ZlbWVudHM/OiBib29sZWFuXG59XG5cbmNsYXNzIEdvb2dsZUFJU2VydmVyU2VydmljZSB7XG4gIHByaXZhdGUgY29uZmlnOiBHb29nbGVBSUNvbmZpZ1xuICBwcml2YXRlIG1vZGVsOiBzdHJpbmcgPSBcIm1vZGVscy9nZW1pbmktMi41LWZsYXNoXCIgLy8gVXNlIGFjdHVhbCBhdmFpbGFibGUgbW9kZWxcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEdvb2dsZUFJQ29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWdcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbWFrZUdlbWluaVJlcXVlc3QocHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KSB7XG4gICAgLy8gVXNlIG9ubHkgdGhlIHdvcmtpbmcgbW9kZWxcbiAgICBjb25zdCBtb2RlbHNUb1RyeSA9IFtcbiAgICAgICdtb2RlbHMvZ2VtaW5pLTIuNS1mbGFzaCdcbiAgICBdXG4gICAgXG4gICAgY29uc3QgcG9zc2libGVVcmxzID0gW11cbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBVUkxzIGZvciBkaWZmZXJlbnQgY29tYmluYXRpb25zXG4gICAgZm9yIChjb25zdCBtb2RlbCBvZiBtb2RlbHNUb1RyeSkge1xuICAgICAgcG9zc2libGVVcmxzLnB1c2goYCR7dGhpcy5jb25maWcuYmFzZVVybH0vdjFiZXRhL21vZGVscy8ke21vZGVsfTpnZW5lcmF0ZUNvbnRlbnQ/a2V5PSR7dGhpcy5jb25maWcuYXBpS2V5fWApXG4gICAgICBwb3NzaWJsZVVybHMucHVzaChgJHt0aGlzLmNvbmZpZy5iYXNlVXJsfS92MS9tb2RlbHMvJHttb2RlbH06Z2VuZXJhdGVDb250ZW50P2tleT0ke3RoaXMuY29uZmlnLmFwaUtleX1gKVxuICAgIH1cbiAgICBcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHtcbiAgICAgIGNvbnRlbnRzOiBbe1xuICAgICAgICBwYXJ0czogW3tcbiAgICAgICAgICB0ZXh0OiBwcm9tcHRcbiAgICAgICAgfV1cbiAgICAgIH1dLFxuICAgICAgZ2VuZXJhdGlvbkNvbmZpZzoge1xuICAgICAgICB0ZW1wZXJhdHVyZTogb3B0aW9ucy50ZW1wZXJhdHVyZSB8fCAwLjcsXG4gICAgICAgIG1heE91dHB1dFRva2Vuczogb3B0aW9ucy5tYXhUb2tlbnMgfHwgMjAwMCwgLy8gSW5jcmVhc2VkIGZyb20gMTAwMCB0byAyMDAwXG4gICAgICAgIHRvcFA6IG9wdGlvbnMudG9wUCB8fCAwLjksXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCLwn5SXIFVzaW5nIHdvcmtpbmcgR2VtaW5pIEFQSSBlbmRwb2ludC4uLlwiKVxuXG4gICAgLy8gVXNlIG9ubHkgdGhlIHdvcmtpbmcgZW5kcG9pbnRcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmNvbmZpZy5iYXNlVXJsfS92MWJldGEvbW9kZWxzL2dlbWluaS0yLjUtZmxhc2g6Z2VuZXJhdGVDb250ZW50P2tleT0ke3RoaXMuY29uZmlnLmFwaUtleX1gXG4gICAgY29uc29sZS5sb2coYPCfjJAgQVBJIFVSTDogJHt1cmwucmVwbGFjZSh0aGlzLmNvbmZpZy5hcGlLZXksICdBUElfS0VZX0hJRERFTicpfWApXG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICAgICAgfSlcblxuICAgICAgY29uc29sZS5sb2coYPCfk6EgUmVzcG9uc2Ugc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG5cbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgICAgY29uc29sZS5sb2coXCLinIUgU3VjY2Vzc2Z1bCBBUEkgcmVzcG9uc2UgcmVjZWl2ZWRcIilcbiAgICAgICAgY29uc29sZS5sb2coXCLwn5SNIEZ1bGwgQVBJIHJlc3BvbnNlIHN0cnVjdHVyZTpcIiwgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSlcbiAgICAgICAgXG4gICAgICAgIC8vIE1vcmUgcm9idXN0IHJlc3BvbnNlIHBhcnNpbmcgd2l0aCBNQVhfVE9LRU5TIGhhbmRsaW5nXG4gICAgICAgIGlmIChyZXN1bHQuY2FuZGlkYXRlcyAmJiByZXN1bHQuY2FuZGlkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gcmVzdWx0LmNhbmRpZGF0ZXNbMF1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBoaXQgTUFYX1RPS0VOUyBsaW1pdFxuICAgICAgICAgIGlmIChjYW5kaWRhdGUuZmluaXNoUmVhc29uID09PSBcIk1BWF9UT0tFTlNcIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi4pqg77iPIEhpdCBNQVhfVE9LRU5TIGxpbWl0LCByZXNwb25zZSBtYXkgYmUgaW5jb21wbGV0ZVwiKVxuICAgICAgICAgICAgLy8gU3RpbGwgdHJ5IHRvIGV4dHJhY3QgcGFydGlhbCBjb250ZW50IGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZS5jb250ZW50ICYmIGNhbmRpZGF0ZS5jb250ZW50LnBhcnRzICYmIGNhbmRpZGF0ZS5jb250ZW50LnBhcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGNhbmRpZGF0ZS5jb250ZW50LnBhcnRzWzBdLnRleHRcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLimqDvuI8gRXh0cmFjdGVkIHBhcnRpYWwgdGV4dCBkdWUgdG8gTUFYX1RPS0VOUzpcIiwgdGV4dC5zdWJzdHJpbmcoMCwgMTAwKSArIFwiLi4uXCIpXG4gICAgICAgICAgICAgIHJldHVybiB0ZXh0XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCLinYwgTUFYX1RPS0VOUyBoaXQgYW5kIG5vIGNvbnRlbnQgYXZhaWxhYmxlXCIpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFQSSByZXNwb25zZSBoaXQgdG9rZW4gbGltaXQgd2l0aCBubyB1c2FibGUgY29udGVudFwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBOb3JtYWwgcmVzcG9uc2UgcHJvY2Vzc2luZ1xuICAgICAgICAgIGlmIChjYW5kaWRhdGUuY29udGVudCAmJiBjYW5kaWRhdGUuY29udGVudC5wYXJ0cyAmJiBjYW5kaWRhdGUuY29udGVudC5wYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gY2FuZGlkYXRlLmNvbnRlbnQucGFydHNbMF0udGV4dFxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLinIUgRXh0cmFjdGVkIHRleHQ6XCIsIHRleHQpXG4gICAgICAgICAgICByZXR1cm4gdGV4dFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLimqDvuI8gSW52YWxpZCBjb250ZW50IHN0cnVjdHVyZSBpbiBjYW5kaWRhdGU6XCIsIGNhbmRpZGF0ZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29udGVudCBzdHJ1Y3R1cmUgaW4gQVBJIHJlc3BvbnNlXCIpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIuKaoO+4jyBObyBjYW5kaWRhdGVzIGluIHJlc3BvbnNlOlwiLCByZXN1bHQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY2FuZGlkYXRlcyBpbiBBUEkgcmVzcG9uc2VcIilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBBUEkgY2FsbCBmYWlsZWQ6YCwgcmVzcG9uc2Uuc3RhdHVzLCBlcnJvclRleHQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgR2VtaW5pIEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gLSAke2Vycm9yVGV4dH1gKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGDinYwgQVBJIGNhbGwgZXhjZXB0aW9uOmAsIGVycm9yLm1lc3NhZ2UpXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN1bW1hcml6ZSh0ZXh0OiBzdHJpbmcsIG9wdGlvbnM6IFN1bW1hcml6ZXJPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzdW1tYXJ5VHlwZSA9IG9wdGlvbnMudHlwZSB8fCBcImtleS1wb2ludHNcIlxuICAgIGNvbnN0IGxlbmd0aCA9IG9wdGlvbnMubGVuZ3RoIHx8IFwibWVkaXVtXCJcbiAgICBcbiAgICBjb25zdCBsZW5ndGhJbnN0cnVjdGlvbnMgPSB7XG4gICAgICBzaG9ydDogXCJpbiAyLTMgc2VudGVuY2VzXCIsXG4gICAgICBtZWRpdW06IFwiaW4gNC02IHNlbnRlbmNlc1wiLCBcbiAgICAgIGxvbmc6IFwiaW4gNy0xMCBzZW50ZW5jZXNcIlxuICAgIH1cblxuICAgIGNvbnN0IHR5cGVJbnN0cnVjdGlvbnMgPSB7XG4gICAgICBcImtleS1wb2ludHNcIjogXCJFeHRyYWN0IGFuZCBzdW1tYXJpemUgdGhlIGtleSBwb2ludHNcIixcbiAgICAgIFwidGwtZHJcIjogXCJDcmVhdGUgYSBUTDtEUiBzdW1tYXJ5XCIsXG4gICAgICBcInRlYXNlclwiOiBcIldyaXRlIGFuIGVuZ2FnaW5nIHRlYXNlciBzdW1tYXJ5XCIsXG4gICAgICBcImhlYWRsaW5lXCI6IFwiQ3JlYXRlIGEgaGVhZGxpbmUtc3R5bGUgc3VtbWFyeVwiXG4gICAgfVxuXG4gICAgY29uc3QgcHJvbXB0ID0gYCR7dHlwZUluc3RydWN0aW9uc1tzdW1tYXJ5VHlwZV19IG9mIHRoZSBmb2xsb3dpbmcgdGV4dCAke2xlbmd0aEluc3RydWN0aW9uc1tsZW5ndGhdfTpcblxuJHt0ZXh0fVxuXG5TdW1tYXJ5OmBcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5tYWtlR2VtaW5pUmVxdWVzdChwcm9tcHQsIHsgdGVtcGVyYXR1cmU6IDAuMyB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiU3VtbWFyaXphdGlvbiBmYWlsZWQ6XCIsIGVycm9yKVxuICAgICAgLy8gRmFsbGJhY2sgdG8gc2ltcGxlIHRydW5jYXRpb25cbiAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZygwLCA1MDApICsgXCIuLi5cIlxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHRyYW5zbGF0ZSh0ZXh0OiBzdHJpbmcsIG9wdGlvbnM6IFRyYW5zbGF0b3JPcHRpb25zKSB7XG4gICAgY29uc3QgdGFyZ2V0TGFuZyA9IHRoaXMuZ2V0TGFuZ3VhZ2VOYW1lKG9wdGlvbnMudGFyZ2V0TGFuZ3VhZ2UpXG4gICAgXG4gICAgY29uc3QgcHJvbXB0ID0gYFRyYW5zbGF0ZSB0aGUgZm9sbG93aW5nIHRleHQgdG8gJHt0YXJnZXRMYW5nfS4gTWFpbnRhaW4gdGhlIG9yaWdpbmFsIG1lYW5pbmcgYW5kIHRvbmU6XG5cbiR7dGV4dH1cblxuVHJhbnNsYXRpb246YFxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLm1ha2VHZW1pbmlSZXF1ZXN0KHByb21wdCwgeyB0ZW1wZXJhdHVyZTogMC4yIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJUcmFuc2xhdGlvbiBmYWlsZWQ6XCIsIGVycm9yKVxuICAgICAgLy8gUmV0dXJuIG9yaWdpbmFsIHRleHQgaWYgdHJhbnNsYXRpb24gZmFpbHNcbiAgICAgIHJldHVybiB0ZXh0XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcHJvbXB0KHByb21wdDogc3RyaW5nLCBvcHRpb25zOiBQcm9tcHRPcHRpb25zID0ge30pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubWFrZUdlbWluaVJlcXVlc3QocHJvbXB0LCBvcHRpb25zKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiUHJvbXB0IGdlbmVyYXRpb24gZmFpbGVkOlwiLCBlcnJvcilcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgd3JpdGUocHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM6IFdyaXRlck9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHRvbmUgPSBvcHRpb25zLnRvbmUgfHwgXCJjYXN1YWxcIlxuICAgIGNvbnN0IGxlbmd0aCA9IG9wdGlvbnMubGVuZ3RoIHx8IFwibWVkaXVtXCJcbiAgICBjb25zdCBmb3JtYXQgPSBvcHRpb25zLmZvcm1hdCB8fCBcInBhcmFncmFwaFwiXG5cbiAgICBjb25zdCBsZW5ndGhJbnN0cnVjdGlvbnMgPSB7XG4gICAgICBzaG9ydDogXCJLZWVwIGl0IGJyaWVmIGFuZCBjb25jaXNlXCIsXG4gICAgICBtZWRpdW06IFwiV3JpdGUgYSBtb2RlcmF0ZSBsZW5ndGggcmVzcG9uc2VcIixcbiAgICAgIGxvbmc6IFwiUHJvdmlkZSBhIGRldGFpbGVkIGFuZCBjb21wcmVoZW5zaXZlIHJlc3BvbnNlXCJcbiAgICB9XG5cbiAgICBjb25zdCBmb3JtYXRJbnN0cnVjdGlvbnMgPSB7XG4gICAgICBwYXJhZ3JhcGg6IFwiV3JpdGUgaW4gcGFyYWdyYXBoIGZvcm1cIixcbiAgICAgIFwiYnVsbGV0LXBvaW50c1wiOiBcIkZvcm1hdCBhcyBidWxsZXQgcG9pbnRzXCIsXG4gICAgICBcIm51bWJlcmVkLWxpc3RcIjogXCJGb3JtYXQgYXMgYSBudW1iZXJlZCBsaXN0XCJcbiAgICB9XG5cbiAgICBjb25zdCBlbmhhbmNlZFByb21wdCA9IGAke3Byb21wdH1cblxuSW5zdHJ1Y3Rpb25zOlxuLSBUb25lOiAke3RvbmV9XG4tICR7bGVuZ3RoSW5zdHJ1Y3Rpb25zW2xlbmd0aF19XG4tICR7Zm9ybWF0SW5zdHJ1Y3Rpb25zW2Zvcm1hdF19XG5cblJlc3BvbnNlOmBcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5tYWtlR2VtaW5pUmVxdWVzdChlbmhhbmNlZFByb21wdCwgeyB0ZW1wZXJhdHVyZTogMC43IH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJXcml0aW5nIGZhaWxlZDpcIiwgZXJyb3IpXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJld3JpdGUodGV4dDogc3RyaW5nLCBvcHRpb25zOiBSZXdyaXRlck9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHRvbmUgPSBvcHRpb25zLnRvbmUgfHwgXCJjYXN1YWxcIlxuICAgIGNvbnN0IGxlbmd0aCA9IG9wdGlvbnMubGVuZ3RoIHx8IFwic2FtZVwiXG4gICAgY29uc3QgYXVkaWVuY2UgPSBvcHRpb25zLmF1ZGllbmNlIHx8IFwiZ2VuZXJhbFwiXG5cbiAgICBjb25zdCBsZW5ndGhJbnN0cnVjdGlvbnMgPSB7XG4gICAgICBzaG9ydGVyOiBcIk1ha2UgaXQgbW9yZSBjb25jaXNlXCIsXG4gICAgICBsb25nZXI6IFwiRXhwYW5kIGFuZCBhZGQgbW9yZSBkZXRhaWxcIixcbiAgICAgIHNhbWU6IFwiS2VlcCBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGxlbmd0aFwiXG4gICAgfVxuXG4gICAgY29uc3QgcHJvbXB0ID0gYFJld3JpdGUgdGhlIGZvbGxvd2luZyB0ZXh0IHdpdGggdGhlc2UgcmVxdWlyZW1lbnRzOlxuLSBUb25lOiAke3RvbmV9XG4tIEF1ZGllbmNlOiAke2F1ZGllbmNlfVxuLSBMZW5ndGg6ICR7bGVuZ3RoSW5zdHJ1Y3Rpb25zW2xlbmd0aF19XG5cbk9yaWdpbmFsIHRleHQ6XG4ke3RleHR9XG5cblJld3JpdHRlbiB0ZXh0OmBcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5tYWtlR2VtaW5pUmVxdWVzdChwcm9tcHQsIHsgdGVtcGVyYXR1cmU6IDAuNSB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiUmV3cml0aW5nIGZhaWxlZDpcIiwgZXJyb3IpXG4gICAgICByZXR1cm4gdGV4dCAvLyBSZXR1cm4gb3JpZ2luYWwgaWYgcmV3cml0aW5nIGZhaWxzXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcHJvb2ZyZWFkKHRleHQ6IHN0cmluZywgb3B0aW9uczogUHJvb2ZyZWFkZXJPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBjaGVja0dyYW1tYXIgPSBvcHRpb25zLmNoZWNrR3JhbW1hciAhPT0gZmFsc2VcbiAgICBjb25zdCBjaGVja1NwZWxsaW5nID0gb3B0aW9ucy5jaGVja1NwZWxsaW5nICE9PSBmYWxzZVxuICAgIGNvbnN0IGNoZWNrU3R5bGUgPSBvcHRpb25zLmNoZWNrU3R5bGUgIT09IGZhbHNlXG5cbiAgICBjb25zdCBjaGVja3MgPSBbXVxuICAgIGlmIChjaGVja0dyYW1tYXIpIGNoZWNrcy5wdXNoKFwiZ3JhbW1hclwiKVxuICAgIGlmIChjaGVja1NwZWxsaW5nKSBjaGVja3MucHVzaChcInNwZWxsaW5nXCIpXG4gICAgaWYgKGNoZWNrU3R5bGUpIGNoZWNrcy5wdXNoKFwic3R5bGUgYW5kIGNsYXJpdHlcIilcblxuICAgIGNvbnN0IHByb21wdCA9IGBQcm9vZnJlYWQgYW5kIGNvcnJlY3QgdGhlIGZvbGxvd2luZyB0ZXh0IGZvciAke2NoZWNrcy5qb2luKFwiLCBcIil9LiBSZXR1cm4gb25seSB0aGUgY29ycmVjdGVkIHRleHQ6XG5cbiR7dGV4dH1cblxuQ29ycmVjdGVkIHRleHQ6YFxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvcnJlY3RlZFRleHQgPSBhd2FpdCB0aGlzLm1ha2VHZW1pbmlSZXF1ZXN0KHByb21wdCwgeyB0ZW1wZXJhdHVyZTogMC4yIH0pXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3JyZWN0ZWRfdGV4dDogY29ycmVjdGVkVGV4dCxcbiAgICAgICAgc3VnZ2VzdGlvbnM6IFtdLFxuICAgICAgICBlcnJvcnM6IFtdXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJQcm9vZnJlYWRpbmcgZmFpbGVkOlwiLCBlcnJvcilcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvcnJlY3RlZF90ZXh0OiB0ZXh0LFxuICAgICAgICBzdWdnZXN0aW9uczogW10sXG4gICAgICAgIGVycm9yczogW11cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldExhbmd1YWdlTmFtZShjb2RlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhbmd1YWdlTWFwID0ge1xuICAgICAgZXM6IFwiU3BhbmlzaFwiLFxuICAgICAgZnI6IFwiRnJlbmNoXCIsIFxuICAgICAgZGU6IFwiR2VybWFuXCIsXG4gICAgICBpdDogXCJJdGFsaWFuXCIsXG4gICAgICBwdDogXCJQb3J0dWd1ZXNlXCIsXG4gICAgICBqYTogXCJKYXBhbmVzZVwiLFxuICAgICAga286IFwiS29yZWFuXCIsXG4gICAgICB6aDogXCJDaGluZXNlXCIsXG4gICAgICBlbjogXCJFbmdsaXNoXCJcbiAgICB9XG4gICAgcmV0dXJuIGxhbmd1YWdlTWFwW2NvZGVdIHx8IFwiRW5nbGlzaFwiXG4gIH1cbn1cblxuLy8gU2VydmVyLXNpZGUgb25seSBpbml0aWFsaXphdGlvblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUdvb2dsZUFJU2VydmVyU2VydmljZSA9ICgpID0+IHtcbiAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX0FJX0FQSV9LRVlcbiAgY29uc3QgYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9BSV9CQVNFX1VSTCB8fCBcImh0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tXCJcblxuICBpZiAoIWFwaUtleSkge1xuICAgIGNvbnNvbGUud2FybihcIkdvb2dsZSBBSSBBUEkga2V5IG5vdCBmb3VuZC4gTGVzc29uIGdlbmVyYXRpb24gd2lsbCB1c2UgZmFsbGJhY2sgdGVtcGxhdGVzLlwiKVxuICAgIC8vIFJldHVybiBhIHNlcnZpY2UgdGhhdCB3aWxsIGFsd2F5cyB0aHJvdyBlcnJvcnMsIHRyaWdnZXJpbmcgZmFsbGJhY2tzXG4gICAgcmV0dXJuIG5ldyBHb29nbGVBSVNlcnZlclNlcnZpY2UoeyBhcGlLZXk6IFwiZHVtbXlcIiwgYmFzZVVybCB9KVxuICB9XG5cbiAgcmV0dXJuIG5ldyBHb29nbGVBSVNlcnZlclNlcnZpY2UoeyBhcGlLZXksIGJhc2VVcmwgfSlcbn1cblxuZXhwb3J0IHR5cGUgeyBTdW1tYXJpemVyT3B0aW9ucywgVHJhbnNsYXRvck9wdGlvbnMsIFByb21wdE9wdGlvbnMsIFdyaXRlck9wdGlvbnMsIFJld3JpdGVyT3B0aW9ucywgUHJvb2ZyZWFkZXJPcHRpb25zIH1cbiJdLCJuYW1lcyI6WyJHb29nbGVBSVNlcnZlclNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIm1vZGVsIiwibWFrZUdlbWluaVJlcXVlc3QiLCJwcm9tcHQiLCJvcHRpb25zIiwibW9kZWxzVG9UcnkiLCJwb3NzaWJsZVVybHMiLCJwdXNoIiwiYmFzZVVybCIsImFwaUtleSIsInJlcXVlc3RCb2R5IiwiY29udGVudHMiLCJwYXJ0cyIsInRleHQiLCJnZW5lcmF0aW9uQ29uZmlnIiwidGVtcGVyYXR1cmUiLCJtYXhPdXRwdXRUb2tlbnMiLCJtYXhUb2tlbnMiLCJ0b3BQIiwiY29uc29sZSIsImxvZyIsInVybCIsInJlcGxhY2UiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsIm9rIiwicmVzdWx0IiwianNvbiIsImNhbmRpZGF0ZXMiLCJsZW5ndGgiLCJjYW5kaWRhdGUiLCJmaW5pc2hSZWFzb24iLCJ3YXJuIiwiY29udGVudCIsInN1YnN0cmluZyIsIkVycm9yIiwiZXJyb3JUZXh0IiwiZXJyb3IiLCJtZXNzYWdlIiwic3VtbWFyaXplIiwic3VtbWFyeVR5cGUiLCJ0eXBlIiwibGVuZ3RoSW5zdHJ1Y3Rpb25zIiwic2hvcnQiLCJtZWRpdW0iLCJsb25nIiwidHlwZUluc3RydWN0aW9ucyIsInRyYW5zbGF0ZSIsInRhcmdldExhbmciLCJnZXRMYW5ndWFnZU5hbWUiLCJ0YXJnZXRMYW5ndWFnZSIsIndyaXRlIiwidG9uZSIsImZvcm1hdCIsImZvcm1hdEluc3RydWN0aW9ucyIsInBhcmFncmFwaCIsImVuaGFuY2VkUHJvbXB0IiwicmV3cml0ZSIsImF1ZGllbmNlIiwic2hvcnRlciIsImxvbmdlciIsInNhbWUiLCJwcm9vZnJlYWQiLCJjaGVja0dyYW1tYXIiLCJjaGVja1NwZWxsaW5nIiwiY2hlY2tTdHlsZSIsImNoZWNrcyIsImpvaW4iLCJjb3JyZWN0ZWRUZXh0IiwiY29ycmVjdGVkX3RleHQiLCJzdWdnZXN0aW9ucyIsImVycm9ycyIsImNvZGUiLCJsYW5ndWFnZU1hcCIsImVzIiwiZnIiLCJkZSIsIml0IiwicHQiLCJqYSIsImtvIiwiemgiLCJlbiIsImNyZWF0ZUdvb2dsZUFJU2VydmVyU2VydmljZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19HT09HTEVfQUlfQVBJX0tFWSIsIk5FWFRfUFVCTElDX0dPT0dMRV9BSV9CQVNFX1VSTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-ai-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/lesson-ai-generator-server.ts":
/*!*******************************************!*\
  !*** ./lib/lesson-ai-generator-server.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonAIServerGenerator: () => (/* binding */ LessonAIServerGenerator),\n/* harmony export */   lessonAIServerGenerator: () => (/* binding */ lessonAIServerGenerator)\n/* harmony export */ });\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n\nclass LessonAIServerGenerator {\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_0__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    async generateLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = params;\n        console.log(\"\\uD83D\\uDE80 Starting optimized AI lesson generation with params:\", {\n            textLength: sourceText.length,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            hasMetadata: !!contentMetadata,\n            hasStructuredContent: !!structuredContent\n        });\n        try {\n            // Use ultra-minimal AI approach to avoid MAX_TOKENS\n            console.log(\"\\uD83E\\uDD16 Step 1: Generating lesson with ultra-minimal AI prompts...\");\n            const lessonStructure = await this.generateMinimalAILesson(sourceText, lessonType, studentLevel, targetLanguage, contentMetadata);\n            console.log(\"✅ Minimal AI lesson generated:\", Object.keys(lessonStructure));\n            // Return properly structured GeneratedLesson object\n            const finalLesson = {\n                lessonType,\n                studentLevel,\n                targetLanguage,\n                sections: lessonStructure\n            };\n            console.log(\"\\uD83C\\uDFAF Returning AI-generated lesson:\", {\n                lessonType: finalLesson.lessonType,\n                studentLevel: finalLesson.studentLevel,\n                targetLanguage: finalLesson.targetLanguage,\n                sectionsCount: Object.keys(finalLesson.sections).length,\n                warmupCount: finalLesson.sections.warmup?.length || 0,\n                vocabularyCount: finalLesson.sections.vocabulary?.length || 0\n            });\n            console.log(\"\\uD83C\\uDF89 Optimized AI lesson generation complete!\");\n            return finalLesson;\n        } catch (error) {\n            console.error(\"❌ Error in AI lesson generation:\", error);\n            console.log(\"\\uD83D\\uDD04 Falling back to smart template generation...\");\n            // Fallback to smart templates if AI fails\n            return await this.generateSmartTemplateFallback(params);\n        }\n    }\n    // Ultra-minimal AI lesson generation to avoid MAX_TOKENS\n    async generateMinimalAILesson(sourceText, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFAF Using ultra-minimal AI prompts to avoid token limits...\");\n        // Step 1: Generate just the essential parts with minimal prompts\n        const warmupQuestions = await this.generateMinimalWarmup(sourceText, studentLevel);\n        const vocabulary = await this.generateMinimalVocabulary(sourceText, studentLevel);\n        const comprehensionQuestions = await this.generateMinimalComprehension(sourceText, studentLevel);\n        // Step 2: Use hybrid approach - AI for key parts, templates for the rest\n        const vocabularyWords = vocabulary.map((v)=>v.word);\n        const readingPassage = await this.generateSmartReading(sourceText, studentLevel, vocabularyWords);\n        return {\n            warmup: this.addWarmupInstructions(warmupQuestions, studentLevel),\n            vocabulary: this.addVocabularyInstructions(vocabulary, studentLevel),\n            reading: this.addReadingInstructions(readingPassage, studentLevel),\n            comprehension: this.addComprehensionInstructions(comprehensionQuestions, studentLevel),\n            discussion: this.addDiscussionInstructions(this.generateSmartDiscussion(this.extractBetterTopics(sourceText), lessonType, studentLevel), studentLevel),\n            dialoguePractice: await this.generateDialoguePractice(sourceText, studentLevel, vocabularyWords),\n            dialogueFillGap: await this.generateDialogueFillGap(sourceText, studentLevel, vocabularyWords),\n            grammar: this.generateSmartGrammar(studentLevel, sourceText),\n            pronunciation: this.generateSmartPronunciation(vocabulary.map((v)=>v.word)),\n            wrapup: this.addWrapupInstructions(this.generateSmartWrapup(this.extractBetterTopics(sourceText), studentLevel), studentLevel)\n        };\n    }\n    // Ultra-minimal warmup generation\n    async generateMinimalWarmup(sourceText, studentLevel) {\n        // Extract better context for topic identification\n        const topics = this.extractBetterTopics(sourceText);\n        const mainTopic = topics[0] || \"this topic\";\n        // Create a more specific prompt that avoids content assumptions\n        const prompt = `Write 3 ${studentLevel} warm-up questions about ${mainTopic}. Ask about students' prior knowledge and experience. Do not mention any specific events or results. Format: just the questions, one per line:`;\n        try {\n            console.log(\"\\uD83D\\uDD25 Minimal warmup prompt:\", prompt.length, \"chars\");\n            console.log(\"\\uD83C\\uDFAF Topic identified:\", mainTopic);\n            const response = await this.getGoogleAI().prompt(prompt);\n            // Extract only actual questions (must end with ?)\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question (ends with ?) and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\") && !line.toLowerCase().includes(\"headline mentions\") && !line.toLowerCase().includes(\"the text\") && !line.toLowerCase().includes(\"the article\") && !line.toLowerCase().includes(\"according to\") && !line.toLowerCase().includes(\"the passage\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^-\\s*/, \"\").trim()).slice(0, 3);\n            console.log(\"\\uD83C\\uDFAF Extracted warmup questions:\", questions);\n            return questions.length >= 3 ? questions : this.generateSmartWarmupQuestions(topics, studentLevel, {});\n        } catch (error) {\n            console.log(\"⚠️ Minimal warmup failed, using template\");\n            return this.generateSmartWarmupQuestions(this.extractBetterTopics(sourceText), studentLevel, {});\n        }\n    }\n    // Add instructional text to sections\n    addWarmupInstructions(questions, studentLevel) {\n        const instruction = \"Have the following conversations or discussions with your tutor before reading the text:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addComprehensionInstructions(questions, studentLevel) {\n        const instruction = \"After reading the text, answer these comprehension questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addDiscussionInstructions(questions, studentLevel) {\n        const instruction = \"Discuss these questions with your tutor to explore the topic in depth:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addWrapupInstructions(questions, studentLevel) {\n        const instruction = \"Reflect on your learning by discussing these wrap-up questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addVocabularyInstructions(vocabulary, studentLevel) {\n        const instruction = {\n            word: \"INSTRUCTION\",\n            meaning: \"Study the following words with your tutor before reading the text:\",\n            example: \"\"\n        };\n        return [\n            instruction,\n            ...vocabulary\n        ];\n    }\n    addReadingInstructions(readingText, studentLevel) {\n        const instruction = \"Read the following text carefully. Your tutor will help you with any difficult words or concepts:\";\n        return `${instruction}\\n\\n${readingText}`;\n    }\n    // Better topic extraction that recognizes compound terms\n    extractBetterTopics(text) {\n        const topics = [];\n        // Look for compound terms first (like \"Ryder Cup\", \"World Cup\", etc.)\n        const compoundPatterns = [\n            /\\b(Ryder Cup|World Cup|Champions League|Premier League|Super Bowl|Olympics|World Series)\\b/gi,\n            /\\b(artificial intelligence|machine learning|climate change|social media)\\b/gi,\n            /\\b([A-Z][a-z]+ [A-Z][a-z]+)\\b/g // General compound proper nouns\n        ];\n        for (const pattern of compoundPatterns){\n            const matches = text.match(pattern);\n            if (matches) {\n                topics.push(...matches.map((m)=>m.toLowerCase()));\n            }\n        }\n        // If no compound terms found, fall back to single words\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"europe\",\n                \"team\",\n                \"golf\",\n                \"tournament\",\n                \"sports\",\n                \"competition\"\n            ];\n            const foundWords = words.filter((word)=>commonWords.includes(word));\n            topics.push(...foundWords.slice(0, 3));\n        }\n        return topics.length > 0 ? topics : [\n            \"sports\"\n        ];\n    }\n    // Enhanced vocabulary generation with AI-generated contextual examples\n    async generateMinimalVocabulary(sourceText, studentLevel) {\n        const words = sourceText.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words)).slice(0, 8) // 6-10 words, start with 8\n        ;\n        const vocabulary = [];\n        for (const word of uniqueWords){\n            try {\n                const capitalizedWord = this.capitalizeWord(word);\n                // Generate AI definition\n                const definitionPrompt = `Define \"${word}\" simply for ${studentLevel} level. Context: ${sourceText.substring(0, 80)}. Give only the definition, no extra text:`;\n                console.log(\"\\uD83D\\uDCDA Vocab definition prompt:\", definitionPrompt.length, \"chars\");\n                const rawMeaning = await this.getGoogleAI().prompt(definitionPrompt);\n                const meaning = this.cleanDefinition(rawMeaning, studentLevel);\n                // Generate AI contextual examples\n                const examples = await this.generateAIExampleSentences(word, studentLevel, sourceText);\n                vocabulary.push({\n                    word: capitalizedWord,\n                    meaning: meaning.trim().substring(0, 200),\n                    example: examples\n                });\n            } catch (error) {\n                console.log(`⚠️ Vocab failed for ${word}, using enhanced template`);\n                const capitalizedWord = this.capitalizeWord(word);\n                vocabulary.push({\n                    word: capitalizedWord,\n                    meaning: this.generateContextualWordMeaning(word, studentLevel, sourceText),\n                    example: await this.generateAIExampleSentences(word, studentLevel, sourceText)\n                });\n            }\n        }\n        // Ensure we have 6-10 words\n        return vocabulary.slice(0, 10).length >= 6 ? vocabulary.slice(0, 10) : vocabulary.slice(0, 6);\n    }\n    // Ultra-minimal comprehension generation\n    async generateMinimalComprehension(sourceText, studentLevel) {\n        const shortText = sourceText.substring(0, 200) // Increase context for more questions\n        ;\n        const prompt = `Write 5 ${studentLevel} reading comprehension questions about this text. Only return questions, no instructions: ${shortText}`;\n        try {\n            console.log(\"❓ Minimal comprehension prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^\\*\\*/, \"\").replace(/\\*\\*$/, \"\").trim()).slice(0, 5);\n            return questions.length >= 5 ? questions : this.generateSmartComprehension(this.extractBetterTopics(sourceText), studentLevel);\n        } catch (error) {\n            console.log(\"⚠️ Minimal comprehension failed, using template\");\n            return this.generateSmartComprehension(this.extractBetterTopics(sourceText), studentLevel);\n        }\n    }\n    // Smart template fallback with AI-generated examples\n    async generateSmartTemplateFallback(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        console.log(\"\\uD83C\\uDFA8 Using smart template fallback...\");\n        const topics = this.extractBetterTopics(sourceText);\n        const vocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.addWarmupInstructions(this.generateSmartWarmupQuestions(topics, studentLevel, {}), studentLevel),\n                vocabulary: this.addVocabularyInstructions(await this.generateSmartVocabulary(vocabulary, sourceText, studentLevel), studentLevel),\n                reading: this.addReadingInstructions(await this.generateSmartReading(sourceText, studentLevel, vocabulary), studentLevel),\n                comprehension: this.addComprehensionInstructions(this.generateSmartComprehension(topics, studentLevel), studentLevel),\n                discussion: this.addDiscussionInstructions(this.generateSmartDiscussion(topics, lessonType, studentLevel), studentLevel),\n                dialoguePractice: await this.generateDialoguePractice(sourceText, studentLevel, vocabulary),\n                dialogueFillGap: await this.generateDialogueFillGap(sourceText, studentLevel, vocabulary),\n                grammar: this.generateSmartGrammar(studentLevel, sourceText),\n                pronunciation: this.generateSmartPronunciation(vocabulary),\n                wrapup: this.addWrapupInstructions(this.generateSmartWrapup(topics, studentLevel), studentLevel)\n            }\n        };\n    }\n    // Content analysis without AI calls\n    analyzeContentContextNoAI(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context without AI...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        // Extract topics using text analysis\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        // Extract vocabulary using text analysis\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n        }\n        // Generate learning objectives\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        return analysis;\n    }\n    // New method: Analyze content context and complexity\n    async analyzeContentContext(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity based on text characteristics\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        console.log(\"\\uD83D\\uDCC8 Text complexity analysis:\", {\n            avgSentenceLength,\n            complexWords,\n            totalWords,\n            complexity: analysis.complexity\n        });\n        // Extract key topics using simple text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83C\\uDFAF Extracting topics using text analysis...\");\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        console.log(\"✅ Extracted topics:\", analysis.topics);\n        // Extract key vocabulary using text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83D\\uDCDA Extracting vocabulary using text analysis...\");\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        console.log(\"✅ Extracted vocabulary:\", analysis.keyVocabulary);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n            console.log(\"\\uD83C\\uDF0D Cultural context:\", analysis.culturalContext);\n        }\n        // Generate learning objectives based on content type and lesson type\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        console.log(\"\\uD83C\\uDFAF Learning objectives:\", analysis.learningObjectives);\n        return analysis;\n    }\n    // Enhanced contextual summary creation\n    async createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDCDD Creating contextual summary...\");\n        // Use simple prompt to avoid token limits\n        const summaryPrompt = `Summarize this text in 4-5 sentences for ${studentLevel} level students:\n\n${sourceText.substring(0, 800)}\n\nSummary:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual summary...\");\n            const summary = await this.getGoogleAI().prompt(summaryPrompt, {\n                temperature: 0.4,\n                maxTokens: 300\n            });\n            console.log(\"✅ AI contextual summary created:\", summary.substring(0, 100) + \"...\");\n            return summary;\n        } catch (error) {\n            console.warn(\"⚠️ AI contextual summary failed, using text truncation:\", error.message);\n            // Skip complex fallbacks, just use truncation\n            const truncated = sourceText.substring(0, 600) + \"...\";\n            console.log(\"\\uD83D\\uDD04 Using truncated text as summary\");\n            return truncated;\n        }\n    }\n    // Generate CEFR-adapted warm-up questions\n    async generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata) {\n        console.log(\"\\uD83D\\uDD25 Generating CEFR-adapted warm-up questions...\");\n        const levelInstructions = {\n            \"A1\": `\nCreate 3 warm-up questions for A1 (beginner) level:\n- Use simple present tense and basic vocabulary\n- Ask yes/no questions or simple choice questions\n- Focus on familiar, concrete concepts\n- Keep questions short and direct\n- Use vocabulary the student likely knows\nExample: \"Do you use [topic] in your daily life? Yes or No?\"`,\n            \"A2\": `\nCreate 3 warm-up questions for A2 (elementary) level:\n- Use simple past tense and personal experiences\n- Ask for short, simple answers\n- Include basic comparisons with \"different\" or \"same\"\n- Focus on personal experiences and familiar situations\n- Use simple connecting words like \"and\", \"but\"\nExample: \"Have you ever [experienced topic]? How was it?\"`,\n            \"B1\": `\nCreate 3 warm-up questions for B1 (intermediate) level:\n- Ask for opinions with \"What do you think...?\"\n- Include comparisons between countries/cultures\n- Ask students to explain reasons with \"because\" or \"why\"\n- Discuss advantages and disadvantages\n- Use more varied vocabulary but keep structure clear\nExample: \"What do you think about [topic]? How is it different in your country?\"`,\n            \"B2\": `\nCreate 3 warm-up questions for B2 (upper intermediate) level:\n- Ask students to analyze situations and predict outcomes\n- Include complex opinions and explanations\n- Discuss implications and consequences\n- Use conditional language (\"What would happen if...?\")\n- Encourage detailed responses with examples\nExample: \"What challenges do you think [specific group] face with [topic]?\"`,\n            \"C1\": `\nCreate 3 warm-up questions for C1 (advanced) level:\n- Ask students to evaluate arguments and consider multiple perspectives\n- Include abstract concepts and societal implications\n- Use sophisticated vocabulary and complex structures\n- Encourage critical thinking and nuanced discussion\n- Ask about broader cultural and social contexts\nExample: \"How do cultural attitudes toward [concept] influence [topic] in different societies?\"`\n        };\n        // Ultra-simple prompt to avoid token limits\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const warmupPrompt = `Create 3 ${studentLevel} level warm-up questions about ${topic}. Return only the questions:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual warm-up questions...\");\n            console.log(\"\\uD83D\\uDCDD Warm-up prompt:\", warmupPrompt.substring(0, 200) + \"...\");\n            const response = await this.getGoogleAI().prompt(warmupPrompt, {\n                temperature: 0.6,\n                maxTokens: 150\n            });\n            console.log(\"✅ AI warm-up questions generated\");\n            console.log(\"\\uD83E\\uDD16 Raw AI response:\", response);\n            const questions = this.parseListFromText(response).slice(0, 3);\n            console.log(\"\\uD83D\\uDD25 Parsed warm-up questions:\", questions);\n            console.log(\"\\uD83D\\uDD0D Questions array length:\", questions.length);\n            // Ensure we have 3 questions, add fallbacks if needed\n            while(questions.length < 3){\n                const fallbackQuestion = this.getFallbackWarmupQuestion(studentLevel, contentAnalysis, questions.length);\n                console.log(`🔄 Adding fallback question ${questions.length + 1}:`, fallbackQuestion);\n                questions.push(fallbackQuestion);\n            }\n            console.log(\"✅ Final warm-up questions:\", questions);\n            // Final safety check - if still empty, use basic fallback\n            if (questions.length === 0) {\n                console.warn(\"⚠️ No questions generated, using emergency fallback\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return questions;\n        } catch (error) {\n            console.warn(\"⚠️ AI warm-up generation failed, using contextual fallbacks:\", error.message);\n            const fallbackQuestions = this.getContextualWarmupFallback(studentLevel, contentAnalysis, metadata);\n            console.log(\"\\uD83D\\uDD04 Fallback warm-up questions:\", fallbackQuestions);\n            // Final safety check for fallback\n            if (!fallbackQuestions || fallbackQuestions.length === 0) {\n                console.warn(\"⚠️ Fallback also empty, using emergency questions\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return fallbackQuestions;\n        }\n    }\n    // Enhanced contextual lesson structure generation\n    async generateContextualLessonStructure(content, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFD7️ Generating contextual lesson structure...\");\n        // Generate contextual warm-up questions first\n        const contextualWarmup = await this.generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata);\n        console.log(\"\\uD83D\\uDD25 Generated contextual warm-up questions:\", contextualWarmup);\n        // Ultra-simplified prompt to avoid token limits\n        const topics = contentAnalysis.topics.slice(0, 2).join(\", \") || \"technology\";\n        const vocab = contentAnalysis.keyVocabulary.slice(0, 4).join(\", \");\n        const prompt = `Create a ${lessonType} lesson for ${studentLevel} students about: ${topics}\n\nContent: \"${content.substring(0, 400)}\"\nKey words: ${vocab}\n\nReturn JSON with: warmup (use provided), vocabulary (4 words from content), reading (simplified content), comprehension (3 questions), discussion (3 questions), grammar (focus + examples), pronunciation (1 word), wrapup (3 questions).\n\n{\n  \"warmup\": ${JSON.stringify(contextualWarmup)},\n  \"vocabulary\": [{\"word\": \"word\", \"meaning\": \"definition\", \"example\": \"sentence\"}],\n  \"reading\": \"text\",\n  \"comprehension\": [\"question\"],\n  \"discussion\": [\"question\"], \n  \"grammar\": {\"focus\": \"topic\", \"examples\": [\"example\"], \"exercise\": [\"exercise\"]},\n  \"pronunciation\": {\"word\": \"word\", \"ipa\": \"/ipa/\", \"practice\": \"sentence\"},\n  \"wrapup\": [\"question\"]\n}`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for lesson structure...\");\n            const response = await this.getGoogleAI().prompt(prompt, {\n                temperature: 0.7,\n                maxTokens: 1500\n            });\n            console.log(\"\\uD83E\\uDD16 AI lesson structure response:\", response.substring(0, 200) + \"...\");\n            try {\n                const parsed = JSON.parse(response);\n                console.log(\"✅ Successfully parsed lesson structure JSON\");\n                // Ensure our contextual warm-up questions are preserved\n                parsed.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in final structure\");\n                return parsed;\n            } catch (parseError) {\n                console.warn(\"⚠️ Failed to parse JSON, attempting to clean response...\");\n                // Try to extract JSON from the response\n                const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    try {\n                        const cleaned = JSON.parse(jsonMatch[0]);\n                        console.log(\"✅ Successfully parsed cleaned JSON\");\n                        // Ensure our contextual warm-up questions are preserved\n                        cleaned.warmup = contextualWarmup;\n                        console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in cleaned structure\");\n                        return cleaned;\n                    } catch (cleanError) {\n                        console.warn(\"⚠️ Failed to parse cleaned JSON, using fallback\");\n                    }\n                }\n                // If JSON parsing fails, return a structured fallback with contextual warm-up\n                const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n                fallback.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Using fallback with contextual warm-up questions\");\n                return fallback;\n            }\n        } catch (error) {\n            console.warn(\"⚠️ AI lesson structure generation failed, using fallback:\", error.message);\n            const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n            fallback.warmup = contextualWarmup;\n            console.log(\"\\uD83D\\uDD25 Using error fallback with contextual warm-up questions\");\n            return fallback;\n        }\n    }\n    // Enhanced detailed content generation with context\n    async generateDetailedContextualContent(structure, content, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent) {\n        // Use Writer API to expand each section with contextual, detailed content\n        const sections = {\n            ...structure\n        };\n        // Enhance vocabulary section with contextual examples\n        if (sections.vocabulary) {\n            for(let i = 0; i < sections.vocabulary.length; i++){\n                const vocab = sections.vocabulary[i];\n                try {\n                    const contextualExamplePrompt = `\nCreate a natural example sentence using the word \"${vocab.word}\" that relates to this content context:\nTopics: ${contentAnalysis.topics.join(\", \")}\nContent type: ${contentAnalysis.contentType}\nLevel: ${studentLevel}\n\nMake the example relevant to the source material and appropriate for ${studentLevel} level students.\n`;\n                    const enhancedExample = await this.getGoogleAI().write(contextualExamplePrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].example = enhancedExample;\n                    // Add contextual meaning based on source content\n                    const contextualMeaningPrompt = `\nExplain the meaning of \"${vocab.word}\" in the context of: ${contentAnalysis.topics[0] || contentAnalysis.contentType}\nKeep it simple for ${studentLevel} level students.\n`;\n                    const contextualMeaning = await this.getGoogleAI().write(contextualMeaningPrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].contextualMeaning = contextualMeaning;\n                } catch (error) {\n                    // Keep original if enhancement fails\n                    console.warn(`Failed to enhance vocabulary for ${vocab.word}:`, error);\n                }\n            }\n        }\n        // Enhance discussion questions with specific content references\n        if (sections.discussion) {\n            try {\n                const enhancedDiscussionPrompt = `\nEnhance these discussion questions for a ${lessonType} lesson about ${contentAnalysis.topics.join(\" and \")}:\n${sections.discussion.join(\"\\n\")}\n\nMake them more specific to the content, engaging for ${studentLevel} level students, and encourage deeper thinking about:\n- ${contentAnalysis.topics.slice(0, 3).join(\"\\n- \")}\n\nReturn 3-4 enhanced questions that reference specific aspects of the content.\n`;\n                const enhancedDiscussion = await this.getGoogleAI().write(enhancedDiscussionPrompt, {\n                    tone: \"casual\",\n                    length: \"medium\",\n                    format: \"bullet-points\"\n                });\n                sections.discussion = this.parseListFromText(enhancedDiscussion).slice(0, 4);\n            } catch (error) {\n                console.warn(\"Failed to enhance discussion questions:\", error);\n            }\n        }\n        // Enhance reading section with better structure\n        if (sections.reading && structuredContent?.headings?.length > 0) {\n            try {\n                const structuredReadingPrompt = `\nImprove this reading text by organizing it with clear structure based on these headings from the original:\n${structuredContent.headings.slice(0, 3).map((h)=>`- ${h.text}`).join(\"\\n\")}\n\nOriginal text: \"${sections.reading}\"\n\nCreate a well-structured, ${studentLevel}-appropriate reading passage that maintains the key information but improves readability.\n`;\n                const enhancedReading = await this.getGoogleAI().rewrite(sections.reading, {\n                    tone: \"casual\",\n                    length: \"same\",\n                    audience: this.getAudienceLevel(studentLevel)\n                });\n                sections.reading = enhancedReading;\n            } catch (error) {\n                console.warn(\"Failed to enhance reading section:\", error);\n            }\n        }\n        // Enhance grammar section with content-specific examples\n        if (sections.grammar && sections.grammar.focus) {\n            try {\n                const grammarExamplesPrompt = `\nCreate 3 grammar examples for \"${sections.grammar.focus}\" using vocabulary and concepts from this content:\nTopics: ${contentAnalysis.topics.join(\", \")}\nKey vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\n\nMake examples relevant to the content and appropriate for ${studentLevel} level.\n`;\n                const contextualGrammarExamples = await this.getGoogleAI().write(grammarExamplesPrompt, {\n                    tone: \"casual\",\n                    length: \"short\",\n                    format: \"bullet-points\"\n                });\n                sections.grammar.contextualExamples = this.parseListFromText(contextualGrammarExamples);\n            } catch (error) {\n                console.warn(\"Failed to enhance grammar examples:\", error);\n            }\n        }\n        return sections;\n    }\n    async proofreadLesson(lesson) {\n        // Proofread key text sections\n        const sectionsToProofread = [\n            \"reading\",\n            \"grammar.examples\",\n            \"pronunciation.practice\"\n        ];\n        for (const sectionPath of sectionsToProofread){\n            const value = this.getNestedValue(lesson, sectionPath);\n            if (typeof value === \"string\") {\n                const proofread = await this.getGoogleAI().proofread(value, {\n                    checkGrammar: true,\n                    checkSpelling: true,\n                    checkStyle: true\n                });\n                this.setNestedValue(lesson, sectionPath, proofread.corrected_text);\n            }\n        }\n        return lesson;\n    }\n    generateFallbackLesson(params) {\n        // Template-based fallback when AI APIs fail\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getTemplateWarmup(lessonType, studentLevel),\n                vocabulary: this.extractVocabulary(sourceText, studentLevel),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n                dialoguePractice: this.generateTemplateDialoguePractice(\"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(\"this topic\", studentLevel, []),\n                discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getTemplateWrapup(lessonType)\n            }\n        };\n    }\n    // Helper methods\n    getSummaryLength(level) {\n        const lengthMap = {\n            A1: \"short\",\n            A2: \"short\",\n            B1: \"medium\",\n            B2: \"medium\",\n            C1: \"long\"\n        };\n        return lengthMap[level] || \"medium\";\n    }\n    getLanguageCode(language) {\n        const languageMap = {\n            spanish: \"es\",\n            french: \"fr\",\n            german: \"de\",\n            italian: \"it\",\n            portuguese: \"pt\",\n            japanese: \"ja\",\n            korean: \"ko\",\n            chinese: \"zh\"\n        };\n        return languageMap[language] || \"en\";\n    }\n    parseListFromText(text) {\n        return text.split(\"\\n\").filter((line)=>line.trim()).map((line)=>line.replace(/^[-•*]\\s*/, \"\").trim()).filter((line)=>line.length > 0).slice(0, 4) // Limit to 4 items\n        ;\n    }\n    getNestedValue(obj, path) {\n        return path.split(\".\").reduce((current, key)=>current?.[key], obj);\n    }\n    setNestedValue(obj, path, value) {\n        const keys = path.split(\".\");\n        const lastKey = keys.pop();\n        const target = keys.reduce((current, key)=>current[key], obj);\n        target[lastKey] = value;\n    }\n    createStructuredFallback(content, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDD04 Creating structured fallback lesson...\");\n        // Extract some basic information from content for better fallback\n        const words = content.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words)).slice(0, 6);\n        const fallback = {\n            warmup: [],\n            vocabulary: uniqueWords.map((word)=>({\n                    word: word,\n                    meaning: `Definition of ${word}`,\n                    example: `Example sentence with ${word}.`\n                })),\n            reading: this.simplifyText(content, studentLevel),\n            comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n            discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n            grammar: this.getTemplateGrammar(studentLevel),\n            pronunciation: this.getTemplatePronunciation(content),\n            wrapup: this.getTemplateWrapup(lessonType)\n        };\n        console.log(\"✅ Structured fallback created (warmup will be set by caller)\");\n        return fallback;\n    }\n    getTemplateWarmup(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What do you already know about this topic?\",\n                \"Have you had similar experiences?\",\n                \"What would you like to learn more about?\"\n            ],\n            grammar: [\n                \"What grammar patterns do you notice?\",\n                \"Which sentences seem most complex?\",\n                \"What grammar rules do you remember?\"\n            ],\n            travel: [\n                \"Where would you like to travel next?\",\n                \"What travel experiences have you had?\",\n                \"What travel vocabulary do you know?\"\n            ],\n            business: [\n                \"What business situations are you familiar with?\",\n                \"How do you communicate professionally?\",\n                \"What business terms are challenging?\"\n            ],\n            pronunciation: [\n                \"Which sounds are difficult to pronounce?\",\n                \"How do you practice pronunciation?\",\n                \"What pronunciation goals do you have?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    extractVocabulary(text, studentLevel) {\n        // Simple vocabulary extraction based on word frequency and complexity\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        const selectedWords = uniqueWords.slice(0, 6);\n        return selectedWords.map((word)=>({\n                word: word,\n                meaning: `Definition of ${word}`,\n                example: `Example sentence with ${word}.`\n            }));\n    }\n    simplifyText(text, studentLevel) {\n        // Basic text simplification based on level\n        const maxLength = {\n            A1: 200,\n            A2: 300,\n            B1: 400,\n            B2: 500,\n            C1: 600\n        };\n        const limit = maxLength[studentLevel] || 400;\n        return text.substring(0, limit) + (text.length > limit ? \"...\" : \"\");\n    }\n    getTemplateComprehension(lessonType, studentLevel) {\n        return [\n            \"What is the main idea of this text?\",\n            \"What supporting details can you identify?\",\n            \"How does this relate to your experience?\",\n            \"What conclusions can you draw?\"\n        ];\n    }\n    getTemplateDiscussion(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What is your opinion on this topic?\",\n                \"How would you handle this situation?\",\n                \"What alternative approaches exist?\"\n            ],\n            business: [\n                \"How would you apply this professionally?\",\n                \"What business challenges does this address?\",\n                \"How would you present this to colleagues?\"\n            ],\n            travel: [\n                \"How would this help while traveling?\",\n                \"What preparations would you make?\",\n                \"How would you share this experience?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    getTemplateGrammar(studentLevel) {\n        const grammarFoci = {\n            A1: \"Present Simple Tense\",\n            A2: \"Past Simple Tense\",\n            B1: \"Present Perfect Tense\",\n            B2: \"Conditional Sentences\",\n            C1: \"Advanced Grammar Structures\"\n        };\n        return {\n            focus: grammarFoci[studentLevel] || \"Present Perfect Tense\",\n            examples: [\n                \"I have learned many new things.\",\n                \"She has improved her skills.\",\n                \"We have discussed this topic.\"\n            ],\n            exercise: [\n                \"I _____ (learn) a lot today.\",\n                \"They _____ (complete) the project.\",\n                \"She _____ (improve) significantly.\"\n            ]\n        };\n    }\n    getTemplatePronunciation(text) {\n        // Extract a challenging word from the text\n        const words = text.match(/\\b[a-z]{6,}\\b/gi) || [\n            \"communication\"\n        ];\n        const selectedWord = words[0] || \"communication\";\n        return {\n            word: selectedWord.toLowerCase(),\n            ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n            practice: `Practice saying: \"${selectedWord}\" in a sentence.`\n        };\n    }\n    getTemplateWrapup(lessonType) {\n        return [\n            \"What new vocabulary did you learn?\",\n            \"Which concepts need more practice?\",\n            \"How will you use this knowledge?\",\n            \"What questions do you still have?\"\n        ];\n    }\n    // New helper methods for enhanced contextual analysis\n    extractTopicsFromHeadings(headings) {\n        return headings.filter((h)=>h.level <= 3) // Focus on main headings\n        .map((h)=>h.text).slice(0, 5);\n    }\n    extractTopicsFromText(text, headings) {\n        // First try to get topics from headings\n        const headingTopics = this.extractTopicsFromHeadings(headings);\n        if (headingTopics.length > 0) {\n            return headingTopics;\n        }\n        // Fallback: extract key phrases from text\n        const sentences = text.split(/[.!?]+/).filter((s)=>s.trim().length > 20);\n        const topics = [];\n        // Look for common topic indicators\n        const topicPatterns = [\n            /about (.+?)(?:\\s|,|\\.)/gi,\n            /discuss (.+?)(?:\\s|,|\\.)/gi,\n            /focus on (.+?)(?:\\s|,|\\.)/gi,\n            /regarding (.+?)(?:\\s|,|\\.)/gi\n        ];\n        for (const sentence of sentences.slice(0, 5)){\n            for (const pattern of topicPatterns){\n                const matches = sentence.match(pattern);\n                if (matches) {\n                    topics.push(...matches.map((m)=>m.replace(pattern, \"$1\").trim()).slice(0, 2));\n                }\n            }\n        }\n        // If no patterns found, extract key nouns\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"this\",\n                \"that\",\n                \"with\",\n                \"from\",\n                \"they\",\n                \"have\",\n                \"been\",\n                \"will\",\n                \"more\",\n                \"some\",\n                \"what\",\n                \"when\",\n                \"where\",\n                \"which\",\n                \"their\",\n                \"would\",\n                \"could\",\n                \"should\"\n            ];\n            const keyWords = words.filter((word)=>!commonWords.includes(word)).filter((word, index, arr)=>arr.indexOf(word) === index) // unique\n            .slice(0, 3);\n            return keyWords.length > 0 ? keyWords : [\n                \"AI technology\",\n                \"mobile devices\",\n                \"privacy\"\n            ];\n        }\n        return topics.slice(0, 3);\n    }\n    extractVocabularyFromText(text, level) {\n        // Extract words based on complexity appropriate for the level\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        // Filter by complexity based on level\n        const complexityThreshold = {\n            \"A1\": 6,\n            \"A2\": 7,\n            \"B1\": 8,\n            \"B2\": 10,\n            \"C1\": 12\n        };\n        const maxLength = complexityThreshold[level] || 8;\n        return uniqueWords.filter((word)=>word.length <= maxLength && word.length >= 4).slice(0, 8);\n    }\n    determineCulturalContext(domain, text) {\n        // Determine cultural context based on domain and content\n        const culturalIndicators = {\n            \"bbc.com\": \"British English, UK culture\",\n            \"cnn.com\": \"American English, US culture\",\n            \"wikipedia.org\": \"International, encyclopedic\",\n            \"nytimes.com\": \"American English, US perspective\",\n            \"theguardian.com\": \"British English, UK perspective\"\n        };\n        if (culturalIndicators[domain]) {\n            return culturalIndicators[domain];\n        }\n        // Analyze text for cultural markers\n        const americanMarkers = [\n            \"dollar\",\n            \"president\",\n            \"congress\",\n            \"state\",\n            \"federal\"\n        ];\n        const britishMarkers = [\n            \"pound\",\n            \"minister\",\n            \"parliament\",\n            \"council\",\n            \"government\"\n        ];\n        const americanCount = americanMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        const britishCount = britishMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        if (americanCount > britishCount) {\n            return \"American English context\";\n        } else if (britishCount > americanCount) {\n            return \"British English context\";\n        }\n        return \"International context\";\n    }\n    generateLearningObjectives(contentType, topics, level) {\n        const objectives = [];\n        // Base objectives on content type\n        switch(contentType){\n            case \"news\":\n                objectives.push(\"Understand current events vocabulary\");\n                objectives.push(\"Practice reading news articles\");\n                break;\n            case \"blog\":\n                objectives.push(\"Learn informal writing style\");\n                objectives.push(\"Understand personal opinions and experiences\");\n                break;\n            case \"tutorial\":\n                objectives.push(\"Follow step-by-step instructions\");\n                objectives.push(\"Learn technical vocabulary\");\n                break;\n            case \"encyclopedia\":\n                objectives.push(\"Understand factual information\");\n                objectives.push(\"Learn academic vocabulary\");\n                break;\n            default:\n                objectives.push(\"Improve reading comprehension\");\n                objectives.push(\"Expand vocabulary knowledge\");\n        }\n        // Add topic-specific objectives\n        topics.slice(0, 2).forEach((topic)=>{\n            objectives.push(`Discuss topics related to ${topic.toLowerCase()}`);\n        });\n        return objectives.slice(0, 4);\n    }\n    getAudienceLevel(cefrLevel) {\n        const levelMap = {\n            \"A1\": \"beginner\",\n            \"A2\": \"beginner\",\n            \"B1\": \"general\",\n            \"B2\": \"general\",\n            \"C1\": \"expert\"\n        };\n        return levelMap[cefrLevel] || \"general\";\n    }\n    // Enhanced fallback lesson generation with context\n    generateEnhancedFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, contentMetadata, structuredContent } = params;\n        console.log(\"\\uD83D\\uDD04 Generating enhanced fallback lesson with contextual warm-up...\");\n        // Use available context even in fallback\n        const topics = structuredContent?.headings?.map((h)=>h.text).slice(0, 3) || [];\n        const contentType = contentMetadata?.contentType || \"general\";\n        // Create mock content analysis for fallback warm-up generation\n        const mockContentAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: this.determineSourceCountry(contentMetadata?.domain || \"\"),\n            culturalContext: this.determineCulturalContext(contentMetadata?.domain || \"\", sourceText)\n        };\n        // Generate contextual warm-up questions even in fallback\n        const contextualWarmup = this.getContextualWarmupFallback(studentLevel, mockContentAnalysis, contentMetadata);\n        console.log(\"\\uD83D\\uDD25 Generated fallback contextual warm-up:\", contextualWarmup);\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: contextualWarmup,\n                vocabulary: this.extractContextualVocabulary(sourceText, studentLevel, topics),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getContextualComprehension(lessonType, studentLevel, topics),\n                dialoguePractice: this.generateTemplateDialoguePractice(topics[0] || \"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(topics[0] || \"this topic\", studentLevel, []),\n                discussion: this.getContextualDiscussion(lessonType, studentLevel, topics),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getContextualWrapup(lessonType, topics)\n            }\n        };\n    }\n    getContextualWarmup(lessonType, studentLevel, topics, contentType) {\n        // Use the same contextual fallback logic\n        const mockAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: \"International\"\n        };\n        return this.getContextualWarmupFallback(studentLevel, mockAnalysis, {\n            title: topics[0] || \"Content\"\n        });\n    }\n    // Basic fallback for complete failures\n    generateBasicFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: [\n                    \"What do you already know about this topic?\",\n                    \"Have you had similar experiences?\",\n                    \"What would you like to learn?\"\n                ],\n                vocabulary: [],\n                reading: sourceText.substring(0, 400),\n                comprehension: [\n                    \"What is the main idea?\",\n                    \"What details can you identify?\"\n                ],\n                dialoguePractice: this.generateTemplateDialoguePractice(\"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(\"this topic\", studentLevel, []),\n                discussion: [\n                    \"What is your opinion?\",\n                    \"How would you handle this?\"\n                ],\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: {\n                    word: \"example\",\n                    ipa: \"/ɪɡˈz\\xe6mpəl/\",\n                    practice: \"Practice saying example.\"\n                },\n                wrapup: [\n                    \"What did you learn?\",\n                    \"What needs more practice?\"\n                ]\n            }\n        };\n    }\n    extractContextualVocabulary(text, studentLevel, topics) {\n        const vocabulary = this.extractVocabulary(text, studentLevel);\n        // Enhance with topic context if available\n        if (topics.length > 0) {\n            return vocabulary.map((vocab, index)=>({\n                    ...vocab,\n                    context: index < topics.length ? `Related to ${topics[index].toLowerCase()}` : vocab.meaning\n                }));\n        }\n        return vocabulary;\n    }\n    getContextualComprehension(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateComprehension(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is the main point about ${topics[0]?.toLowerCase()}?`,\n                `How does the text explain ${topics[1]?.toLowerCase() || \"the topic\"}?`,\n                \"What supporting details can you identify?\",\n                \"What conclusions can you draw from this information?\"\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualDiscussion(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateDiscussion(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is your opinion about ${topics[0]?.toLowerCase()}?`,\n                `How would you apply this information about ${topics[1]?.toLowerCase() || \"this topic\"}?`,\n                `What are the implications of what you learned about ${topics[0]?.toLowerCase()}?`\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualWrapup(lessonType, topics) {\n        if (topics.length > 0) {\n            return [\n                `What new vocabulary did you learn about ${topics[0]?.toLowerCase()}?`,\n                `Which concepts about ${topics[1]?.toLowerCase() || \"this topic\"} need more practice?`,\n                \"How will you use this knowledge in real situations?\",\n                \"What questions do you still have about this content?\"\n            ];\n        }\n        return this.getTemplateWrapup(lessonType);\n    }\n    // Smart template-based lesson generation\n    async generateSmartTemplateLesson(sourceText, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFA8 Generating smart template lesson...\");\n        const topics = contentAnalysis.topics;\n        const vocabulary = contentAnalysis.keyVocabulary;\n        const title = metadata?.title || \"Content\";\n        return {\n            warmup: this.generateSmartWarmupQuestions(topics, studentLevel, contentAnalysis),\n            vocabulary: await this.generateSmartVocabulary(vocabulary, sourceText, studentLevel),\n            reading: await this.generateSmartReading(sourceText, studentLevel, vocabulary),\n            comprehension: this.generateSmartComprehension(topics, studentLevel),\n            dialoguePractice: await this.generateDialoguePractice(sourceText, studentLevel, vocabulary),\n            dialogueFillGap: await this.generateDialogueFillGap(sourceText, studentLevel, vocabulary),\n            discussion: this.generateSmartDiscussion(topics, lessonType, studentLevel),\n            grammar: this.generateSmartGrammar(studentLevel, sourceText),\n            pronunciation: this.generateSmartPronunciation(vocabulary),\n            wrapup: this.generateSmartWrapup(topics, studentLevel)\n        };\n    }\n    // Smart warm-up questions based on content (prior knowledge activation)\n    generateSmartWarmupQuestions(topics, studentLevel, contentAnalysis) {\n        const topic = topics[0] || \"this topic\";\n        const secondTopic = topics[1] || \"technology\";\n        // Focus on activating prior knowledge, not assuming content knowledge\n        const levelQuestions = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} popular in your country?`,\n                `Do you like ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you heard about ${topic.toLowerCase()} before?`,\n                `What do you already know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} common in your country?`\n            ],\n            \"B1\": [\n                `What comes to mind when you hear about ${topic.toLowerCase()}?`,\n                `Have you had any experience with ${topic.toLowerCase()}?`,\n                `What would you like to know about ${topic.toLowerCase()}?`\n            ],\n            \"B2\": [\n                `What is your general opinion about ${topic.toLowerCase()}?`,\n                `How familiar are you with ${topic.toLowerCase()}?`,\n                `What role does ${topic.toLowerCase()} play in your daily life?`\n            ],\n            \"C1\": [\n                `How would you describe the significance of ${topic.toLowerCase()} in modern society?`,\n                `What are your thoughts on the current state of ${topic.toLowerCase()}?`,\n                `How do you think ${topic.toLowerCase()} has evolved over time?`\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Enhanced smart vocabulary with AI-generated contextual examples\n    async generateSmartVocabulary(vocabulary, sourceText, studentLevel) {\n        const selectedWords = vocabulary.slice(0, 8) // Start with 8 words\n        ;\n        const vocabPromises = selectedWords.map(async (word)=>{\n            const capitalizedWord = this.capitalizeWord(word);\n            return {\n                word: capitalizedWord,\n                meaning: this.generateContextualWordMeaning(word, studentLevel, sourceText),\n                example: await this.generateAIExampleSentences(word, studentLevel, sourceText)\n            };\n        });\n        const results = await Promise.all(vocabPromises);\n        // Ensure we have 6-10 words\n        return results.slice(0, 10).length >= 6 ? results.slice(0, 10) : results.slice(0, 6);\n    }\n    // Capitalize word properly\n    capitalizeWord(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }\n    // Generate contextual word meanings based on level and source text\n    generateContextualWordMeaning(word, level, sourceText) {\n        const lowerWord = word.toLowerCase();\n        // Enhanced contextual definitions based on level\n        const contextualMeanings = {\n            \"efficient\": {\n                \"A1\": \"working well without wasting time\",\n                \"A2\": \"doing something well and quickly without wasting time or energy\",\n                \"B1\": \"working in a way that achieves the best results with the least waste of time and effort\",\n                \"B2\": \"achieving maximum productivity with minimum wasted effort or expense\",\n                \"C1\": \"achieving maximum productivity with minimum wasted effort, expense, or unnecessary activity\"\n            },\n            \"technology\": {\n                \"A1\": \"computers and machines that help us\",\n                \"A2\": \"machines and computer systems that make life easier\",\n                \"B1\": \"the use of scientific knowledge to create useful tools and machines\",\n                \"B2\": \"the application of scientific knowledge for practical purposes in industry and daily life\",\n                \"C1\": \"the systematic application of scientific knowledge to develop practical solutions and innovations\"\n            },\n            \"europe\": {\n                \"A1\": \"a big area with many countries\",\n                \"A2\": \"a continent with many different countries like France, Germany, and Italy\",\n                \"B1\": \"a continent consisting of many countries, known for its history and culture\",\n                \"B2\": \"a continent comprising numerous nations with diverse cultures, languages, and political systems\",\n                \"C1\": \"a geopolitical and cultural continent characterized by diverse nation-states, shared historical heritage, and economic integration\"\n            },\n            \"sensational\": {\n                \"A1\": \"very exciting and good\",\n                \"A2\": \"extremely exciting or impressive, causing strong feelings\",\n                \"B1\": \"causing great excitement, interest, or shock; extremely impressive\",\n                \"B2\": \"causing intense excitement, interest, or shock; extraordinarily impressive or remarkable\",\n                \"C1\": \"causing or designed to cause intense excitement, interest, or shock through dramatic or extraordinary qualities\"\n            },\n            \"stages\": {\n                \"A1\": \"does or makes something happen\",\n                \"A2\": \"organizes and presents an event or performance\",\n                \"B1\": \"organizes and presents an event, or refers to different parts of a process\",\n                \"B2\": \"organizes and presents an event or performance, or represents distinct phases in a process\",\n                \"C1\": \"orchestrates and presents an event or performance, or denotes sequential phases in a complex process\"\n            },\n            \"comeback\": {\n                \"A1\": \"winning after losing\",\n                \"A2\": \"returning to win after being behind in a game or competition\",\n                \"B1\": \"a return to a winning position after being behind, or a return to success\",\n                \"B2\": \"a recovery from a disadvantageous position to achieve success or victory\",\n                \"C1\": \"a strategic recovery from a disadvantageous position to achieve success, often against expectations\"\n            },\n            \"dramatic\": {\n                \"A1\": \"very exciting and surprising\",\n                \"A2\": \"very exciting, with sudden changes that surprise people\",\n                \"B1\": \"involving sudden changes or strong emotions; very noticeable or impressive\",\n                \"B2\": \"characterized by sudden, striking changes or intense emotions; highly impressive or theatrical\",\n                \"C1\": \"marked by sudden, striking developments or intense emotional impact; theatrically impressive or emotionally powerful\"\n            }\n        };\n        const levelMeanings = contextualMeanings[lowerWord];\n        if (levelMeanings && levelMeanings[level]) {\n            return levelMeanings[level];\n        }\n        // Fallback to basic level-appropriate definition\n        const isSimpleLevel = level === \"A1\" || level === \"A2\";\n        return isSimpleLevel ? `a word that means ${lowerWord}` : `a term referring to ${lowerWord} in this context`;\n    }\n    // Generate AI-powered contextual example sentences\n    async generateAIExampleSentences(word, level, sourceText) {\n        const exampleCount = this.getExampleCount(level);\n        const context = sourceText.substring(0, 120) // More context for relevance\n        ;\n        try {\n            const levelGuidance = this.getLevelGuidance(level);\n            const prompt = `Create ${exampleCount} contextual ${level} level sentences using \"${word}\" related to: ${context}. Make sentences meaningful and relevant to the topic. ${levelGuidance} Format: one sentence per line, no quotes:`;\n            console.log(\"\\uD83D\\uDCDD Contextual example sentences prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            // Parse and clean AI response\n            const sentences = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 5 && line.toLowerCase().includes(word.toLowerCase())).map((line)=>this.cleanSentence(line)).map((line)=>this.boldifyTargetWord(line, word)).filter((line)=>line.length > 0).slice(0, exampleCount);\n            // If AI generated enough contextual sentences, use them\n            if (sentences.length >= exampleCount) {\n                return sentences.join(\" | \");\n            }\n            // Otherwise, supplement with contextual template sentences\n            const additionalNeeded = exampleCount - sentences.length;\n            const templateSentences = this.generateContextualExamples(word, level, sourceText, additionalNeeded);\n            return [\n                ...sentences,\n                ...templateSentences\n            ].slice(0, exampleCount).join(\" | \");\n        } catch (error) {\n            console.log(`⚠️ AI example generation failed for ${word}, using contextual templates`);\n            // Fallback to contextual template examples\n            return this.generateContextualExamples(word, level, sourceText, exampleCount).join(\" | \");\n        }\n    }\n    // Get level-specific guidance for AI prompts\n    getLevelGuidance(level) {\n        const guidance = {\n            \"A1\": \"Use very simple words, short sentences (5-8 words), present tense.\",\n            \"A2\": \"Use simple words, short sentences (6-10 words), basic grammar.\",\n            \"B1\": \"Use common words, medium sentences (8-12 words), clear meaning.\",\n            \"B2\": \"Use varied vocabulary, longer sentences (10-15 words), complex ideas.\",\n            \"C1\": \"Use sophisticated vocabulary, complex sentences (12+ words), nuanced meaning.\"\n        };\n        return guidance[level] || guidance[\"B1\"];\n    }\n    // Clean sentence formatting\n    cleanSentence(sentence) {\n        return sentence.replace(/^\\d+\\.?\\s*/, \"\") // Remove numbering\n        .replace(/^-\\s*/, \"\") // Remove dashes\n        .replace(/^\\*\\s*/, \"\") // Remove asterisks\n        .replace(/^•\\s*/, \"\") // Remove bullet points\n        .trim();\n    }\n    // Clean definition formatting\n    cleanDefinition(definition, level) {\n        return definition.replace(/^For an? [A-Z]\\d+ student,?\\s*/i, \"\") // Remove level prefixes\n        .replace(/^In this context,?\\s*/i, \"\") // Remove context prefixes\n        .replace(/^Here's? (a )?definition.*?:\\s*/i, \"\") // Remove definition intros\n        .replace(/^\\*\\*(.*?)\\*\\*/g, \"$1\") // Remove bold markdown\n        .replace(/\\*\\*(.*?)\\*\\*/g, \"$1\") // Remove bold markdown\n        .trim();\n    }\n    // Make target word bold in sentence\n    boldifyTargetWord(sentence, targetWord) {\n        const regex = new RegExp(`\\\\b${targetWord}\\\\b`, \"gi\");\n        return sentence.replace(regex, `**${targetWord}**`);\n    }\n    // Generate contextual examples based on source material\n    generateContextualExamples(word, level, sourceText, count) {\n        const lowerWord = word.toLowerCase();\n        const capitalizedWord = this.capitalizeWord(word);\n        // Extract themes from source text for context\n        const themes = this.extractThemesFromText(sourceText);\n        const mainTheme = themes[0] || \"this topic\";\n        const contextualExamples = {\n            \"A1\": [\n                `**${capitalizedWord}** is in the news today.`,\n                `I read about **${lowerWord}** online.`,\n                `**${capitalizedWord}** is important for ${mainTheme}.`,\n                `People talk about **${lowerWord}**.`,\n                `**${capitalizedWord}** helps with ${mainTheme}.`\n            ],\n            \"A2\": [\n                `**${capitalizedWord}** plays a big role in ${mainTheme}.`,\n                `Many people are interested in **${lowerWord}**.`,\n                `**${capitalizedWord}** affects how we think about ${mainTheme}.`,\n                `The news often mentions **${lowerWord}**.`,\n                `**${capitalizedWord}** is becoming more important in ${mainTheme}.`\n            ],\n            \"B1\": [\n                `**${capitalizedWord}** has changed the way we approach ${mainTheme}.`,\n                `Understanding **${lowerWord}** is crucial for ${mainTheme}.`,\n                `**${capitalizedWord}** continues to influence ${mainTheme}.`,\n                `The role of **${lowerWord}** in ${mainTheme} is growing.`\n            ],\n            \"B2\": [\n                `**${capitalizedWord}** represents a significant development in ${mainTheme}.`,\n                `The implications of **${lowerWord}** for ${mainTheme} are far-reaching.`,\n                `**${capitalizedWord}** has transformed our understanding of ${mainTheme}.`\n            ],\n            \"C1\": [\n                `**${capitalizedWord}** exemplifies the complex dynamics within ${mainTheme}.`,\n                `The multifaceted nature of **${lowerWord}** requires nuanced analysis in ${mainTheme}.`,\n                `**${capitalizedWord}** represents a paradigmatic shift in contemporary ${mainTheme}.`\n            ]\n        };\n        const levelExamples = contextualExamples[level] || contextualExamples[\"B1\"];\n        return levelExamples.slice(0, count);\n    }\n    // Extract themes from source text for contextual examples\n    extractThemesFromText(text) {\n        const themes = [];\n        // Common themes based on keywords\n        const themeKeywords = {\n            \"sports\": [\n                \"team\",\n                \"game\",\n                \"win\",\n                \"play\",\n                \"match\",\n                \"competition\",\n                \"tournament\",\n                \"cup\"\n            ],\n            \"technology\": [\n                \"AI\",\n                \"computer\",\n                \"digital\",\n                \"software\",\n                \"system\",\n                \"device\",\n                \"artificial\",\n                \"intelligence\"\n            ],\n            \"environment\": [\n                \"climate\",\n                \"nature\",\n                \"earth\",\n                \"green\",\n                \"pollution\",\n                \"energy\",\n                \"change\"\n            ],\n            \"health\": [\n                \"medical\",\n                \"doctor\",\n                \"treatment\",\n                \"patient\",\n                \"medicine\",\n                \"care\",\n                \"healthcare\"\n            ],\n            \"business\": [\n                \"company\",\n                \"market\",\n                \"economy\",\n                \"finance\",\n                \"industry\",\n                \"trade\"\n            ],\n            \"education\": [\n                \"student\",\n                \"learn\",\n                \"school\",\n                \"knowledge\",\n                \"study\",\n                \"teach\"\n            ]\n        };\n        const lowerText = text.toLowerCase();\n        for (const [theme, keywords] of Object.entries(themeKeywords)){\n            const matchCount = keywords.filter((keyword)=>lowerText.includes(keyword)).length;\n            if (matchCount >= 2) {\n                themes.push(theme);\n            }\n        }\n        return themes.length > 0 ? themes : [\n            \"this topic\"\n        ];\n    }\n    // Generate truly level-appropriate example sentences\n    generateLevelAppropriateExamples(word, level, count) {\n        const lowerWord = word.toLowerCase();\n        const capitalizedWord = this.capitalizeWord(word);\n        const examples = {\n            \"A1\": [\n                `${capitalizedWord} is good.`,\n                `I like ${lowerWord}.`,\n                `This is ${lowerWord}.`,\n                `${capitalizedWord} helps us.`,\n                `We see ${lowerWord}.`\n            ],\n            \"A2\": [\n                `${capitalizedWord} is very important.`,\n                `I think ${lowerWord} is interesting.`,\n                `Many people know about ${lowerWord}.`,\n                `${capitalizedWord} is useful for us.`,\n                `We can learn about ${lowerWord}.`\n            ],\n            \"B1\": [\n                `${capitalizedWord} plays an important role today.`,\n                `People are interested in ${lowerWord}.`,\n                `${capitalizedWord} affects our daily lives.`,\n                `We should understand ${lowerWord} better.`\n            ],\n            \"B2\": [\n                `${capitalizedWord} has significant implications for society.`,\n                `The impact of ${lowerWord} continues to grow.`,\n                `Understanding ${lowerWord} requires careful consideration.`\n            ],\n            \"C1\": [\n                `${capitalizedWord} exemplifies contemporary challenges.`,\n                `The complexity of ${lowerWord} demands sophisticated analysis.`,\n                `${capitalizedWord} represents a paradigm shift in thinking.`\n            ]\n        };\n        const levelExamples = examples[level] || examples[\"B1\"];\n        return levelExamples.slice(0, count);\n    }\n    // Fallback template-based example generation\n    generateTemplateExamples(word, level, sourceText) {\n        const exampleCount = this.getExampleCount(level);\n        // Try to find the word in the source text first\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const contextSentence = sentences.find((s)=>s.toLowerCase().includes(word.toLowerCase()));\n        const examples = [];\n        // Add context sentence if found\n        if (contextSentence) {\n            examples.push(contextSentence.trim());\n        }\n        // Generate additional level-appropriate examples\n        const additionalExamples = this.generateAdditionalExamples(word, level, exampleCount - examples.length);\n        examples.push(...additionalExamples);\n        // Ensure we have the right number of examples\n        return examples.slice(0, exampleCount).join(\" | \");\n    }\n    // Get number of examples based on CEFR level\n    getExampleCount(level) {\n        switch(level){\n            case \"A1\":\n            case \"A2\":\n                return 5;\n            case \"B1\":\n                return 4;\n            case \"B2\":\n            case \"C1\":\n                return 3;\n            default:\n                return 4;\n        }\n    }\n    // Generate additional level-appropriate example sentences\n    generateAdditionalExamples(word, level, count) {\n        const lowerWord = word.toLowerCase();\n        const capitalizedWord = this.capitalizeWord(word);\n        const exampleTemplates = {\n            \"A1\": [\n                `${capitalizedWord} is important.`,\n                `I like ${lowerWord}.`,\n                `This is ${lowerWord}.`,\n                `${capitalizedWord} is good.`,\n                `We use ${lowerWord}.`\n            ],\n            \"A2\": [\n                `${capitalizedWord} is very important in our daily life.`,\n                `I think ${lowerWord} is interesting.`,\n                `Many people use ${lowerWord} today.`,\n                `${capitalizedWord} helps us a lot.`,\n                `We can learn about ${lowerWord}.`\n            ],\n            \"B1\": [\n                `${capitalizedWord} plays an important role in modern society.`,\n                `The concept of ${lowerWord} has evolved significantly.`,\n                `Understanding ${lowerWord} is essential for students.`,\n                `${capitalizedWord} continues to influence our daily lives.`\n            ],\n            \"B2\": [\n                `${capitalizedWord} represents a significant development in this field.`,\n                `The implications of ${lowerWord} extend beyond immediate applications.`,\n                `Experts consider ${lowerWord} to be a crucial factor in future progress.`\n            ],\n            \"C1\": [\n                `${capitalizedWord} exemplifies the complex interplay between innovation and practical application.`,\n                `The multifaceted nature of ${lowerWord} requires comprehensive analysis.`,\n                `Contemporary discourse surrounding ${lowerWord} reflects broader societal transformations.`\n            ]\n        };\n        const templates = exampleTemplates[level] || exampleTemplates[\"B1\"];\n        return templates.slice(0, count);\n    }\n    // Enhanced reading passage adaptation with AI rewriting and vocabulary bolding\n    async generateSmartReading(sourceText, studentLevel, vocabularyWords = []) {\n        const maxLength = {\n            \"A1\": 150,\n            \"A2\": 250,\n            \"B1\": 350,\n            \"B2\": 450,\n            \"C1\": 550\n        };\n        const targetLength = maxLength[studentLevel] || 350;\n        try {\n            // Use AI to rewrite text for appropriate level\n            const rewrittenText = await this.rewriteForLevel(sourceText, studentLevel, targetLength);\n            // Bold vocabulary words in the reading passage\n            return this.boldVocabularyInText(rewrittenText, vocabularyWords);\n        } catch (error) {\n            console.log(`⚠️ AI rewriting failed for reading passage, using template adaptation`);\n            // Fallback to template-based adaptation\n            const adaptedText = this.adaptReadingTemplate(sourceText, studentLevel, targetLength);\n            return this.boldVocabularyInText(adaptedText, vocabularyWords);\n        }\n    }\n    // AI-powered text rewriting for CEFR levels\n    async rewriteForLevel(sourceText, studentLevel, targetLength) {\n        const levelGuidance = this.getReadingLevelGuidance(studentLevel);\n        const shortText = sourceText.substring(0, targetLength + 100) // Give AI more context to work with\n        ;\n        const prompt = `Rewrite this text for ${studentLevel} level students. ${levelGuidance} Keep the main ideas but adapt the language. Target length: ${targetLength} characters. Text: ${shortText}`;\n        console.log(\"\\uD83D\\uDCD6 Reading rewrite prompt:\", prompt.length, \"chars\");\n        const rewrittenText = await this.getGoogleAI().prompt(prompt);\n        // Clean and limit the rewritten text\n        return rewrittenText.trim().substring(0, targetLength);\n    }\n    // Get level-specific guidance for reading adaptation\n    getReadingLevelGuidance(level) {\n        const guidance = {\n            \"A1\": \"Use very simple words, short sentences (5-8 words), present tense only, basic vocabulary.\",\n            \"A2\": \"Use simple words, short sentences (6-10 words), simple past and present, common vocabulary.\",\n            \"B1\": \"Use clear language, medium sentences (8-12 words), various tenses, intermediate vocabulary.\",\n            \"B2\": \"Use varied vocabulary, longer sentences (10-15 words), complex grammar, advanced concepts.\",\n            \"C1\": \"Use sophisticated language, complex sentences (12+ words), advanced grammar, nuanced ideas.\"\n        };\n        return guidance[level] || guidance[\"B1\"];\n    }\n    // Template-based reading adaptation (fallback)\n    adaptReadingTemplate(sourceText, studentLevel, targetLength) {\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        if (studentLevel === \"A1\" || studentLevel === \"A2\") {\n            // Simplify for lower levels\n            const simplifiedSentences = sentences.map((s)=>this.simplifysentence(s.trim(), studentLevel)).filter((s)=>s.length > 0).slice(0, 6) // Limit number of sentences for A1/A2\n            ;\n            return simplifiedSentences.join(\". \").substring(0, targetLength);\n        } else {\n            // For B1+ levels, use original text with length control\n            return sentences.join(\". \").substring(0, targetLength);\n        }\n    }\n    // Simplify individual sentences for lower levels\n    simplifysentence(sentence, level) {\n        if (level === \"A1\") {\n            // Very basic simplification for A1\n            return sentence.replace(/\\b(however|nevertheless|furthermore|moreover)\\b/gi, \"but\").replace(/\\b(approximately|approximately)\\b/gi, \"about\").replace(/\\b(significant|substantial)\\b/gi, \"big\").replace(/\\b(demonstrate|illustrate)\\b/gi, \"show\");\n        } else if (level === \"A2\") {\n            // Moderate simplification for A2\n            return sentence.replace(/\\b(nevertheless|furthermore)\\b/gi, \"however\").replace(/\\b(approximately)\\b/gi, \"about\").replace(/\\b(substantial)\\b/gi, \"significant\");\n        }\n        return sentence;\n    }\n    // Bold vocabulary words in reading passage for visual landmarks\n    boldVocabularyInText(text, vocabularyWords) {\n        if (!vocabularyWords || vocabularyWords.length === 0) {\n            return text;\n        }\n        let boldedText = text;\n        // Sort vocabulary words by length (longest first) to avoid partial matches\n        const sortedWords = vocabularyWords.filter((word)=>word && word !== \"INSTRUCTION\") // Filter out instruction marker\n        .sort((a, b)=>b.length - a.length);\n        for (const word of sortedWords){\n            // Create regex to match whole words only (case insensitive)\n            const regex = new RegExp(`\\\\b${word.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")}\\\\b`, \"gi\");\n            // Replace with bold markdown, but avoid double-bolding\n            boldedText = boldedText.replace(regex, (match)=>{\n                // Check if already bolded\n                if (boldedText.includes(`**${match}**`)) {\n                    return match;\n                }\n                return `**${match}**`;\n            });\n        }\n        return boldedText;\n    }\n    // Smart comprehension questions (5 questions per level)\n    generateSmartComprehension(topics, studentLevel) {\n        const topic = topics[0] || \"the content\";\n        const levelQuestions = {\n            \"A1\": [\n                `What is ${topic.toLowerCase()}?`,\n                \"What is the main idea?\",\n                \"Is this information new to you?\",\n                \"Do you understand the text?\",\n                \"What did you learn?\"\n            ],\n            \"A2\": [\n                `What does the text say about ${topic.toLowerCase()}?`,\n                \"What are the main points?\",\n                \"Do you agree with the information?\",\n                \"Which part is most interesting?\",\n                \"What questions do you have?\"\n            ],\n            \"B1\": [\n                `How does the text explain ${topic.toLowerCase()}?`,\n                \"What supporting details are provided?\",\n                \"What conclusions can you draw?\",\n                \"How does this relate to your experience?\",\n                \"What additional information would be helpful?\"\n            ],\n            \"B2\": [\n                `What is the author's perspective on ${topic.toLowerCase()}?`,\n                \"What evidence supports the main arguments?\",\n                \"What are the implications of this information?\",\n                \"How might this affect different groups of people?\",\n                \"What counterarguments could be made?\"\n            ],\n            \"C1\": [\n                `How does the author's treatment of ${topic.toLowerCase()} reflect broader themes?`,\n                \"What underlying assumptions can you identify?\",\n                \"How might this information be interpreted differently in various contexts?\",\n                \"What are the potential long-term consequences discussed?\",\n                \"How does this contribute to the ongoing discourse in this field?\"\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Smart discussion questions\n    generateSmartDiscussion(topics, lessonType, studentLevel) {\n        const topic = topics[0] || \"this topic\";\n        const secondTopic = topics[1] || \"technology\";\n        const levelQuestions = {\n            \"A1\": [\n                `Do you like ${topic.toLowerCase()}? Why?`,\n                `Is ${topic.toLowerCase()} good or bad?`,\n                `Would you recommend ${topic.toLowerCase()} to friends?`\n            ],\n            \"A2\": [\n                `What is your opinion about ${topic.toLowerCase()}?`,\n                `How do you use ${topic.toLowerCase()} in your life?`,\n                `What problems can ${topic.toLowerCase()} cause?`\n            ],\n            \"B1\": [\n                `What are the advantages and disadvantages of ${topic.toLowerCase()}?`,\n                `How has ${topic.toLowerCase()} changed over time?`,\n                `What would happen if ${topic.toLowerCase()} didn't exist?`\n            ],\n            \"B2\": [\n                `How might ${topic.toLowerCase()} impact society in the next decade?`,\n                `What ethical considerations surround ${topic.toLowerCase()}?`,\n                `How does ${topic.toLowerCase()} differ across cultures?`\n            ],\n            \"C1\": [\n                `What are the broader societal implications of ${topic.toLowerCase()}?`,\n                `How might ${topic.toLowerCase()} reshape our understanding of ${secondTopic.toLowerCase()}?`,\n                `What role should regulation play in ${topic.toLowerCase()}?`\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Smart grammar focus\n    generateSmartGrammar(studentLevel, sourceText) {\n        const grammarFocus = {\n            \"A1\": {\n                focus: \"Present Simple\",\n                examples: [\n                    \"It is efficient.\",\n                    \"This works well.\",\n                    \"People use technology.\"\n                ],\n                exercise: [\n                    \"It _____ (be) very useful.\",\n                    \"Technology _____ (help) people.\",\n                    \"This _____ (work) on phones.\"\n                ]\n            },\n            \"A2\": {\n                focus: \"Present Continuous and Simple\",\n                examples: [\n                    \"It is working on your device.\",\n                    \"People are using this technology.\",\n                    \"It helps with privacy.\"\n                ],\n                exercise: [\n                    \"It _____ (work) right now.\",\n                    \"People _____ (use) it every day.\",\n                    \"This _____ (help) with security.\"\n                ]\n            },\n            \"B1\": {\n                focus: \"Present Perfect\",\n                examples: [\n                    \"Technology has improved significantly.\",\n                    \"It has become more efficient.\",\n                    \"Users have experienced better privacy.\"\n                ],\n                exercise: [\n                    \"Technology _____ (improve) a lot.\",\n                    \"It _____ (become) very popular.\",\n                    \"People _____ (start) using it more.\"\n                ]\n            },\n            \"B2\": {\n                focus: \"Passive Voice\",\n                examples: [\n                    \"It is designed for mobile devices.\",\n                    \"Privacy is enhanced by this technology.\",\n                    \"Data is processed locally.\"\n                ],\n                exercise: [\n                    \"It _____ (design) for phones.\",\n                    \"Privacy _____ (improve) significantly.\",\n                    \"Information _____ (process) safely.\"\n                ]\n            },\n            \"C1\": {\n                focus: \"Complex Sentence Structures\",\n                examples: [\n                    \"Having been designed for efficiency, it operates seamlessly.\",\n                    \"The technology, which prioritizes privacy, has gained popularity.\"\n                ],\n                exercise: [\n                    \"_____ (design) for mobile use, it works offline.\",\n                    \"The system, _____ (focus) on privacy, appeals to users.\"\n                ]\n            }\n        };\n        return grammarFocus[studentLevel] || grammarFocus[\"B1\"];\n    }\n    // Smart pronunciation\n    generateSmartPronunciation(vocabulary) {\n        const word = vocabulary.find((w)=>w.length > 6) || vocabulary[0] || \"technology\";\n        const pronunciations = {\n            \"technology\": \"/tekˈnɒlədʒi/\",\n            \"efficient\": \"/ɪˈfɪʃənt/\",\n            \"privacy\": \"/ˈpraɪvəsi/\",\n            \"processing\": \"/ˈprəʊsesɪŋ/\",\n            \"device\": \"/dɪˈvaɪs/\",\n            \"artificial\": \"/ˌɑːtɪˈfɪʃəl/\",\n            \"intelligence\": \"/ɪnˈtelɪdʒəns/\",\n            \"compact\": \"/kəmˈp\\xe6kt/\",\n            \"version\": \"/ˈvɜːʃən/\",\n            \"family\": \"/ˈf\\xe6məli/\",\n            \"nano\": \"/ˈn\\xe6noʊ/\",\n            \"gemini\": \"/ˈdʒemɪnaɪ/\"\n        };\n        return {\n            word: word,\n            ipa: pronunciations[word.toLowerCase()] || `/ˈwɜːrd/`,\n            practice: `Practice saying \"${word}\" in this sentence: This ${word} is very useful.`\n        };\n    }\n    // Smart wrap-up questions\n    generateSmartWrapup(topics, studentLevel) {\n        const topic = topics[0] || \"this topic\";\n        return [\n            `What new vocabulary did you learn about ${topic.toLowerCase()}?`,\n            `Which concepts about ${topic.toLowerCase()} need more practice?`,\n            \"How will you use this knowledge in real situations?\",\n            \"What questions do you still have about this content?\"\n        ];\n    }\n    // Generate dialogue practice section (Engoo-style)\n    async generateDialoguePractice(sourceText, studentLevel, vocabularyWords) {\n        const topics = this.extractBetterTopics(sourceText);\n        const mainTopic = topics[0] || \"this topic\";\n        try {\n            const context = sourceText.substring(0, 150);\n            const prompt = `Create a ${studentLevel} level dialogue between 2-3 characters about: ${context}. Include vocabulary: ${vocabularyWords.slice(0, 3).join(\", \")}. Format: Character Name: dialogue line. Make it natural and conversational.`;\n            console.log(\"\\uD83C\\uDFAD Dialogue practice prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            const dialogue = this.parseDialogue(response);\n            const followUpQuestions = this.generateDialogueFollowUpQuestions(mainTopic, studentLevel);\n            return {\n                instruction: \"Practice this dialogue with your tutor. Take turns reading different characters:\",\n                dialogue: dialogue,\n                followUpQuestions: followUpQuestions\n            };\n        } catch (error) {\n            console.log(\"⚠️ Dialogue practice generation failed, using template\");\n            return this.generateTemplateDialoguePractice(mainTopic, studentLevel, vocabularyWords);\n        }\n    }\n    // Generate dialogue fill-in-the-gap section\n    async generateDialogueFillGap(sourceText, studentLevel, vocabularyWords) {\n        const topics = this.extractBetterTopics(sourceText);\n        const mainTopic = topics[0] || \"this topic\";\n        try {\n            const context = sourceText.substring(0, 150);\n            const prompt = `Create a short ${studentLevel} level dialogue between 2 characters about: ${context}. Leave 3-4 blanks for students to fill. Format: Character: dialogue with _____ for blanks.`;\n            console.log(\"\\uD83D\\uDCDD Fill-gap dialogue prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            const { dialogue, answers } = this.parseDialogueWithGaps(response);\n            return {\n                instruction: \"Complete the dialogue by filling in the missing words or phrases:\",\n                dialogue: dialogue,\n                answers: answers\n            };\n        } catch (error) {\n            console.log(\"⚠️ Fill-gap dialogue generation failed, using template\");\n            return this.generateTemplateDialogueFillGap(mainTopic, studentLevel, vocabularyWords);\n        }\n    }\n    // Parse dialogue from AI response\n    parseDialogue(response) {\n        const lines = response.split(\"\\n\").filter((line)=>line.trim().length > 0);\n        const dialogue = [];\n        for (const line of lines){\n            const match = line.match(/^([A-Za-z\\s]+):\\s*(.+)$/);\n            if (match) {\n                dialogue.push({\n                    character: match[1].trim(),\n                    line: match[2].trim()\n                });\n            }\n        }\n        return dialogue.length > 0 ? dialogue : this.getDefaultDialogue();\n    }\n    // Parse dialogue with gaps\n    parseDialogueWithGaps(response) {\n        const lines = response.split(\"\\n\").filter((line)=>line.trim().length > 0);\n        const dialogue = [];\n        const answers = [];\n        for (const line of lines){\n            const match = line.match(/^([A-Za-z\\s]+):\\s*(.+)$/);\n            if (match) {\n                const character = match[1].trim();\n                const text = match[2].trim();\n                if (text.includes(\"_____\")) {\n                    dialogue.push({\n                        character: character,\n                        line: text,\n                        isGap: true\n                    });\n                    answers.push(\"answer\");\n                } else {\n                    dialogue.push({\n                        character: character,\n                        line: text\n                    });\n                }\n            }\n        }\n        return {\n            dialogue,\n            answers\n        };\n    }\n    // Generate follow-up questions for dialogue practice\n    generateDialogueFollowUpQuestions(topic, studentLevel) {\n        const levelQuestions = {\n            \"A1\": [\n                \"What did the characters talk about?\",\n                \"Which character do you like more?\",\n                \"Is this conversation easy or difficult?\"\n            ],\n            \"A2\": [\n                \"What is the main problem in the dialogue?\",\n                \"How do the characters feel?\",\n                \"What would you say in this situation?\"\n            ],\n            \"B1\": [\n                \"What is the relationship between the characters?\",\n                \"How would you handle this situation differently?\",\n                \"What cultural differences do you notice?\"\n            ],\n            \"B2\": [\n                \"What are the underlying motivations of each character?\",\n                \"How effective is their communication?\",\n                \"What assumptions are being made in this conversation?\"\n            ],\n            \"C1\": [\n                \"How do the characters' communication styles reflect their backgrounds?\",\n                \"What implicit meanings can you identify in their exchanges?\",\n                \"How might this conversation unfold in different cultural contexts?\"\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Template dialogue practice fallback\n    generateTemplateDialoguePractice(topic, studentLevel, vocabularyWords) {\n        const dialogue = [\n            {\n                character: \"Alex\",\n                line: `Have you heard about ${topic}?`\n            },\n            {\n                character: \"Sam\",\n                line: `Yes, I think it's very interesting.`\n            },\n            {\n                character: \"Alex\",\n                line: `What do you think about it?`\n            },\n            {\n                character: \"Sam\",\n                line: `I believe it will change many things.`\n            },\n            {\n                character: \"Alex\",\n                line: `I agree. It's important to understand it better.`\n            }\n        ];\n        return {\n            instruction: \"Practice this dialogue with your tutor. Take turns reading different characters:\",\n            dialogue: dialogue,\n            followUpQuestions: this.generateDialogueFollowUpQuestions(topic, studentLevel)\n        };\n    }\n    // Template fill-gap dialogue fallback\n    generateTemplateDialogueFillGap(topic, studentLevel, vocabularyWords) {\n        const dialogue = [\n            {\n                character: \"Person A\",\n                line: `What do you think about _____?`,\n                isGap: true\n            },\n            {\n                character: \"Person B\",\n                line: `I think it's very _____.`,\n                isGap: true\n            },\n            {\n                character: \"Person A\",\n                line: `Why do you feel that way?`\n            },\n            {\n                character: \"Person B\",\n                line: `Because it _____ our daily lives.`,\n                isGap: true\n            }\n        ];\n        return {\n            instruction: \"Complete the dialogue by filling in the missing words or phrases:\",\n            dialogue: dialogue,\n            answers: [\n                topic,\n                \"interesting\",\n                \"affects\"\n            ]\n        };\n    }\n    // Default dialogue fallback\n    getDefaultDialogue() {\n        return [\n            {\n                character: \"Alex\",\n                line: \"What do you think about this topic?\"\n            },\n            {\n                character: \"Sam\",\n                line: \"I find it very interesting.\"\n            },\n            {\n                character: \"Alex\",\n                line: \"Can you tell me more?\"\n            },\n            {\n                character: \"Sam\",\n                line: \"Sure, I'd be happy to explain.\"\n            }\n        ];\n    }\n    // Helper method to determine source country from domain\n    determineSourceCountry(domain) {\n        const countryMap = {\n            \"bbc.com\": \"United Kingdom\",\n            \"bbc.co.uk\": \"United Kingdom\",\n            \"cnn.com\": \"United States\",\n            \"nytimes.com\": \"United States\",\n            \"theguardian.com\": \"United Kingdom\",\n            \"washingtonpost.com\": \"United States\",\n            \"reuters.com\": \"International\",\n            \"ap.org\": \"United States\",\n            \"npr.org\": \"United States\",\n            \"abc.net.au\": \"Australia\",\n            \"cbc.ca\": \"Canada\"\n        };\n        for (const [domainKey, country] of Object.entries(countryMap)){\n            if (domain.includes(domainKey)) {\n                return country;\n            }\n        }\n        return \"International\";\n    }\n    // Fallback warm-up question generator\n    getFallbackWarmupQuestion(level, contentAnalysis, questionIndex) {\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const contentType = contentAnalysis.contentType;\n        const fallbackQuestions = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} important in your country?`,\n                `Do you like to read about ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you heard about ${topic.toLowerCase()} before?`,\n                `What do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} different in your country?`\n            ],\n            \"B1\": [\n                `What do you think about ${topic.toLowerCase()}?`,\n                `How is ${topic.toLowerCase()} important in your daily life?`,\n                `What would you like to know about ${topic.toLowerCase()}?`\n            ],\n            \"B2\": [\n                `What are your thoughts on ${topic.toLowerCase()}?`,\n                `How might ${topic.toLowerCase()} affect people in different countries?`,\n                `What questions would you ask about ${topic.toLowerCase()}?`\n            ],\n            \"C1\": [\n                `How do cultural perspectives influence attitudes toward ${topic.toLowerCase()}?`,\n                `What are the broader implications of ${topic.toLowerCase()} in modern society?`,\n                `How might ${topic.toLowerCase()} evolve in the coming years?`\n            ]\n        };\n        const levelQuestions = fallbackQuestions[level] || fallbackQuestions[\"B1\"];\n        return levelQuestions[questionIndex] || levelQuestions[0];\n    }\n    // Contextual warm-up fallback when AI fails\n    getContextualWarmupFallback(level, contentAnalysis, metadata) {\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const sourceCountry = contentAnalysis.sourceCountry || \"this country\";\n        const title = metadata?.title || \"this content\";\n        const fallbackSets = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is this topic common in your country?`,\n                `Do you want to learn about ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you experienced ${topic.toLowerCase()} before?`,\n                `What is ${topic.toLowerCase()} like in your country?`,\n                `Why is ${topic.toLowerCase()} interesting to you?`\n            ],\n            \"B1\": [\n                `What do you think about ${topic.toLowerCase()}?`,\n                `How is ${topic.toLowerCase()} different in your country compared to ${sourceCountry}?`,\n                `What would you expect to learn from this ${contentAnalysis.contentType}?`\n            ],\n            \"B2\": [\n                `What are your thoughts on how ${topic.toLowerCase()} is presented in ${sourceCountry} media?`,\n                `What challenges do you think people face with ${topic.toLowerCase()}?`,\n                `How might your perspective on ${topic.toLowerCase()} differ from the author's?`\n            ],\n            \"C1\": [\n                `How do cultural attitudes toward ${topic.toLowerCase()} vary between ${sourceCountry} and your country?`,\n                `What are the broader societal implications of ${topic.toLowerCase()}?`,\n                `How might the perspective in this ${contentAnalysis.contentType} reflect ${sourceCountry} values?`\n            ]\n        };\n        return fallbackSets[level] || fallbackSets[\"B1\"];\n    }\n    constructor(){\n        this.googleAI = null;\n    }\n}\nconst lessonAIServerGenerator = new LessonAIServerGenerator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/lesson-ai-generator-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase-server.ts":
/*!********************************!*\
  !*** ./lib/supabase-server.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerSupabaseClient: () => (/* binding */ createServerSupabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\nconst createServerSupabaseClient = ()=>{\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://jbkpnirowdvlwlgheqho.supabase.co\" || 0, \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impia3BuaXJvd2R2bHdsZ2hlcWhvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MTQ3NTEsImV4cCI6MjA3NDQ5MDc1MX0.FZhruXKDzIkZLhla5oerfs7yzjvTsGLlKTUer34N6N0\" || 0, {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            },\n            set (name, value, options) {\n                cookieStore.set({\n                    name,\n                    value,\n                    ...options\n                });\n            },\n            remove (name, options) {\n                cookieStore.set({\n                    name,\n                    value: \"\",\n                    ...options\n                });\n            }\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUNaO0FBRS9CLE1BQU1FLDZCQUE2QjtJQUN4QyxNQUFNQyxjQUFjRixxREFBT0E7SUFFM0IsT0FBT0QsaUVBQWtCQSxDQUN2QkksMENBQW9DLElBQUksR0FDeENBLGtOQUF5QyxJQUFJLEdBQzdDO1FBQ0FILFNBQVM7WUFDUE8sS0FBSUMsSUFBWTtnQkFDZCxPQUFPTixZQUFZSyxHQUFHLENBQUNDLE9BQU9DO1lBQ2hDO1lBQ0FDLEtBQUlGLElBQVksRUFBRUMsS0FBYSxFQUFFRSxPQUFZO2dCQUMzQ1QsWUFBWVEsR0FBRyxDQUFDO29CQUFFRjtvQkFBTUM7b0JBQU8sR0FBR0UsT0FBTztnQkFBQztZQUM1QztZQUNBQyxRQUFPSixJQUFZLEVBQUVHLE9BQVk7Z0JBQy9CVCxZQUFZUSxHQUFHLENBQUM7b0JBQUVGO29CQUFNQyxPQUFPO29CQUFJLEdBQUdFLE9BQU87Z0JBQUM7WUFDaEQ7UUFDRjtJQUNGO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzPzA5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VydmVyQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zc3JcIlxuaW1wb3J0IHsgY29va2llcyB9IGZyb20gXCJuZXh0L2hlYWRlcnNcIlxuXG5leHBvcnQgY29uc3QgY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IGNvb2tpZVN0b3JlID0gY29va2llcygpXG5cbiAgcmV0dXJuIGNyZWF0ZVNlcnZlckNsaWVudChcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgfHwgJ2h0dHBzOi8vcGxhY2Vob2xkZXIuc3VwYWJhc2UuY28nLCBcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCAncGxhY2Vob2xkZXIta2V5JywgXG4gICAge1xuICAgIGNvb2tpZXM6IHtcbiAgICAgIGdldChuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNvb2tpZVN0b3JlLmdldChuYW1lKT8udmFsdWVcbiAgICAgIH0sXG4gICAgICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWUsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgICByZW1vdmUobmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWU6IFwiXCIsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJDbGllbnQiLCJjb29raWVzIiwiY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQiLCJjb29raWVTdG9yZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsImdldCIsIm5hbWUiLCJ2YWx1ZSIsInNldCIsIm9wdGlvbnMiLCJyZW1vdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase-server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/next","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/cookie","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();