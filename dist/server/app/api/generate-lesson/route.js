"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-lesson/route";
exports.ids = ["app/api/generate-lesson/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-lesson/route.ts */ \"(rsc)/./app/api/generate-lesson/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-lesson/route\",\n        pathname: \"/api/generate-lesson\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-lesson/route\"\n    },\n    resolvedPagePath: \"D:\\\\linguaspark\\\\app\\\\api\\\\generate-lesson\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-lesson/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1sZXNzb24lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbGluZ3Vhc3BhcmslNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNsaW5ndWFzcGFyayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDSTtBQUNqRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzI3ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlLWxlc3NvblwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZ2VuZXJhdGUtbGVzc29uL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-lesson/route.ts":
/*!******************************************!*\
  !*** ./app/api/generate-lesson/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/lesson-ai-generator-server */ \"(rsc)/./lib/lesson-ai-generator-server.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase-server */ \"(rsc)/./lib/supabase-server.ts\");\n\n // Updated import to use server-side generator\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = body;\n        // Validate required fields\n        if (!sourceText || !lessonType || !studentLevel || !targetLanguage) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing required fields\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate user authentication\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__.createServerSupabaseClient)();\n        const { data: { user }, error: authError } = await supabase.auth.getUser();\n        if (authError || !user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        // Generate lesson using enhanced AI pipeline with contextual information\n        const lesson = await _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__.lessonAIServerGenerator.generateLesson({\n            sourceText,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sourceUrl,\n            contentMetadata,\n            structuredContent,\n            wordCount,\n            readingTime\n        });\n        // Save lesson to database\n        const { data: savedLesson, error: saveError } = await supabase.from(\"lessons\").insert({\n            tutor_id: user.id,\n            title: `${lessonType} Lesson - ${new Date().toLocaleDateString()}`,\n            lesson_type: lessonType,\n            student_level: studentLevel,\n            target_language: targetLanguage,\n            source_url: sourceUrl,\n            source_text: sourceText,\n            lesson_data: lesson\n        }).select().single();\n        if (saveError) {\n            console.error(\"Error saving lesson:\", saveError);\n            // Return lesson even if save fails\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                lesson\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            lesson: {\n                ...lesson,\n                id: savedLesson.id\n            }\n        });\n    } catch (error) {\n        console.error(\"Error generating lesson:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate lesson\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTREO0FBQ2MsQ0FBQyw4Q0FBOEM7QUFDdkQ7QUFFM0QsZUFBZUcsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQ0pDLFVBQVUsRUFDVkMsVUFBVSxFQUNWQyxZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsU0FBUyxFQUNUQyxlQUFlLEVBQ2ZDLGlCQUFpQixFQUNqQkMsU0FBUyxFQUNUQyxXQUFXLEVBQ1osR0FBR1Y7UUFFSiwyQkFBMkI7UUFDM0IsSUFBSSxDQUFDRSxjQUFjLENBQUNDLGNBQWMsQ0FBQ0MsZ0JBQWdCLENBQUNDLGdCQUFnQjtZQUNsRSxPQUFPVixxREFBWUEsQ0FBQ00sSUFBSSxDQUFDO2dCQUFFVSxPQUFPO1lBQTBCLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUMvRTtRQUVBLCtCQUErQjtRQUMvQixNQUFNQyxXQUFXaEIsZ0ZBQTBCQTtRQUMzQyxNQUFNLEVBQ0ppQixNQUFNLEVBQUVDLElBQUksRUFBRSxFQUNkSixPQUFPSyxTQUFTLEVBQ2pCLEdBQUcsTUFBTUgsU0FBU0ksSUFBSSxDQUFDQyxPQUFPO1FBRS9CLElBQUlGLGFBQWEsQ0FBQ0QsTUFBTTtZQUN0QixPQUFPcEIscURBQVlBLENBQUNNLElBQUksQ0FBQztnQkFBRVUsT0FBTztZQUEwQixHQUFHO2dCQUFFQyxRQUFRO1lBQUk7UUFDL0U7UUFFQSx5RUFBeUU7UUFDekUsTUFBTU8sU0FBUyxNQUFNdkIsb0ZBQXVCQSxDQUFDd0IsY0FBYyxDQUFDO1lBQzFEbEI7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7UUFDRjtRQUVBLDBCQUEwQjtRQUMxQixNQUFNLEVBQUVJLE1BQU1PLFdBQVcsRUFBRVYsT0FBT1csU0FBUyxFQUFFLEdBQUcsTUFBTVQsU0FDbkRVLElBQUksQ0FBQyxXQUNMQyxNQUFNLENBQUM7WUFDTkMsVUFBVVYsS0FBS1csRUFBRTtZQUNqQkMsT0FBTyxDQUFDLEVBQUV4QixXQUFXLFVBQVUsRUFBRSxJQUFJeUIsT0FBT0Msa0JBQWtCLEdBQUcsQ0FBQztZQUNsRUMsYUFBYTNCO1lBQ2I0QixlQUFlM0I7WUFDZjRCLGlCQUFpQjNCO1lBQ2pCNEIsWUFBWTNCO1lBQ1o0QixhQUFhaEM7WUFDYmlDLGFBQWFoQjtRQUNmLEdBQ0NpQixNQUFNLEdBQ05DLE1BQU07UUFFVCxJQUFJZixXQUFXO1lBQ2JnQixRQUFRM0IsS0FBSyxDQUFDLHdCQUF3Qlc7WUFDdEMsbUNBQW1DO1lBQ25DLE9BQU8zQixxREFBWUEsQ0FBQ00sSUFBSSxDQUFDO2dCQUFFa0I7WUFBTztRQUNwQztRQUVBLE9BQU94QixxREFBWUEsQ0FBQ00sSUFBSSxDQUFDO1lBQ3ZCa0IsUUFBUTtnQkFDTixHQUFHQSxNQUFNO2dCQUNUTyxJQUFJTCxZQUFZSyxFQUFFO1lBQ3BCO1FBQ0Y7SUFDRixFQUFFLE9BQU9mLE9BQU87UUFDZDJCLFFBQVEzQixLQUFLLENBQUMsNEJBQTRCQTtRQUMxQyxPQUFPaEIscURBQVlBLENBQUNNLElBQUksQ0FBQztZQUFFVSxPQUFPO1FBQTRCLEdBQUc7WUFBRUMsUUFBUTtRQUFJO0lBQ2pGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vYXBwL2FwaS9nZW5lcmF0ZS1sZXNzb24vcm91dGUudHM/NWFiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIlxuaW1wb3J0IHsgbGVzc29uQUlTZXJ2ZXJHZW5lcmF0b3IgfSBmcm9tIFwiQC9saWIvbGVzc29uLWFpLWdlbmVyYXRvci1zZXJ2ZXJcIiAvLyBVcGRhdGVkIGltcG9ydCB0byB1c2Ugc2VydmVyLXNpZGUgZ2VuZXJhdG9yXG5pbXBvcnQgeyBjcmVhdGVTZXJ2ZXJTdXBhYmFzZUNsaWVudCB9IGZyb20gXCJAL2xpYi9zdXBhYmFzZS1zZXJ2ZXJcIlxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKVxuICAgIGNvbnN0IHsgXG4gICAgICBzb3VyY2VUZXh0LCBcbiAgICAgIGxlc3NvblR5cGUsIFxuICAgICAgc3R1ZGVudExldmVsLCBcbiAgICAgIHRhcmdldExhbmd1YWdlLCBcbiAgICAgIHNvdXJjZVVybCxcbiAgICAgIGNvbnRlbnRNZXRhZGF0YSxcbiAgICAgIHN0cnVjdHVyZWRDb250ZW50LFxuICAgICAgd29yZENvdW50LFxuICAgICAgcmVhZGluZ1RpbWVcbiAgICB9ID0gYm9keVxuXG4gICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgaWYgKCFzb3VyY2VUZXh0IHx8ICFsZXNzb25UeXBlIHx8ICFzdHVkZW50TGV2ZWwgfHwgIXRhcmdldExhbmd1YWdlKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkc1wiIH0sIHsgc3RhdHVzOiA0MDAgfSlcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSB1c2VyIGF1dGhlbnRpY2F0aW9uXG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVTZXJ2ZXJTdXBhYmFzZUNsaWVudCgpXG4gICAgY29uc3Qge1xuICAgICAgZGF0YTogeyB1c2VyIH0sXG4gICAgICBlcnJvcjogYXV0aEVycm9yLFxuICAgIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFVzZXIoKVxuXG4gICAgaWYgKGF1dGhFcnJvciB8fCAhdXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6IFwiQXV0aGVudGljYXRpb24gcmVxdWlyZWRcIiB9LCB7IHN0YXR1czogNDAxIH0pXG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgbGVzc29uIHVzaW5nIGVuaGFuY2VkIEFJIHBpcGVsaW5lIHdpdGggY29udGV4dHVhbCBpbmZvcm1hdGlvblxuICAgIGNvbnN0IGxlc3NvbiA9IGF3YWl0IGxlc3NvbkFJU2VydmVyR2VuZXJhdG9yLmdlbmVyYXRlTGVzc29uKHtcbiAgICAgIHNvdXJjZVRleHQsXG4gICAgICBsZXNzb25UeXBlLFxuICAgICAgc3R1ZGVudExldmVsLFxuICAgICAgdGFyZ2V0TGFuZ3VhZ2UsXG4gICAgICBzb3VyY2VVcmwsXG4gICAgICBjb250ZW50TWV0YWRhdGEsXG4gICAgICBzdHJ1Y3R1cmVkQ29udGVudCxcbiAgICAgIHdvcmRDb3VudCxcbiAgICAgIHJlYWRpbmdUaW1lLFxuICAgIH0pXG5cbiAgICAvLyBTYXZlIGxlc3NvbiB0byBkYXRhYmFzZVxuICAgIGNvbnN0IHsgZGF0YTogc2F2ZWRMZXNzb24sIGVycm9yOiBzYXZlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcImxlc3NvbnNcIilcbiAgICAgIC5pbnNlcnQoe1xuICAgICAgICB0dXRvcl9pZDogdXNlci5pZCxcbiAgICAgICAgdGl0bGU6IGAke2xlc3NvblR5cGV9IExlc3NvbiAtICR7bmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKX1gLFxuICAgICAgICBsZXNzb25fdHlwZTogbGVzc29uVHlwZSxcbiAgICAgICAgc3R1ZGVudF9sZXZlbDogc3R1ZGVudExldmVsLFxuICAgICAgICB0YXJnZXRfbGFuZ3VhZ2U6IHRhcmdldExhbmd1YWdlLFxuICAgICAgICBzb3VyY2VfdXJsOiBzb3VyY2VVcmwsXG4gICAgICAgIHNvdXJjZV90ZXh0OiBzb3VyY2VUZXh0LFxuICAgICAgICBsZXNzb25fZGF0YTogbGVzc29uLFxuICAgICAgfSlcbiAgICAgIC5zZWxlY3QoKVxuICAgICAgLnNpbmdsZSgpXG5cbiAgICBpZiAoc2F2ZUVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIGxlc3NvbjpcIiwgc2F2ZUVycm9yKVxuICAgICAgLy8gUmV0dXJuIGxlc3NvbiBldmVuIGlmIHNhdmUgZmFpbHNcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGxlc3NvbiB9KVxuICAgIH1cblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBsZXNzb246IHtcbiAgICAgICAgLi4ubGVzc29uLFxuICAgICAgICBpZDogc2F2ZWRMZXNzb24uaWQsXG4gICAgICB9LFxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgbGVzc29uOlwiLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJGYWlsZWQgdG8gZ2VuZXJhdGUgbGVzc29uXCIgfSwgeyBzdGF0dXM6IDUwMCB9KVxuICB9XG59XG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwibGVzc29uQUlTZXJ2ZXJHZW5lcmF0b3IiLCJjcmVhdGVTZXJ2ZXJTdXBhYmFzZUNsaWVudCIsIlBPU1QiLCJyZXF1ZXN0IiwiYm9keSIsImpzb24iLCJzb3VyY2VUZXh0IiwibGVzc29uVHlwZSIsInN0dWRlbnRMZXZlbCIsInRhcmdldExhbmd1YWdlIiwic291cmNlVXJsIiwiY29udGVudE1ldGFkYXRhIiwic3RydWN0dXJlZENvbnRlbnQiLCJ3b3JkQ291bnQiLCJyZWFkaW5nVGltZSIsImVycm9yIiwic3RhdHVzIiwic3VwYWJhc2UiLCJkYXRhIiwidXNlciIsImF1dGhFcnJvciIsImF1dGgiLCJnZXRVc2VyIiwibGVzc29uIiwiZ2VuZXJhdGVMZXNzb24iLCJzYXZlZExlc3NvbiIsInNhdmVFcnJvciIsImZyb20iLCJpbnNlcnQiLCJ0dXRvcl9pZCIsImlkIiwidGl0bGUiLCJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwibGVzc29uX3R5cGUiLCJzdHVkZW50X2xldmVsIiwidGFyZ2V0X2xhbmd1YWdlIiwic291cmNlX3VybCIsInNvdXJjZV90ZXh0IiwibGVzc29uX2RhdGEiLCJzZWxlY3QiLCJzaW5nbGUiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-lesson/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-ai-server.ts":
/*!*********************************!*\
  !*** ./lib/google-ai-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleAIServerService: () => (/* binding */ createGoogleAIServerService)\n/* harmony export */ });\n// Server-side Google AI APIs service layer\nclass GoogleAIServerService {\n    constructor(config){\n        this.config = config;\n    }\n    async makeRequest(endpoint, data) {\n        const response = await fetch(`${this.config.baseUrl}/${endpoint}`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${this.config.apiKey}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error(`Google AI API error: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async summarize(text, options = {}) {\n        const data = {\n            input: text,\n            type: options.type || \"key-points\",\n            length: options.length || \"medium\",\n            format: options.format || \"plain-text\"\n        };\n        const result = await this.makeRequest(\"summarizer/v1/summarize\", data);\n        return result.summary;\n    }\n    async translate(text, options) {\n        const data = {\n            input: text,\n            source_language: options.sourceLanguage || \"auto\",\n            target_language: options.targetLanguage\n        };\n        const result = await this.makeRequest(\"translator/v1/translate\", data);\n        return result.translation;\n    }\n    async prompt(prompt, options = {}) {\n        const data = {\n            prompt,\n            temperature: options.temperature || 0.7,\n            max_tokens: options.maxTokens || 1000,\n            top_p: options.topP || 0.9\n        };\n        const result = await this.makeRequest(\"prompt/v1/generate\", data);\n        return result.response;\n    }\n    async write(prompt, options = {}) {\n        const data = {\n            prompt,\n            tone: options.tone || \"casual\",\n            length: options.length || \"medium\",\n            format: options.format || \"paragraph\"\n        };\n        const result = await this.makeRequest(\"writer/v1/write\", data);\n        return result.content;\n    }\n    async rewrite(text, options = {}) {\n        const data = {\n            input: text,\n            tone: options.tone || \"casual\",\n            length: options.length || \"same\",\n            audience: options.audience || \"general\"\n        };\n        const result = await this.makeRequest(\"rewriter/v1/rewrite\", data);\n        return result.rewritten_text;\n    }\n    async proofread(text, options = {}) {\n        const data = {\n            input: text,\n            check_grammar: options.checkGrammar !== false,\n            check_spelling: options.checkSpelling !== false,\n            check_style: options.checkStyle !== false,\n            suggest_improvements: options.suggestImprovements !== false\n        };\n        const result = await this.makeRequest(\"proofreader/v1/proofread\", data);\n        return {\n            corrected_text: result.corrected_text,\n            suggestions: result.suggestions,\n            errors: result.errors\n        };\n    }\n}\n// Server-side only initialization\nconst createGoogleAIServerService = ()=>{\n    const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\" // Use NEXT_PUBLIC_ for client-side access\n    ;\n    const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n    if (!apiKey) {\n        throw new Error(\"Google AI API key is required\");\n    }\n    return new GoogleAIServerService({\n        apiKey,\n        baseUrl\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZ29vZ2xlLWFpLXNlcnZlci50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDO0FBMEMzQyxNQUFNQTtJQUdKQyxZQUFZQyxNQUFzQixDQUFFO1FBQ2xDLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtJQUNoQjtJQUVBLE1BQWNDLFlBQVlDLFFBQWdCLEVBQUVDLElBQVMsRUFBRTtRQUNyRCxNQUFNQyxXQUFXLE1BQU1DLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxPQUFPLENBQUMsQ0FBQyxFQUFFSixTQUFTLENBQUMsRUFBRTtZQUNqRUssUUFBUTtZQUNSQyxTQUFTO2dCQUNQQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ1QsTUFBTSxDQUFDVSxNQUFNLENBQUMsQ0FBQztnQkFDN0MsZ0JBQWdCO1lBQ2xCO1lBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1Y7UUFDdkI7UUFFQSxJQUFJLENBQUNDLFNBQVNVLEVBQUUsRUFBRTtZQUNoQixNQUFNLElBQUlDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRVgsU0FBU1ksVUFBVSxDQUFDLENBQUM7UUFDL0Q7UUFFQSxPQUFPWixTQUFTYSxJQUFJO0lBQ3RCO0lBRUEsTUFBTUMsVUFBVUMsSUFBWSxFQUFFQyxVQUE2QixDQUFDLENBQUMsRUFBRTtRQUM3RCxNQUFNakIsT0FBTztZQUNYa0IsT0FBT0Y7WUFDUEcsTUFBTUYsUUFBUUUsSUFBSSxJQUFJO1lBQ3RCQyxRQUFRSCxRQUFRRyxNQUFNLElBQUk7WUFDMUJDLFFBQVFKLFFBQVFJLE1BQU0sSUFBSTtRQUM1QjtRQUVBLE1BQU1DLFNBQVMsTUFBTSxJQUFJLENBQUN4QixXQUFXLENBQUMsMkJBQTJCRTtRQUNqRSxPQUFPc0IsT0FBT0MsT0FBTztJQUN2QjtJQUVBLE1BQU1DLFVBQVVSLElBQVksRUFBRUMsT0FBMEIsRUFBRTtRQUN4RCxNQUFNakIsT0FBTztZQUNYa0IsT0FBT0Y7WUFDUFMsaUJBQWlCUixRQUFRUyxjQUFjLElBQUk7WUFDM0NDLGlCQUFpQlYsUUFBUVcsY0FBYztRQUN6QztRQUVBLE1BQU1OLFNBQVMsTUFBTSxJQUFJLENBQUN4QixXQUFXLENBQUMsMkJBQTJCRTtRQUNqRSxPQUFPc0IsT0FBT08sV0FBVztJQUMzQjtJQUVBLE1BQU1DLE9BQU9BLE1BQWMsRUFBRWIsVUFBeUIsQ0FBQyxDQUFDLEVBQUU7UUFDeEQsTUFBTWpCLE9BQU87WUFDWDhCO1lBQ0FDLGFBQWFkLFFBQVFjLFdBQVcsSUFBSTtZQUNwQ0MsWUFBWWYsUUFBUWdCLFNBQVMsSUFBSTtZQUNqQ0MsT0FBT2pCLFFBQVFrQixJQUFJLElBQUk7UUFDekI7UUFFQSxNQUFNYixTQUFTLE1BQU0sSUFBSSxDQUFDeEIsV0FBVyxDQUFDLHNCQUFzQkU7UUFDNUQsT0FBT3NCLE9BQU9yQixRQUFRO0lBQ3hCO0lBRUEsTUFBTW1DLE1BQU1OLE1BQWMsRUFBRWIsVUFBeUIsQ0FBQyxDQUFDLEVBQUU7UUFDdkQsTUFBTWpCLE9BQU87WUFDWDhCO1lBQ0FPLE1BQU1wQixRQUFRb0IsSUFBSSxJQUFJO1lBQ3RCakIsUUFBUUgsUUFBUUcsTUFBTSxJQUFJO1lBQzFCQyxRQUFRSixRQUFRSSxNQUFNLElBQUk7UUFDNUI7UUFFQSxNQUFNQyxTQUFTLE1BQU0sSUFBSSxDQUFDeEIsV0FBVyxDQUFDLG1CQUFtQkU7UUFDekQsT0FBT3NCLE9BQU9nQixPQUFPO0lBQ3ZCO0lBRUEsTUFBTUMsUUFBUXZCLElBQVksRUFBRUMsVUFBMkIsQ0FBQyxDQUFDLEVBQUU7UUFDekQsTUFBTWpCLE9BQU87WUFDWGtCLE9BQU9GO1lBQ1BxQixNQUFNcEIsUUFBUW9CLElBQUksSUFBSTtZQUN0QmpCLFFBQVFILFFBQVFHLE1BQU0sSUFBSTtZQUMxQm9CLFVBQVV2QixRQUFRdUIsUUFBUSxJQUFJO1FBQ2hDO1FBRUEsTUFBTWxCLFNBQVMsTUFBTSxJQUFJLENBQUN4QixXQUFXLENBQUMsdUJBQXVCRTtRQUM3RCxPQUFPc0IsT0FBT21CLGNBQWM7SUFDOUI7SUFFQSxNQUFNQyxVQUFVMUIsSUFBWSxFQUFFQyxVQUE4QixDQUFDLENBQUMsRUFBRTtRQUM5RCxNQUFNakIsT0FBTztZQUNYa0IsT0FBT0Y7WUFDUDJCLGVBQWUxQixRQUFRMkIsWUFBWSxLQUFLO1lBQ3hDQyxnQkFBZ0I1QixRQUFRNkIsYUFBYSxLQUFLO1lBQzFDQyxhQUFhOUIsUUFBUStCLFVBQVUsS0FBSztZQUNwQ0Msc0JBQXNCaEMsUUFBUWlDLG1CQUFtQixLQUFLO1FBQ3hEO1FBRUEsTUFBTTVCLFNBQVMsTUFBTSxJQUFJLENBQUN4QixXQUFXLENBQUMsNEJBQTRCRTtRQUNsRSxPQUFPO1lBQ0xtRCxnQkFBZ0I3QixPQUFPNkIsY0FBYztZQUNyQ0MsYUFBYTlCLE9BQU84QixXQUFXO1lBQy9CQyxRQUFRL0IsT0FBTytCLE1BQU07UUFDdkI7SUFDRjtBQUNGO0FBRUEsa0NBQWtDO0FBQzNCLE1BQU1DLDhCQUE4QjtJQUN6QyxNQUFNL0MsU0FBU2dELHlDQUF5QyxDQUFDLDBDQUEwQzs7SUFDbkcsTUFBTXBELFVBQVVvRCwyQ0FBMEMsSUFBSSxDQUEyQztJQUV6RyxJQUFJLENBQUNoRCxRQUFRO1FBQ1gsTUFBTSxJQUFJSyxNQUFNO0lBQ2xCO0lBRUEsT0FBTyxJQUFJakIsc0JBQXNCO1FBQUVZO1FBQVFKO0lBQVE7QUFDckQsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9saWIvZ29vZ2xlLWFpLXNlcnZlci50cz81MmQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNlcnZlci1zaWRlIEdvb2dsZSBBSSBBUElzIHNlcnZpY2UgbGF5ZXJcbmludGVyZmFjZSBHb29nbGVBSUNvbmZpZyB7XG4gIGFwaUtleTogc3RyaW5nXG4gIGJhc2VVcmw6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgU3VtbWFyaXplck9wdGlvbnMge1xuICB0eXBlPzogXCJrZXktcG9pbnRzXCIgfCBcInRsLWRyXCIgfCBcInRlYXNlclwiIHwgXCJoZWFkbGluZVwiXG4gIGxlbmd0aD86IFwic2hvcnRcIiB8IFwibWVkaXVtXCIgfCBcImxvbmdcIlxuICBmb3JtYXQ/OiBcIm1hcmtkb3duXCIgfCBcInBsYWluLXRleHRcIlxufVxuXG5pbnRlcmZhY2UgVHJhbnNsYXRvck9wdGlvbnMge1xuICBzb3VyY2VMYW5ndWFnZT86IHN0cmluZ1xuICB0YXJnZXRMYW5ndWFnZTogc3RyaW5nXG59XG5cbmludGVyZmFjZSBQcm9tcHRPcHRpb25zIHtcbiAgdGVtcGVyYXR1cmU/OiBudW1iZXJcbiAgbWF4VG9rZW5zPzogbnVtYmVyXG4gIHRvcFA/OiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIFdyaXRlck9wdGlvbnMge1xuICB0b25lPzogXCJmb3JtYWxcIiB8IFwiY2FzdWFsXCIgfCBcImFjYWRlbWljXCIgfCBcImNyZWF0aXZlXCJcbiAgbGVuZ3RoPzogXCJzaG9ydFwiIHwgXCJtZWRpdW1cIiB8IFwibG9uZ1wiXG4gIGZvcm1hdD86IFwicGFyYWdyYXBoXCIgfCBcImJ1bGxldC1wb2ludHNcIiB8IFwibnVtYmVyZWQtbGlzdFwiXG59XG5cbmludGVyZmFjZSBSZXdyaXRlck9wdGlvbnMge1xuICB0b25lPzogXCJmb3JtYWxcIiB8IFwiY2FzdWFsXCIgfCBcImFjYWRlbWljXCIgfCBcImNyZWF0aXZlXCJcbiAgbGVuZ3RoPzogXCJzaG9ydGVyXCIgfCBcImxvbmdlclwiIHwgXCJzYW1lXCJcbiAgYXVkaWVuY2U/OiBcImdlbmVyYWxcIiB8IFwiZXhwZXJ0XCIgfCBcImJlZ2lubmVyXCJcbn1cblxuaW50ZXJmYWNlIFByb29mcmVhZGVyT3B0aW9ucyB7XG4gIGNoZWNrR3JhbW1hcj86IGJvb2xlYW5cbiAgY2hlY2tTcGVsbGluZz86IGJvb2xlYW5cbiAgY2hlY2tTdHlsZT86IGJvb2xlYW5cbiAgc3VnZ2VzdEltcHJvdmVtZW50cz86IGJvb2xlYW5cbn1cblxuY2xhc3MgR29vZ2xlQUlTZXJ2ZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjb25maWc6IEdvb2dsZUFJQ29uZmlnXG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBHb29nbGVBSUNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIG1ha2VSZXF1ZXN0KGVuZHBvaW50OiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5jb25maWcuYmFzZVVybH0vJHtlbmRwb2ludH1gLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5jb25maWcuYXBpS2V5fWAsXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH0pXG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvb2dsZSBBSSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfVxuXG4gIGFzeW5jIHN1bW1hcml6ZSh0ZXh0OiBzdHJpbmcsIG9wdGlvbnM6IFN1bW1hcml6ZXJPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgaW5wdXQ6IHRleHQsXG4gICAgICB0eXBlOiBvcHRpb25zLnR5cGUgfHwgXCJrZXktcG9pbnRzXCIsXG4gICAgICBsZW5ndGg6IG9wdGlvbnMubGVuZ3RoIHx8IFwibWVkaXVtXCIsXG4gICAgICBmb3JtYXQ6IG9wdGlvbnMuZm9ybWF0IHx8IFwicGxhaW4tdGV4dFwiLFxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoXCJzdW1tYXJpemVyL3YxL3N1bW1hcml6ZVwiLCBkYXRhKVxuICAgIHJldHVybiByZXN1bHQuc3VtbWFyeVxuICB9XG5cbiAgYXN5bmMgdHJhbnNsYXRlKHRleHQ6IHN0cmluZywgb3B0aW9uczogVHJhbnNsYXRvck9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgaW5wdXQ6IHRleHQsXG4gICAgICBzb3VyY2VfbGFuZ3VhZ2U6IG9wdGlvbnMuc291cmNlTGFuZ3VhZ2UgfHwgXCJhdXRvXCIsXG4gICAgICB0YXJnZXRfbGFuZ3VhZ2U6IG9wdGlvbnMudGFyZ2V0TGFuZ3VhZ2UsXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChcInRyYW5zbGF0b3IvdjEvdHJhbnNsYXRlXCIsIGRhdGEpXG4gICAgcmV0dXJuIHJlc3VsdC50cmFuc2xhdGlvblxuICB9XG5cbiAgYXN5bmMgcHJvbXB0KHByb21wdDogc3RyaW5nLCBvcHRpb25zOiBQcm9tcHRPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgcHJvbXB0LFxuICAgICAgdGVtcGVyYXR1cmU6IG9wdGlvbnMudGVtcGVyYXR1cmUgfHwgMC43LFxuICAgICAgbWF4X3Rva2Vuczogb3B0aW9ucy5tYXhUb2tlbnMgfHwgMTAwMCxcbiAgICAgIHRvcF9wOiBvcHRpb25zLnRvcFAgfHwgMC45LFxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoXCJwcm9tcHQvdjEvZ2VuZXJhdGVcIiwgZGF0YSlcbiAgICByZXR1cm4gcmVzdWx0LnJlc3BvbnNlXG4gIH1cblxuICBhc3luYyB3cml0ZShwcm9tcHQ6IHN0cmluZywgb3B0aW9uczogV3JpdGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHByb21wdCxcbiAgICAgIHRvbmU6IG9wdGlvbnMudG9uZSB8fCBcImNhc3VhbFwiLFxuICAgICAgbGVuZ3RoOiBvcHRpb25zLmxlbmd0aCB8fCBcIm1lZGl1bVwiLFxuICAgICAgZm9ybWF0OiBvcHRpb25zLmZvcm1hdCB8fCBcInBhcmFncmFwaFwiLFxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoXCJ3cml0ZXIvdjEvd3JpdGVcIiwgZGF0YSlcbiAgICByZXR1cm4gcmVzdWx0LmNvbnRlbnRcbiAgfVxuXG4gIGFzeW5jIHJld3JpdGUodGV4dDogc3RyaW5nLCBvcHRpb25zOiBSZXdyaXRlck9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBpbnB1dDogdGV4dCxcbiAgICAgIHRvbmU6IG9wdGlvbnMudG9uZSB8fCBcImNhc3VhbFwiLFxuICAgICAgbGVuZ3RoOiBvcHRpb25zLmxlbmd0aCB8fCBcInNhbWVcIixcbiAgICAgIGF1ZGllbmNlOiBvcHRpb25zLmF1ZGllbmNlIHx8IFwiZ2VuZXJhbFwiLFxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoXCJyZXdyaXRlci92MS9yZXdyaXRlXCIsIGRhdGEpXG4gICAgcmV0dXJuIHJlc3VsdC5yZXdyaXR0ZW5fdGV4dFxuICB9XG5cbiAgYXN5bmMgcHJvb2ZyZWFkKHRleHQ6IHN0cmluZywgb3B0aW9uczogUHJvb2ZyZWFkZXJPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgaW5wdXQ6IHRleHQsXG4gICAgICBjaGVja19ncmFtbWFyOiBvcHRpb25zLmNoZWNrR3JhbW1hciAhPT0gZmFsc2UsXG4gICAgICBjaGVja19zcGVsbGluZzogb3B0aW9ucy5jaGVja1NwZWxsaW5nICE9PSBmYWxzZSxcbiAgICAgIGNoZWNrX3N0eWxlOiBvcHRpb25zLmNoZWNrU3R5bGUgIT09IGZhbHNlLFxuICAgICAgc3VnZ2VzdF9pbXByb3ZlbWVudHM6IG9wdGlvbnMuc3VnZ2VzdEltcHJvdmVtZW50cyAhPT0gZmFsc2UsXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChcInByb29mcmVhZGVyL3YxL3Byb29mcmVhZFwiLCBkYXRhKVxuICAgIHJldHVybiB7XG4gICAgICBjb3JyZWN0ZWRfdGV4dDogcmVzdWx0LmNvcnJlY3RlZF90ZXh0LFxuICAgICAgc3VnZ2VzdGlvbnM6IHJlc3VsdC5zdWdnZXN0aW9ucyxcbiAgICAgIGVycm9yczogcmVzdWx0LmVycm9ycyxcbiAgICB9XG4gIH1cbn1cblxuLy8gU2VydmVyLXNpZGUgb25seSBpbml0aWFsaXphdGlvblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUdvb2dsZUFJU2VydmVyU2VydmljZSA9ICgpID0+IHtcbiAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR09PR0xFX0FJX0FQSV9LRVkgLy8gVXNlIE5FWFRfUFVCTElDXyBmb3IgY2xpZW50LXNpZGUgYWNjZXNzXG4gIGNvbnN0IGJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19HT09HTEVfQUlfQkFTRV9VUkwgfHwgXCJodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbVwiXG5cbiAgaWYgKCFhcGlLZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJHb29nbGUgQUkgQVBJIGtleSBpcyByZXF1aXJlZFwiKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBHb29nbGVBSVNlcnZlclNlcnZpY2UoeyBhcGlLZXksIGJhc2VVcmwgfSlcbn1cblxuZXhwb3J0IHR5cGUgeyBTdW1tYXJpemVyT3B0aW9ucywgVHJhbnNsYXRvck9wdGlvbnMsIFByb21wdE9wdGlvbnMsIFdyaXRlck9wdGlvbnMsIFJld3JpdGVyT3B0aW9ucywgUHJvb2ZyZWFkZXJPcHRpb25zIH1cbiJdLCJuYW1lcyI6WyJHb29nbGVBSVNlcnZlclNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIm1ha2VSZXF1ZXN0IiwiZW5kcG9pbnQiLCJkYXRhIiwicmVzcG9uc2UiLCJmZXRjaCIsImJhc2VVcmwiLCJtZXRob2QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImFwaUtleSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJqc29uIiwic3VtbWFyaXplIiwidGV4dCIsIm9wdGlvbnMiLCJpbnB1dCIsInR5cGUiLCJsZW5ndGgiLCJmb3JtYXQiLCJyZXN1bHQiLCJzdW1tYXJ5IiwidHJhbnNsYXRlIiwic291cmNlX2xhbmd1YWdlIiwic291cmNlTGFuZ3VhZ2UiLCJ0YXJnZXRfbGFuZ3VhZ2UiLCJ0YXJnZXRMYW5ndWFnZSIsInRyYW5zbGF0aW9uIiwicHJvbXB0IiwidGVtcGVyYXR1cmUiLCJtYXhfdG9rZW5zIiwibWF4VG9rZW5zIiwidG9wX3AiLCJ0b3BQIiwid3JpdGUiLCJ0b25lIiwiY29udGVudCIsInJld3JpdGUiLCJhdWRpZW5jZSIsInJld3JpdHRlbl90ZXh0IiwicHJvb2ZyZWFkIiwiY2hlY2tfZ3JhbW1hciIsImNoZWNrR3JhbW1hciIsImNoZWNrX3NwZWxsaW5nIiwiY2hlY2tTcGVsbGluZyIsImNoZWNrX3N0eWxlIiwiY2hlY2tTdHlsZSIsInN1Z2dlc3RfaW1wcm92ZW1lbnRzIiwic3VnZ2VzdEltcHJvdmVtZW50cyIsImNvcnJlY3RlZF90ZXh0Iiwic3VnZ2VzdGlvbnMiLCJlcnJvcnMiLCJjcmVhdGVHb29nbGVBSVNlcnZlclNlcnZpY2UiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfR09PR0xFX0FJX0FQSV9LRVkiLCJORVhUX1BVQkxJQ19HT09HTEVfQUlfQkFTRV9VUkwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-ai-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/lesson-ai-generator-server.ts":
/*!*******************************************!*\
  !*** ./lib/lesson-ai-generator-server.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonAIServerGenerator: () => (/* binding */ LessonAIServerGenerator),\n/* harmony export */   lessonAIServerGenerator: () => (/* binding */ lessonAIServerGenerator)\n/* harmony export */ });\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n\nclass LessonAIServerGenerator {\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_0__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    async generateLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = params;\n        try {\n            // Step 1: Analyze content context and complexity\n            const contentAnalysis = await this.analyzeContentContext(sourceText, contentMetadata, structuredContent, studentLevel);\n            // Step 2: Create contextual summary based on lesson type and content analysis\n            const contextualSummary = await this.createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel);\n            // Step 3: Translate if needed (for non-English target languages)\n            let translatedContent = contextualSummary;\n            if (targetLanguage !== \"english\") {\n                translatedContent = await this.getGoogleAI().translate(contextualSummary, {\n                    targetLanguage: this.getLanguageCode(targetLanguage)\n                });\n            }\n            // Step 4: Generate contextual lesson structure\n            const lessonStructure = await this.generateContextualLessonStructure(translatedContent, contentAnalysis, lessonType, studentLevel, targetLanguage, contentMetadata);\n            // Step 5: Generate detailed content for each section with context\n            const detailedLesson = await this.generateDetailedContextualContent(lessonStructure, translatedContent, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent);\n            // Step 6: Proofread and polish the final lesson\n            const polishedLesson = await this.proofreadLesson(detailedLesson);\n            return polishedLesson;\n        } catch (error) {\n            console.error(\"Error in AI lesson generation:\", error);\n            // Fallback to enhanced template-based generation with context\n            return this.generateEnhancedFallbackLesson(params);\n        }\n    }\n    // New method: Analyze content context and complexity\n    async analyzeContentContext(sourceText, metadata, structuredContent, studentLevel) {\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\"\n        };\n        // Analyze content complexity based on text characteristics\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        // Extract key topics using AI\n        try {\n            const topicsPrompt = `Analyze this content and identify 3-5 main topics or themes. Content: \"${sourceText.substring(0, 1000)}\"`;\n            const topicsResponse = await this.getGoogleAI().prompt(topicsPrompt, {\n                temperature: 0.3,\n                maxTokens: 200\n            });\n            analysis.topics = this.parseListFromText(topicsResponse).slice(0, 5);\n        } catch (error) {\n            // Fallback topic extraction\n            analysis.topics = this.extractTopicsFromHeadings(structuredContent?.headings || []);\n        }\n        // Extract key vocabulary for the target level\n        try {\n            const vocabPrompt = `Extract 8-10 key vocabulary words from this content that would be appropriate for ${studentLevel} level language learners. Focus on useful, practical words. Content: \"${sourceText.substring(0, 800)}\"`;\n            const vocabResponse = await this.getGoogleAI().prompt(vocabPrompt, {\n                temperature: 0.2,\n                maxTokens: 300\n            });\n            analysis.keyVocabulary = this.parseListFromText(vocabResponse).slice(0, 10);\n        } catch (error) {\n            // Fallback vocabulary extraction\n            analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        }\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n        }\n        // Generate learning objectives based on content type and lesson type\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        return analysis;\n    }\n    // Enhanced contextual summary creation\n    async createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel) {\n        const summaryPrompt = `\nCreate a focused summary of this content for a ${lessonType} lesson at ${studentLevel} level.\nContent type: ${contentAnalysis.contentType}\nMain topics: ${contentAnalysis.topics.join(\", \")}\nComplexity: ${contentAnalysis.complexity}\n\nFocus on aspects most relevant for ${lessonType} learning objectives.\nKeep the summary appropriate for ${studentLevel} CEFR level students.\n\nContent: \"${sourceText}\"\n\nSummary:\n`;\n        try {\n            return await this.getGoogleAI().prompt(summaryPrompt, {\n                temperature: 0.4,\n                maxTokens: 500\n            });\n        } catch (error) {\n            // Fallback to basic summarization\n            return await this.getGoogleAI().summarize(sourceText, {\n                type: \"key-points\",\n                length: this.getSummaryLength(studentLevel),\n                format: \"plain-text\"\n            });\n        }\n    }\n    // Enhanced contextual lesson structure generation\n    async generateContextualLessonStructure(content, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        const prompt = `\nCreate a highly contextual ${lessonType} lesson for ${studentLevel} level students learning ${targetLanguage}.\n\nCONTENT CONTEXT:\n- Content Type: ${contentAnalysis.contentType}\n- Source: ${metadata?.domain || \"web content\"}\n- Main Topics: ${contentAnalysis.topics.join(\", \")}\n- Complexity Level: ${contentAnalysis.complexity}\n- Key Vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\n- Cultural Context: ${contentAnalysis.culturalContext}\n\nLESSON CONTENT: \"${content}\"\n\nCreate a JSON structure with these sections, making each section highly relevant to the source content:\n\n- warmup: 3 engaging warm-up questions that directly relate to the content topics and activate prior knowledge\n- vocabulary: 6-8 key vocabulary words from the actual content with contextual meanings and authentic examples\n- reading: A level-appropriate adaptation of the original content that maintains its essence and context\n- comprehension: 4-5 reading comprehension questions that test understanding of the specific content\n- discussion: 3-4 discussion questions that encourage conversation about the actual topics covered\n- grammar: Grammar focus derived from patterns in the source content, with examples from the text\n- pronunciation: One challenging word from the actual content with IPA and contextual practice\n- wrapup: 3 reflection questions that connect the lesson to real-world applications of the content\n\nIMPORTANT: \n- All content must be directly related to and derived from the source material\n- Vocabulary should come from the actual text, not generic word lists\n- Examples should reference the specific content, not generic scenarios\n- Questions should be about the actual topics discussed, not general themes\n- Maintain the cultural and contextual authenticity of the source\n\nReturn only valid JSON.\n`;\n        const response = await this.getGoogleAI().prompt(prompt, {\n            temperature: 0.7,\n            maxTokens: 2000\n        });\n        try {\n            return JSON.parse(response);\n        } catch  {\n            // If JSON parsing fails, return a structured fallback\n            return this.createStructuredFallback(content, lessonType, studentLevel);\n        }\n    }\n    // Enhanced detailed content generation with context\n    async generateDetailedContextualContent(structure, content, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent) {\n        // Use Writer API to expand each section with contextual, detailed content\n        const sections = {\n            ...structure\n        };\n        // Enhance vocabulary section with contextual examples\n        if (sections.vocabulary) {\n            for(let i = 0; i < sections.vocabulary.length; i++){\n                const vocab = sections.vocabulary[i];\n                try {\n                    const contextualExamplePrompt = `\nCreate a natural example sentence using the word \"${vocab.word}\" that relates to this content context:\nTopics: ${contentAnalysis.topics.join(\", \")}\nContent type: ${contentAnalysis.contentType}\nLevel: ${studentLevel}\n\nMake the example relevant to the source material and appropriate for ${studentLevel} level students.\n`;\n                    const enhancedExample = await this.getGoogleAI().write(contextualExamplePrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].example = enhancedExample;\n                    // Add contextual meaning based on source content\n                    const contextualMeaningPrompt = `\nExplain the meaning of \"${vocab.word}\" in the context of: ${contentAnalysis.topics[0] || contentAnalysis.contentType}\nKeep it simple for ${studentLevel} level students.\n`;\n                    const contextualMeaning = await this.getGoogleAI().write(contextualMeaningPrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].contextualMeaning = contextualMeaning;\n                } catch (error) {\n                    // Keep original if enhancement fails\n                    console.warn(`Failed to enhance vocabulary for ${vocab.word}:`, error);\n                }\n            }\n        }\n        // Enhance discussion questions with specific content references\n        if (sections.discussion) {\n            try {\n                const enhancedDiscussionPrompt = `\nEnhance these discussion questions for a ${lessonType} lesson about ${contentAnalysis.topics.join(\" and \")}:\n${sections.discussion.join(\"\\n\")}\n\nMake them more specific to the content, engaging for ${studentLevel} level students, and encourage deeper thinking about:\n- ${contentAnalysis.topics.slice(0, 3).join(\"\\n- \")}\n\nReturn 3-4 enhanced questions that reference specific aspects of the content.\n`;\n                const enhancedDiscussion = await this.getGoogleAI().write(enhancedDiscussionPrompt, {\n                    tone: \"casual\",\n                    length: \"medium\",\n                    format: \"bullet-points\"\n                });\n                sections.discussion = this.parseListFromText(enhancedDiscussion).slice(0, 4);\n            } catch (error) {\n                console.warn(\"Failed to enhance discussion questions:\", error);\n            }\n        }\n        // Enhance reading section with better structure\n        if (sections.reading && structuredContent?.headings?.length > 0) {\n            try {\n                const structuredReadingPrompt = `\nImprove this reading text by organizing it with clear structure based on these headings from the original:\n${structuredContent.headings.slice(0, 3).map((h)=>`- ${h.text}`).join(\"\\n\")}\n\nOriginal text: \"${sections.reading}\"\n\nCreate a well-structured, ${studentLevel}-appropriate reading passage that maintains the key information but improves readability.\n`;\n                const enhancedReading = await this.getGoogleAI().rewrite(sections.reading, {\n                    tone: \"casual\",\n                    length: \"same\",\n                    audience: this.getAudienceLevel(studentLevel)\n                });\n                sections.reading = enhancedReading;\n            } catch (error) {\n                console.warn(\"Failed to enhance reading section:\", error);\n            }\n        }\n        // Enhance grammar section with content-specific examples\n        if (sections.grammar && sections.grammar.focus) {\n            try {\n                const grammarExamplesPrompt = `\nCreate 3 grammar examples for \"${sections.grammar.focus}\" using vocabulary and concepts from this content:\nTopics: ${contentAnalysis.topics.join(\", \")}\nKey vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\n\nMake examples relevant to the content and appropriate for ${studentLevel} level.\n`;\n                const contextualGrammarExamples = await this.getGoogleAI().write(grammarExamplesPrompt, {\n                    tone: \"casual\",\n                    length: \"short\",\n                    format: \"bullet-points\"\n                });\n                sections.grammar.contextualExamples = this.parseListFromText(contextualGrammarExamples);\n            } catch (error) {\n                console.warn(\"Failed to enhance grammar examples:\", error);\n            }\n        }\n        return sections;\n    }\n    async proofreadLesson(lesson) {\n        // Proofread key text sections\n        const sectionsToProofread = [\n            \"reading\",\n            \"grammar.examples\",\n            \"pronunciation.practice\"\n        ];\n        for (const sectionPath of sectionsToProofread){\n            const value = this.getNestedValue(lesson, sectionPath);\n            if (typeof value === \"string\") {\n                const proofread = await this.getGoogleAI().proofread(value, {\n                    checkGrammar: true,\n                    checkSpelling: true,\n                    checkStyle: true\n                });\n                this.setNestedValue(lesson, sectionPath, proofread.corrected_text);\n            }\n        }\n        return lesson;\n    }\n    generateFallbackLesson(params) {\n        // Template-based fallback when AI APIs fail\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getTemplateWarmup(lessonType, studentLevel),\n                vocabulary: this.extractVocabulary(sourceText, studentLevel),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n                discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getTemplateWrapup(lessonType)\n            }\n        };\n    }\n    // Helper methods\n    getSummaryLength(level) {\n        const lengthMap = {\n            A1: \"short\",\n            A2: \"short\",\n            B1: \"medium\",\n            B2: \"medium\",\n            C1: \"long\"\n        };\n        return lengthMap[level] || \"medium\";\n    }\n    getLanguageCode(language) {\n        const languageMap = {\n            spanish: \"es\",\n            french: \"fr\",\n            german: \"de\",\n            italian: \"it\",\n            portuguese: \"pt\",\n            japanese: \"ja\",\n            korean: \"ko\",\n            chinese: \"zh\"\n        };\n        return languageMap[language] || \"en\";\n    }\n    parseListFromText(text) {\n        return text.split(\"\\n\").filter((line)=>line.trim()).map((line)=>line.replace(/^[-•*]\\s*/, \"\").trim()).filter((line)=>line.length > 0).slice(0, 4) // Limit to 4 items\n        ;\n    }\n    getNestedValue(obj, path) {\n        return path.split(\".\").reduce((current, key)=>current?.[key], obj);\n    }\n    setNestedValue(obj, path, value) {\n        const keys = path.split(\".\");\n        const lastKey = keys.pop();\n        const target = keys.reduce((current, key)=>current[key], obj);\n        target[lastKey] = value;\n    }\n    createStructuredFallback(content, lessonType, studentLevel) {\n        return {\n            warmup: this.getTemplateWarmup(lessonType, studentLevel),\n            vocabulary: this.extractVocabulary(content, studentLevel),\n            reading: content.substring(0, 500),\n            comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n            discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n            grammar: this.getTemplateGrammar(studentLevel),\n            pronunciation: this.getTemplatePronunciation(content),\n            wrapup: this.getTemplateWrapup(lessonType)\n        };\n    }\n    getTemplateWarmup(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What do you already know about this topic?\",\n                \"Have you had similar experiences?\",\n                \"What would you like to learn more about?\"\n            ],\n            grammar: [\n                \"What grammar patterns do you notice?\",\n                \"Which sentences seem most complex?\",\n                \"What grammar rules do you remember?\"\n            ],\n            travel: [\n                \"Where would you like to travel next?\",\n                \"What travel experiences have you had?\",\n                \"What travel vocabulary do you know?\"\n            ],\n            business: [\n                \"What business situations are you familiar with?\",\n                \"How do you communicate professionally?\",\n                \"What business terms are challenging?\"\n            ],\n            pronunciation: [\n                \"Which sounds are difficult to pronounce?\",\n                \"How do you practice pronunciation?\",\n                \"What pronunciation goals do you have?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    extractVocabulary(text, studentLevel) {\n        // Simple vocabulary extraction based on word frequency and complexity\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = [\n            ...new Set(words)\n        ];\n        const selectedWords = uniqueWords.slice(0, 6);\n        return selectedWords.map((word)=>({\n                word: word,\n                meaning: `Definition of ${word}`,\n                example: `Example sentence with ${word}.`\n            }));\n    }\n    simplifyText(text, studentLevel) {\n        // Basic text simplification based on level\n        const maxLength = {\n            A1: 200,\n            A2: 300,\n            B1: 400,\n            B2: 500,\n            C1: 600\n        };\n        const limit = maxLength[studentLevel] || 400;\n        return text.substring(0, limit) + (text.length > limit ? \"...\" : \"\");\n    }\n    getTemplateComprehension(lessonType, studentLevel) {\n        return [\n            \"What is the main idea of this text?\",\n            \"What supporting details can you identify?\",\n            \"How does this relate to your experience?\",\n            \"What conclusions can you draw?\"\n        ];\n    }\n    getTemplateDiscussion(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What is your opinion on this topic?\",\n                \"How would you handle this situation?\",\n                \"What alternative approaches exist?\"\n            ],\n            business: [\n                \"How would you apply this professionally?\",\n                \"What business challenges does this address?\",\n                \"How would you present this to colleagues?\"\n            ],\n            travel: [\n                \"How would this help while traveling?\",\n                \"What preparations would you make?\",\n                \"How would you share this experience?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    getTemplateGrammar(studentLevel) {\n        const grammarFoci = {\n            A1: \"Present Simple Tense\",\n            A2: \"Past Simple Tense\",\n            B1: \"Present Perfect Tense\",\n            B2: \"Conditional Sentences\",\n            C1: \"Advanced Grammar Structures\"\n        };\n        return {\n            focus: grammarFoci[studentLevel] || \"Present Perfect Tense\",\n            examples: [\n                \"I have learned many new things.\",\n                \"She has improved her skills.\",\n                \"We have discussed this topic.\"\n            ],\n            exercise: [\n                \"I _____ (learn) a lot today.\",\n                \"They _____ (complete) the project.\",\n                \"She _____ (improve) significantly.\"\n            ]\n        };\n    }\n    getTemplatePronunciation(text) {\n        // Extract a challenging word from the text\n        const words = text.match(/\\b[a-z]{6,}\\b/gi) || [\n            \"communication\"\n        ];\n        const selectedWord = words[0] || \"communication\";\n        return {\n            word: selectedWord.toLowerCase(),\n            ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n            practice: `Practice saying: \"${selectedWord}\" in a sentence.`\n        };\n    }\n    getTemplateWrapup(lessonType) {\n        return [\n            \"What new vocabulary did you learn?\",\n            \"Which concepts need more practice?\",\n            \"How will you use this knowledge?\",\n            \"What questions do you still have?\"\n        ];\n    }\n    // New helper methods for enhanced contextual analysis\n    extractTopicsFromHeadings(headings) {\n        return headings.filter((h)=>h.level <= 3) // Focus on main headings\n        .map((h)=>h.text).slice(0, 5);\n    }\n    extractVocabularyFromText(text, level) {\n        // Extract words based on complexity appropriate for the level\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = [\n            ...new Set(words)\n        ];\n        // Filter by complexity based on level\n        const complexityThreshold = {\n            \"A1\": 6,\n            \"A2\": 7,\n            \"B1\": 8,\n            \"B2\": 10,\n            \"C1\": 12\n        };\n        const maxLength = complexityThreshold[level] || 8;\n        return uniqueWords.filter((word)=>word.length <= maxLength && word.length >= 4).slice(0, 8);\n    }\n    determineCulturalContext(domain, text) {\n        // Determine cultural context based on domain and content\n        const culturalIndicators = {\n            \"bbc.com\": \"British English, UK culture\",\n            \"cnn.com\": \"American English, US culture\",\n            \"wikipedia.org\": \"International, encyclopedic\",\n            \"nytimes.com\": \"American English, US perspective\",\n            \"theguardian.com\": \"British English, UK perspective\"\n        };\n        if (culturalIndicators[domain]) {\n            return culturalIndicators[domain];\n        }\n        // Analyze text for cultural markers\n        const americanMarkers = [\n            \"dollar\",\n            \"president\",\n            \"congress\",\n            \"state\",\n            \"federal\"\n        ];\n        const britishMarkers = [\n            \"pound\",\n            \"minister\",\n            \"parliament\",\n            \"council\",\n            \"government\"\n        ];\n        const americanCount = americanMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        const britishCount = britishMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        if (americanCount > britishCount) {\n            return \"American English context\";\n        } else if (britishCount > americanCount) {\n            return \"British English context\";\n        }\n        return \"International context\";\n    }\n    generateLearningObjectives(contentType, topics, level) {\n        const objectives = [];\n        // Base objectives on content type\n        switch(contentType){\n            case \"news\":\n                objectives.push(\"Understand current events vocabulary\");\n                objectives.push(\"Practice reading news articles\");\n                break;\n            case \"blog\":\n                objectives.push(\"Learn informal writing style\");\n                objectives.push(\"Understand personal opinions and experiences\");\n                break;\n            case \"tutorial\":\n                objectives.push(\"Follow step-by-step instructions\");\n                objectives.push(\"Learn technical vocabulary\");\n                break;\n            case \"encyclopedia\":\n                objectives.push(\"Understand factual information\");\n                objectives.push(\"Learn academic vocabulary\");\n                break;\n            default:\n                objectives.push(\"Improve reading comprehension\");\n                objectives.push(\"Expand vocabulary knowledge\");\n        }\n        // Add topic-specific objectives\n        topics.slice(0, 2).forEach((topic)=>{\n            objectives.push(`Discuss topics related to ${topic.toLowerCase()}`);\n        });\n        return objectives.slice(0, 4);\n    }\n    getAudienceLevel(cefrLevel) {\n        const levelMap = {\n            \"A1\": \"beginner\",\n            \"A2\": \"beginner\",\n            \"B1\": \"general\",\n            \"B2\": \"general\",\n            \"C1\": \"expert\"\n        };\n        return levelMap[cefrLevel] || \"general\";\n    }\n    // Enhanced fallback lesson generation with context\n    generateEnhancedFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, contentMetadata, structuredContent } = params;\n        // Use available context even in fallback\n        const topics = structuredContent?.headings?.map((h)=>h.text).slice(0, 3) || [];\n        const contentType = contentMetadata?.contentType || \"general\";\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getContextualWarmup(lessonType, studentLevel, topics, contentType),\n                vocabulary: this.extractContextualVocabulary(sourceText, studentLevel, topics),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getContextualComprehension(lessonType, studentLevel, topics),\n                discussion: this.getContextualDiscussion(lessonType, studentLevel, topics),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getContextualWrapup(lessonType, topics)\n            }\n        };\n    }\n    getContextualWarmup(lessonType, studentLevel, topics, contentType) {\n        const baseQuestions = this.getTemplateWarmup(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What do you know about ${topics[0]?.toLowerCase()}?`,\n                `Have you experienced anything related to ${topics[1]?.toLowerCase() || topics[0]?.toLowerCase()}?`,\n                `What would you like to learn about this ${contentType} content?`\n            ];\n        }\n        return baseQuestions;\n    }\n    extractContextualVocabulary(text, studentLevel, topics) {\n        const vocabulary = this.extractVocabulary(text, studentLevel);\n        // Enhance with topic context if available\n        if (topics.length > 0) {\n            return vocabulary.map((vocab, index)=>({\n                    ...vocab,\n                    context: index < topics.length ? `Related to ${topics[index].toLowerCase()}` : vocab.meaning\n                }));\n        }\n        return vocabulary;\n    }\n    getContextualComprehension(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateComprehension(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is the main point about ${topics[0]?.toLowerCase()}?`,\n                `How does the text explain ${topics[1]?.toLowerCase() || \"the topic\"}?`,\n                \"What supporting details can you identify?\",\n                \"What conclusions can you draw from this information?\"\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualDiscussion(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateDiscussion(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is your opinion about ${topics[0]?.toLowerCase()}?`,\n                `How would you apply this information about ${topics[1]?.toLowerCase() || \"this topic\"}?`,\n                `What are the implications of what you learned about ${topics[0]?.toLowerCase()}?`\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualWrapup(lessonType, topics) {\n        if (topics.length > 0) {\n            return [\n                `What new vocabulary did you learn about ${topics[0]?.toLowerCase()}?`,\n                `Which concepts about ${topics[1]?.toLowerCase() || \"this topic\"} need more practice?`,\n                \"How will you use this knowledge in real situations?\",\n                \"What questions do you still have about this content?\"\n            ];\n        }\n        return this.getTemplateWrapup(lessonType);\n    }\n    constructor(){\n        this.googleAI = null;\n    }\n}\nconst lessonAIServerGenerator = new LessonAIServerGenerator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/lesson-ai-generator-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase-server.ts":
/*!********************************!*\
  !*** ./lib/supabase-server.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerSupabaseClient: () => (/* binding */ createServerSupabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\nconst createServerSupabaseClient = ()=>{\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://jbkpnirowdvlwlgheqho.supabase.co\" || 0, \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impia3BuaXJvd2R2bHdsZ2hlcWhvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MTQ3NTEsImV4cCI6MjA3NDQ5MDc1MX0.FZhruXKDzIkZLhla5oerfs7yzjvTsGLlKTUer34N6N0\" || 0, {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            },\n            set (name, value, options) {\n                cookieStore.set({\n                    name,\n                    value,\n                    ...options\n                });\n            },\n            remove (name, options) {\n                cookieStore.set({\n                    name,\n                    value: \"\",\n                    ...options\n                });\n            }\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUNaO0FBRS9CLE1BQU1FLDZCQUE2QjtJQUN4QyxNQUFNQyxjQUFjRixxREFBT0E7SUFFM0IsT0FBT0QsaUVBQWtCQSxDQUN2QkksMENBQW9DLElBQUksR0FDeENBLGtOQUF5QyxJQUFJLEdBQzdDO1FBQ0FILFNBQVM7WUFDUE8sS0FBSUMsSUFBWTtnQkFDZCxPQUFPTixZQUFZSyxHQUFHLENBQUNDLE9BQU9DO1lBQ2hDO1lBQ0FDLEtBQUlGLElBQVksRUFBRUMsS0FBYSxFQUFFRSxPQUFZO2dCQUMzQ1QsWUFBWVEsR0FBRyxDQUFDO29CQUFFRjtvQkFBTUM7b0JBQU8sR0FBR0UsT0FBTztnQkFBQztZQUM1QztZQUNBQyxRQUFPSixJQUFZLEVBQUVHLE9BQVk7Z0JBQy9CVCxZQUFZUSxHQUFHLENBQUM7b0JBQUVGO29CQUFNQyxPQUFPO29CQUFJLEdBQUdFLE9BQU87Z0JBQUM7WUFDaEQ7UUFDRjtJQUNGO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzPzA5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VydmVyQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zc3JcIlxuaW1wb3J0IHsgY29va2llcyB9IGZyb20gXCJuZXh0L2hlYWRlcnNcIlxuXG5leHBvcnQgY29uc3QgY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IGNvb2tpZVN0b3JlID0gY29va2llcygpXG5cbiAgcmV0dXJuIGNyZWF0ZVNlcnZlckNsaWVudChcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgfHwgJ2h0dHBzOi8vcGxhY2Vob2xkZXIuc3VwYWJhc2UuY28nLCBcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCAncGxhY2Vob2xkZXIta2V5JywgXG4gICAge1xuICAgIGNvb2tpZXM6IHtcbiAgICAgIGdldChuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNvb2tpZVN0b3JlLmdldChuYW1lKT8udmFsdWVcbiAgICAgIH0sXG4gICAgICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWUsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgICByZW1vdmUobmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWU6IFwiXCIsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJDbGllbnQiLCJjb29raWVzIiwiY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQiLCJjb29raWVTdG9yZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsImdldCIsIm5hbWUiLCJ2YWx1ZSIsInNldCIsIm9wdGlvbnMiLCJyZW1vdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase-server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/next","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/cookie","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();