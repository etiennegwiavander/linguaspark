"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-lesson/route";
exports.ids = ["app/api/generate-lesson/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-lesson/route.ts */ \"(rsc)/./app/api/generate-lesson/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-lesson/route\",\n        pathname: \"/api/generate-lesson\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-lesson/route\"\n    },\n    resolvedPagePath: \"D:\\\\linguaspark\\\\app\\\\api\\\\generate-lesson\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-lesson/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1sZXNzb24lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbGluZ3Vhc3BhcmslNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNsaW5ndWFzcGFyayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDSTtBQUNqRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzI3ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlLWxlc3NvblwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZ2VuZXJhdGUtbGVzc29uL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-lesson/route.ts":
/*!******************************************!*\
  !*** ./app/api/generate-lesson/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/lesson-ai-generator-server */ \"(rsc)/./lib/lesson-ai-generator-server.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase-server */ \"(rsc)/./lib/supabase-server.ts\");\n/* harmony import */ var _lib_content_validator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/content-validator */ \"(rsc)/./lib/content-validator.ts\");\n/* harmony import */ var _lib_error_classifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/error-classifier */ \"(rsc)/./lib/error-classifier.ts\");\n/* harmony import */ var _lib_usage_monitor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/usage-monitor */ \"(rsc)/./lib/usage-monitor.ts\");\n\n // Updated import to use server-side generator\n\n\n\n\nasync function POST(request) {\n    let userId;\n    let requestContext = {};\n    try {\n        const body = await request.json();\n        const { sourceText: sourceText1, lessonType: lessonType1, studentLevel: studentLevel1, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = body;\n        // Set up request context for error logging\n        requestContext = {\n            contentLength: sourceText1?.length,\n            lessonType: lessonType1,\n            studentLevel: studentLevel1,\n            targetLanguage,\n            apiEndpoint: \"/api/generate-lesson\"\n        };\n        // Validate required fields\n        if (!sourceText1 || !lessonType1 || !studentLevel1 || !targetLanguage) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: {\n                    type: \"CONTENT_ISSUE\",\n                    message: \"Missing required fields\",\n                    actionableSteps: [\n                        \"Ensure all required fields are provided\",\n                        \"Check that source text is selected\",\n                        \"Verify lesson type and student level are set\"\n                    ],\n                    errorId: `REQ_${Date.now()}`\n                }\n            }, {\n                status: 400\n            });\n        }\n        // Validate content before AI processing\n        const validationResult = _lib_content_validator__WEBPACK_IMPORTED_MODULE_3__.contentValidator.validateContent(sourceText1);\n        if (!validationResult.isValid) {\n            const classifiedError = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_4__.errorClassifier.classifyError(new Error(`Content validation failed: ${validationResult.reason}`), requestContext);\n            const userMessage = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_4__.errorClassifier.generateUserMessage(classifiedError);\n            const supportMessage = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_4__.errorClassifier.generateSupportMessage(classifiedError);\n            // Log error for support\n            console.error(\"Content validation error:\", supportMessage);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: {\n                    type: userMessage.title,\n                    message: userMessage.message,\n                    actionableSteps: userMessage.actionableSteps,\n                    errorId: userMessage.errorId,\n                    supportContact: userMessage.supportContact\n                }\n            }, {\n                status: 400\n            });\n        }\n        // Validate user authentication\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__.createServerSupabaseClient)();\n        const { data: { user }, error: authError } = await supabase.auth.getUser();\n        if (authError || !user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: {\n                    type: \"AUTHENTICATION_ERROR\",\n                    message: \"Authentication required\",\n                    actionableSteps: [\n                        \"Please log in to your account\",\n                        \"Refresh the page and try again\",\n                        \"Contact support if login issues persist\"\n                    ],\n                    errorId: `AUTH_${Date.now()}`\n                }\n            }, {\n                status: 401\n            });\n        }\n        userId = user.id;\n        // Set up usage monitoring context\n        const generationContext = {\n            userId: user.id,\n            lessonId: `lesson_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            lessonType: lessonType1,\n            difficultyLevel: studentLevel1,\n            contentLength: sourceText1.length,\n            timestamp: new Date()\n        };\n        requestContext.userId = userId;\n        // Generate lesson using AI-only approach\n        console.log(\"\\uD83D\\uDE80 Starting AI-only lesson generation...\");\n        const generationStartTime = Date.now();\n        const lesson = await _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__.lessonAIServerGenerator.generateLesson({\n            sourceText: sourceText1,\n            lessonType: lessonType1,\n            studentLevel: studentLevel1,\n            targetLanguage,\n            sourceUrl,\n            contentMetadata,\n            structuredContent,\n            wordCount,\n            readingTime\n        });\n        const generationEndTime = Date.now();\n        // Log generation completion and basic metrics\n        _lib_usage_monitor__WEBPACK_IMPORTED_MODULE_5__.usageMonitor.logTokenUsage(\"lesson-generation-complete\", 0, \"ai-only-generation\", generationContext);\n        // Validate AI-generated lesson - NO FALLBACKS\n        if (!lesson || !lesson.sections || Object.keys(lesson.sections).length === 0) {\n            throw new Error(\"AI generation returned empty or invalid lesson structure\");\n        }\n        console.log(\"✅ AI lesson generation successful:\", {\n            sectionKeys: Object.keys(lesson.sections),\n            lessonType: lesson.lessonType,\n            studentLevel: lesson.studentLevel,\n            targetLanguage: lesson.targetLanguage\n        });\n        // Prepare final lesson structure (AI-only, no fallbacks)\n        const finalLesson = {\n            lessonType: lesson.lessonType,\n            studentLevel: lesson.studentLevel,\n            targetLanguage: lesson.targetLanguage,\n            sections: lesson.sections\n        };\n        // Save the AI-generated lesson\n        const { data: savedLesson, error: saveError } = await supabase.from(\"lessons\").insert({\n            tutor_id: user.id,\n            title: `${lessonType1} Lesson - ${new Date().toLocaleDateString()}`,\n            lesson_type: lessonType1,\n            student_level: studentLevel1,\n            target_language: targetLanguage,\n            source_url: sourceUrl,\n            source_text: sourceText1,\n            lesson_data: finalLesson\n        }).select().single();\n        if (saveError) {\n            console.error(\"Error saving lesson (non-critical):\", saveError);\n        // Return lesson even if save fails - this is not a generation failure\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            lesson: {\n                ...finalLesson,\n                id: savedLesson?.id\n            }\n        });\n    } catch (error) {\n        // Log error to usage monitor\n        if (userId) {\n            const errorContext = {\n                userId,\n                lessonId: `lesson_${Date.now()}_error`,\n                lessonType,\n                difficultyLevel: studentLevel,\n                contentLength: sourceText?.length || 0,\n                timestamp: new Date()\n            };\n            _lib_usage_monitor__WEBPACK_IMPORTED_MODULE_5__.usageMonitor.logError(error, \"AI_GENERATION_FAILED\", errorContext);\n        }\n        // Classify the error and generate appropriate response\n        const aiError = error;\n        const classifiedError = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_4__.errorClassifier.classifyError(aiError, {\n            ...requestContext,\n            userId\n        });\n        const userMessage = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_4__.errorClassifier.generateUserMessage(classifiedError);\n        const supportMessage = _lib_error_classifier__WEBPACK_IMPORTED_MODULE_4__.errorClassifier.generateSupportMessage(classifiedError);\n        // Log detailed error information for support and debugging\n        console.error(\"AI lesson generation error:\", {\n            errorId: supportMessage.errorId,\n            type: supportMessage.type,\n            technicalDetails: supportMessage.technicalDetails,\n            context: supportMessage.context,\n            stackTrace: supportMessage.stackTrace\n        });\n        // Return structured error response (NO FALLBACK CONTENT)\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: {\n                type: userMessage.title,\n                message: userMessage.message,\n                actionableSteps: userMessage.actionableSteps,\n                errorId: userMessage.errorId,\n                supportContact: userMessage.supportContact\n            }\n        }, {\n            status: classifiedError.type === \"QUOTA_EXCEEDED\" ? 429 : classifiedError.type === \"CONTENT_ISSUE\" ? 400 : classifiedError.type === \"NETWORK_ERROR\" ? 503 : 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-lesson/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/content-validator.ts":
/*!**********************************!*\
  !*** ./lib/content-validator.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentValidatorImpl: () => (/* binding */ ContentValidatorImpl),\n/* harmony export */   contentValidator: () => (/* binding */ contentValidator)\n/* harmony export */ });\n/**\r\n * Content Validation Service\r\n * \r\n * Ensures source content meets minimum requirements for AI processing\r\n * before attempting lesson generation.\r\n */ class ContentValidatorImpl {\n    /**\r\n   * Validates content for AI lesson generation suitability\r\n   */ validateContent(content) {\n        // Basic sanitization and preparation\n        const cleanContent = this.sanitizeContent(content);\n        if (!cleanContent || cleanContent.trim().length === 0) {\n            return {\n                isValid: false,\n                reason: \"No content provided\",\n                suggestions: [\n                    \"Please select or paste some text content to generate a lesson from\"\n                ]\n            };\n        }\n        // Check minimum word count\n        const wordCount = this.getWordCount(cleanContent);\n        if (wordCount < this.MINIMUM_WORD_COUNT) {\n            return {\n                isValid: false,\n                reason: `Content too short (${wordCount} words, minimum ${this.MINIMUM_WORD_COUNT} required)`,\n                suggestions: [\n                    \"Select more text from the webpage\",\n                    \"Choose a longer article or passage\",\n                    \"Combine multiple paragraphs for better lesson content\"\n                ]\n            };\n        }\n        // Check sentence count\n        const sentenceCount = this.getSentenceCount(cleanContent);\n        if (sentenceCount < this.MINIMUM_SENTENCE_COUNT) {\n            return {\n                isValid: false,\n                reason: `Content lacks structure (${sentenceCount} sentences, minimum ${this.MINIMUM_SENTENCE_COUNT} required)`,\n                suggestions: [\n                    \"Select content with complete sentences\",\n                    \"Choose text with proper punctuation\",\n                    \"Avoid selecting only titles or bullet points\"\n                ]\n            };\n        }\n        // Check content quality\n        const qualityScore = this.checkContentQuality(cleanContent);\n        if (qualityScore.score < this.MINIMUM_QUALITY_SCORE) {\n            return {\n                isValid: false,\n                reason: `Content quality insufficient for lesson generation (score: ${qualityScore.score}/100)`,\n                suggestions: this.getQualityImprovementSuggestions(qualityScore)\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n    /**\r\n   * Returns the minimum word count required for content validation\r\n   */ getMinimumWordCount() {\n        return this.MINIMUM_WORD_COUNT;\n    }\n    /**\r\n   * Analyzes content quality and returns a detailed score\r\n   */ checkContentQuality(content) {\n        const cleanContent = this.sanitizeContent(content);\n        const words = this.getWords(cleanContent);\n        const sentences = this.getSentences(cleanContent);\n        const wordCount = words.length;\n        const sentenceCount = sentences.length;\n        const averageWordsPerSentence = sentenceCount > 0 ? wordCount / sentenceCount : 0;\n        // Check vocabulary variety (unique words vs total words)\n        const uniqueWords = new Set(words.map((word)=>word.toLowerCase()));\n        const vocabularyVariety = uniqueWords.size / wordCount;\n        const hasVariedVocabulary = vocabularyVariety > 0.4; // At least 40% unique words\n        // Check for complete thoughts (sentences ending with proper punctuation)\n        const completeThoughts = sentences.filter((sentence)=>/[.!?]$/.test(sentence.trim())).length;\n        const hasCompleteThoughts = completeThoughts / sentenceCount > 0.7; // 70% complete sentences\n        // Calculate overall quality score\n        let score = 0;\n        // Word count factor (0-30 points)\n        if (wordCount >= this.MINIMUM_WORD_COUNT) {\n            score += Math.min(30, wordCount / 200 * 30); // Max points at 200 words\n        }\n        // Sentence structure factor (0-25 points)\n        if (averageWordsPerSentence >= 8 && averageWordsPerSentence <= 25) {\n            score += 25; // Good sentence length\n        } else if (averageWordsPerSentence >= 5) {\n            score += 15; // Acceptable sentence length\n        }\n        // Vocabulary variety factor (0-25 points)\n        if (hasVariedVocabulary) {\n            score += 25;\n        } else if (vocabularyVariety > 0.25) {\n            score += 15;\n        }\n        // Complete thoughts factor (0-20 points)\n        if (hasCompleteThoughts) {\n            score += 20;\n        } else if (completeThoughts / sentenceCount > 0.5) {\n            score += 10;\n        }\n        return {\n            score: Math.round(score),\n            factors: {\n                wordCount,\n                sentenceCount,\n                averageWordsPerSentence: Math.round(averageWordsPerSentence * 10) / 10,\n                hasVariedVocabulary,\n                hasCompleteThoughts\n            }\n        };\n    }\n    /**\r\n   * Sanitizes content by removing excessive whitespace and non-text elements\r\n   */ sanitizeContent(content) {\n        return content.replace(/\\s+/g, \" \") // Replace multiple whitespace with single space\n        .replace(/[^\\w\\s.,!?;:'\"()-]/g, \"\") // Remove special characters except basic punctuation\n        .trim();\n    }\n    /**\r\n   * Counts words in the content\r\n   */ getWordCount(content) {\n        return this.getWords(content).length;\n    }\n    /**\r\n   * Gets array of words from content\r\n   */ getWords(content) {\n        return content.split(/\\s+/).filter((word)=>word.length > 0 && /\\w/.test(word));\n    }\n    /**\r\n   * Counts sentences in the content\r\n   */ getSentenceCount(content) {\n        return this.getSentences(content).length;\n    }\n    /**\r\n   * Gets array of sentences from content\r\n   */ getSentences(content) {\n        return content.split(/[.!?]+/).map((sentence)=>sentence.trim()).filter((sentence)=>sentence.length > 0);\n    }\n    /**\r\n   * Generates improvement suggestions based on quality score factors\r\n   */ getQualityImprovementSuggestions(qualityScore) {\n        const suggestions = [];\n        if (qualityScore.factors.wordCount < 100) {\n            suggestions.push(\"Select longer content with more detailed information\");\n        }\n        if (qualityScore.factors.averageWordsPerSentence < 8) {\n            suggestions.push(\"Choose content with more complex, complete sentences\");\n        }\n        if (!qualityScore.factors.hasVariedVocabulary) {\n            suggestions.push(\"Select content with more diverse vocabulary and topics\");\n        }\n        if (!qualityScore.factors.hasCompleteThoughts) {\n            suggestions.push(\"Choose well-structured text with proper punctuation\");\n        }\n        if (suggestions.length === 0) {\n            suggestions.push(\"Try selecting different content that is more suitable for language learning\");\n        }\n        return suggestions;\n    }\n    constructor(){\n        this.MINIMUM_WORD_COUNT = 50;\n        this.MINIMUM_SENTENCE_COUNT = 3;\n        this.MINIMUM_QUALITY_SCORE = 60;\n    }\n}\n// Export singleton instance\nconst contentValidator = new ContentValidatorImpl();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/content-validator.ts\n");

/***/ }),

/***/ "(rsc)/./lib/error-classifier.ts":
/*!*********************************!*\
  !*** ./lib/error-classifier.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorClassifier: () => (/* binding */ ErrorClassifier),\n/* harmony export */   errorClassifier: () => (/* binding */ errorClassifier)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * Error Classification System for AI-Only Lesson Generation\r\n * \r\n * This module provides error classification and message generation\r\n * for AI failures in the lesson generation system.\r\n */ \n/**\r\n * Implementation of the error classification system\r\n */ class ErrorClassifier {\n    /**\r\n   * Classifies an AI error based on error properties and context\r\n   */ classifyError(error, context = {}) {\n        const errorId = this.generateErrorId();\n        const fullContext = {\n            timestamp: new Date(),\n            ...context\n        };\n        const type = this.determineErrorType(error);\n        return {\n            type,\n            originalError: error,\n            context: fullContext,\n            errorId\n        };\n    }\n    /**\r\n   * Generates user-friendly error messages with actionable steps\r\n   */ generateUserMessage(error) {\n        switch(error.type){\n            case \"QUOTA_EXCEEDED\":\n                return {\n                    title: \"API Quota Exceeded\",\n                    message: \"API quota exceeded, please try again later\",\n                    actionableSteps: [\n                        \"Wait a few minutes before trying again\",\n                        \"Try generating a shorter lesson\",\n                        \"Contact support if the issue persists\"\n                    ],\n                    errorId: error.errorId,\n                    supportContact: \"support@linguaspark.com\"\n                };\n            case \"CONTENT_ISSUE\":\n                return {\n                    title: \"Content Processing Error\",\n                    message: \"Unable to process this content, please try different text\",\n                    actionableSteps: [\n                        \"Ensure the content has at least 100 words\",\n                        \"Try selecting different text from the webpage\",\n                        \"Check that the content is in a supported language\",\n                        \"Remove any special characters or formatting\"\n                    ],\n                    errorId: error.errorId\n                };\n            case \"NETWORK_ERROR\":\n                return {\n                    title: \"Connection Error\",\n                    message: \"Connection error, please check your internet and try again\",\n                    actionableSteps: [\n                        \"Check your internet connection\",\n                        \"Try refreshing the page\",\n                        \"Wait a moment and try again\",\n                        \"Contact support if the problem continues\"\n                    ],\n                    errorId: error.errorId\n                };\n            case \"UNKNOWN\":\n            default:\n                return {\n                    title: \"Service Temporarily Unavailable\",\n                    message: \"AI service temporarily unavailable, please try again later\",\n                    actionableSteps: [\n                        \"Wait a few minutes and try again\",\n                        \"Try refreshing the page\",\n                        \"Contact support with the error ID below\"\n                    ],\n                    errorId: error.errorId,\n                    supportContact: \"support@linguaspark.com\"\n                };\n        }\n    }\n    /**\r\n   * Generates detailed support messages for debugging\r\n   */ generateSupportMessage(error) {\n        return {\n            errorId: error.errorId,\n            type: error.type,\n            technicalDetails: this.extractTechnicalDetails(error.originalError),\n            context: error.context,\n            stackTrace: error.originalError.stack,\n            timestamp: error.context.timestamp\n        };\n    }\n    /**\r\n   * Determines error type based on error properties\r\n   */ determineErrorType(error) {\n        // Check for quota/rate limit errors\n        if (this.isQuotaError(error)) {\n            return \"QUOTA_EXCEEDED\";\n        }\n        // Check for network/connection errors\n        if (this.isNetworkError(error)) {\n            return \"NETWORK_ERROR\";\n        }\n        // Check for content-related errors\n        if (this.isContentError(error)) {\n            return \"CONTENT_ISSUE\";\n        }\n        // Default to unknown for unclassified errors\n        return \"UNKNOWN\";\n    }\n    /**\r\n   * Checks if error is related to API quota/rate limits\r\n   */ isQuotaError(error) {\n        const quotaIndicators = [\n            \"quota\",\n            \"rate limit\",\n            \"too many requests\",\n            \"limit exceeded\",\n            \"429\",\n            \"RESOURCE_EXHAUSTED\"\n        ];\n        const errorText = (error.message || \"\").toLowerCase();\n        const errorCode = (error.code || \"\").toLowerCase();\n        const status = error.status;\n        return status === 429 || quotaIndicators.some((indicator)=>errorText.includes(indicator) || errorCode.includes(indicator));\n    }\n    /**\r\n   * Checks if error is network/connection related\r\n   */ isNetworkError(error) {\n        const networkIndicators = [\n            \"network\",\n            \"connection\",\n            \"timeout\",\n            \"fetch\",\n            \"ECONNREFUSED\",\n            \"ENOTFOUND\",\n            \"ETIMEDOUT\"\n        ];\n        const errorText = (error.message || \"\").toLowerCase();\n        const errorCode = (error.code || \"\").toLowerCase();\n        const status = error.status;\n        return status === 0 || status === 502 || status === 503 || status === 504 || networkIndicators.some((indicator)=>errorText.includes(indicator) || errorCode.includes(indicator));\n    }\n    /**\r\n   * Checks if error is content-related\r\n   */ isContentError(error) {\n        const contentIndicators = [\n            \"invalid input\",\n            \"content too short\",\n            \"unsupported format\",\n            \"parsing error\",\n            \"invalid content\",\n            \"content validation\",\n            \"INVALID_ARGUMENT\"\n        ];\n        const errorText = (error.message || \"\").toLowerCase();\n        const errorCode = (error.code || \"\").toLowerCase();\n        const status = error.status;\n        return status === 400 || contentIndicators.some((indicator)=>errorText.includes(indicator) || errorCode.includes(indicator));\n    }\n    /**\r\n   * Extracts technical details from error for support\r\n   */ extractTechnicalDetails(error) {\n        const details = [];\n        if (error.message) {\n            details.push(`Message: ${error.message}`);\n        }\n        if (\"code\" in error && error.code) {\n            details.push(`Code: ${error.code}`);\n        }\n        if (\"status\" in error && error.status) {\n            details.push(`Status: ${error.status}`);\n        }\n        if (\"response\" in error && error.response) {\n            details.push(`Response: ${JSON.stringify(error.response, null, 2)}`);\n        }\n        return details.join(\"\\n\");\n    }\n    /**\r\n   * Generates unique error ID for support tracking\r\n   */ generateErrorId() {\n        const timestamp = Date.now().toString(36);\n        const random = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)().split(\"-\")[0];\n        return `ERR_${timestamp}_${random}`.toUpperCase();\n    }\n}\n// Export singleton instance\nconst errorClassifier = new ErrorClassifier();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/error-classifier.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-ai-server.ts":
/*!*********************************!*\
  !*** ./lib/google-ai-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleAIServerService: () => (/* binding */ createGoogleAIServerService)\n/* harmony export */ });\n/* harmony import */ var _error_classifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error-classifier */ \"(rsc)/./lib/error-classifier.ts\");\n/* harmony import */ var _usage_monitor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./usage-monitor */ \"(rsc)/./lib/usage-monitor.ts\");\n// Server-side Google AI (Gemini) APIs service layer\n\n\nclass GoogleAIServerService {\n    constructor(config){\n        this.model = \"models/gemini-2.5-flash\" // Use actual available model\n        ;\n        this.maxRetries = 3;\n        this.baseRetryDelay = 1000 // 1 second\n        ;\n        this.maxRetryDelay = 30000 // 30 seconds\n        ;\n        this.config = config;\n    }\n    async makeGeminiRequest(prompt, options = {}, metadata) {\n        return this.makeGeminiRequestWithRetry(prompt, options, metadata, 0);\n    }\n    async makeGeminiRequestWithRetry(prompt, options = {}, metadata, retryAttempt = 0) {\n        const startTime = Date.now();\n        const requestId = this.generateRequestId();\n        const requestBody = {\n            contents: [\n                {\n                    parts: [\n                        {\n                            text: prompt\n                        }\n                    ]\n                }\n            ],\n            generationConfig: {\n                temperature: options.temperature || 0.7,\n                maxOutputTokens: options.maxTokens || 2000,\n                topP: options.topP || 0.9\n            }\n        };\n        // Estimate input tokens (rough approximation: 1 token ≈ 4 characters)\n        const estimatedInputTokens = Math.ceil(prompt.length / 4);\n        const url = `${this.config.baseUrl}/v1beta/models/gemini-2.5-flash:generateContent?key=${this.config.apiKey}`;\n        console.log(`🌐 API Request [${requestId}] - Attempt ${retryAttempt + 1}/${this.maxRetries + 1}`);\n        console.log(`📊 Estimated input tokens: ${estimatedInputTokens}`);\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(requestBody)\n            });\n            console.log(`📡 Response [${requestId}]: ${response.status} ${response.statusText}`);\n            if (response.ok) {\n                const result = await response.json();\n                const endTime = Date.now();\n                const responseTime = endTime - startTime;\n                console.log(\"✅ Successful API response received\");\n                // Extract token usage information if available\n                const tokenUsage = this.extractTokenUsage(result, estimatedInputTokens);\n                // Log token usage\n                if (metadata?.section && tokenUsage) {\n                    _usage_monitor__WEBPACK_IMPORTED_MODULE_1__.usageMonitor.logTokenUsage(metadata.section, tokenUsage.totalTokens, metadata.optimization || \"none\", metadata.context);\n                }\n                // Parse response content\n                if (result.candidates && result.candidates.length > 0) {\n                    const candidate = result.candidates[0];\n                    // Check if we hit MAX_TOKENS limit\n                    if (candidate.finishReason === \"MAX_TOKENS\") {\n                        console.warn(\"⚠️ Hit MAX_TOKENS limit, response may be incomplete\");\n                        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                            const text = candidate.content.parts[0].text;\n                            console.log(`⚠️ Extracted partial text (${text.length} chars) due to MAX_TOKENS`);\n                            return text;\n                        } else {\n                            const error = new Error(\"MAX_TOKENS_EXCEEDED\");\n                            error.code = \"MAX_TOKENS\";\n                            throw error;\n                        }\n                    }\n                    // Normal response processing\n                    if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                        const text = candidate.content.parts[0].text;\n                        console.log(`✅ Generated text (${text.length} chars) in ${responseTime}ms`);\n                        return text;\n                    } else {\n                        const error = new Error(\"Invalid content structure in API response\");\n                        error.code = \"INVALID_RESPONSE_STRUCTURE\";\n                        throw error;\n                    }\n                } else {\n                    const error = new Error(\"No candidates in API response\");\n                    error.code = \"NO_CANDIDATES\";\n                    throw error;\n                }\n            } else {\n                // Handle HTTP errors with potential retry\n                const errorText = await response.text();\n                const error = new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);\n                error.status = response.status;\n                error.response = errorText;\n                // Check if this is a retryable error\n                if (this.isRetryableError(response.status) && retryAttempt < this.maxRetries) {\n                    const delay = this.calculateRetryDelay(retryAttempt);\n                    console.warn(`⚠️ Retryable error (${response.status}), retrying in ${delay}ms...`);\n                    await this.sleep(delay);\n                    return this.makeGeminiRequestWithRetry(prompt, options, metadata, retryAttempt + 1);\n                }\n                throw error;\n            }\n        } catch (error) {\n            const aiError = error;\n            // Log error with context\n            if (metadata?.context) {\n                const errorContext = {\n                    userId: metadata.context.userId,\n                    contentLength: prompt.length,\n                    lessonType: metadata.context.lessonType,\n                    timestamp: new Date(),\n                    requestId,\n                    apiEndpoint: url\n                };\n                const classifiedError = _error_classifier__WEBPACK_IMPORTED_MODULE_0__.errorClassifier.classifyError(aiError, errorContext);\n                _usage_monitor__WEBPACK_IMPORTED_MODULE_1__.usageMonitor.logError(aiError, classifiedError.type, metadata.context);\n            }\n            // Check if this is a retryable network error\n            if (this.isNetworkError(aiError) && retryAttempt < this.maxRetries) {\n                const delay = this.calculateRetryDelay(retryAttempt);\n                console.warn(`⚠️ Network error, retrying in ${delay}ms...`);\n                await this.sleep(delay);\n                return this.makeGeminiRequestWithRetry(prompt, options, metadata, retryAttempt + 1);\n            }\n            console.error(`❌ API call failed [${requestId}]:`, aiError.message);\n            throw aiError;\n        }\n    }\n    /**\n   * Extract token usage from API response\n   */ extractTokenUsage(result, estimatedInputTokens) {\n        // Try to extract actual token usage from response metadata\n        let inputTokens = estimatedInputTokens;\n        let outputTokens = 0;\n        // Check if response includes usage metadata\n        if (result.usageMetadata) {\n            inputTokens = result.usageMetadata.promptTokenCount || estimatedInputTokens;\n            outputTokens = result.usageMetadata.candidatesTokenCount || 0;\n        } else if (result.candidates && result.candidates[0]?.content?.parts?.[0]?.text) {\n            // Estimate output tokens from response text\n            const responseText = result.candidates[0].content.parts[0].text;\n            outputTokens = Math.ceil(responseText.length / 4);\n        }\n        return {\n            inputTokens,\n            outputTokens,\n            totalTokens: inputTokens + outputTokens\n        };\n    }\n    /**\n   * Check if error is retryable based on status code\n   */ isRetryableError(status) {\n        return [\n            429,\n            500,\n            502,\n            503,\n            504\n        ].includes(status);\n    }\n    /**\n   * Check if error is a network error\n   */ isNetworkError(error) {\n        const networkIndicators = [\n            \"fetch\",\n            \"network\",\n            \"connection\",\n            \"timeout\",\n            \"ECONNREFUSED\",\n            \"ENOTFOUND\",\n            \"ETIMEDOUT\"\n        ];\n        const errorMessage = error.message.toLowerCase();\n        return networkIndicators.some((indicator)=>errorMessage.includes(indicator));\n    }\n    /**\n   * Calculate retry delay with exponential backoff\n   */ calculateRetryDelay(retryAttempt) {\n        const delay = this.baseRetryDelay * Math.pow(2, retryAttempt);\n        const jitter = Math.random() * 0.1 * delay; // Add 10% jitter\n        return Math.min(delay + jitter, this.maxRetryDelay);\n    }\n    /**\n   * Sleep utility for retry delays\n   */ sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    /**\n   * Generate unique request ID for tracking\n   */ generateRequestId() {\n        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\n   * Process batch requests with intelligent batching\n   */ async processBatch(requests) {\n        console.log(`🔄 Processing batch of ${requests.length} requests`);\n        const results = [];\n        const batchSize = 5; // Process in smaller batches to avoid overwhelming the API\n        for(let i = 0; i < requests.length; i += batchSize){\n            const batch = requests.slice(i, i + batchSize);\n            console.log(`📦 Processing batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(requests.length / batchSize)}`);\n            // Process batch requests concurrently\n            const batchPromises = batch.map(async (request)=>{\n                try {\n                    const result = await this.makeGeminiRequest(request.prompt, request.options, request.metadata);\n                    return {\n                        id: request.id,\n                        result\n                    };\n                } catch (error) {\n                    return {\n                        id: request.id,\n                        error: error\n                    };\n                }\n            });\n            const batchResults = await Promise.all(batchPromises);\n            results.push(...batchResults);\n            // Add delay between batches to respect rate limits\n            if (i + batchSize < requests.length) {\n                await this.sleep(500); // 500ms delay between batches\n            }\n        }\n        console.log(`✅ Batch processing complete: ${results.filter((r)=>r.result).length} successful, ${results.filter((r)=>r.error).length} failed`);\n        return results;\n    }\n    async summarize(text, options = {}, metadata) {\n        const summaryType = options.type || \"key-points\";\n        const length = options.length || \"medium\";\n        const lengthInstructions = {\n            short: \"in 2-3 sentences\",\n            medium: \"in 4-6 sentences\",\n            long: \"in 7-10 sentences\"\n        };\n        const typeInstructions = {\n            \"key-points\": \"Extract and summarize the key points\",\n            \"tl-dr\": \"Create a TL;DR summary\",\n            \"teaser\": \"Write an engaging teaser summary\",\n            \"headline\": \"Create a headline-style summary\"\n        };\n        const prompt = `${typeInstructions[summaryType]} of the following text ${lengthInstructions[length]}:\n\n${text}\n\nSummary:`;\n        const requestMetadata = {\n            section: \"summarize\",\n            optimization: \"content_summarization\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.3\n            }, requestMetadata);\n        } catch (error) {\n            console.error(\"Summarization failed:\", error);\n            // Re-throw error instead of fallback to maintain AI-only approach\n            throw error;\n        }\n    }\n    async translate(text, options, metadata) {\n        const targetLang = this.getLanguageName(options.targetLanguage);\n        const prompt = `Translate the following text to ${targetLang}. Maintain the original meaning and tone:\n\n${text}\n\nTranslation:`;\n        const requestMetadata = {\n            section: \"translate\",\n            optimization: \"direct_translation\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            }, requestMetadata);\n        } catch (error) {\n            console.error(\"Translation failed:\", error);\n            // Re-throw error instead of fallback to maintain AI-only approach\n            throw error;\n        }\n    }\n    async prompt(prompt, options = {}, metadata) {\n        const requestMetadata = {\n            section: \"prompt\",\n            optimization: \"direct_prompt\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(prompt, options, requestMetadata);\n        } catch (error) {\n            console.error(\"Prompt generation failed:\", error);\n            throw error;\n        }\n    }\n    async write(prompt, options = {}, metadata) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"medium\";\n        const format = options.format || \"paragraph\";\n        const lengthInstructions = {\n            short: \"Keep it brief and concise\",\n            medium: \"Write a moderate length response\",\n            long: \"Provide a detailed and comprehensive response\"\n        };\n        const formatInstructions = {\n            paragraph: \"Write in paragraph form\",\n            \"bullet-points\": \"Format as bullet points\",\n            \"numbered-list\": \"Format as a numbered list\"\n        };\n        const enhancedPrompt = `${prompt}\n\nInstructions:\n- Tone: ${tone}\n- ${lengthInstructions[length]}\n- ${formatInstructions[format]}\n\nResponse:`;\n        const requestMetadata = {\n            section: \"write\",\n            optimization: \"structured_writing\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(enhancedPrompt, {\n                temperature: 0.7\n            }, requestMetadata);\n        } catch (error) {\n            console.error(\"Writing failed:\", error);\n            throw error;\n        }\n    }\n    async rewrite(text, options = {}, metadata) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"same\";\n        const audience = options.audience || \"general\";\n        const lengthInstructions = {\n            shorter: \"Make it more concise\",\n            longer: \"Expand and add more detail\",\n            same: \"Keep approximately the same length\"\n        };\n        const prompt = `Rewrite the following text with these requirements:\n- Tone: ${tone}\n- Audience: ${audience}\n- Length: ${lengthInstructions[length]}\n\nOriginal text:\n${text}\n\nRewritten text:`;\n        const requestMetadata = {\n            section: \"rewrite\",\n            optimization: \"content_rewriting\",\n            ...metadata\n        };\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.5\n            }, requestMetadata);\n        } catch (error) {\n            console.error(\"Rewriting failed:\", error);\n            // Re-throw error instead of fallback to maintain AI-only approach\n            throw error;\n        }\n    }\n    async proofread(text, options = {}, metadata) {\n        const checkGrammar = options.checkGrammar !== false;\n        const checkSpelling = options.checkSpelling !== false;\n        const checkStyle = options.checkStyle !== false;\n        const checks = [];\n        if (checkGrammar) checks.push(\"grammar\");\n        if (checkSpelling) checks.push(\"spelling\");\n        if (checkStyle) checks.push(\"style and clarity\");\n        const prompt = `Proofread and correct the following text for ${checks.join(\", \")}. Return only the corrected text:\n\n${text}\n\nCorrected text:`;\n        const requestMetadata = {\n            section: \"proofread\",\n            optimization: \"text_correction\",\n            ...metadata\n        };\n        try {\n            const correctedText = await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            }, requestMetadata);\n            return {\n                corrected_text: correctedText,\n                suggestions: [],\n                errors: []\n            };\n        } catch (error) {\n            console.error(\"Proofreading failed:\", error);\n            // Re-throw error instead of fallback to maintain AI-only approach\n            throw error;\n        }\n    }\n    getLanguageName(code) {\n        const languageMap = {\n            es: \"Spanish\",\n            fr: \"French\",\n            de: \"German\",\n            it: \"Italian\",\n            pt: \"Portuguese\",\n            ja: \"Japanese\",\n            ko: \"Korean\",\n            zh: \"Chinese\",\n            en: \"English\"\n        };\n        return languageMap[code] || \"English\";\n    }\n}\n// Server-side only initialization\nconst createGoogleAIServerService = ()=>{\n    const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\";\n    const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n    if (!apiKey) {\n        console.warn(\"Google AI API key not found. Lesson generation will use fallback templates.\");\n        // Return a service that will always throw errors, triggering fallbacks\n        return new GoogleAIServerService({\n            apiKey: \"dummy\",\n            baseUrl\n        });\n    }\n    return new GoogleAIServerService({\n        apiKey,\n        baseUrl\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-ai-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/lesson-ai-generator-server.ts":
/*!*******************************************!*\
  !*** ./lib/lesson-ai-generator-server.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonAIServerGenerator: () => (/* binding */ LessonAIServerGenerator),\n/* harmony export */   lessonAIServerGenerator: () => (/* binding */ lessonAIServerGenerator)\n/* harmony export */ });\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n/* harmony import */ var _progressive_generator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./progressive-generator */ \"(rsc)/./lib/progressive-generator.ts\");\n/* harmony import */ var _usage_monitor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./usage-monitor */ \"(rsc)/./lib/usage-monitor.ts\");\n\n\n\nclass LessonAIServerGenerator {\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_0__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    getProgressiveGenerator() {\n        if (!this.progressiveGenerator) {\n            this.progressiveGenerator = new _progressive_generator__WEBPACK_IMPORTED_MODULE_1__.ProgressiveGeneratorImpl();\n        }\n        return this.progressiveGenerator;\n    }\n    // Summarize and adapt content to student level\n    async summarizeAndAdaptContent(sourceText, studentLevel, targetLanguage) {\n        try {\n            const levelGuidance = {\n                \"A1\": \"Use very simple vocabulary, present tense, short sentences (5-8 words). Explain basic concepts clearly.\",\n                \"A2\": \"Use simple vocabulary, basic past/present tense, medium sentences (8-12 words). Include familiar topics.\",\n                \"B1\": \"Use intermediate vocabulary, various tenses, longer sentences (12-15 words). Include opinions and explanations.\",\n                \"B2\": \"Use advanced vocabulary, complex sentences, abstract concepts. Include detailed explanations and analysis.\",\n                \"C1\": \"Use sophisticated vocabulary, complex structures, nuanced ideas. Include cultural and contextual depth.\"\n            };\n            const guidance = levelGuidance[studentLevel] || levelGuidance[\"B1\"];\n            const prompt = `Summarize and rewrite this content for ${studentLevel} level ${targetLanguage} students:\r\n\r\n${sourceText.substring(0, 1000)}\r\n\r\nREQUIREMENTS:\r\n- ${guidance}\r\n- Keep all important information and key concepts\r\n- Make it 200-400 words (appropriate length for reading)\r\n- Use vocabulary appropriate for ${studentLevel} level\r\n- Maintain the main ideas but simplify complex language\r\n- Include specific details and examples\r\n- Make it engaging and educational\r\n\r\nRewrite the content clearly and completely:`;\n            console.log(\"\\uD83D\\uDCDD Content adaptation prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            return response.trim() || sourceText.substring(0, 400);\n        } catch (error) {\n            console.log(\"⚠️ Content adaptation failed, using original text\");\n            return sourceText.substring(0, 400);\n        }\n    }\n    async generateLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = params;\n        // Create usage monitoring context\n        const generationContext = {\n            lessonId: `lesson_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            lessonType,\n            difficultyLevel: studentLevel,\n            contentLength: sourceText.length,\n            timestamp: new Date()\n        };\n        // Validate sourceText\n        if (!sourceText || typeof sourceText !== \"string\") {\n            throw new Error(\"Invalid sourceText: must be a non-empty string\");\n        }\n        console.log(\"\\uD83D\\uDE80 Starting lesson generation with params:\", {\n            textLength: sourceText.length,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            hasMetadata: !!contentMetadata,\n            hasStructuredContent: !!structuredContent\n        });\n        try {\n            // Step 1: Summarize and adapt content to student level\n            console.log(\"\\uD83D\\uDCDD Step 1: Summarizing and adapting content to student level...\");\n            const adaptationStartTime = Date.now();\n            const adaptedContent = await this.summarizeAndAdaptContent(sourceText, studentLevel, targetLanguage);\n            const adaptationEndTime = Date.now();\n            // Log content adaptation usage\n            _usage_monitor__WEBPACK_IMPORTED_MODULE_2__.usageMonitor.logTokenUsage(\"content-adaptation\", Math.ceil(sourceText.length / 4), \"content-summarization\", generationContext);\n            console.log(\"✅ Content adapted:\", adaptedContent.length, \"chars\");\n            // Step 2: Generate lesson with adapted content\n            console.log(\"\\uD83E\\uDD16 Step 2: Generating lesson with adapted content...\");\n            const lessonGenerationStartTime = Date.now();\n            const lessonStructure = await this.generateMinimalAILesson(adaptedContent, lessonType, studentLevel, targetLanguage, contentMetadata);\n            const lessonGenerationEndTime = Date.now();\n            // Log lesson generation usage\n            _usage_monitor__WEBPACK_IMPORTED_MODULE_2__.usageMonitor.logTokenUsage(\"lesson-structure-generation\", Math.ceil(adaptedContent.length / 3), \"structured-generation\", generationContext);\n            console.log(\"✅ Minimal AI lesson generated:\", Object.keys(lessonStructure));\n            // Return properly structured GeneratedLesson object\n            const finalLesson = {\n                lessonType,\n                studentLevel,\n                targetLanguage,\n                sections: lessonStructure\n            };\n            console.log(\"\\uD83C\\uDFAF Returning AI-generated lesson:\", {\n                lessonType: finalLesson.lessonType,\n                studentLevel: finalLesson.studentLevel,\n                targetLanguage: finalLesson.targetLanguage,\n                sectionsCount: Object.keys(finalLesson.sections).length,\n                warmupCount: finalLesson.sections.warmup?.length || 0,\n                vocabularyCount: finalLesson.sections.vocabulary?.length || 0\n            });\n            console.log(\"\\uD83C\\uDF89 Optimized AI lesson generation complete!\");\n            return finalLesson;\n        } catch (error) {\n            // Log error to usage monitor\n            _usage_monitor__WEBPACK_IMPORTED_MODULE_2__.usageMonitor.logError(error, \"LESSON_GENERATION_FAILED\", generationContext);\n            console.error(\"❌ Error in AI lesson generation:\", error);\n            throw error;\n        }\n    }\n    // Progressive AI lesson generation with shared context\n    async generateMinimalAILesson(sourceText, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFAF Using progressive generation with shared context...\");\n        const progressiveGen = this.getProgressiveGenerator();\n        // Step 1: Build shared context for all sections\n        console.log(\"\\uD83C\\uDFD7️ Building shared context...\");\n        const sharedContext = await progressiveGen.buildSharedContext(sourceText, lessonType, studentLevel, targetLanguage);\n        // Step 2: Define lesson sections with dependencies\n        const lessonSections = [\n            {\n                name: \"warmup\",\n                priority: 1,\n                dependencies: []\n            },\n            {\n                name: \"vocabulary\",\n                priority: 2,\n                dependencies: []\n            },\n            {\n                name: \"reading\",\n                priority: 3,\n                dependencies: [\n                    \"vocabulary\"\n                ]\n            },\n            {\n                name: \"comprehension\",\n                priority: 4,\n                dependencies: [\n                    \"reading\"\n                ]\n            },\n            {\n                name: \"discussion\",\n                priority: 5,\n                dependencies: [\n                    \"reading\",\n                    \"comprehension\"\n                ]\n            },\n            {\n                name: \"grammar\",\n                priority: 6,\n                dependencies: [\n                    \"reading\"\n                ]\n            },\n            {\n                name: \"pronunciation\",\n                priority: 7,\n                dependencies: [\n                    \"vocabulary\"\n                ]\n            },\n            {\n                name: \"wrapup\",\n                priority: 8,\n                dependencies: [\n                    \"discussion\"\n                ]\n            }\n        ];\n        // Step 3: Generate sections progressively\n        const generatedSections = [];\n        let currentContext = sharedContext;\n        for (const section of lessonSections){\n            console.log(`🔄 Generating section: ${section.name}`);\n            const generatedSection = await progressiveGen.generateSection(section, currentContext, generatedSections);\n            generatedSections.push(generatedSection);\n            // Update context with new section information\n            currentContext = progressiveGen.updateContext(currentContext, generatedSection);\n        }\n        // Step 4: Generate dialogue sections using template methods\n        const vocabularyWords = generatedSections.find((s)=>s.sectionName === \"vocabulary\")?.content?.filter((item)=>item.word !== \"INSTRUCTION\")?.map((item)=>item.word) || [];\n        const mainTopic = sharedContext.mainThemes[0] || \"this topic\";\n        const dialoguePractice = this.generateTemplateDialoguePractice(mainTopic, studentLevel, vocabularyWords);\n        const dialogueFillGap = this.generateTemplateDialogueFillGap(mainTopic, studentLevel, vocabularyWords);\n        // Step 5: Assemble final lesson structure\n        const lessonStructure = {};\n        for (const section of generatedSections){\n            lessonStructure[section.sectionName] = section.content;\n        }\n        lessonStructure.dialoguePractice = dialoguePractice;\n        lessonStructure.dialogueFillGap = dialogueFillGap;\n        console.log(\"✅ Progressive lesson generation complete!\");\n        return lessonStructure;\n    }\n    // Ultra-minimal warmup generation\n    async generateMinimalWarmup(sourceText, studentLevel) {\n        // Extract better context for topic identification\n        const topics = this.extractBetterTopics(sourceText);\n        const mainTopic = topics[0] || \"this topic\";\n        // Create a more specific prompt that avoids content assumptions\n        const prompt = `Write 3 ${studentLevel} warm-up questions about ${mainTopic}. Ask about students' prior knowledge and experience. Do not mention any specific events or results. Format: just the questions, one per line:`;\n        try {\n            console.log(\"\\uD83D\\uDD25 Minimal warmup prompt:\", prompt.length, \"chars\");\n            console.log(\"\\uD83C\\uDFAF Topic identified:\", mainTopic);\n            const response = await this.getGoogleAI().prompt(prompt);\n            // Extract only actual questions (must end with ?)\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question (ends with ?) and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\") && !line.toLowerCase().includes(\"headline mentions\") && !line.toLowerCase().includes(\"the text\") && !line.toLowerCase().includes(\"the article\") && !line.toLowerCase().includes(\"according to\") && !line.toLowerCase().includes(\"the passage\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^-\\s*/, \"\").trim()).slice(0, 3);\n            console.log(\"\\uD83C\\uDFAF Extracted warmup questions:\", questions);\n            if (questions.length < 3) {\n                throw new Error(\"Failed to generate sufficient warmup questions\");\n            }\n            return questions;\n        } catch (error) {\n            console.log(\"⚠️ Minimal warmup failed\");\n            throw new Error(\"Failed to generate warmup questions: \" + error.message);\n        }\n    }\n    // Add instructional text to sections\n    addWarmupInstructions(questions, studentLevel) {\n        const instruction = \"Have the following conversations or discussions with your tutor before reading the text:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addComprehensionInstructions(questions, studentLevel) {\n        const instruction = \"After reading the text, answer these comprehension questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addDiscussionInstructions(questions, studentLevel) {\n        const instruction = \"Discuss these questions with your tutor to explore the topic in depth:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addWrapupInstructions(questions, studentLevel) {\n        const instruction = \"Reflect on your learning by discussing these wrap-up questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addVocabularyInstructions(vocabulary, studentLevel) {\n        const instruction = {\n            word: \"INSTRUCTION\",\n            meaning: \"Study the following words with your tutor before reading the text:\",\n            example: \"\"\n        };\n        return [\n            instruction,\n            ...vocabulary\n        ];\n    }\n    addReadingInstructions(readingText, studentLevel) {\n        const instruction = \"Read the following text carefully. Your tutor will help you with any difficult words or concepts:\";\n        return `${instruction}\\n\\n${readingText}`;\n    }\n    // Better topic extraction that recognizes compound terms\n    extractBetterTopics(text) {\n        const topics = [];\n        // Look for compound terms first (like \"Ryder Cup\", \"World Cup\", etc.)\n        const compoundPatterns = [\n            /\\b(Ryder Cup|World Cup|Champions League|Premier League|Super Bowl|Olympics|World Series)\\b/gi,\n            /\\b(artificial intelligence|machine learning|climate change|social media)\\b/gi,\n            /\\b([A-Z][a-z]+ [A-Z][a-z]+)\\b/g // General compound proper nouns\n        ];\n        for (const pattern of compoundPatterns){\n            const matches = text.match(pattern);\n            if (matches) {\n                topics.push(...matches.map((m)=>m.toLowerCase()));\n            }\n        }\n        // If no compound terms found, fall back to single words\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"europe\",\n                \"team\",\n                \"golf\",\n                \"tournament\",\n                \"sports\",\n                \"competition\"\n            ];\n            const foundWords = words.filter((word)=>commonWords.includes(word));\n            topics.push(...foundWords.slice(0, 3));\n        }\n        return topics.length > 0 ? topics : [\n            \"sports\"\n        ];\n    }\n    // Enhanced vocabulary generation with AI-generated contextual examples\n    async generateMinimalVocabulary(sourceText, studentLevel) {\n        // Use smart vocabulary extraction instead of basic word matching\n        const meaningfulWords = this.extractMeaningfulVocabulary(sourceText, studentLevel);\n        console.log(\"\\uD83D\\uDCDA Meaningful vocabulary extracted:\", meaningfulWords);\n        const vocabulary = [];\n        for (const word of meaningfulWords){\n            try {\n                const capitalizedWord = this.capitalizeWord(word);\n                // Generate AI definition\n                const definitionPrompt = `Define \"${word}\" simply for ${studentLevel} level. Context: ${sourceText.substring(0, 80)}. Give only the definition, no extra text:`;\n                console.log(\"\\uD83D\\uDCDA Vocab definition prompt:\", definitionPrompt.length, \"chars\");\n                const rawMeaning = await this.getGoogleAI().prompt(definitionPrompt);\n                const meaning = this.cleanDefinition(rawMeaning, studentLevel);\n                // Generate AI contextual examples\n                const examples = await this.generateAIExampleSentences(word, studentLevel, sourceText);\n                vocabulary.push({\n                    word: capitalizedWord,\n                    meaning: meaning.trim().substring(0, 200),\n                    example: examples\n                });\n            } catch (error) {\n                console.log(`⚠️ Vocab failed for ${word}, using enhanced template`);\n                const capitalizedWord = this.capitalizeWord(word);\n                vocabulary.push({\n                    word: capitalizedWord,\n                    meaning: this.generateContextualWordMeaning(word, studentLevel, sourceText),\n                    example: await this.generateAIExampleSentences(word, studentLevel, sourceText)\n                });\n            }\n        }\n        // Ensure we have 6-10 words\n        return vocabulary.slice(0, 10).length >= 6 ? vocabulary.slice(0, 10) : vocabulary.slice(0, 6);\n    }\n    // Ultra-minimal comprehension generation\n    async generateMinimalComprehension(sourceText, studentLevel) {\n        const shortText = sourceText.substring(0, 200) // Increase context for more questions\n        ;\n        const prompt = `Write 5 ${studentLevel} reading comprehension questions about this text. Only return questions, no instructions: ${shortText}`;\n        try {\n            console.log(\"❓ Minimal comprehension prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^\\*\\*/, \"\").replace(/\\*\\*$/, \"\").trim()).slice(0, 5);\n            if (questions.length < 5) {\n                throw new Error(\"Failed to generate sufficient comprehension questions\");\n            }\n            return questions;\n        } catch (error) {\n            console.log(\"⚠️ Minimal comprehension failed\");\n            throw new Error(\"Failed to generate comprehension questions: \" + error.message);\n        }\n    }\n    // Minimal AI-only reading passage generation\n    async generateMinimalReading(sourceText, studentLevel) {\n        const prompt = `Rewrite this text for ${studentLevel} level students. Keep it 200-400 words: ${sourceText.substring(0, 500)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return response.trim();\n        } catch (error) {\n            throw new Error(\"Failed to generate reading passage: \" + error.message);\n        }\n    }\n    // Minimal AI-only discussion questions generation\n    async generateMinimalDiscussion(sourceText, studentLevel) {\n        const prompt = `Write 3 ${studentLevel} discussion questions about this text. Only return questions: ${sourceText.substring(0, 200)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").trim()).slice(0, 3);\n            if (questions.length < 3) {\n                throw new Error(\"Failed to generate sufficient discussion questions\");\n            }\n            return questions;\n        } catch (error) {\n            throw new Error(\"Failed to generate discussion questions: \" + error.message);\n        }\n    }\n    // Minimal AI-only grammar section generation\n    async generateMinimalGrammar(sourceText, studentLevel) {\n        const prompt = `Create a grammar lesson for ${studentLevel} level based on this text. Return JSON with focus, examples, exercise: ${sourceText.substring(0, 200)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return JSON.parse(response);\n        } catch (error) {\n            throw new Error(\"Failed to generate grammar section: \" + error.message);\n        }\n    }\n    // Minimal AI-only pronunciation section generation\n    async generateMinimalPronunciation(vocabularyWords, studentLevel) {\n        const word = vocabularyWords[0] || \"communication\";\n        const prompt = `Create pronunciation practice for \"${word}\". Return JSON with word, ipa, practice:`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return JSON.parse(response);\n        } catch (error) {\n            throw new Error(\"Failed to generate pronunciation section: \" + error.message);\n        }\n    }\n    // Minimal AI-only wrapup questions generation\n    async generateMinimalWrapup(sourceText, studentLevel) {\n        const prompt = `Write 3 ${studentLevel} wrap-up questions about this lesson. Only return questions: ${sourceText.substring(0, 200)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").trim()).slice(0, 3);\n            if (questions.length < 3) {\n                throw new Error(\"Failed to generate sufficient wrapup questions\");\n            }\n            return questions;\n        } catch (error) {\n            throw new Error(\"Failed to generate wrapup questions: \" + error.message);\n        }\n    }\n    // Content analysis without AI calls\n    analyzeContentContextNoAI(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context without AI...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        // Extract topics using text analysis\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        // Extract vocabulary using text analysis\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n        }\n        // Generate learning objectives\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        return analysis;\n    }\n    // New method: Analyze content context and complexity\n    async analyzeContentContext(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity based on text characteristics\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        console.log(\"\\uD83D\\uDCC8 Text complexity analysis:\", {\n            avgSentenceLength,\n            complexWords,\n            totalWords,\n            complexity: analysis.complexity\n        });\n        // Extract key topics using simple text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83C\\uDFAF Extracting topics using text analysis...\");\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        console.log(\"✅ Extracted topics:\", analysis.topics);\n        // Extract key vocabulary using text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83D\\uDCDA Extracting vocabulary using text analysis...\");\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        console.log(\"✅ Extracted vocabulary:\", analysis.keyVocabulary);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n            console.log(\"\\uD83C\\uDF0D Cultural context:\", analysis.culturalContext);\n        }\n        // Generate learning objectives based on content type and lesson type\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        console.log(\"\\uD83C\\uDFAF Learning objectives:\", analysis.learningObjectives);\n        return analysis;\n    }\n    // Enhanced contextual summary creation\n    async createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDCDD Creating contextual summary...\");\n        // Use simple prompt to avoid token limits\n        const summaryPrompt = `Summarize this text in 4-5 sentences for ${studentLevel} level students:\r\n\r\n${sourceText.substring(0, 800)}\r\n\r\nSummary:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual summary...\");\n            const summary = await this.getGoogleAI().prompt(summaryPrompt, {\n                temperature: 0.4,\n                maxTokens: 300\n            });\n            console.log(\"✅ AI contextual summary created:\", summary.substring(0, 100) + \"...\");\n            return summary;\n        } catch (error) {\n            console.warn(\"⚠️ AI contextual summary failed, using text truncation:\", error.message);\n            // Skip complex fallbacks, just use truncation\n            const truncated = sourceText.substring(0, 600) + \"...\";\n            console.log(\"\\uD83D\\uDD04 Using truncated text as summary\");\n            return truncated;\n        }\n    }\n    // Generate CEFR-adapted warm-up questions\n    async generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata) {\n        console.log(\"\\uD83D\\uDD25 Generating CEFR-adapted warm-up questions...\");\n        const levelInstructions = {\n            \"A1\": `\r\nCreate 3 warm-up questions for A1 (beginner) level:\r\n- Use simple present tense and basic vocabulary\r\n- Ask yes/no questions or simple choice questions\r\n- Focus on familiar, concrete concepts\r\n- Keep questions short and direct\r\n- Use vocabulary the student likely knows\r\nExample: \"Do you use [topic] in your daily life? Yes or No?\"`,\n            \"A2\": `\r\nCreate 3 warm-up questions for A2 (elementary) level:\r\n- Use simple past tense and personal experiences\r\n- Ask for short, simple answers\r\n- Include basic comparisons with \"different\" or \"same\"\r\n- Focus on personal experiences and familiar situations\r\n- Use simple connecting words like \"and\", \"but\"\r\nExample: \"Have you ever [experienced topic]? How was it?\"`,\n            \"B1\": `\r\nCreate 3 warm-up questions for B1 (intermediate) level:\r\n- Ask for opinions with \"What do you think...?\"\r\n- Include comparisons between countries/cultures\r\n- Ask students to explain reasons with \"because\" or \"why\"\r\n- Discuss advantages and disadvantages\r\n- Use more varied vocabulary but keep structure clear\r\nExample: \"What do you think about [topic]? How is it different in your country?\"`,\n            \"B2\": `\r\nCreate 3 warm-up questions for B2 (upper intermediate) level:\r\n- Ask students to analyze situations and predict outcomes\r\n- Include complex opinions and explanations\r\n- Discuss implications and consequences\r\n- Use conditional language (\"What would happen if...?\")\r\n- Encourage detailed responses with examples\r\nExample: \"What challenges do you think [specific group] face with [topic]?\"`,\n            \"C1\": `\r\nCreate 3 warm-up questions for C1 (advanced) level:\r\n- Ask students to evaluate arguments and consider multiple perspectives\r\n- Include abstract concepts and societal implications\r\n- Use sophisticated vocabulary and complex structures\r\n- Encourage critical thinking and nuanced discussion\r\n- Ask about broader cultural and social contexts\r\nExample: \"How do cultural attitudes toward [concept] influence [topic] in different societies?\"`\n        };\n        // Ultra-simple prompt to avoid token limits\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const warmupPrompt = `Create 3 ${studentLevel} level warm-up questions about ${topic}. Return only the questions:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual warm-up questions...\");\n            console.log(\"\\uD83D\\uDCDD Warm-up prompt:\", warmupPrompt.substring(0, 200) + \"...\");\n            const response = await this.getGoogleAI().prompt(warmupPrompt, {\n                temperature: 0.6,\n                maxTokens: 150\n            });\n            console.log(\"✅ AI warm-up questions generated\");\n            console.log(\"\\uD83E\\uDD16 Raw AI response:\", response);\n            const questions = this.parseListFromText(response).slice(0, 3);\n            console.log(\"\\uD83D\\uDD25 Parsed warm-up questions:\", questions);\n            console.log(\"\\uD83D\\uDD0D Questions array length:\", questions.length);\n            // Ensure we have 3 questions, add fallbacks if needed\n            while(questions.length < 3){\n                const fallbackQuestion = this.getFallbackWarmupQuestion(studentLevel, contentAnalysis, questions.length);\n                console.log(`🔄 Adding fallback question ${questions.length + 1}:`, fallbackQuestion);\n                questions.push(fallbackQuestion);\n            }\n            console.log(\"✅ Final warm-up questions:\", questions);\n            // Final safety check - if still empty, use basic fallback\n            if (questions.length === 0) {\n                console.warn(\"⚠️ No questions generated, using emergency fallback\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return questions;\n        } catch (error) {\n            console.warn(\"⚠️ AI warm-up generation failed, using contextual fallbacks:\", error.message);\n            const fallbackQuestions = this.getContextualWarmupFallback(studentLevel, contentAnalysis, metadata);\n            console.log(\"\\uD83D\\uDD04 Fallback warm-up questions:\", fallbackQuestions);\n            // Final safety check for fallback\n            if (!fallbackQuestions || fallbackQuestions.length === 0) {\n                console.warn(\"⚠️ Fallback also empty, using emergency questions\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return fallbackQuestions;\n        }\n    }\n    // Enhanced contextual lesson structure generation\n    async generateContextualLessonStructure(content, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFD7️ Generating contextual lesson structure...\");\n        // Generate contextual warm-up questions first\n        const contextualWarmup = await this.generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata);\n        console.log(\"\\uD83D\\uDD25 Generated contextual warm-up questions:\", contextualWarmup);\n        // Ultra-simplified prompt to avoid token limits\n        const topics = contentAnalysis.topics.slice(0, 2).join(\", \") || \"technology\";\n        const vocab = contentAnalysis.keyVocabulary.slice(0, 4).join(\", \");\n        const prompt = `Create a ${lessonType} lesson for ${studentLevel} students about: ${topics}\r\n\r\nContent: \"${content.substring(0, 400)}\"\r\nKey words: ${vocab}\r\n\r\nReturn JSON with: warmup (use provided), vocabulary (4 words from content), reading (simplified content), comprehension (3 questions), discussion (3 questions), grammar (focus + examples), pronunciation (1 word), wrapup (3 questions).\r\n\r\n{\r\n  \"warmup\": ${JSON.stringify(contextualWarmup)},\r\n  \"vocabulary\": [{\"word\": \"word\", \"meaning\": \"definition\", \"example\": \"sentence\"}],\r\n  \"reading\": \"text\",\r\n  \"comprehension\": [\"question\"],\r\n  \"discussion\": [\"question\"], \r\n  \"grammar\": {\"focus\": \"topic\", \"examples\": [\"example\"], \"exercise\": [\"exercise\"]},\r\n  \"pronunciation\": {\"word\": \"word\", \"ipa\": \"/ipa/\", \"practice\": \"sentence\"},\r\n  \"wrapup\": [\"question\"]\r\n}`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for lesson structure...\");\n            const response = await this.getGoogleAI().prompt(prompt, {\n                temperature: 0.7,\n                maxTokens: 1500\n            });\n            console.log(\"\\uD83E\\uDD16 AI lesson structure response:\", response.substring(0, 200) + \"...\");\n            try {\n                const parsed = JSON.parse(response);\n                console.log(\"✅ Successfully parsed lesson structure JSON\");\n                // Ensure our contextual warm-up questions are preserved\n                parsed.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in final structure\");\n                return parsed;\n            } catch (parseError) {\n                console.warn(\"⚠️ Failed to parse JSON, attempting to clean response...\");\n                // Try to extract JSON from the response\n                const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    try {\n                        const cleaned = JSON.parse(jsonMatch[0]);\n                        console.log(\"✅ Successfully parsed cleaned JSON\");\n                        // Ensure our contextual warm-up questions are preserved\n                        cleaned.warmup = contextualWarmup;\n                        console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in cleaned structure\");\n                        return cleaned;\n                    } catch (cleanError) {\n                        console.warn(\"⚠️ Failed to parse cleaned JSON, using fallback\");\n                    }\n                }\n                // If JSON parsing fails, return a structured fallback with contextual warm-up\n                const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n                fallback.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Using fallback with contextual warm-up questions\");\n                return fallback;\n            }\n        } catch (error) {\n            console.warn(\"⚠️ AI lesson structure generation failed, using fallback:\", error.message);\n            const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n            fallback.warmup = contextualWarmup;\n            console.log(\"\\uD83D\\uDD25 Using error fallback with contextual warm-up questions\");\n            return fallback;\n        }\n    }\n    // Enhanced detailed content generation with context\n    async generateDetailedContextualContent(structure, content, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent) {\n        // Use Writer API to expand each section with contextual, detailed content\n        const sections = {\n            ...structure\n        };\n        // Enhance vocabulary section with contextual examples\n        if (sections.vocabulary) {\n            for(let i = 0; i < sections.vocabulary.length; i++){\n                const vocab = sections.vocabulary[i];\n                try {\n                    const contextualExamplePrompt = `\r\nCreate a natural example sentence using the word \"${vocab.word}\" that relates to this content context:\r\nTopics: ${contentAnalysis.topics.join(\", \")}\r\nContent type: ${contentAnalysis.contentType}\r\nLevel: ${studentLevel}\r\n\r\nMake the example relevant to the source material and appropriate for ${studentLevel} level students.\r\n`;\n                    const enhancedExample = await this.getGoogleAI().write(contextualExamplePrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].example = enhancedExample;\n                    // Add contextual meaning based on source content\n                    const contextualMeaningPrompt = `\r\nExplain the meaning of \"${vocab.word}\" in the context of: ${contentAnalysis.topics[0] || contentAnalysis.contentType}\r\nKeep it simple for ${studentLevel} level students.\r\n`;\n                    const contextualMeaning = await this.getGoogleAI().write(contextualMeaningPrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].contextualMeaning = contextualMeaning;\n                } catch (error) {\n                    // Keep original if enhancement fails\n                    console.warn(`Failed to enhance vocabulary for ${vocab.word}:`, error);\n                }\n            }\n        }\n        // Enhance discussion questions with specific content references\n        if (sections.discussion) {\n            try {\n                const enhancedDiscussionPrompt = `\r\nEnhance these discussion questions for a ${lessonType} lesson about ${contentAnalysis.topics.join(\" and \")}:\r\n${sections.discussion.join(\"\\n\")}\r\n\r\nMake them more specific to the content, engaging for ${studentLevel} level students, and encourage deeper thinking about:\r\n- ${contentAnalysis.topics.slice(0, 3).join(\"\\n- \")}\r\n\r\nReturn 3-4 enhanced questions that reference specific aspects of the content.\r\n`;\n                const enhancedDiscussion = await this.getGoogleAI().write(enhancedDiscussionPrompt, {\n                    tone: \"casual\",\n                    length: \"medium\",\n                    format: \"bullet-points\"\n                });\n                sections.discussion = this.parseListFromText(enhancedDiscussion).slice(0, 4);\n            } catch (error) {\n                console.warn(\"Failed to enhance discussion questions:\", error);\n            }\n        }\n        // Enhance reading section with better structure\n        if (sections.reading && structuredContent?.headings?.length > 0) {\n            try {\n                const structuredReadingPrompt = `\r\nImprove this reading text by organizing it with clear structure based on these headings from the original:\r\n${structuredContent.headings.slice(0, 3).map((h)=>`- ${h.text}`).join(\"\\n\")}\r\n\r\nOriginal text: \"${sections.reading}\"\r\n\r\nCreate a well-structured, ${studentLevel}-appropriate reading passage that maintains the key information but improves readability.\r\n`;\n                const enhancedReading = await this.getGoogleAI().rewrite(sections.reading, {\n                    tone: \"casual\",\n                    length: \"same\",\n                    audience: this.getAudienceLevel(studentLevel)\n                });\n                sections.reading = enhancedReading;\n            } catch (error) {\n                console.warn(\"Failed to enhance reading section:\", error);\n            }\n        }\n        // Enhance grammar section with content-specific examples\n        if (sections.grammar && sections.grammar.focus) {\n            try {\n                const grammarExamplesPrompt = `\r\nCreate 3 grammar examples for \"${sections.grammar.focus}\" using vocabulary and concepts from this content:\r\nTopics: ${contentAnalysis.topics.join(\", \")}\r\nKey vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\r\n\r\nMake examples relevant to the content and appropriate for ${studentLevel} level.\r\n`;\n                const contextualGrammarExamples = await this.getGoogleAI().write(grammarExamplesPrompt, {\n                    tone: \"casual\",\n                    length: \"short\",\n                    format: \"bullet-points\"\n                });\n                sections.grammar.contextualExamples = this.parseListFromText(contextualGrammarExamples);\n            } catch (error) {\n                console.warn(\"Failed to enhance grammar examples:\", error);\n            }\n        }\n        return sections;\n    }\n    async proofreadLesson(lesson) {\n        // Proofread key text sections\n        const sectionsToProofread = [\n            \"reading\",\n            \"grammar.examples\",\n            \"pronunciation.practice\"\n        ];\n        for (const sectionPath of sectionsToProofread){\n            const value = this.getNestedValue(lesson, sectionPath);\n            if (typeof value === \"string\") {\n                const proofread = await this.getGoogleAI().proofread(value, {\n                    checkGrammar: true,\n                    checkSpelling: true,\n                    checkStyle: true\n                });\n                this.setNestedValue(lesson, sectionPath, proofread.corrected_text);\n            }\n        }\n        return lesson;\n    }\n    generateFallbackLesson(params) {\n        // Template-based fallback when AI APIs fail\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getTemplateWarmup(lessonType, studentLevel),\n                vocabulary: this.extractVocabulary(sourceText, studentLevel),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n                dialoguePractice: this.generateTemplateDialoguePractice(\"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(\"this topic\", studentLevel, []),\n                discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getTemplateWrapup(lessonType)\n            }\n        };\n    }\n    // Helper methods\n    getSummaryLength(level) {\n        const lengthMap = {\n            A1: \"short\",\n            A2: \"short\",\n            B1: \"medium\",\n            B2: \"medium\",\n            C1: \"long\"\n        };\n        return lengthMap[level] || \"medium\";\n    }\n    getLanguageCode(language) {\n        const languageMap = {\n            spanish: \"es\",\n            french: \"fr\",\n            german: \"de\",\n            italian: \"it\",\n            portuguese: \"pt\",\n            japanese: \"ja\",\n            korean: \"ko\",\n            chinese: \"zh\"\n        };\n        return languageMap[language] || \"en\";\n    }\n    parseListFromText(text) {\n        return text.split(\"\\n\").filter((line)=>line.trim()).map((line)=>line.replace(/^[-•*]\\s*/, \"\").trim()).filter((line)=>line.length > 0).slice(0, 4) // Limit to 4 items\n        ;\n    }\n    getNestedValue(obj, path) {\n        return path.split(\".\").reduce((current, key)=>current?.[key], obj);\n    }\n    setNestedValue(obj, path, value) {\n        const keys = path.split(\".\");\n        const lastKey = keys.pop();\n        const target = keys.reduce((current, key)=>current[key], obj);\n        target[lastKey] = value;\n    }\n    createStructuredFallback(content, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDD04 Creating structured fallback lesson...\");\n        // Extract some basic information from content for better fallback\n        const words = content.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words)).slice(0, 6);\n        const fallback = {\n            warmup: [],\n            vocabulary: uniqueWords.map((word)=>({\n                    word: word,\n                    meaning: `Definition of ${word}`,\n                    example: `Example sentence with ${word}.`\n                })),\n            reading: this.simplifyText(content, studentLevel),\n            comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n            discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n            grammar: this.getTemplateGrammar(studentLevel),\n            pronunciation: this.getTemplatePronunciation(content),\n            wrapup: this.getTemplateWrapup(lessonType)\n        };\n        console.log(\"✅ Structured fallback created (warmup will be set by caller)\");\n        return fallback;\n    }\n    getTemplateWarmup(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What do you already know about this topic?\",\n                \"Have you had similar experiences?\",\n                \"What would you like to learn more about?\"\n            ],\n            grammar: [\n                \"What grammar patterns do you notice?\",\n                \"Which sentences seem most complex?\",\n                \"What grammar rules do you remember?\"\n            ],\n            travel: [\n                \"Where would you like to travel next?\",\n                \"What travel experiences have you had?\",\n                \"What travel vocabulary do you know?\"\n            ],\n            business: [\n                \"What business situations are you familiar with?\",\n                \"How do you communicate professionally?\",\n                \"What business terms are challenging?\"\n            ],\n            pronunciation: [\n                \"Which sounds are difficult to pronounce?\",\n                \"How do you practice pronunciation?\",\n                \"What pronunciation goals do you have?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    extractVocabulary(text, studentLevel) {\n        // Simple vocabulary extraction based on word frequency and complexity\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        const selectedWords = uniqueWords.slice(0, 6);\n        return selectedWords.map((word)=>({\n                word: word,\n                meaning: `Definition of ${word}`,\n                example: `Example sentence with ${word}.`\n            }));\n    }\n    simplifyText(text, studentLevel) {\n        // Basic text simplification based on level\n        const maxLength = {\n            A1: 200,\n            A2: 300,\n            B1: 400,\n            B2: 500,\n            C1: 600\n        };\n        const limit = maxLength[studentLevel] || 400;\n        return text.substring(0, limit) + (text.length > limit ? \"...\" : \"\");\n    }\n    getTemplateComprehension(lessonType, studentLevel) {\n        return [\n            \"What is the main idea of this text?\",\n            \"What supporting details can you identify?\",\n            \"How does this relate to your experience?\",\n            \"What conclusions can you draw?\"\n        ];\n    }\n    getTemplateDiscussion(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What is your opinion on this topic?\",\n                \"How would you handle this situation?\",\n                \"What alternative approaches exist?\"\n            ],\n            business: [\n                \"How would you apply this professionally?\",\n                \"What business challenges does this address?\",\n                \"How would you present this to colleagues?\"\n            ],\n            travel: [\n                \"How would this help while traveling?\",\n                \"What preparations would you make?\",\n                \"How would you share this experience?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    getTemplateGrammar(studentLevel) {\n        const grammarFoci = {\n            A1: \"Present Simple Tense\",\n            A2: \"Past Simple Tense\",\n            B1: \"Present Perfect Tense\",\n            B2: \"Conditional Sentences\",\n            C1: \"Advanced Grammar Structures\"\n        };\n        return {\n            focus: grammarFoci[studentLevel] || \"Present Perfect Tense\",\n            examples: [\n                \"I have learned many new things.\",\n                \"She has improved her skills.\",\n                \"We have discussed this topic.\"\n            ],\n            exercise: [\n                \"I _____ (learn) a lot today.\",\n                \"They _____ (complete) the project.\",\n                \"She _____ (improve) significantly.\"\n            ]\n        };\n    }\n    getTemplatePronunciation(text) {\n        // Extract a challenging word from the text\n        const words = text.match(/\\b[a-z]{6,}\\b/gi) || [\n            \"communication\"\n        ];\n        const selectedWord = words[0] || \"communication\";\n        return {\n            word: selectedWord.toLowerCase(),\n            ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n            practice: `Practice saying: \"${selectedWord}\" in a sentence.`\n        };\n    }\n    getTemplateWrapup(lessonType) {\n        return [\n            \"What new vocabulary did you learn?\",\n            \"Which concepts need more practice?\",\n            \"How will you use this knowledge?\",\n            \"What questions do you still have?\"\n        ];\n    }\n    // New helper methods for enhanced contextual analysis\n    extractTopicsFromHeadings(headings) {\n        return headings.filter((h)=>h.level <= 3) // Focus on main headings\n        .map((h)=>h.text).slice(0, 5);\n    }\n    extractTopicsFromText(text, headings) {\n        // First try to get topics from headings\n        const headingTopics = this.extractTopicsFromHeadings(headings);\n        if (headingTopics.length > 0) {\n            return headingTopics;\n        }\n        // Fallback: extract key phrases from text\n        const sentences = text.split(/[.!?]+/).filter((s)=>s.trim().length > 20);\n        const topics = [];\n        // Look for common topic indicators\n        const topicPatterns = [\n            /about (.+?)(?:\\s|,|\\.)/gi,\n            /discuss (.+?)(?:\\s|,|\\.)/gi,\n            /focus on (.+?)(?:\\s|,|\\.)/gi,\n            /regarding (.+?)(?:\\s|,|\\.)/gi\n        ];\n        for (const sentence of sentences.slice(0, 5)){\n            for (const pattern of topicPatterns){\n                const matches = sentence.match(pattern);\n                if (matches) {\n                    topics.push(...matches.map((m)=>m.replace(pattern, \"$1\").trim()).slice(0, 2));\n                }\n            }\n        }\n        // If no patterns found, extract key nouns\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"this\",\n                \"that\",\n                \"with\",\n                \"from\",\n                \"they\",\n                \"have\",\n                \"been\",\n                \"will\",\n                \"more\",\n                \"some\",\n                \"what\",\n                \"when\",\n                \"where\",\n                \"which\",\n                \"their\",\n                \"would\",\n                \"could\",\n                \"should\"\n            ];\n            const keyWords = words.filter((word)=>!commonWords.includes(word)).filter((word, index, arr)=>arr.indexOf(word) === index) // unique\n            .slice(0, 3);\n            return keyWords.length > 0 ? keyWords : [\n                \"AI technology\",\n                \"mobile devices\",\n                \"privacy\"\n            ];\n        }\n        return topics.slice(0, 3);\n    }\n    // Extract meaningful vocabulary for lesson content (improved algorithm)\n    extractMeaningfulVocabulary(text, level) {\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        // Enhanced exclusion list focusing on truly basic words and proper names\n        const excludeWords = new Set([\n            // Basic function words\n            \"the\",\n            \"and\",\n            \"for\",\n            \"are\",\n            \"but\",\n            \"not\",\n            \"you\",\n            \"all\",\n            \"can\",\n            \"had\",\n            \"her\",\n            \"was\",\n            \"one\",\n            \"our\",\n            \"out\",\n            \"day\",\n            \"get\",\n            \"has\",\n            \"him\",\n            \"his\",\n            \"how\",\n            \"its\",\n            \"may\",\n            \"new\",\n            \"now\",\n            \"old\",\n            \"see\",\n            \"two\",\n            \"who\",\n            \"boy\",\n            \"did\",\n            \"she\",\n            \"use\",\n            \"way\",\n            \"what\",\n            \"when\",\n            \"where\",\n            \"will\",\n            \"with\",\n            \"have\",\n            \"this\",\n            \"that\",\n            \"they\",\n            \"been\",\n            \"said\",\n            \"each\",\n            \"which\",\n            \"their\",\n            \"time\",\n            \"would\",\n            \"there\",\n            \"could\",\n            \"other\",\n            \"after\",\n            \"first\",\n            \"well\",\n            \"water\",\n            \"very\",\n            \"what\",\n            \"know\",\n            \"just\",\n            \"people\",\n            \"into\",\n            \"over\",\n            \"think\",\n            \"also\",\n            \"back\",\n            \"work\",\n            \"life\",\n            \"only\",\n            \"year\",\n            \"years\",\n            \"come\",\n            \"came\",\n            \"right\",\n            \"good\",\n            \"each\",\n            \"those\",\n            \"feel\",\n            \"seem\",\n            \"these\",\n            \"give\",\n            \"most\",\n            \"hand\",\n            \"high\",\n            \"keep\",\n            \"last\",\n            \"left\",\n            \"life\",\n            \"live\",\n            \"look\",\n            \"made\",\n            \"make\",\n            \"many\",\n            \"much\",\n            \"must\",\n            \"name\",\n            \"need\",\n            \"next\",\n            \"open\",\n            \"part\",\n            \"play\",\n            \"said\",\n            \"same\",\n            \"seem\",\n            \"show\",\n            \"side\",\n            \"take\",\n            \"tell\",\n            \"turn\",\n            \"want\",\n            \"ways\",\n            \"well\",\n            \"went\",\n            \"were\",\n            \"here\",\n            \"home\",\n            \"long\",\n            \"look\",\n            \"move\",\n            \"place\",\n            \"right\",\n            \"small\",\n            \"sound\",\n            \"still\",\n            \"such\",\n            \"thing\",\n            \"think\",\n            \"three\",\n            \"under\",\n            \"water\",\n            \"where\",\n            \"while\",\n            \"world\",\n            \"write\",\n            \"young\",\n            // Very basic words that B1+ students should know\n            \"student\",\n            \"english\",\n            \"september\",\n            \"october\",\n            \"november\",\n            \"december\",\n            \"january\",\n            \"february\",\n            \"march\",\n            \"april\",\n            \"june\",\n            \"july\",\n            \"august\",\n            \"south\",\n            \"africa\",\n            \"images\",\n            \"image\",\n            \"photo\",\n            \"picture\",\n            \"black\",\n            \"white\",\n            \"coloured\",\n            \"colored\",\n            // Problematic or sensitive terms to avoid in vocabulary\n            \"slur\",\n            \"slurs\",\n            \"racial\",\n            \"racist\",\n            \"racism\",\n            \"mckenzie\",\n            \"apartheid\",\n            \"monday\",\n            \"tuesday\",\n            \"wednesday\",\n            \"thursday\",\n            \"friday\",\n            \"saturday\",\n            \"sunday\",\n            \"today\",\n            \"yesterday\",\n            \"tomorrow\",\n            \"morning\",\n            \"afternoon\",\n            \"evening\",\n            \"night\",\n            // Common proper names to avoid (people's names and specific places)\n            \"john\",\n            \"mary\",\n            \"david\",\n            \"sarah\",\n            \"michael\",\n            \"jennifer\",\n            \"robert\",\n            \"lisa\",\n            \"william\",\n            \"karen\",\n            \"james\",\n            \"susan\",\n            \"christopher\",\n            \"jessica\",\n            \"daniel\",\n            \"nancy\",\n            \"matthew\",\n            \"betty\",\n            \"anthony\",\n            \"helen\",\n            \"mark\",\n            \"sandra\",\n            \"donald\",\n            \"donna\",\n            \"steven\",\n            \"carol\",\n            \"paul\",\n            \"ruth\",\n            \"andrew\",\n            \"sharon\",\n            \"joshua\",\n            \"michelle\",\n            \"kenneth\",\n            \"laura\",\n            \"kevin\",\n            \"sarah\",\n            \"brian\",\n            \"kimberly\",\n            \"george\",\n            \"deborah\",\n            \"edward\",\n            \"dorothy\",\n            \"ronald\",\n            \"lisa\",\n            \"timothy\",\n            \"nancy\",\n            \"jason\",\n            \"karen\",\n            \"jeffrey\",\n            \"betty\",\n            \"ryan\",\n            \"helen\",\n            \"jacob\",\n            \"sandra\",\n            \"gary\",\n            \"donna\",\n            \"nicholas\",\n            \"carol\",\n            \"eric\",\n            \"ruth\",\n            \"jonathan\",\n            \"sharon\",\n            \"stephen\",\n            \"michelle\",\n            \"larry\",\n            \"laura\",\n            \"justin\",\n            \"sarah\",\n            \"scott\",\n            \"kimberly\",\n            \"brandon\",\n            \"deborah\",\n            \"benjamin\",\n            \"dorothy\",\n            \"samuel\",\n            \"lisa\",\n            \"gregory\",\n            \"nancy\",\n            \"alexander\",\n            \"karen\",\n            \"patrick\",\n            \"betty\",\n            \"frank\",\n            \"helen\",\n            \"raymond\",\n            \"sandra\",\n            \"jack\",\n            \"donna\",\n            \"dennis\",\n            \"carol\",\n            \"jerry\",\n            \"ruth\",\n            \"tyler\",\n            \"sharon\",\n            \"aaron\",\n            \"michelle\",\n            \"jose\",\n            \"laura\",\n            \"henry\",\n            \"sarah\",\n            \"adam\",\n            \"kimberly\",\n            \"douglas\",\n            \"deborah\",\n            \"nathan\",\n            \"dorothy\",\n            \"peter\",\n            \"lisa\",\n            \"zachary\",\n            \"nancy\",\n            \"kyle\",\n            \"karen\",\n            \"julius\",\n            \"malema\"\n        ]);\n        // Filter and score words for educational value\n        const meaningfulWords = uniqueWords.filter((word)=>{\n            if (excludeWords.has(word)) return false;\n            if (/^\\d+$/.test(word)) return false // Skip pure numbers\n            ;\n            if (word.length < 4) return false // Skip very short words\n            ;\n            if (word.length > 15) return false // Skip very long words\n            ;\n            if (this.isProperName(word)) return false // Skip proper names\n            ;\n            return true;\n        });\n        // Score words based on educational and contextual value\n        const scoredWords = meaningfulWords.map((word)=>{\n            let score = 0;\n            // High-value content-specific vocabulary (political, business, academic terms)\n            if (/^(announcement|opposition|recognition|leadership|management|government|political|parliament|democracy|election|policy|legislation|constitution|rights|freedom|justice|equality|development|economic|social|cultural|environmental|international|national|regional|community|organization|institution|administration|authority|responsibility|accountability|transparency|governance|regulation|compliance|strategy|implementation|evaluation|assessment|analysis|research|investigation|examination|consideration|discussion|negotiation|agreement|cooperation|collaboration|partnership|relationship|communication|information|education|training|knowledge|understanding|awareness|consciousness|perspective|opinion|belief|attitude|approach|method|technique|process|system|structure|framework|principle|concept|theory|practice|experience|skill|expertise|professional|academic|scientific|technical|technological|digital|innovation|creativity|development|improvement|enhancement|transformation|change|progress|advancement|achievement|success|performance|quality|efficiency|effectiveness|productivity|sustainability|responsibility|commitment|dedication|motivation|inspiration|leadership|management|coordination|supervision|direction|guidance|support|assistance|service|provision|delivery|implementation|execution|operation|function|activity|action|behavior|conduct|practice|procedure|protocol|standard|guideline|requirement|condition|situation|circumstance|context|environment|setting|background|history|tradition|culture|society|community|population|group|team|organization|institution|establishment|authority|government|administration|policy|regulation|law|rule|standard|guideline|procedure|protocol|framework|model|pattern|template|example|instance|case|scenario)/.test(word)) {\n                score += 6 // Highest priority for meaningful content vocabulary\n                ;\n            }\n            // Business and professional terms\n            if (/^(manage|leader|team|company|business|strategy|develop|create|innovat|technolog|digital|global|professional|experience|skill|expert|analysis|research|project|solution|challenge|opportunity|growth|success|achievement|performance|quality|efficiency|productivity|collaboration|communication|decision|responsibility|objective|goal|target|result|outcome|impact|benefit|advantage|value|profit|revenue|investment|market|customer|client|service|product|brand|reputation|competitive|industry|sector|economy|economic|financial|budget|cost|price|sales|marketing|advertising|promotion|campaign|strategy|planning|implementation|execution|evaluation|assessment|improvement|optimization|transformation|change|adaptation|flexibility|agility|resilience|sustainability|environmental|social|ethical|governance|compliance|regulation|policy|procedure|standard|guideline|framework|methodology|approach|technique|method|process|system|structure|organization|hierarchy|department|division|function|role|position|title|career|development|training|education|learning|knowledge|information|data|insight|intelligence)/.test(word)) {\n                score += 4;\n            }\n            // Academic and formal vocabulary\n            if (/^(research|study|analysis|theory|concept|principle|method|approach|technique|process|system|structure|function|relationship|connection|interaction|influence|effect|impact|cause|result|consequence|factor|element|component|aspect|feature|characteristic|property|quality|attribute|dimension|level|degree|extent|scope|range|scale|measure|measurement|evaluation|assessment|comparison|contrast|similarity|difference|variation|change|development|evolution|progress|advancement|improvement|enhancement|modification|adjustment|adaptation|transformation|revolution|innovation|discovery|invention|creation|production|construction|design|planning|organization|management|administration|operation|implementation|execution|performance|achievement|accomplishment)/.test(word)) {\n                score += 3;\n            }\n            // Action words and processes (often good for learning)\n            if (/^(announce|reorganize|manage|develop|implement|achieve|improve|transform|communicate|collaborate|investigate|explore|examine|evaluate|assess|consider|discuss|negotiate|present|demonstrate|explain|describe|illustrate|interpret|translate|adapt|modify|optimize|organize|coordinate|administer|supervise|operate|execute|perform|accomplish|establish|maintain|preserve|conserve|protect|prevent|promote|advance|enhance|enrich|empower|engage|involve|participate|contribute|dedicate|commit|invest|allocate|distribute|circulate|transmit|transport|deliver|provide|supply|support|assist|guide|direct|instruct|educate|train|prepare|plan|schedule|arrange|coordinate|synchronize|integrate|combine|connect|associate|relate|partner|collaborate|cooperate|compete|compare|contrast|differentiate|distinguish|identify|recognize|acknowledge|appreciate|understand|comprehend|realize|aware|conscious|perceive|observe|monitor|track|measure|calculate|estimate|predict|forecast|project|anticipate|expect|assume|hypothesize|speculate|investigate|explore|research|analyze|synthesize|evaluate|assess|judge|decide|choose|select|prefer|recommend|suggest|propose|offer|request|demand|require|specify|instruct|direct|guide|advise|consult|discuss|negotiate|agree|contract|deal|transaction|exchange|trade|purchase|sale|investment|funding|financing|sponsorship|support|assistance|service|provision|delivery|distribution|allocation|assignment|delegation|authorization|approval|permission|consent|acceptance|rejection|refusal|denial|prohibition|restriction|limitation|constraint|regulation|control|management|administration|governance|leadership|supervision|oversight|monitoring|evaluation|assessment|review|audit|inspection|examination|investigation|inquiry)/.test(word)) {\n                score += 3;\n            }\n            // Frequency bonus (words that appear multiple times are likely important)\n            const frequency = (text.toLowerCase().match(new RegExp(`\\\\b${word}\\\\b`, \"g\")) || []).length;\n            if (frequency > 1) score += frequency * 2;\n            // Length bonus for substantial words\n            if (word.length >= 6 && word.length <= 12) score += 1;\n            return {\n                word,\n                score\n            };\n        });\n        // Sort by score and return top words\n        const topWords = scoredWords.sort((a, b)=>b.score - a.score).slice(0, 8) // Take top 8 words\n        .map((item)=>item.word);\n        console.log(\"\\uD83D\\uDCDA Meaningful vocabulary extraction results:\", topWords.map((w)=>`${w} (score: ${scoredWords.find((s)=>s.word === w)?.score})`));\n        return topWords;\n    }\n    extractVocabularyFromText(text, level) {\n        // Smart vocabulary extraction focusing on meaningful, educational words\n        const words = text.toLowerCase().match(/\\b[a-z]{3,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        // Words to exclude (common, non-educational words)\n        const excludeWords = new Set([\n            // Common words\n            \"the\",\n            \"and\",\n            \"for\",\n            \"are\",\n            \"but\",\n            \"not\",\n            \"you\",\n            \"all\",\n            \"can\",\n            \"had\",\n            \"her\",\n            \"was\",\n            \"one\",\n            \"our\",\n            \"out\",\n            \"day\",\n            \"get\",\n            \"has\",\n            \"him\",\n            \"his\",\n            \"how\",\n            \"its\",\n            \"may\",\n            \"new\",\n            \"now\",\n            \"old\",\n            \"see\",\n            \"two\",\n            \"who\",\n            \"boy\",\n            \"did\",\n            \"she\",\n            \"use\",\n            \"way\",\n            \"what\",\n            \"when\",\n            \"where\",\n            \"will\",\n            \"with\",\n            \"have\",\n            \"this\",\n            \"that\",\n            \"they\",\n            \"been\",\n            \"said\",\n            \"each\",\n            \"which\",\n            \"their\",\n            \"time\",\n            \"would\",\n            \"there\",\n            \"could\",\n            \"other\",\n            \"after\",\n            \"first\",\n            \"well\",\n            \"water\",\n            \"very\",\n            \"what\",\n            \"know\",\n            \"just\",\n            \"people\",\n            \"into\",\n            \"over\",\n            \"think\",\n            \"also\",\n            \"back\",\n            \"work\",\n            \"life\",\n            \"only\",\n            \"year\",\n            \"years\",\n            \"come\",\n            \"came\",\n            \"right\",\n            \"good\",\n            \"each\",\n            \"those\",\n            \"feel\",\n            \"seem\",\n            \"these\",\n            \"give\",\n            \"most\",\n            \"hand\",\n            \"high\",\n            \"keep\",\n            \"last\",\n            \"left\",\n            \"life\",\n            \"live\",\n            \"look\",\n            \"made\",\n            \"make\",\n            \"many\",\n            \"much\",\n            \"must\",\n            \"name\",\n            \"need\",\n            \"next\",\n            \"open\",\n            \"part\",\n            \"play\",\n            \"said\",\n            \"same\",\n            \"seem\",\n            \"show\",\n            \"side\",\n            \"take\",\n            \"tell\",\n            \"turn\",\n            \"want\",\n            \"ways\",\n            \"well\",\n            \"went\",\n            \"were\",\n            \"here\",\n            \"home\",\n            \"long\",\n            \"look\",\n            \"move\",\n            \"place\",\n            \"right\",\n            \"small\",\n            \"sound\",\n            \"still\",\n            \"such\",\n            \"thing\",\n            \"think\",\n            \"three\",\n            \"under\",\n            \"water\",\n            \"where\",\n            \"while\",\n            \"world\",\n            \"write\",\n            \"young\",\n            // Dates, numbers, names (often not useful for vocabulary)\n            \"january\",\n            \"february\",\n            \"march\",\n            \"april\",\n            \"june\",\n            \"july\",\n            \"august\",\n            \"september\",\n            \"october\",\n            \"november\",\n            \"december\",\n            \"monday\",\n            \"tuesday\",\n            \"wednesday\",\n            \"thursday\",\n            \"friday\",\n            \"saturday\",\n            \"sunday\",\n            \"today\",\n            \"yesterday\",\n            \"tomorrow\",\n            \"morning\",\n            \"afternoon\",\n            \"evening\",\n            \"night\",\n            // Common proper nouns that are often not educational\n            \"francisco\",\n            \"california\",\n            \"america\",\n            \"american\",\n            \"united\",\n            \"states\",\n            \"york\",\n            \"london\",\n            \"paris\",\n            \"tokyo\"\n        ]);\n        // Prioritize meaningful vocabulary categories\n        const meaningfulWords = uniqueWords.filter((word)=>{\n            // Skip excluded words\n            if (excludeWords.has(word)) return false;\n            // Skip pure numbers or dates\n            if (/^\\d+$/.test(word) || /^\\d{4}$/.test(word)) return false;\n            // Skip very short words (less than 4 letters) unless they're important\n            if (word.length < 4) return false;\n            // Skip very long words that might be too complex\n            if (word.length > 15) return false;\n            return true;\n        });\n        // Score words based on educational value\n        const scoredWords = meaningfulWords.map((word)=>{\n            let score = 0;\n            // Business/professional vocabulary\n            if (/^(manage|leader|team|company|business|strategy|develop|create|innovat|technolog|digital|global|international|professional|experience|skill|expert|analysis|research|project|solution|challenge|opportunity|growth|success|achievement|performance|quality|efficiency|productivity|collaboration|communication|decision|responsibility|objective|goal|target|result|outcome|impact|benefit|advantage|value|profit|revenue|investment|market|customer|client|service|product|brand|reputation|competitive|industry|sector|economy|economic|financial|budget|cost|price|sales|marketing|advertising|promotion|campaign|strategy|planning|implementation|execution|evaluation|assessment|improvement|optimization|transformation|change|adaptation|flexibility|agility|resilience|sustainability|environmental|social|ethical|governance|compliance|regulation|policy|procedure|standard|guideline|framework|methodology|approach|technique|method|process|system|structure|organization|hierarchy|department|division|function|role|position|title|career|development|training|education|learning|knowledge|information|data|insight|intelligence|wisdom|understanding|comprehension|awareness|consciousness|perception|perspective|viewpoint|opinion|belief|attitude|mindset|culture|values|principles|ethics|integrity|honesty|transparency|accountability|responsibility|commitment|dedication|passion|motivation|inspiration|creativity|innovation|imagination|vision|mission|purpose|meaning|significance|importance|relevance|priority|urgency|critical|essential|fundamental|basic|advanced|complex|sophisticated|comprehensive|detailed|specific|particular|general|overall|total|complete|full|entire|whole|partial|limited|restricted|exclusive|inclusive|diverse|varied|different|similar|comparable|equivalent|equal|fair|just|reasonable|logical|rational|practical|realistic|achievable|feasible|possible|probable|likely|unlikely|impossible|certain|uncertain|confident|doubtful|optimistic|pessimistic|positive|negative|neutral|objective|subjective|personal|individual|collective|social|public|private|internal|external|local|regional|national|international|global|worldwide|universal)/.test(word)) {\n                score += 3;\n            }\n            // Academic/educational vocabulary\n            if (/^(research|study|analysis|theory|concept|principle|method|approach|technique|process|system|structure|function|relationship|connection|interaction|influence|effect|impact|cause|result|consequence|factor|element|component|aspect|feature|characteristic|property|quality|attribute|dimension|level|degree|extent|scope|range|scale|measure|measurement|evaluation|assessment|comparison|contrast|similarity|difference|variation|change|development|evolution|progress|advancement|improvement|enhancement|modification|adjustment|adaptation|transformation|revolution|innovation|discovery|invention|creation|production|construction|design|planning|organization|management|administration|operation|implementation|execution|performance|achievement|accomplishment|success|failure|challenge|problem|issue|difficulty|obstacle|barrier|limitation|constraint|restriction|requirement|condition|situation|circumstance|context|environment|setting|background|history|tradition|culture|society|community|population|group|team|organization|institution|establishment|authority|government|administration|policy|regulation|law|rule|standard|guideline|procedure|protocol|framework|model|pattern|template|example|instance|case|scenario|situation|condition|state|status|position|location|place|area|region|zone|territory|domain|field|sector|industry|market|economy|business|commerce|trade|exchange|transaction|deal|agreement|contract|partnership|collaboration|cooperation|coordination|communication|interaction|relationship|connection|network|system|structure|organization|hierarchy|level|rank|grade|class|category|type|kind|sort|variety|diversity|range|spectrum)/.test(word)) {\n                score += 2;\n            }\n            // Technical/specialized vocabulary\n            if (/^(technolog|digital|computer|software|hardware|internet|online|website|platform|application|program|code|data|information|network|system|security|privacy|encryption|algorithm|artificial|intelligence|machine|learning|automation|robot|innovation|development|engineering|science|scientific|medical|health|treatment|diagnosis|research|experiment|laboratory|equipment|instrument|device|tool|machine|mechanism|process|procedure|technique|method|approach|strategy|solution|problem|challenge|opportunity|advantage|benefit|risk|threat|danger|safety|protection|prevention|control|management|monitoring|supervision|oversight|governance|regulation|compliance|standard|quality|performance|efficiency|effectiveness|productivity|optimization|improvement|enhancement|upgrade|update|modification|customization|personalization|adaptation|flexibility|scalability|sustainability|reliability|durability|stability|consistency|accuracy|precision|validity|credibility|authenticity|transparency|accountability|responsibility|integrity|ethics|morality|values|principles|beliefs|attitudes|perspectives|opinions|views|thoughts|ideas|concepts|theories|models|frameworks|paradigms|approaches|methodologies|strategies|tactics|techniques|procedures|protocols)/.test(word)) {\n                score += 2;\n            }\n            // Action/process words (verbs in noun form or gerunds)\n            if (/^(announcement|leadership|management|development|implementation|achievement|improvement|transformation|communication|collaboration|investigation|exploration|examination|evaluation|assessment|consideration|discussion|negotiation|presentation|demonstration|explanation|description|illustration|interpretation|translation|adaptation|modification|optimization|organization|coordination|administration|supervision|operation|execution|performance|accomplishment|establishment|maintenance|preservation|conservation|protection|prevention|promotion|advancement|enhancement|enrichment|empowerment|engagement|involvement|participation|contribution|dedication|commitment|investment|allocation|distribution|circulation|transmission|transportation|delivery|provision|supply|support|assistance|guidance|direction|instruction|education|training|preparation|planning|scheduling|arrangement|coordination|synchronization|integration|combination|connection|association|relationship|partnership|collaboration|cooperation|competition|comparison|contrast|differentiation|distinction|identification|recognition|acknowledgment|appreciation|understanding|comprehension|realization|awareness|consciousness|perception|observation|monitoring|tracking|measurement|calculation|estimation|prediction|forecasting|projection|anticipation|expectation|assumption|hypothesis|speculation|investigation|exploration|research|analysis|synthesis|evaluation|assessment|judgment|decision|choice|selection|preference|recommendation|suggestion|proposal|offer|request|demand|requirement|specification|instruction|direction|guidance|advice|consultation|discussion|negotiation|agreement|contract|deal|transaction|exchange|trade|purchase|sale|investment|funding|financing|sponsorship|support|assistance|service|provision|delivery|distribution|allocation|assignment|delegation|authorization|approval|permission|consent|acceptance|rejection|refusal|denial|prohibition|restriction|limitation|constraint|regulation|control|management|administration|governance|leadership|supervision|oversight|monitoring|evaluation|assessment|review|audit|inspection|examination|investigation|inquiry|research|study|analysis|interpretation|explanation|clarification|specification|definition|description|illustration|demonstration|presentation|exhibition|display|show|performance|execution|implementation|application|utilization|employment|usage|operation|function|activity|action|behavior|conduct|practice|procedure|process|method|technique|approach|strategy|plan|scheme|program|project|initiative|campaign|movement|effort|attempt|trial|experiment|test|examination|evaluation|assessment|measurement|calculation|estimation|determination|identification|recognition|discovery|invention|creation|production|construction|building|development|growth|expansion|extension|enlargement|increase|improvement|enhancement|upgrade|advancement|progress|evolution|transformation|change|modification|adjustment|adaptation|customization|personalization|optimization|refinement|perfection|completion|achievement|accomplishment|success|victory|triumph|conquest|defeat|failure|loss|mistake|error|problem|issue|difficulty|challenge|obstacle|barrier|limitation|constraint|restriction|requirement|condition|situation|circumstance|context|environment|setting|atmosphere|climate|culture|tradition|custom|habit|routine|pattern|trend|tendency|inclination|preference|choice|option|alternative|possibility|opportunity|chance|probability|likelihood|certainty|uncertainty|doubt|confidence|trust|faith|belief|conviction|opinion|view|perspective|standpoint|position|stance|attitude|approach|mindset|mentality|psychology|philosophy|ideology|theory|concept|idea|notion|thought|consideration|reflection|contemplation|meditation|concentration|focus|attention|interest|curiosity|wonder|amazement|surprise|shock|astonishment|bewilderment|confusion|uncertainty|clarity|understanding|comprehension|knowledge|information|data|facts|details|specifics|particulars|characteristics|features|attributes|properties|qualities|aspects|elements|components|parts|sections|segments|divisions|categories|types|kinds|varieties|forms|shapes|sizes|dimensions|measurements|quantities|amounts|numbers|figures|statistics|percentages|proportions|ratios|rates|speeds|frequencies|intervals|periods|durations|times|moments|instances|occasions|events|incidents|occurrences|happenings|developments|changes|modifications|alterations|adjustments|improvements|enhancements|upgrades|updates|revisions|corrections|fixes|repairs|maintenance|preservation|conservation|protection|security|safety|defense|prevention|precaution|preparation|readiness|availability|accessibility|convenience|comfort|ease|simplicity|complexity|difficulty|challenge|complication|sophistication|advancement|progress|development|growth|expansion|extension|increase|rise|improvement|enhancement|betterment|amelioration|optimization|perfection|excellence|quality|standard|level|grade|rank|status|position|location|place|site|spot|point|area|region|zone|territory|domain|field|sector|industry|market|economy|business|enterprise|organization|institution|establishment|company|corporation|firm|agency|department|division|section|unit|team|group|committee|board|council|assembly|association|society|community|population|public|audience|customers|clients|users|consumers|buyers|purchasers|investors|stakeholders|shareholders|partners|collaborators|colleagues|associates|members|participants|contributors|supporters|advocates|representatives|delegates|ambassadors|spokespersons|leaders|managers|directors|executives|administrators|supervisors|coordinators|organizers|planners|designers|developers|creators|producers|manufacturers|suppliers|providers|distributors|retailers|sellers|vendors|contractors|consultants|advisors|experts|specialists|professionals|practitioners|technicians|operators|workers|employees|staff|personnel|workforce|labor|human|resources|capital|assets|investments|funds|finances|budget|costs|expenses|revenues|income|profits|earnings|returns|benefits|advantages|gains|losses|risks|threats|dangers|hazards|challenges|problems|issues|difficulties|obstacles|barriers|limitations|constraints|restrictions|requirements|conditions|terms|specifications|standards|criteria|guidelines|rules|regulations|policies|procedures|protocols|processes|methods|techniques|approaches|strategies|plans|programs|projects|initiatives|campaigns|efforts|activities|actions|operations|functions|services|products|goods|items|articles|objects|things|materials|substances|elements|components|ingredients|contents)$/.test(word)) {\n                score += 3;\n            }\n            // Bonus for words that appear multiple times (indicating importance)\n            const frequency = (text.toLowerCase().match(new RegExp(`\\\\b${word}\\\\b`, \"g\")) || []).length;\n            if (frequency > 1) score += frequency;\n            return {\n                word,\n                score\n            };\n        });\n        // Sort by score and return top words\n        const topWords = scoredWords.sort((a, b)=>b.score - a.score).slice(0, 10).map((item)=>item.word);\n        console.log(\"\\uD83D\\uDCDA Smart vocabulary extraction results:\", topWords);\n        return topWords;\n    }\n    determineCulturalContext(domain, text) {\n        // Determine cultural context based on domain and content\n        const culturalIndicators = {\n            \"bbc.com\": \"British English, UK culture\",\n            \"cnn.com\": \"American English, US culture\",\n            \"wikipedia.org\": \"International, encyclopedic\",\n            \"nytimes.com\": \"American English, US perspective\",\n            \"theguardian.com\": \"British English, UK perspective\"\n        };\n        if (culturalIndicators[domain]) {\n            return culturalIndicators[domain];\n        }\n        // Analyze text for cultural markers\n        const americanMarkers = [\n            \"dollar\",\n            \"president\",\n            \"congress\",\n            \"state\",\n            \"federal\"\n        ];\n        const britishMarkers = [\n            \"pound\",\n            \"minister\",\n            \"parliament\",\n            \"council\",\n            \"government\"\n        ];\n        const americanCount = americanMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        const britishCount = britishMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        if (americanCount > britishCount) {\n            return \"American English context\";\n        } else if (britishCount > americanCount) {\n            return \"British English context\";\n        }\n        return \"International context\";\n    }\n    generateLearningObjectives(contentType, topics, level) {\n        const objectives = [];\n        // Base objectives on content type\n        switch(contentType){\n            case \"news\":\n                objectives.push(\"Understand current events vocabulary\");\n                objectives.push(\"Practice reading news articles\");\n                break;\n            case \"blog\":\n                objectives.push(\"Learn informal writing style\");\n                objectives.push(\"Understand personal opinions and experiences\");\n                break;\n            case \"tutorial\":\n                objectives.push(\"Follow step-by-step instructions\");\n                objectives.push(\"Learn technical vocabulary\");\n                break;\n            case \"encyclopedia\":\n                objectives.push(\"Understand factual information\");\n                objectives.push(\"Learn academic vocabulary\");\n                break;\n            default:\n                objectives.push(\"Improve reading comprehension\");\n                objectives.push(\"Expand vocabulary knowledge\");\n        }\n        // Add topic-specific objectives\n        topics.slice(0, 2).forEach((topic)=>{\n            objectives.push(`Discuss topics related to ${topic.toLowerCase()}`);\n        });\n        return objectives.slice(0, 4);\n    }\n    getAudienceLevel(cefrLevel) {\n        const levelMap = {\n            \"A1\": \"beginner\",\n            \"A2\": \"beginner\",\n            \"B1\": \"general\",\n            \"B2\": \"general\",\n            \"C1\": \"expert\"\n        };\n        return levelMap[cefrLevel] || \"general\";\n    }\n    // Enhanced fallback lesson generation with context\n    generateEnhancedFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, contentMetadata, structuredContent } = params;\n        console.log(\"\\uD83D\\uDD04 Generating enhanced fallback lesson with contextual warm-up...\");\n        // Use available context even in fallback\n        const topics = structuredContent?.headings?.map((h)=>h.text).slice(0, 3) || [];\n        const contentType = contentMetadata?.contentType || \"general\";\n        // Create mock content analysis for fallback warm-up generation\n        const mockContentAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: this.determineSourceCountry(contentMetadata?.domain || \"\"),\n            culturalContext: this.determineCulturalContext(contentMetadata?.domain || \"\", sourceText)\n        };\n        // Generate contextual warm-up questions even in fallback\n        const contextualWarmup = this.getContextualWarmupFallback(studentLevel, mockContentAnalysis, contentMetadata);\n        console.log(\"\\uD83D\\uDD25 Generated fallback contextual warm-up:\", contextualWarmup);\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: contextualWarmup,\n                vocabulary: this.extractContextualVocabulary(sourceText, studentLevel, topics),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getContextualComprehension(lessonType, studentLevel, topics),\n                dialoguePractice: this.generateTemplateDialoguePractice(topics[0] || \"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(topics[0] || \"this topic\", studentLevel, []),\n                discussion: this.getContextualDiscussion(lessonType, studentLevel, topics),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getContextualWrapup(lessonType, topics)\n            }\n        };\n    }\n    getContextualWarmup(lessonType, studentLevel, topics, contentType) {\n        // Use the same contextual fallback logic\n        const mockAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: \"International\"\n        };\n        return this.getContextualWarmupFallback(studentLevel, mockAnalysis, {\n            title: topics[0] || \"Content\"\n        });\n    }\n    // Basic fallback for complete failures\n    generateBasicFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: [\n                    \"What do you already know about this topic?\",\n                    \"Have you had similar experiences?\",\n                    \"What would you like to learn?\"\n                ],\n                vocabulary: [],\n                reading: sourceText.substring(0, 400),\n                comprehension: [\n                    \"What is the main idea?\",\n                    \"What details can you identify?\"\n                ],\n                dialoguePractice: this.generateTemplateDialoguePractice(\"this topic\", studentLevel, []),\n                dialogueFillGap: this.generateTemplateDialogueFillGap(\"this topic\", studentLevel, []),\n                discussion: [\n                    \"What is your opinion?\",\n                    \"How would you handle this?\"\n                ],\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: {\n                    word: \"example\",\n                    ipa: \"/ɪɡˈz\\xe6mpəl/\",\n                    practice: \"Practice saying example.\"\n                },\n                wrapup: [\n                    \"What did you learn?\",\n                    \"What needs more practice?\"\n                ]\n            }\n        };\n    }\n    extractContextualVocabulary(text, studentLevel, topics) {\n        const vocabulary = this.extractVocabulary(text, studentLevel);\n        // Enhance with topic context if available\n        if (topics.length > 0) {\n            return vocabulary.map((vocab, index)=>({\n                    ...vocab,\n                    context: index < topics.length ? `Related to ${topics[index].toLowerCase()}` : vocab.meaning\n                }));\n        }\n        return vocabulary;\n    }\n    getContextualComprehension(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateComprehension(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is the main point about ${topics[0]?.toLowerCase()}?`,\n                `How does the text explain ${topics[1]?.toLowerCase() || \"the topic\"}?`,\n                \"What supporting details can you identify?\",\n                \"What conclusions can you draw from this information?\"\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualDiscussion(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateDiscussion(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is your opinion about ${topics[0]?.toLowerCase()}?`,\n                `How would you apply this information about ${topics[1]?.toLowerCase() || \"this topic\"}?`,\n                `What are the implications of what you learned about ${topics[0]?.toLowerCase()}?`\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualWrapup(lessonType, topics) {\n        if (topics.length > 0) {\n            return [\n                `What new vocabulary did you learn about ${topics[0]?.toLowerCase()}?`,\n                `Which concepts about ${topics[1]?.toLowerCase() || \"this topic\"} need more practice?`,\n                \"How will you use this knowledge in real situations?\",\n                \"What questions do you still have about this content?\"\n            ];\n        }\n        return this.getTemplateWrapup(lessonType);\n    }\n    // Template dialogue generation methods\n    generateTemplateDialoguePractice(topic, studentLevel, vocabularyWords) {\n        const levelDialogues = {\n            \"A1\": {\n                instruction: \"Practice this simple conversation with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I want to learn about ${topic}.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `That's great! What do you already know about ${topic}?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"I know a little bit.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Let's explore ${topic} together.`\n                    }\n                ],\n                followUpQuestions: [\n                    `What interests you most about ${topic}?`,\n                    \"What would you like to know more about?\",\n                    \"How can this help you in daily life?\"\n                ]\n            },\n            \"A2\": {\n                instruction: \"Practice this conversation with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I've been reading about ${topic}. It's quite interesting.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What did you find most interesting about ${topic}?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"I learned some new things I didn't know before.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Can you share what you learned about ${topic}?`\n                    }\n                ],\n                followUpQuestions: [\n                    `How does ${topic} relate to your experience?`,\n                    \"What surprised you the most?\",\n                    \"Would you recommend this topic to others?\"\n                ]\n            },\n            \"B1\": {\n                instruction: \"Practice this discussion with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I've been thinking about ${topic} and its implications.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `That's a complex topic. What aspects of ${topic} interest you most?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"There are several factors to consider when discussing this.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Let's explore those factors. What do you think is most important about ${topic}?`\n                    }\n                ],\n                followUpQuestions: [\n                    `What are the advantages and disadvantages of ${topic}?`,\n                    \"How might this impact different groups of people?\",\n                    \"What solutions would you propose?\"\n                ]\n            },\n            \"B2\": {\n                instruction: \"Engage in this analytical discussion with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `The complexity of ${topic} requires careful analysis of multiple perspectives.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Excellent point. How do you think different stakeholders view ${topic}?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"Each perspective brings unique insights and challenges to consider.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What evidence supports your analysis of ${topic}?`\n                    }\n                ],\n                followUpQuestions: [\n                    `How do cultural differences influence perspectives on ${topic}?`,\n                    \"What long-term consequences should we consider?\",\n                    \"How would you evaluate the effectiveness of current approaches?\"\n                ]\n            },\n            \"C1\": {\n                instruction: \"Participate in this sophisticated discourse with your tutor:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `The nuanced nature of ${topic} demands a multifaceted approach to understanding.`\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Indeed. How do you reconcile the apparent contradictions within ${topic}?`\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"The paradoxes inherent in this subject reflect broader societal complexities.\"\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What theoretical frameworks best illuminate the intricacies of ${topic}?`\n                    }\n                ],\n                followUpQuestions: [\n                    `How do philosophical underpinnings shape our understanding of ${topic}?`,\n                    \"What paradigm shifts might be necessary for progress?\",\n                    \"How do you envision the evolution of thought regarding this matter?\"\n                ]\n            }\n        };\n        return levelDialogues[studentLevel] || levelDialogues[\"B1\"];\n    }\n    generateTemplateDialogueFillGap(topic, studentLevel, vocabularyWords) {\n        const levelGapDialogues = {\n            \"A1\": {\n                instruction: \"Fill in the gaps in this conversation:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I _____ to learn about ${topic}.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `That's great! What _____ you already know?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"I know _____ little bit.\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Let's _____ together.`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"want\",\n                    \"do\",\n                    \"a\",\n                    \"learn\"\n                ]\n            },\n            \"A2\": {\n                instruction: \"Complete this conversation with the missing words:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I've been _____ about ${topic}.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What did you _____ most interesting?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"I _____ some new things.\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `Can you _____ what you learned?`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"reading\",\n                    \"find\",\n                    \"learned\",\n                    \"share\"\n                ]\n            },\n            \"B1\": {\n                instruction: \"Fill in the blanks to complete this discussion:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `I've been _____ about ${topic} and its implications.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What _____ interest you most?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"There are several _____ to consider.\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What do you think is most _____ ?`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"thinking\",\n                    \"aspects\",\n                    \"factors\",\n                    \"important\"\n                ]\n            },\n            \"B2\": {\n                instruction: \"Complete this analytical discussion:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `The _____ of ${topic} requires careful analysis.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `How do different _____ view this topic?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"Each perspective brings unique _____ .\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What _____ supports your analysis?`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"complexity\",\n                    \"stakeholders\",\n                    \"insights\",\n                    \"evidence\"\n                ]\n            },\n            \"C1\": {\n                instruction: \"Fill in the sophisticated vocabulary:\",\n                dialogue: [\n                    {\n                        character: \"Student\",\n                        line: `The _____ nature of ${topic} demands a multifaceted approach.`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `How do you _____ the apparent contradictions?`,\n                        isGap: true\n                    },\n                    {\n                        character: \"Student\",\n                        line: \"The _____ reflect broader complexities.\",\n                        isGap: true\n                    },\n                    {\n                        character: \"Tutor\",\n                        line: `What theoretical _____ best illuminate this?`,\n                        isGap: true\n                    }\n                ],\n                answers: [\n                    \"nuanced\",\n                    \"reconcile\",\n                    \"paradoxes\",\n                    \"frameworks\"\n                ]\n            }\n        };\n        return levelGapDialogues[studentLevel] || levelGapDialogues[\"B1\"];\n    }\n    constructor(){\n        this.googleAI = null;\n        this.progressiveGenerator = null;\n    }\n}\nconst lessonAIServerGenerator = new LessonAIServerGenerator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/lesson-ai-generator-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/progressive-generator.ts":
/*!**************************************!*\
  !*** ./lib/progressive-generator.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProgressiveGeneratorImpl: () => (/* binding */ ProgressiveGeneratorImpl)\n/* harmony export */ });\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n\n// Implementation of Progressive Generator\nclass ProgressiveGeneratorImpl {\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_0__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    /**\r\n   * Build shared context that will be reused across all lesson sections\r\n   */ async buildSharedContext(sourceText, lessonType, studentLevel, targetLanguage) {\n        console.log(\"\\uD83C\\uDFD7️ Building shared context for progressive generation...\");\n        try {\n            // Extract key vocabulary using AI optimization\n            const keyVocabulary = await this.extractKeyVocabulary(sourceText, studentLevel);\n            // Extract main themes\n            const mainThemes = await this.extractMainThemes(sourceText, studentLevel);\n            // Create content summary\n            const contentSummary = await this.createContentSummary(sourceText, studentLevel);\n            const sharedContext = {\n                keyVocabulary,\n                mainThemes,\n                difficultyLevel: studentLevel,\n                contentSummary,\n                sourceText: sourceText.substring(0, 1000),\n                lessonType,\n                targetLanguage\n            };\n            console.log(\"✅ Shared context built:\", {\n                vocabularyCount: keyVocabulary.length,\n                themesCount: mainThemes.length,\n                summaryLength: contentSummary.length\n            });\n            return sharedContext;\n        } catch (error) {\n            console.error(\"❌ Failed to build shared context:\", error);\n            throw new Error(\"Failed to build shared context: \" + error.message);\n        }\n    }\n    /**\r\n   * Generate a specific lesson section using shared context\r\n   */ async generateSection(section, sharedContext, previousSections) {\n        console.log(`🎯 Generating section: ${section.name}`);\n        const startTime = Date.now();\n        let content;\n        let tokensUsed = 0;\n        let generationStrategy = \"progressive\";\n        try {\n            switch(section.name){\n                case \"warmup\":\n                    content = await this.generateWarmupWithContext(sharedContext, previousSections);\n                    break;\n                case \"vocabulary\":\n                    content = await this.generateVocabularyWithContext(sharedContext, previousSections);\n                    break;\n                case \"reading\":\n                    content = await this.generateReadingWithContext(sharedContext, previousSections);\n                    break;\n                case \"comprehension\":\n                    content = await this.generateComprehensionWithContext(sharedContext, previousSections);\n                    break;\n                case \"discussion\":\n                    content = await this.generateDiscussionWithContext(sharedContext, previousSections);\n                    break;\n                case \"grammar\":\n                    content = await this.generateGrammarWithContext(sharedContext, previousSections);\n                    break;\n                case \"pronunciation\":\n                    content = await this.generatePronunciationWithContext(sharedContext, previousSections);\n                    break;\n                case \"wrapup\":\n                    content = await this.generateWrapupWithContext(sharedContext, previousSections);\n                    break;\n                default:\n                    throw new Error(`Unknown section: ${section.name}`);\n            }\n            const generationTime = Date.now() - startTime;\n            console.log(`✅ Section ${section.name} generated in ${generationTime}ms`);\n            return {\n                sectionName: section.name,\n                content,\n                tokensUsed,\n                generationStrategy\n            };\n        } catch (error) {\n            console.error(`❌ Failed to generate section ${section.name}:`, error);\n            throw new Error(`Failed to generate ${section.name} section: ${error.message}`);\n        }\n    }\n    /**\r\n   * Update shared context with information from newly generated section\r\n   */ updateContext(context, newSection) {\n        console.log(`🔄 Updating context with ${newSection.sectionName} section`);\n        const updatedContext = {\n            ...context\n        };\n        // Update vocabulary if new words were introduced\n        if (newSection.sectionName === \"vocabulary\" && Array.isArray(newSection.content)) {\n            const newWords = newSection.content.filter((item)=>item.word && item.word !== \"INSTRUCTION\").map((item)=>item.word.toLowerCase());\n            updatedContext.keyVocabulary = [\n                ...new Set([\n                    ...updatedContext.keyVocabulary,\n                    ...newWords\n                ])\n            ];\n        }\n        // Update themes if new ones were identified\n        if (newSection.sectionName === \"reading\" && typeof newSection.content === \"string\") {\n            // Extract any new themes from the reading passage\n            const newThemes = this.extractThemesFromText(newSection.content);\n            updatedContext.mainThemes = [\n                ...new Set([\n                    ...updatedContext.mainThemes,\n                    ...newThemes\n                ])\n            ];\n        }\n        console.log(`✅ Context updated for ${newSection.sectionName}`);\n        return updatedContext;\n    }\n    // Private helper methods for extracting shared context\n    async extractKeyVocabulary(sourceText, studentLevel) {\n        const prompt = `Extract 8-12 key vocabulary words from this text for ${studentLevel} level students. Return only the words, one per line:\r\n\r\n${sourceText.substring(0, 500)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const words = response.split(\"\\n\").map((line)=>line.trim().toLowerCase()).filter((word)=>word.length > 2 && word.length < 20).slice(0, 12);\n            return words.length >= 6 ? words : this.extractVocabularyFallback(sourceText, studentLevel);\n        } catch (error) {\n            console.log(\"⚠️ AI vocabulary extraction failed, using fallback\");\n            return this.extractVocabularyFallback(sourceText, studentLevel);\n        }\n    }\n    async extractMainThemes(sourceText, studentLevel) {\n        const prompt = `Identify 3-5 main themes or topics in this text for ${studentLevel} level students. Return only the themes, one per line:\r\n\r\n${sourceText.substring(0, 400)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const themes = response.split(\"\\n\").map((line)=>line.trim().toLowerCase()).filter((theme)=>theme.length > 3 && theme.length < 50).slice(0, 5);\n            return themes.length >= 2 ? themes : this.extractThemesFallback(sourceText);\n        } catch (error) {\n            console.log(\"⚠️ AI theme extraction failed, using fallback\");\n            return this.extractThemesFallback(sourceText);\n        }\n    }\n    async createContentSummary(sourceText, studentLevel) {\n        const prompt = `Summarize this text in 2-3 sentences for ${studentLevel} level students:\r\n\r\n${sourceText.substring(0, 600)}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return response.trim().substring(0, 300);\n        } catch (error) {\n            console.log(\"⚠️ AI summary failed, using truncation\");\n            return sourceText.substring(0, 200) + \"...\";\n        }\n    }\n    // Section generation methods using shared context\n    async generateWarmupWithContext(context, previousSections) {\n        const mainTheme = context.mainThemes[0] || \"this topic\";\n        const prompt = `Create 3 ${context.difficultyLevel} warm-up questions about ${mainTheme}. \r\nContext: ${context.contentSummary}\r\nReturn only questions, one per line:`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 3);\n            if (questions.length < 3) {\n                throw new Error(\"Insufficient questions generated\");\n            }\n            const instruction = \"Have the following conversations or discussions with your tutor before reading the text:\";\n            return [\n                instruction,\n                ...questions\n            ];\n        } catch (error) {\n            throw new Error(\"Failed to generate warmup questions: \" + error.message);\n        }\n    }\n    async generateVocabularyWithContext(context, previousSections) {\n        const vocabulary = [];\n        for (const word of context.keyVocabulary.slice(0, 8)){\n            try {\n                const definitionPrompt = `Define \"${word}\" simply for ${context.difficultyLevel} level. Context: ${context.contentSummary}. Give only the definition:`;\n                const meaning = await this.getGoogleAI().prompt(definitionPrompt);\n                const examplePrompt = `Create a simple example sentence using \"${word}\" for ${context.difficultyLevel} level students:`;\n                const example = await this.getGoogleAI().prompt(examplePrompt);\n                vocabulary.push({\n                    word: this.capitalizeWord(word),\n                    meaning: meaning.trim().substring(0, 150),\n                    example: example.trim().substring(0, 100)\n                });\n            } catch (error) {\n                console.log(`⚠️ Failed to generate vocabulary for ${word}`);\n            }\n        }\n        const instruction = {\n            word: \"INSTRUCTION\",\n            meaning: \"Study the following words with your tutor before reading the text:\",\n            example: \"\"\n        };\n        return [\n            instruction,\n            ...vocabulary\n        ];\n    }\n    async generateReadingWithContext(context, previousSections) {\n        // Use vocabulary from previous sections if available\n        const vocabularySection = previousSections.find((s)=>s.sectionName === \"vocabulary\");\n        const vocabularyWords = vocabularySection ? vocabularySection.content.filter((item)=>item.word !== \"INSTRUCTION\").map((item)=>item.word).slice(0, 5) : context.keyVocabulary.slice(0, 5);\n        const prompt = `Rewrite this text for ${context.difficultyLevel} level students. \r\nUse these vocabulary words: ${vocabularyWords.join(\", \")}\r\nKeep it 200-400 words:\r\n\r\n${context.sourceText}`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const instruction = \"Read the following text carefully. Your tutor will help you with any difficult words or concepts:\";\n            return `${instruction}\\n\\n${response.trim()}`;\n        } catch (error) {\n            throw new Error(\"Failed to generate reading passage: \" + error.message);\n        }\n    }\n    async generateComprehensionWithContext(context, previousSections) {\n        const prompt = `Create 5 ${context.difficultyLevel} comprehension questions about this content:\r\n${context.contentSummary}\r\nReturn only questions, one per line:`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 5);\n            if (questions.length < 5) {\n                throw new Error(\"Insufficient comprehension questions generated\");\n            }\n            const instruction = \"After reading the text, answer these comprehension questions:\";\n            return [\n                instruction,\n                ...questions\n            ];\n        } catch (error) {\n            throw new Error(\"Failed to generate comprehension questions: \" + error.message);\n        }\n    }\n    async generateDiscussionWithContext(context, previousSections) {\n        const themes = context.mainThemes.slice(0, 2).join(\" and \");\n        const prompt = `Create 3 ${context.difficultyLevel} discussion questions about ${themes}.\r\nContext: ${context.contentSummary}\r\nReturn only questions, one per line:`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 3);\n            if (questions.length < 3) {\n                throw new Error(\"Insufficient discussion questions generated\");\n            }\n            const instruction = \"Discuss these questions with your tutor to explore the topic in depth:\";\n            return [\n                instruction,\n                ...questions\n            ];\n        } catch (error) {\n            throw new Error(\"Failed to generate discussion questions: \" + error.message);\n        }\n    }\n    async generateGrammarWithContext(context, previousSections) {\n        const prompt = `Create a grammar lesson for ${context.difficultyLevel} level based on this content:\r\n${context.contentSummary}\r\n\r\nReturn JSON with: focus (grammar point), examples (3 examples), exercise (3 practice sentences)`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return JSON.parse(response);\n        } catch (error) {\n            // Fallback grammar structure\n            return {\n                focus: \"Present Simple Tense\",\n                examples: [\n                    \"I read the news every day.\",\n                    \"She works in an office.\",\n                    \"They play sports on weekends.\"\n                ],\n                exercise: [\n                    \"Complete: He _____ (work) in London.\",\n                    \"Complete: We _____ (study) English.\",\n                    \"Complete: She _____ (like) coffee.\"\n                ]\n            };\n        }\n    }\n    async generatePronunciationWithContext(context, previousSections) {\n        const word = context.keyVocabulary[0] || \"communication\";\n        const prompt = `Create pronunciation practice for \"${word}\". \r\nReturn JSON with: word, ipa (phonetic transcription), practice (pronunciation tip)`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            return JSON.parse(response);\n        } catch (error) {\n            // Fallback pronunciation structure\n            return {\n                word: word,\n                ipa: `/kəˌmjuːnɪˈkeɪʃən/`,\n                practice: `Break it down: com-mu-ni-ca-tion. Stress on the 4th syllable: ca-TION.`\n            };\n        }\n    }\n    async generateWrapupWithContext(context, previousSections) {\n        const prompt = `Create 3 ${context.difficultyLevel} wrap-up questions about this lesson:\r\n${context.contentSummary}\r\nReturn only questions, one per line:`;\n        try {\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.endsWith(\"?\") && line.length > 10).slice(0, 3);\n            if (questions.length < 3) {\n                throw new Error(\"Insufficient wrapup questions generated\");\n            }\n            const instruction = \"Reflect on your learning by discussing these wrap-up questions:\";\n            return [\n                instruction,\n                ...questions\n            ];\n        } catch (error) {\n            throw new Error(\"Failed to generate wrapup questions: \" + error.message);\n        }\n    }\n    // Fallback methods for when AI extraction fails\n    extractVocabularyFallback(sourceText, studentLevel) {\n        const words = sourceText.toLowerCase().match(/\\b[a-z]{4,12}\\b/g) || [];\n        const commonWords = [\n            \"the\",\n            \"and\",\n            \"that\",\n            \"have\",\n            \"for\",\n            \"not\",\n            \"with\",\n            \"you\",\n            \"this\",\n            \"but\",\n            \"his\",\n            \"from\",\n            \"they\"\n        ];\n        const filteredWords = words.filter((word)=>!commonWords.includes(word)).filter((word, index, arr)=>arr.indexOf(word) === index).slice(0, 8);\n        return filteredWords.length >= 4 ? filteredWords : [\n            \"communication\",\n            \"important\",\n            \"different\",\n            \"example\",\n            \"information\",\n            \"situation\"\n        ];\n    }\n    extractThemesFallback(sourceText) {\n        const text = sourceText.toLowerCase();\n        const themes = [];\n        // Look for common themes\n        if (text.includes(\"sport\") || text.includes(\"game\") || text.includes(\"team\")) themes.push(\"sports\");\n        if (text.includes(\"business\") || text.includes(\"company\") || text.includes(\"work\")) themes.push(\"business\");\n        if (text.includes(\"travel\") || text.includes(\"country\") || text.includes(\"culture\")) themes.push(\"travel\");\n        if (text.includes(\"technology\") || text.includes(\"computer\") || text.includes(\"internet\")) themes.push(\"technology\");\n        if (text.includes(\"health\") || text.includes(\"medical\") || text.includes(\"doctor\")) themes.push(\"health\");\n        return themes.length > 0 ? themes : [\n            \"general topic\",\n            \"communication\",\n            \"daily life\"\n        ];\n    }\n    extractThemesFromText(text) {\n        return this.extractThemesFallback(text);\n    }\n    capitalizeWord(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }\n    constructor(){\n        this.googleAI = null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLGNBQWNJLEtBQUtKLFFBQVEsQ0FBQyxXQUFXN0IsT0FBT1ksSUFBSSxDQUFDO1FBRWhHLE9BQU9aLE9BQU9qRCxNQUFNLEdBQUcsSUFBSWlELFNBQVM7WUFBQztZQUFpQjtZQUFpQjtTQUFhO0lBQ3RGO0lBRVFULHNCQUFzQjBDLElBQVksRUFBWTtRQUNwRCxPQUFPLElBQUksQ0FBQy9CLHFCQUFxQixDQUFDK0I7SUFDcEM7SUFFUXBCLGVBQWUzQixJQUFZLEVBQVU7UUFDM0MsT0FBT0EsS0FBS2dELE1BQU0sQ0FBQyxHQUFHQyxXQUFXLEtBQUtqRCxLQUFLWSxLQUFLLENBQUMsR0FBR1YsV0FBVztJQUNqRTs7YUEzY1F2RCxXQUFrRTs7QUE0YzVFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL2xpYi9wcm9ncmVzc2l2ZS1nZW5lcmF0b3IudHM/ZTk2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVHb29nbGVBSVNlcnZlclNlcnZpY2UgfSBmcm9tIFwiLi9nb29nbGUtYWktc2VydmVyXCJcclxuXHJcbi8vIFR5cGVzIGZvciBwcm9ncmVzc2l2ZSBnZW5lcmF0aW9uXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2hhcmVkQ29udGV4dCB7XHJcbiAga2V5Vm9jYWJ1bGFyeTogc3RyaW5nW11cclxuICBtYWluVGhlbWVzOiBzdHJpbmdbXVxyXG4gIGRpZmZpY3VsdHlMZXZlbDogQ0VGUkxldmVsXHJcbiAgY29udGVudFN1bW1hcnk6IHN0cmluZ1xyXG4gIHNvdXJjZVRleHQ6IHN0cmluZ1xyXG4gIGxlc3NvblR5cGU6IHN0cmluZ1xyXG4gIHRhcmdldExhbmd1YWdlOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmF0ZWRTZWN0aW9uIHtcclxuICBzZWN0aW9uTmFtZTogc3RyaW5nXHJcbiAgY29udGVudDogYW55XHJcbiAgdG9rZW5zVXNlZDogbnVtYmVyXHJcbiAgZ2VuZXJhdGlvblN0cmF0ZWd5OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMZXNzb25TZWN0aW9uIHtcclxuICBuYW1lOiBzdHJpbmdcclxuICBwcmlvcml0eTogbnVtYmVyXHJcbiAgZGVwZW5kZW5jaWVzOiBzdHJpbmdbXVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBDRUZSTGV2ZWwgPSAnQTEnIHwgJ0EyJyB8ICdCMScgfCAnQjInIHwgJ0MxJ1xyXG5cclxuLy8gUHJvZ3Jlc3NpdmUgR2VuZXJhdG9yIEludGVyZmFjZVxyXG5leHBvcnQgaW50ZXJmYWNlIFByb2dyZXNzaXZlR2VuZXJhdG9yIHtcclxuICBnZW5lcmF0ZVNlY3Rpb24oXHJcbiAgICBzZWN0aW9uOiBMZXNzb25TZWN0aW9uLFxyXG4gICAgc2hhcmVkQ29udGV4dDogU2hhcmVkQ29udGV4dCxcclxuICAgIHByZXZpb3VzU2VjdGlvbnM6IEdlbmVyYXRlZFNlY3Rpb25bXVxyXG4gICk6IFByb21pc2U8R2VuZXJhdGVkU2VjdGlvbj5cclxuICBcclxuICBidWlsZFNoYXJlZENvbnRleHQoXHJcbiAgICBzb3VyY2VUZXh0OiBzdHJpbmcsXHJcbiAgICBsZXNzb25UeXBlOiBzdHJpbmcsXHJcbiAgICBzdHVkZW50TGV2ZWw6IENFRlJMZXZlbCxcclxuICAgIHRhcmdldExhbmd1YWdlOiBzdHJpbmdcclxuICApOiBQcm9taXNlPFNoYXJlZENvbnRleHQ+XHJcbiAgXHJcbiAgdXBkYXRlQ29udGV4dChcclxuICAgIGNvbnRleHQ6IFNoYXJlZENvbnRleHQsXHJcbiAgICBuZXdTZWN0aW9uOiBHZW5lcmF0ZWRTZWN0aW9uXHJcbiAgKTogU2hhcmVkQ29udGV4dFxyXG59XHJcblxyXG4vLyBJbXBsZW1lbnRhdGlvbiBvZiBQcm9ncmVzc2l2ZSBHZW5lcmF0b3JcclxuZXhwb3J0IGNsYXNzIFByb2dyZXNzaXZlR2VuZXJhdG9ySW1wbCBpbXBsZW1lbnRzIFByb2dyZXNzaXZlR2VuZXJhdG9yIHtcclxuICBwcml2YXRlIGdvb2dsZUFJOiBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVHb29nbGVBSVNlcnZlclNlcnZpY2U+IHwgbnVsbCA9IG51bGxcclxuXHJcbiAgcHJpdmF0ZSBnZXRHb29nbGVBSSgpIHtcclxuICAgIGlmICghdGhpcy5nb29nbGVBSSkge1xyXG4gICAgICB0aGlzLmdvb2dsZUFJID0gY3JlYXRlR29vZ2xlQUlTZXJ2ZXJTZXJ2aWNlKClcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmdvb2dsZUFJXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBCdWlsZCBzaGFyZWQgY29udGV4dCB0aGF0IHdpbGwgYmUgcmV1c2VkIGFjcm9zcyBhbGwgbGVzc29uIHNlY3Rpb25zXHJcbiAgICovXHJcbiAgYXN5bmMgYnVpbGRTaGFyZWRDb250ZXh0KFxyXG4gICAgc291cmNlVGV4dDogc3RyaW5nLFxyXG4gICAgbGVzc29uVHlwZTogc3RyaW5nLFxyXG4gICAgc3R1ZGVudExldmVsOiBDRUZSTGV2ZWwsXHJcbiAgICB0YXJnZXRMYW5ndWFnZTogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxTaGFyZWRDb250ZXh0PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIvCfj5fvuI8gQnVpbGRpbmcgc2hhcmVkIGNvbnRleHQgZm9yIHByb2dyZXNzaXZlIGdlbmVyYXRpb24uLi5cIilcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBFeHRyYWN0IGtleSB2b2NhYnVsYXJ5IHVzaW5nIEFJIG9wdGltaXphdGlvblxyXG4gICAgICBjb25zdCBrZXlWb2NhYnVsYXJ5ID0gYXdhaXQgdGhpcy5leHRyYWN0S2V5Vm9jYWJ1bGFyeShzb3VyY2VUZXh0LCBzdHVkZW50TGV2ZWwpXHJcbiAgICAgIFxyXG4gICAgICAvLyBFeHRyYWN0IG1haW4gdGhlbWVzXHJcbiAgICAgIGNvbnN0IG1haW5UaGVtZXMgPSBhd2FpdCB0aGlzLmV4dHJhY3RNYWluVGhlbWVzKHNvdXJjZVRleHQsIHN0dWRlbnRMZXZlbClcclxuICAgICAgXHJcbiAgICAgIC8vIENyZWF0ZSBjb250ZW50IHN1bW1hcnlcclxuICAgICAgY29uc3QgY29udGVudFN1bW1hcnkgPSBhd2FpdCB0aGlzLmNyZWF0ZUNvbnRlbnRTdW1tYXJ5KHNvdXJjZVRleHQsIHN0dWRlbnRMZXZlbClcclxuXHJcbiAgICAgIGNvbnN0IHNoYXJlZENvbnRleHQ6IFNoYXJlZENvbnRleHQgPSB7XHJcbiAgICAgICAga2V5Vm9jYWJ1bGFyeSxcclxuICAgICAgICBtYWluVGhlbWVzLFxyXG4gICAgICAgIGRpZmZpY3VsdHlMZXZlbDogc3R1ZGVudExldmVsLFxyXG4gICAgICAgIGNvbnRlbnRTdW1tYXJ5LFxyXG4gICAgICAgIHNvdXJjZVRleHQ6IHNvdXJjZVRleHQuc3Vic3RyaW5nKDAsIDEwMDApLCAvLyBMaW1pdCBmb3IgdG9rZW4gb3B0aW1pemF0aW9uXHJcbiAgICAgICAgbGVzc29uVHlwZSxcclxuICAgICAgICB0YXJnZXRMYW5ndWFnZVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhcIuKchSBTaGFyZWQgY29udGV4dCBidWlsdDpcIiwge1xyXG4gICAgICAgIHZvY2FidWxhcnlDb3VudDoga2V5Vm9jYWJ1bGFyeS5sZW5ndGgsXHJcbiAgICAgICAgdGhlbWVzQ291bnQ6IG1haW5UaGVtZXMubGVuZ3RoLFxyXG4gICAgICAgIHN1bW1hcnlMZW5ndGg6IGNvbnRlbnRTdW1tYXJ5Lmxlbmd0aFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgcmV0dXJuIHNoYXJlZENvbnRleHRcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgRmFpbGVkIHRvIGJ1aWxkIHNoYXJlZCBjb250ZXh0OlwiLCBlcnJvcilcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGJ1aWxkIHNoYXJlZCBjb250ZXh0OiBcIiArIGVycm9yLm1lc3NhZ2UpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZSBhIHNwZWNpZmljIGxlc3NvbiBzZWN0aW9uIHVzaW5nIHNoYXJlZCBjb250ZXh0XHJcbiAgICovXHJcbiAgYXN5bmMgZ2VuZXJhdGVTZWN0aW9uKFxyXG4gICAgc2VjdGlvbjogTGVzc29uU2VjdGlvbixcclxuICAgIHNoYXJlZENvbnRleHQ6IFNoYXJlZENvbnRleHQsXHJcbiAgICBwcmV2aW91c1NlY3Rpb25zOiBHZW5lcmF0ZWRTZWN0aW9uW11cclxuICApOiBQcm9taXNlPEdlbmVyYXRlZFNlY3Rpb24+IHtcclxuICAgIGNvbnNvbGUubG9nKGDwn46vIEdlbmVyYXRpbmcgc2VjdGlvbjogJHtzZWN0aW9uLm5hbWV9YClcclxuXHJcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXHJcbiAgICBsZXQgY29udGVudDogYW55XHJcbiAgICBsZXQgdG9rZW5zVXNlZCA9IDBcclxuICAgIGxldCBnZW5lcmF0aW9uU3RyYXRlZ3kgPSAncHJvZ3Jlc3NpdmUnXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgc3dpdGNoIChzZWN0aW9uLm5hbWUpIHtcclxuICAgICAgICBjYXNlICd3YXJtdXAnOlxyXG4gICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVXYXJtdXBXaXRoQ29udGV4dChzaGFyZWRDb250ZXh0LCBwcmV2aW91c1NlY3Rpb25zKVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlICd2b2NhYnVsYXJ5JzpcclxuICAgICAgICAgIGNvbnRlbnQgPSBhd2FpdCB0aGlzLmdlbmVyYXRlVm9jYWJ1bGFyeVdpdGhDb250ZXh0KHNoYXJlZENvbnRleHQsIHByZXZpb3VzU2VjdGlvbnMpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIGNhc2UgJ3JlYWRpbmcnOlxyXG4gICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVSZWFkaW5nV2l0aENvbnRleHQoc2hhcmVkQ29udGV4dCwgcHJldmlvdXNTZWN0aW9ucylcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAnY29tcHJlaGVuc2lvbic6XHJcbiAgICAgICAgICBjb250ZW50ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZUNvbXByZWhlbnNpb25XaXRoQ29udGV4dChzaGFyZWRDb250ZXh0LCBwcmV2aW91c1NlY3Rpb25zKVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlICdkaXNjdXNzaW9uJzpcclxuICAgICAgICAgIGNvbnRlbnQgPSBhd2FpdCB0aGlzLmdlbmVyYXRlRGlzY3Vzc2lvbldpdGhDb250ZXh0KHNoYXJlZENvbnRleHQsIHByZXZpb3VzU2VjdGlvbnMpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIGNhc2UgJ2dyYW1tYXInOlxyXG4gICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVHcmFtbWFyV2l0aENvbnRleHQoc2hhcmVkQ29udGV4dCwgcHJldmlvdXNTZWN0aW9ucylcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAncHJvbnVuY2lhdGlvbic6XHJcbiAgICAgICAgICBjb250ZW50ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVByb251bmNpYXRpb25XaXRoQ29udGV4dChzaGFyZWRDb250ZXh0LCBwcmV2aW91c1NlY3Rpb25zKVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlICd3cmFwdXAnOlxyXG4gICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVXcmFwdXBXaXRoQ29udGV4dChzaGFyZWRDb250ZXh0LCBwcmV2aW91c1NlY3Rpb25zKVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHNlY3Rpb246ICR7c2VjdGlvbi5uYW1lfWApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGdlbmVyYXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxyXG4gICAgICBjb25zb2xlLmxvZyhg4pyFIFNlY3Rpb24gJHtzZWN0aW9uLm5hbWV9IGdlbmVyYXRlZCBpbiAke2dlbmVyYXRpb25UaW1lfW1zYClcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc2VjdGlvbk5hbWU6IHNlY3Rpb24ubmFtZSxcclxuICAgICAgICBjb250ZW50LFxyXG4gICAgICAgIHRva2Vuc1VzZWQsXHJcbiAgICAgICAgZ2VuZXJhdGlvblN0cmF0ZWd5XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBGYWlsZWQgdG8gZ2VuZXJhdGUgc2VjdGlvbiAke3NlY3Rpb24ubmFtZX06YCwgZXJyb3IpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdlbmVyYXRlICR7c2VjdGlvbi5uYW1lfSBzZWN0aW9uOiAke2Vycm9yLm1lc3NhZ2V9YClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSBzaGFyZWQgY29udGV4dCB3aXRoIGluZm9ybWF0aW9uIGZyb20gbmV3bHkgZ2VuZXJhdGVkIHNlY3Rpb25cclxuICAgKi9cclxuICB1cGRhdGVDb250ZXh0KFxyXG4gICAgY29udGV4dDogU2hhcmVkQ29udGV4dCxcclxuICAgIG5ld1NlY3Rpb246IEdlbmVyYXRlZFNlY3Rpb25cclxuICApOiBTaGFyZWRDb250ZXh0IHtcclxuICAgIGNvbnNvbGUubG9nKGDwn5SEIFVwZGF0aW5nIGNvbnRleHQgd2l0aCAke25ld1NlY3Rpb24uc2VjdGlvbk5hbWV9IHNlY3Rpb25gKVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWRDb250ZXh0ID0geyAuLi5jb250ZXh0IH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdm9jYWJ1bGFyeSBpZiBuZXcgd29yZHMgd2VyZSBpbnRyb2R1Y2VkXHJcbiAgICBpZiAobmV3U2VjdGlvbi5zZWN0aW9uTmFtZSA9PT0gJ3ZvY2FidWxhcnknICYmIEFycmF5LmlzQXJyYXkobmV3U2VjdGlvbi5jb250ZW50KSkge1xyXG4gICAgICBjb25zdCBuZXdXb3JkcyA9IG5ld1NlY3Rpb24uY29udGVudFxyXG4gICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLndvcmQgJiYgaXRlbS53b3JkICE9PSAnSU5TVFJVQ1RJT04nKVxyXG4gICAgICAgIC5tYXAoaXRlbSA9PiBpdGVtLndvcmQudG9Mb3dlckNhc2UoKSlcclxuICAgICAgXHJcbiAgICAgIHVwZGF0ZWRDb250ZXh0LmtleVZvY2FidWxhcnkgPSBbXHJcbiAgICAgICAgLi4ubmV3IFNldChbLi4udXBkYXRlZENvbnRleHQua2V5Vm9jYWJ1bGFyeSwgLi4ubmV3V29yZHNdKVxyXG4gICAgICBdXHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZW1lcyBpZiBuZXcgb25lcyB3ZXJlIGlkZW50aWZpZWRcclxuICAgIGlmIChuZXdTZWN0aW9uLnNlY3Rpb25OYW1lID09PSAncmVhZGluZycgJiYgdHlwZW9mIG5ld1NlY3Rpb24uY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgLy8gRXh0cmFjdCBhbnkgbmV3IHRoZW1lcyBmcm9tIHRoZSByZWFkaW5nIHBhc3NhZ2VcclxuICAgICAgY29uc3QgbmV3VGhlbWVzID0gdGhpcy5leHRyYWN0VGhlbWVzRnJvbVRleHQobmV3U2VjdGlvbi5jb250ZW50KVxyXG4gICAgICB1cGRhdGVkQ29udGV4dC5tYWluVGhlbWVzID0gW1xyXG4gICAgICAgIC4uLm5ldyBTZXQoWy4uLnVwZGF0ZWRDb250ZXh0Lm1haW5UaGVtZXMsIC4uLm5ld1RoZW1lc10pXHJcbiAgICAgIF1cclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIENvbnRleHQgdXBkYXRlZCBmb3IgJHtuZXdTZWN0aW9uLnNlY3Rpb25OYW1lfWApXHJcbiAgICByZXR1cm4gdXBkYXRlZENvbnRleHRcclxuICB9XHJcblxyXG4gIC8vIFByaXZhdGUgaGVscGVyIG1ldGhvZHMgZm9yIGV4dHJhY3Rpbmcgc2hhcmVkIGNvbnRleHRcclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBleHRyYWN0S2V5Vm9jYWJ1bGFyeShzb3VyY2VUZXh0OiBzdHJpbmcsIHN0dWRlbnRMZXZlbDogQ0VGUkxldmVsKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgY29uc3QgcHJvbXB0ID0gYEV4dHJhY3QgOC0xMiBrZXkgdm9jYWJ1bGFyeSB3b3JkcyBmcm9tIHRoaXMgdGV4dCBmb3IgJHtzdHVkZW50TGV2ZWx9IGxldmVsIHN0dWRlbnRzLiBSZXR1cm4gb25seSB0aGUgd29yZHMsIG9uZSBwZXIgbGluZTpcclxuXHJcbiR7c291cmNlVGV4dC5zdWJzdHJpbmcoMCwgNTAwKX1gXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucHJvbXB0KHByb21wdClcclxuICAgICAgY29uc3Qgd29yZHMgPSByZXNwb25zZS5zcGxpdCgnXFxuJylcclxuICAgICAgICAubWFwKGxpbmUgPT4gbGluZS50cmltKCkudG9Mb3dlckNhc2UoKSlcclxuICAgICAgICAuZmlsdGVyKHdvcmQgPT4gd29yZC5sZW5ndGggPiAyICYmIHdvcmQubGVuZ3RoIDwgMjApXHJcbiAgICAgICAgLnNsaWNlKDAsIDEyKVxyXG5cclxuICAgICAgcmV0dXJuIHdvcmRzLmxlbmd0aCA+PSA2ID8gd29yZHMgOiB0aGlzLmV4dHJhY3RWb2NhYnVsYXJ5RmFsbGJhY2soc291cmNlVGV4dCwgc3R1ZGVudExldmVsKVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5sb2coXCLimqDvuI8gQUkgdm9jYWJ1bGFyeSBleHRyYWN0aW9uIGZhaWxlZCwgdXNpbmcgZmFsbGJhY2tcIilcclxuICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdFZvY2FidWxhcnlGYWxsYmFjayhzb3VyY2VUZXh0LCBzdHVkZW50TGV2ZWwpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGV4dHJhY3RNYWluVGhlbWVzKHNvdXJjZVRleHQ6IHN0cmluZywgc3R1ZGVudExldmVsOiBDRUZSTGV2ZWwpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICBjb25zdCBwcm9tcHQgPSBgSWRlbnRpZnkgMy01IG1haW4gdGhlbWVzIG9yIHRvcGljcyBpbiB0aGlzIHRleHQgZm9yICR7c3R1ZGVudExldmVsfSBsZXZlbCBzdHVkZW50cy4gUmV0dXJuIG9ubHkgdGhlIHRoZW1lcywgb25lIHBlciBsaW5lOlxyXG5cclxuJHtzb3VyY2VUZXh0LnN1YnN0cmluZygwLCA0MDApfWBcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS5wcm9tcHQocHJvbXB0KVxyXG4gICAgICBjb25zdCB0aGVtZXMgPSByZXNwb25zZS5zcGxpdCgnXFxuJylcclxuICAgICAgICAubWFwKGxpbmUgPT4gbGluZS50cmltKCkudG9Mb3dlckNhc2UoKSlcclxuICAgICAgICAuZmlsdGVyKHRoZW1lID0+IHRoZW1lLmxlbmd0aCA+IDMgJiYgdGhlbWUubGVuZ3RoIDwgNTApXHJcbiAgICAgICAgLnNsaWNlKDAsIDUpXHJcblxyXG4gICAgICByZXR1cm4gdGhlbWVzLmxlbmd0aCA+PSAyID8gdGhlbWVzIDogdGhpcy5leHRyYWN0VGhlbWVzRmFsbGJhY2soc291cmNlVGV4dClcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi4pqg77iPIEFJIHRoZW1lIGV4dHJhY3Rpb24gZmFpbGVkLCB1c2luZyBmYWxsYmFja1wiKVxyXG4gICAgICByZXR1cm4gdGhpcy5leHRyYWN0VGhlbWVzRmFsbGJhY2soc291cmNlVGV4dClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlQ29udGVudFN1bW1hcnkoc291cmNlVGV4dDogc3RyaW5nLCBzdHVkZW50TGV2ZWw6IENFRlJMZXZlbCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICBjb25zdCBwcm9tcHQgPSBgU3VtbWFyaXplIHRoaXMgdGV4dCBpbiAyLTMgc2VudGVuY2VzIGZvciAke3N0dWRlbnRMZXZlbH0gbGV2ZWwgc3R1ZGVudHM6XHJcblxyXG4ke3NvdXJjZVRleHQuc3Vic3RyaW5nKDAsIDYwMCl9YFxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXRHb29nbGVBSSgpLnByb21wdChwcm9tcHQpXHJcbiAgICAgIHJldHVybiByZXNwb25zZS50cmltKCkuc3Vic3RyaW5nKDAsIDMwMClcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi4pqg77iPIEFJIHN1bW1hcnkgZmFpbGVkLCB1c2luZyB0cnVuY2F0aW9uXCIpXHJcbiAgICAgIHJldHVybiBzb3VyY2VUZXh0LnN1YnN0cmluZygwLCAyMDApICsgXCIuLi5cIlxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU2VjdGlvbiBnZW5lcmF0aW9uIG1ldGhvZHMgdXNpbmcgc2hhcmVkIGNvbnRleHRcclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZVdhcm11cFdpdGhDb250ZXh0KFxyXG4gICAgY29udGV4dDogU2hhcmVkQ29udGV4dCxcclxuICAgIHByZXZpb3VzU2VjdGlvbnM6IEdlbmVyYXRlZFNlY3Rpb25bXVxyXG4gICk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIGNvbnN0IG1haW5UaGVtZSA9IGNvbnRleHQubWFpblRoZW1lc1swXSB8fCAndGhpcyB0b3BpYydcclxuICAgIFxyXG4gICAgY29uc3QgcHJvbXB0ID0gYENyZWF0ZSAzICR7Y29udGV4dC5kaWZmaWN1bHR5TGV2ZWx9IHdhcm0tdXAgcXVlc3Rpb25zIGFib3V0ICR7bWFpblRoZW1lfS4gXHJcbkNvbnRleHQ6ICR7Y29udGV4dC5jb250ZW50U3VtbWFyeX1cclxuUmV0dXJuIG9ubHkgcXVlc3Rpb25zLCBvbmUgcGVyIGxpbmU6YFxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXRHb29nbGVBSSgpLnByb21wdChwcm9tcHQpXHJcbiAgICAgIGNvbnN0IHF1ZXN0aW9ucyA9IHJlc3BvbnNlLnNwbGl0KCdcXG4nKVxyXG4gICAgICAgIC5tYXAobGluZSA9PiBsaW5lLnRyaW0oKSlcclxuICAgICAgICAuZmlsdGVyKGxpbmUgPT4gbGluZS5lbmRzV2l0aCgnPycpICYmIGxpbmUubGVuZ3RoID4gMTApXHJcbiAgICAgICAgLnNsaWNlKDAsIDMpXHJcblxyXG4gICAgICBpZiAocXVlc3Rpb25zLmxlbmd0aCA8IDMpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnN1ZmZpY2llbnQgcXVlc3Rpb25zIGdlbmVyYXRlZFwiKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBpbnN0cnVjdGlvbiA9IFwiSGF2ZSB0aGUgZm9sbG93aW5nIGNvbnZlcnNhdGlvbnMgb3IgZGlzY3Vzc2lvbnMgd2l0aCB5b3VyIHR1dG9yIGJlZm9yZSByZWFkaW5nIHRoZSB0ZXh0OlwiXHJcbiAgICAgIHJldHVybiBbaW5zdHJ1Y3Rpb24sIC4uLnF1ZXN0aW9uc11cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZW5lcmF0ZSB3YXJtdXAgcXVlc3Rpb25zOiBcIiArIGVycm9yLm1lc3NhZ2UpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlVm9jYWJ1bGFyeVdpdGhDb250ZXh0KFxyXG4gICAgY29udGV4dDogU2hhcmVkQ29udGV4dCxcclxuICAgIHByZXZpb3VzU2VjdGlvbnM6IEdlbmVyYXRlZFNlY3Rpb25bXVxyXG4gICk6IFByb21pc2U8QXJyYXk8eyB3b3JkOiBzdHJpbmcsIG1lYW5pbmc6IHN0cmluZywgZXhhbXBsZTogc3RyaW5nIH0+PiB7XHJcbiAgICBjb25zdCB2b2NhYnVsYXJ5ID0gW11cclxuICAgIFxyXG4gICAgZm9yIChjb25zdCB3b3JkIG9mIGNvbnRleHQua2V5Vm9jYWJ1bGFyeS5zbGljZSgwLCA4KSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25Qcm9tcHQgPSBgRGVmaW5lIFwiJHt3b3JkfVwiIHNpbXBseSBmb3IgJHtjb250ZXh0LmRpZmZpY3VsdHlMZXZlbH0gbGV2ZWwuIENvbnRleHQ6ICR7Y29udGV4dC5jb250ZW50U3VtbWFyeX0uIEdpdmUgb25seSB0aGUgZGVmaW5pdGlvbjpgXHJcbiAgICAgICAgY29uc3QgbWVhbmluZyA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS5wcm9tcHQoZGVmaW5pdGlvblByb21wdClcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBleGFtcGxlUHJvbXB0ID0gYENyZWF0ZSBhIHNpbXBsZSBleGFtcGxlIHNlbnRlbmNlIHVzaW5nIFwiJHt3b3JkfVwiIGZvciAke2NvbnRleHQuZGlmZmljdWx0eUxldmVsfSBsZXZlbCBzdHVkZW50czpgXHJcbiAgICAgICAgY29uc3QgZXhhbXBsZSA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS5wcm9tcHQoZXhhbXBsZVByb21wdClcclxuXHJcbiAgICAgICAgdm9jYWJ1bGFyeS5wdXNoKHtcclxuICAgICAgICAgIHdvcmQ6IHRoaXMuY2FwaXRhbGl6ZVdvcmQod29yZCksXHJcbiAgICAgICAgICBtZWFuaW5nOiBtZWFuaW5nLnRyaW0oKS5zdWJzdHJpbmcoMCwgMTUwKSxcclxuICAgICAgICAgIGV4YW1wbGU6IGV4YW1wbGUudHJpbSgpLnN1YnN0cmluZygwLCAxMDApXHJcbiAgICAgICAgfSlcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhg4pqg77iPIEZhaWxlZCB0byBnZW5lcmF0ZSB2b2NhYnVsYXJ5IGZvciAke3dvcmR9YClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluc3RydWN0aW9uID0ge1xyXG4gICAgICB3b3JkOiBcIklOU1RSVUNUSU9OXCIsXHJcbiAgICAgIG1lYW5pbmc6IFwiU3R1ZHkgdGhlIGZvbGxvd2luZyB3b3JkcyB3aXRoIHlvdXIgdHV0b3IgYmVmb3JlIHJlYWRpbmcgdGhlIHRleHQ6XCIsXHJcbiAgICAgIGV4YW1wbGU6IFwiXCJcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW2luc3RydWN0aW9uLCAuLi52b2NhYnVsYXJ5XVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZVJlYWRpbmdXaXRoQ29udGV4dChcclxuICAgIGNvbnRleHQ6IFNoYXJlZENvbnRleHQsXHJcbiAgICBwcmV2aW91c1NlY3Rpb25zOiBHZW5lcmF0ZWRTZWN0aW9uW11cclxuICApOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgLy8gVXNlIHZvY2FidWxhcnkgZnJvbSBwcmV2aW91cyBzZWN0aW9ucyBpZiBhdmFpbGFibGVcclxuICAgIGNvbnN0IHZvY2FidWxhcnlTZWN0aW9uID0gcHJldmlvdXNTZWN0aW9ucy5maW5kKHMgPT4gcy5zZWN0aW9uTmFtZSA9PT0gJ3ZvY2FidWxhcnknKVxyXG4gICAgY29uc3Qgdm9jYWJ1bGFyeVdvcmRzID0gdm9jYWJ1bGFyeVNlY3Rpb24gPyBcclxuICAgICAgdm9jYWJ1bGFyeVNlY3Rpb24uY29udGVudFxyXG4gICAgICAgIC5maWx0ZXIoKGl0ZW06IGFueSkgPT4gaXRlbS53b3JkICE9PSAnSU5TVFJVQ1RJT04nKVxyXG4gICAgICAgIC5tYXAoKGl0ZW06IGFueSkgPT4gaXRlbS53b3JkKVxyXG4gICAgICAgIC5zbGljZSgwLCA1KSA6IGNvbnRleHQua2V5Vm9jYWJ1bGFyeS5zbGljZSgwLCA1KVxyXG5cclxuICAgIGNvbnN0IHByb21wdCA9IGBSZXdyaXRlIHRoaXMgdGV4dCBmb3IgJHtjb250ZXh0LmRpZmZpY3VsdHlMZXZlbH0gbGV2ZWwgc3R1ZGVudHMuIFxyXG5Vc2UgdGhlc2Ugdm9jYWJ1bGFyeSB3b3JkczogJHt2b2NhYnVsYXJ5V29yZHMuam9pbignLCAnKX1cclxuS2VlcCBpdCAyMDAtNDAwIHdvcmRzOlxyXG5cclxuJHtjb250ZXh0LnNvdXJjZVRleHR9YFxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXRHb29nbGVBSSgpLnByb21wdChwcm9tcHQpXHJcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uID0gXCJSZWFkIHRoZSBmb2xsb3dpbmcgdGV4dCBjYXJlZnVsbHkuIFlvdXIgdHV0b3Igd2lsbCBoZWxwIHlvdSB3aXRoIGFueSBkaWZmaWN1bHQgd29yZHMgb3IgY29uY2VwdHM6XCJcclxuICAgICAgcmV0dXJuIGAke2luc3RydWN0aW9ufVxcblxcbiR7cmVzcG9uc2UudHJpbSgpfWBcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZW5lcmF0ZSByZWFkaW5nIHBhc3NhZ2U6IFwiICsgZXJyb3IubWVzc2FnZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVDb21wcmVoZW5zaW9uV2l0aENvbnRleHQoXHJcbiAgICBjb250ZXh0OiBTaGFyZWRDb250ZXh0LFxyXG4gICAgcHJldmlvdXNTZWN0aW9uczogR2VuZXJhdGVkU2VjdGlvbltdXHJcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgY29uc3QgcHJvbXB0ID0gYENyZWF0ZSA1ICR7Y29udGV4dC5kaWZmaWN1bHR5TGV2ZWx9IGNvbXByZWhlbnNpb24gcXVlc3Rpb25zIGFib3V0IHRoaXMgY29udGVudDpcclxuJHtjb250ZXh0LmNvbnRlbnRTdW1tYXJ5fVxyXG5SZXR1cm4gb25seSBxdWVzdGlvbnMsIG9uZSBwZXIgbGluZTpgXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucHJvbXB0KHByb21wdClcclxuICAgICAgY29uc3QgcXVlc3Rpb25zID0gcmVzcG9uc2Uuc3BsaXQoJ1xcbicpXHJcbiAgICAgICAgLm1hcChsaW5lID0+IGxpbmUudHJpbSgpKVxyXG4gICAgICAgIC5maWx0ZXIobGluZSA9PiBsaW5lLmVuZHNXaXRoKCc/JykgJiYgbGluZS5sZW5ndGggPiAxMClcclxuICAgICAgICAuc2xpY2UoMCwgNSlcclxuXHJcbiAgICAgIGlmIChxdWVzdGlvbnMubGVuZ3RoIDwgNSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluc3VmZmljaWVudCBjb21wcmVoZW5zaW9uIHF1ZXN0aW9ucyBnZW5lcmF0ZWRcIilcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSBcIkFmdGVyIHJlYWRpbmcgdGhlIHRleHQsIGFuc3dlciB0aGVzZSBjb21wcmVoZW5zaW9uIHF1ZXN0aW9uczpcIlxyXG4gICAgICByZXR1cm4gW2luc3RydWN0aW9uLCAuLi5xdWVzdGlvbnNdXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2VuZXJhdGUgY29tcHJlaGVuc2lvbiBxdWVzdGlvbnM6IFwiICsgZXJyb3IubWVzc2FnZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVEaXNjdXNzaW9uV2l0aENvbnRleHQoXHJcbiAgICBjb250ZXh0OiBTaGFyZWRDb250ZXh0LFxyXG4gICAgcHJldmlvdXNTZWN0aW9uczogR2VuZXJhdGVkU2VjdGlvbltdXHJcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgY29uc3QgdGhlbWVzID0gY29udGV4dC5tYWluVGhlbWVzLnNsaWNlKDAsIDIpLmpvaW4oJyBhbmQgJylcclxuICAgIFxyXG4gICAgY29uc3QgcHJvbXB0ID0gYENyZWF0ZSAzICR7Y29udGV4dC5kaWZmaWN1bHR5TGV2ZWx9IGRpc2N1c3Npb24gcXVlc3Rpb25zIGFib3V0ICR7dGhlbWVzfS5cclxuQ29udGV4dDogJHtjb250ZXh0LmNvbnRlbnRTdW1tYXJ5fVxyXG5SZXR1cm4gb25seSBxdWVzdGlvbnMsIG9uZSBwZXIgbGluZTpgXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucHJvbXB0KHByb21wdClcclxuICAgICAgY29uc3QgcXVlc3Rpb25zID0gcmVzcG9uc2Uuc3BsaXQoJ1xcbicpXHJcbiAgICAgICAgLm1hcChsaW5lID0+IGxpbmUudHJpbSgpKVxyXG4gICAgICAgIC5maWx0ZXIobGluZSA9PiBsaW5lLmVuZHNXaXRoKCc/JykgJiYgbGluZS5sZW5ndGggPiAxMClcclxuICAgICAgICAuc2xpY2UoMCwgMylcclxuXHJcbiAgICAgIGlmIChxdWVzdGlvbnMubGVuZ3RoIDwgMykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluc3VmZmljaWVudCBkaXNjdXNzaW9uIHF1ZXN0aW9ucyBnZW5lcmF0ZWRcIilcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSBcIkRpc2N1c3MgdGhlc2UgcXVlc3Rpb25zIHdpdGggeW91ciB0dXRvciB0byBleHBsb3JlIHRoZSB0b3BpYyBpbiBkZXB0aDpcIlxyXG4gICAgICByZXR1cm4gW2luc3RydWN0aW9uLCAuLi5xdWVzdGlvbnNdXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2VuZXJhdGUgZGlzY3Vzc2lvbiBxdWVzdGlvbnM6IFwiICsgZXJyb3IubWVzc2FnZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVHcmFtbWFyV2l0aENvbnRleHQoXHJcbiAgICBjb250ZXh0OiBTaGFyZWRDb250ZXh0LFxyXG4gICAgcHJldmlvdXNTZWN0aW9uczogR2VuZXJhdGVkU2VjdGlvbltdXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIGNvbnN0IHByb21wdCA9IGBDcmVhdGUgYSBncmFtbWFyIGxlc3NvbiBmb3IgJHtjb250ZXh0LmRpZmZpY3VsdHlMZXZlbH0gbGV2ZWwgYmFzZWQgb24gdGhpcyBjb250ZW50OlxyXG4ke2NvbnRleHQuY29udGVudFN1bW1hcnl9XHJcblxyXG5SZXR1cm4gSlNPTiB3aXRoOiBmb2N1cyAoZ3JhbW1hciBwb2ludCksIGV4YW1wbGVzICgzIGV4YW1wbGVzKSwgZXhlcmNpc2UgKDMgcHJhY3RpY2Ugc2VudGVuY2VzKWBcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS5wcm9tcHQocHJvbXB0KVxyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZSlcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIEZhbGxiYWNrIGdyYW1tYXIgc3RydWN0dXJlXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZm9jdXM6IFwiUHJlc2VudCBTaW1wbGUgVGVuc2VcIixcclxuICAgICAgICBleGFtcGxlczogW1xyXG4gICAgICAgICAgXCJJIHJlYWQgdGhlIG5ld3MgZXZlcnkgZGF5LlwiLFxyXG4gICAgICAgICAgXCJTaGUgd29ya3MgaW4gYW4gb2ZmaWNlLlwiLFxyXG4gICAgICAgICAgXCJUaGV5IHBsYXkgc3BvcnRzIG9uIHdlZWtlbmRzLlwiXHJcbiAgICAgICAgXSxcclxuICAgICAgICBleGVyY2lzZTogW1xyXG4gICAgICAgICAgXCJDb21wbGV0ZTogSGUgX19fX18gKHdvcmspIGluIExvbmRvbi5cIixcclxuICAgICAgICAgIFwiQ29tcGxldGU6IFdlIF9fX19fIChzdHVkeSkgRW5nbGlzaC5cIixcclxuICAgICAgICAgIFwiQ29tcGxldGU6IFNoZSBfX19fXyAobGlrZSkgY29mZmVlLlwiXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlUHJvbnVuY2lhdGlvbldpdGhDb250ZXh0KFxyXG4gICAgY29udGV4dDogU2hhcmVkQ29udGV4dCxcclxuICAgIHByZXZpb3VzU2VjdGlvbnM6IEdlbmVyYXRlZFNlY3Rpb25bXVxyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICBjb25zdCB3b3JkID0gY29udGV4dC5rZXlWb2NhYnVsYXJ5WzBdIHx8ICdjb21tdW5pY2F0aW9uJ1xyXG4gICAgXHJcbiAgICBjb25zdCBwcm9tcHQgPSBgQ3JlYXRlIHByb251bmNpYXRpb24gcHJhY3RpY2UgZm9yIFwiJHt3b3JkfVwiLiBcclxuUmV0dXJuIEpTT04gd2l0aDogd29yZCwgaXBhIChwaG9uZXRpYyB0cmFuc2NyaXB0aW9uKSwgcHJhY3RpY2UgKHByb251bmNpYXRpb24gdGlwKWBcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS5wcm9tcHQocHJvbXB0KVxyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZSlcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIEZhbGxiYWNrIHByb251bmNpYXRpb24gc3RydWN0dXJlXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgd29yZDogd29yZCxcclxuICAgICAgICBpcGE6IGAva8mZy4xtanXLkG7JqsuIa2XJqsqDyZluL2AsXHJcbiAgICAgICAgcHJhY3RpY2U6IGBCcmVhayBpdCBkb3duOiBjb20tbXUtbmktY2EtdGlvbi4gU3RyZXNzIG9uIHRoZSA0dGggc3lsbGFibGU6IGNhLVRJT04uYFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlV3JhcHVwV2l0aENvbnRleHQoXHJcbiAgICBjb250ZXh0OiBTaGFyZWRDb250ZXh0LFxyXG4gICAgcHJldmlvdXNTZWN0aW9uczogR2VuZXJhdGVkU2VjdGlvbltdXHJcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgY29uc3QgcHJvbXB0ID0gYENyZWF0ZSAzICR7Y29udGV4dC5kaWZmaWN1bHR5TGV2ZWx9IHdyYXAtdXAgcXVlc3Rpb25zIGFib3V0IHRoaXMgbGVzc29uOlxyXG4ke2NvbnRleHQuY29udGVudFN1bW1hcnl9XHJcblJldHVybiBvbmx5IHF1ZXN0aW9ucywgb25lIHBlciBsaW5lOmBcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS5wcm9tcHQocHJvbXB0KVxyXG4gICAgICBjb25zdCBxdWVzdGlvbnMgPSByZXNwb25zZS5zcGxpdCgnXFxuJylcclxuICAgICAgICAubWFwKGxpbmUgPT4gbGluZS50cmltKCkpXHJcbiAgICAgICAgLmZpbHRlcihsaW5lID0+IGxpbmUuZW5kc1dpdGgoJz8nKSAmJiBsaW5lLmxlbmd0aCA+IDEwKVxyXG4gICAgICAgIC5zbGljZSgwLCAzKVxyXG5cclxuICAgICAgaWYgKHF1ZXN0aW9ucy5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5zdWZmaWNpZW50IHdyYXB1cCBxdWVzdGlvbnMgZ2VuZXJhdGVkXCIpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uID0gXCJSZWZsZWN0IG9uIHlvdXIgbGVhcm5pbmcgYnkgZGlzY3Vzc2luZyB0aGVzZSB3cmFwLXVwIHF1ZXN0aW9uczpcIlxyXG4gICAgICByZXR1cm4gW2luc3RydWN0aW9uLCAuLi5xdWVzdGlvbnNdXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2VuZXJhdGUgd3JhcHVwIHF1ZXN0aW9uczogXCIgKyBlcnJvci5tZXNzYWdlKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRmFsbGJhY2sgbWV0aG9kcyBmb3Igd2hlbiBBSSBleHRyYWN0aW9uIGZhaWxzXHJcblxyXG4gIHByaXZhdGUgZXh0cmFjdFZvY2FidWxhcnlGYWxsYmFjayhzb3VyY2VUZXh0OiBzdHJpbmcsIHN0dWRlbnRMZXZlbDogQ0VGUkxldmVsKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3Qgd29yZHMgPSBzb3VyY2VUZXh0LnRvTG93ZXJDYXNlKClcclxuICAgICAgLm1hdGNoKC9cXGJbYS16XXs0LDEyfVxcYi9nKSB8fCBbXVxyXG4gICAgXHJcbiAgICBjb25zdCBjb21tb25Xb3JkcyA9IFsndGhlJywgJ2FuZCcsICd0aGF0JywgJ2hhdmUnLCAnZm9yJywgJ25vdCcsICd3aXRoJywgJ3lvdScsICd0aGlzJywgJ2J1dCcsICdoaXMnLCAnZnJvbScsICd0aGV5J11cclxuICAgIGNvbnN0IGZpbHRlcmVkV29yZHMgPSB3b3Jkc1xyXG4gICAgICAuZmlsdGVyKHdvcmQgPT4gIWNvbW1vbldvcmRzLmluY2x1ZGVzKHdvcmQpKVxyXG4gICAgICAuZmlsdGVyKCh3b3JkLCBpbmRleCwgYXJyKSA9PiBhcnIuaW5kZXhPZih3b3JkKSA9PT0gaW5kZXgpXHJcbiAgICAgIC5zbGljZSgwLCA4KVxyXG5cclxuICAgIHJldHVybiBmaWx0ZXJlZFdvcmRzLmxlbmd0aCA+PSA0ID8gZmlsdGVyZWRXb3JkcyA6IFsnY29tbXVuaWNhdGlvbicsICdpbXBvcnRhbnQnLCAnZGlmZmVyZW50JywgJ2V4YW1wbGUnLCAnaW5mb3JtYXRpb24nLCAnc2l0dWF0aW9uJ11cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZXh0cmFjdFRoZW1lc0ZhbGxiYWNrKHNvdXJjZVRleHQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHRleHQgPSBzb3VyY2VUZXh0LnRvTG93ZXJDYXNlKClcclxuICAgIGNvbnN0IHRoZW1lcyA9IFtdXHJcblxyXG4gICAgLy8gTG9vayBmb3IgY29tbW9uIHRoZW1lc1xyXG4gICAgaWYgKHRleHQuaW5jbHVkZXMoJ3Nwb3J0JykgfHwgdGV4dC5pbmNsdWRlcygnZ2FtZScpIHx8IHRleHQuaW5jbHVkZXMoJ3RlYW0nKSkgdGhlbWVzLnB1c2goJ3Nwb3J0cycpXHJcbiAgICBpZiAodGV4dC5pbmNsdWRlcygnYnVzaW5lc3MnKSB8fCB0ZXh0LmluY2x1ZGVzKCdjb21wYW55JykgfHwgdGV4dC5pbmNsdWRlcygnd29yaycpKSB0aGVtZXMucHVzaCgnYnVzaW5lc3MnKVxyXG4gICAgaWYgKHRleHQuaW5jbHVkZXMoJ3RyYXZlbCcpIHx8IHRleHQuaW5jbHVkZXMoJ2NvdW50cnknKSB8fCB0ZXh0LmluY2x1ZGVzKCdjdWx0dXJlJykpIHRoZW1lcy5wdXNoKCd0cmF2ZWwnKVxyXG4gICAgaWYgKHRleHQuaW5jbHVkZXMoJ3RlY2hub2xvZ3knKSB8fCB0ZXh0LmluY2x1ZGVzKCdjb21wdXRlcicpIHx8IHRleHQuaW5jbHVkZXMoJ2ludGVybmV0JykpIHRoZW1lcy5wdXNoKCd0ZWNobm9sb2d5JylcclxuICAgIGlmICh0ZXh0LmluY2x1ZGVzKCdoZWFsdGgnKSB8fCB0ZXh0LmluY2x1ZGVzKCdtZWRpY2FsJykgfHwgdGV4dC5pbmNsdWRlcygnZG9jdG9yJykpIHRoZW1lcy5wdXNoKCdoZWFsdGgnKVxyXG5cclxuICAgIHJldHVybiB0aGVtZXMubGVuZ3RoID4gMCA/IHRoZW1lcyA6IFsnZ2VuZXJhbCB0b3BpYycsICdjb21tdW5pY2F0aW9uJywgJ2RhaWx5IGxpZmUnXVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleHRyYWN0VGhlbWVzRnJvbVRleHQodGV4dDogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuZXh0cmFjdFRoZW1lc0ZhbGxiYWNrKHRleHQpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNhcGl0YWxpemVXb3JkKHdvcmQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKVxyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJjcmVhdGVHb29nbGVBSVNlcnZlclNlcnZpY2UiLCJQcm9ncmVzc2l2ZUdlbmVyYXRvckltcGwiLCJnZXRHb29nbGVBSSIsImdvb2dsZUFJIiwiYnVpbGRTaGFyZWRDb250ZXh0Iiwic291cmNlVGV4dCIsImxlc3NvblR5cGUiLCJzdHVkZW50TGV2ZWwiLCJ0YXJnZXRMYW5ndWFnZSIsImNvbnNvbGUiLCJsb2ciLCJrZXlWb2NhYnVsYXJ5IiwiZXh0cmFjdEtleVZvY2FidWxhcnkiLCJtYWluVGhlbWVzIiwiZXh0cmFjdE1haW5UaGVtZXMiLCJjb250ZW50U3VtbWFyeSIsImNyZWF0ZUNvbnRlbnRTdW1tYXJ5Iiwic2hhcmVkQ29udGV4dCIsImRpZmZpY3VsdHlMZXZlbCIsInN1YnN0cmluZyIsInZvY2FidWxhcnlDb3VudCIsImxlbmd0aCIsInRoZW1lc0NvdW50Iiwic3VtbWFyeUxlbmd0aCIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiZ2VuZXJhdGVTZWN0aW9uIiwic2VjdGlvbiIsInByZXZpb3VzU2VjdGlvbnMiLCJuYW1lIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImNvbnRlbnQiLCJ0b2tlbnNVc2VkIiwiZ2VuZXJhdGlvblN0cmF0ZWd5IiwiZ2VuZXJhdGVXYXJtdXBXaXRoQ29udGV4dCIsImdlbmVyYXRlVm9jYWJ1bGFyeVdpdGhDb250ZXh0IiwiZ2VuZXJhdGVSZWFkaW5nV2l0aENvbnRleHQiLCJnZW5lcmF0ZUNvbXByZWhlbnNpb25XaXRoQ29udGV4dCIsImdlbmVyYXRlRGlzY3Vzc2lvbldpdGhDb250ZXh0IiwiZ2VuZXJhdGVHcmFtbWFyV2l0aENvbnRleHQiLCJnZW5lcmF0ZVByb251bmNpYXRpb25XaXRoQ29udGV4dCIsImdlbmVyYXRlV3JhcHVwV2l0aENvbnRleHQiLCJnZW5lcmF0aW9uVGltZSIsInNlY3Rpb25OYW1lIiwidXBkYXRlQ29udGV4dCIsImNvbnRleHQiLCJuZXdTZWN0aW9uIiwidXBkYXRlZENvbnRleHQiLCJBcnJheSIsImlzQXJyYXkiLCJuZXdXb3JkcyIsImZpbHRlciIsIml0ZW0iLCJ3b3JkIiwibWFwIiwidG9Mb3dlckNhc2UiLCJTZXQiLCJuZXdUaGVtZXMiLCJleHRyYWN0VGhlbWVzRnJvbVRleHQiLCJwcm9tcHQiLCJyZXNwb25zZSIsIndvcmRzIiwic3BsaXQiLCJsaW5lIiwidHJpbSIsInNsaWNlIiwiZXh0cmFjdFZvY2FidWxhcnlGYWxsYmFjayIsInRoZW1lcyIsInRoZW1lIiwiZXh0cmFjdFRoZW1lc0ZhbGxiYWNrIiwibWFpblRoZW1lIiwicXVlc3Rpb25zIiwiZW5kc1dpdGgiLCJpbnN0cnVjdGlvbiIsInZvY2FidWxhcnkiLCJkZWZpbml0aW9uUHJvbXB0IiwibWVhbmluZyIsImV4YW1wbGVQcm9tcHQiLCJleGFtcGxlIiwicHVzaCIsImNhcGl0YWxpemVXb3JkIiwidm9jYWJ1bGFyeVNlY3Rpb24iLCJmaW5kIiwicyIsInZvY2FidWxhcnlXb3JkcyIsImpvaW4iLCJKU09OIiwicGFyc2UiLCJmb2N1cyIsImV4YW1wbGVzIiwiZXhlcmNpc2UiLCJpcGEiLCJwcmFjdGljZSIsIm1hdGNoIiwiY29tbW9uV29yZHMiLCJmaWx0ZXJlZFdvcmRzIiwiaW5jbHVkZXMiLCJpbmRleCIsImFyciIsImluZGV4T2YiLCJ0ZXh0IiwiY2hhckF0IiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/progressive-generator.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase-server.ts":
/*!********************************!*\
  !*** ./lib/supabase-server.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerSupabaseClient: () => (/* binding */ createServerSupabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\nconst createServerSupabaseClient = ()=>{\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://jbkpnirowdvlwlgheqho.supabase.co\" || 0, \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impia3BuaXJvd2R2bHdsZ2hlcWhvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MTQ3NTEsImV4cCI6MjA3NDQ5MDc1MX0.FZhruXKDzIkZLhla5oerfs7yzjvTsGLlKTUer34N6N0\" || 0, {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            },\n            set (name, value, options) {\n                cookieStore.set({\n                    name,\n                    value,\n                    ...options\n                });\n            },\n            remove (name, options) {\n                cookieStore.set({\n                    name,\n                    value: \"\",\n                    ...options\n                });\n            }\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUNaO0FBRS9CLE1BQU1FLDZCQUE2QjtJQUN4QyxNQUFNQyxjQUFjRixxREFBT0E7SUFFM0IsT0FBT0QsaUVBQWtCQSxDQUN2QkksMENBQW9DLElBQUksR0FDeENBLGtOQUF5QyxJQUFJLEdBQzdDO1FBQ0FILFNBQVM7WUFDUE8sS0FBSUMsSUFBWTtnQkFDZCxPQUFPTixZQUFZSyxHQUFHLENBQUNDLE9BQU9DO1lBQ2hDO1lBQ0FDLEtBQUlGLElBQVksRUFBRUMsS0FBYSxFQUFFRSxPQUFZO2dCQUMzQ1QsWUFBWVEsR0FBRyxDQUFDO29CQUFFRjtvQkFBTUM7b0JBQU8sR0FBR0UsT0FBTztnQkFBQztZQUM1QztZQUNBQyxRQUFPSixJQUFZLEVBQUVHLE9BQVk7Z0JBQy9CVCxZQUFZUSxHQUFHLENBQUM7b0JBQUVGO29CQUFNQyxPQUFPO29CQUFJLEdBQUdFLE9BQU87Z0JBQUM7WUFDaEQ7UUFDRjtJQUNGO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzPzA5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VydmVyQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zc3JcIlxuaW1wb3J0IHsgY29va2llcyB9IGZyb20gXCJuZXh0L2hlYWRlcnNcIlxuXG5leHBvcnQgY29uc3QgY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IGNvb2tpZVN0b3JlID0gY29va2llcygpXG5cbiAgcmV0dXJuIGNyZWF0ZVNlcnZlckNsaWVudChcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgfHwgJ2h0dHBzOi8vcGxhY2Vob2xkZXIuc3VwYWJhc2UuY28nLCBcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCAncGxhY2Vob2xkZXIta2V5JywgXG4gICAge1xuICAgIGNvb2tpZXM6IHtcbiAgICAgIGdldChuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNvb2tpZVN0b3JlLmdldChuYW1lKT8udmFsdWVcbiAgICAgIH0sXG4gICAgICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWUsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgICByZW1vdmUobmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWU6IFwiXCIsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJDbGllbnQiLCJjb29raWVzIiwiY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQiLCJjb29raWVTdG9yZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsImdldCIsIm5hbWUiLCJ2YWx1ZSIsInNldCIsIm9wdGlvbnMiLCJyZW1vdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/usage-monitor.ts":
/*!******************************!*\
  !*** ./lib/usage-monitor.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryUsageMonitor: () => (/* binding */ InMemoryUsageMonitor),\n/* harmony export */   usageMonitor: () => (/* binding */ usageMonitor)\n/* harmony export */ });\n/**\r\n * Usage Monitor System\r\n * \r\n * Provides comprehensive logging and monitoring for AI lesson generation,\r\n * tracking token usage, errors, and optimization savings.\r\n */ /**\r\n * In-Memory Usage Monitor Implementation\r\n * \r\n * Stores usage data in memory with optional persistence to console/external systems.\r\n * In production, this could be extended to use a database or external logging service.\r\n */ class InMemoryUsageMonitor {\n    /**\r\n   * Generate unique ID for log entries\r\n   */ generateId() {\n        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\r\n   * Log token usage for a lesson section\r\n   */ logTokenUsage(section, tokens, optimization, context) {\n        const entry = {\n            id: this.generateId(),\n            timestamp: new Date(),\n            section,\n            tokens,\n            optimization,\n            userId: context?.userId,\n            lessonId: context?.lessonId\n        };\n        this.usageLogs.push(entry);\n        this.trimLogs();\n        // Console logging for development\n        console.log(`[UsageMonitor] Token usage - Section: ${section}, Tokens: ${tokens}, Optimization: ${optimization}`);\n    }\n    /**\r\n   * Log errors with context\r\n   */ logError(error, errorType, context) {\n        const entry = {\n            id: this.generateId(),\n            timestamp: new Date(),\n            errorType,\n            errorMessage: error.message,\n            context: {\n                lessonType: context.lessonType,\n                difficultyLevel: context.difficultyLevel,\n                contentLength: context.contentLength,\n                timestamp: context.timestamp\n            },\n            userId: context.userId,\n            lessonId: context.lessonId,\n            stackTrace: error.stack\n        };\n        this.errorLogs.push(entry);\n        this.trimLogs();\n        // Console logging for development\n        console.error(`[UsageMonitor] Error - Type: ${errorType}, Message: ${error.message}`, {\n            context,\n            errorId: entry.id\n        });\n    }\n    /**\r\n   * Log optimization savings\r\n   */ logOptimizationSavings(baseline, optimized, strategy, context) {\n        const savings = baseline - optimized;\n        const savingsPercentage = baseline > 0 ? savings / baseline * 100 : 0;\n        const entry = {\n            id: this.generateId(),\n            timestamp: new Date(),\n            strategy,\n            baselineTokens: baseline,\n            optimizedTokens: optimized,\n            savingsPercentage,\n            userId: context?.userId,\n            lessonId: context?.lessonId\n        };\n        this.optimizationLogs.push(entry);\n        this.trimLogs();\n        // Console logging for development\n        console.log(`[UsageMonitor] Optimization - Strategy: ${strategy}, Savings: ${savings} tokens (${savingsPercentage.toFixed(1)}%)`);\n    }\n    /**\r\n   * Generate comprehensive usage report\r\n   */ async generateUsageReport(startDate, endDate) {\n        const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Default: 30 days ago\n        const end = endDate || new Date();\n        // Filter logs by date range\n        const filteredUsageLogs = this.usageLogs.filter((log)=>log.timestamp >= start && log.timestamp <= end);\n        const filteredErrorLogs = this.errorLogs.filter((log)=>log.timestamp >= start && log.timestamp <= end);\n        const filteredOptimizationLogs = this.optimizationLogs.filter((log)=>log.timestamp >= start && log.timestamp <= end);\n        // Calculate metrics\n        const uniqueLessons = new Set(filteredUsageLogs.map((log)=>log.lessonId).filter(Boolean));\n        const totalLessons = uniqueLessons.size;\n        const totalTokens = filteredUsageLogs.reduce((sum, log)=>sum + log.tokens, 0);\n        const averageTokensPerLesson = totalLessons > 0 ? totalTokens / totalLessons : 0;\n        const totalOptimizationSavings = filteredOptimizationLogs.reduce((sum, log)=>sum + (log.baselineTokens - log.optimizedTokens), 0);\n        const errorRate = totalLessons > 0 ? filteredErrorLogs.length / totalLessons * 100 : 0;\n        // Top optimization strategies\n        const strategyStats = new Map();\n        filteredOptimizationLogs.forEach((log)=>{\n            const current = strategyStats.get(log.strategy) || {\n                usage: 0,\n                totalSavings: 0\n            };\n            current.usage++;\n            current.totalSavings += log.baselineTokens - log.optimizedTokens;\n            strategyStats.set(log.strategy, current);\n        });\n        const topOptimizationStrategies = Array.from(strategyStats.entries()).map(([strategy, stats])=>({\n                strategy,\n                usage: stats.usage,\n                averageSavings: stats.usage > 0 ? stats.totalSavings / stats.usage : 0\n            })).sort((a, b)=>b.usage - a.usage).slice(0, 5);\n        // Error breakdown\n        const errorBreakdown = {};\n        filteredErrorLogs.forEach((log)=>{\n            errorBreakdown[log.errorType] = (errorBreakdown[log.errorType] || 0) + 1;\n        });\n        // Section token breakdown\n        const sectionTokenBreakdown = {};\n        filteredUsageLogs.forEach((log)=>{\n            sectionTokenBreakdown[log.section] = (sectionTokenBreakdown[log.section] || 0) + log.tokens;\n        });\n        return {\n            period: {\n                start,\n                end\n            },\n            totalLessons,\n            totalTokens,\n            averageTokensPerLesson,\n            totalOptimizationSavings,\n            errorRate,\n            topOptimizationStrategies,\n            errorBreakdown,\n            sectionTokenBreakdown\n        };\n    }\n    /**\r\n   * Get usage metrics for a specific lesson\r\n   */ async getLessonMetrics(lessonId) {\n        const lessonLogs = this.usageLogs.filter((log)=>log.lessonId === lessonId);\n        if (lessonLogs.length === 0) {\n            return null;\n        }\n        const totalTokens = lessonLogs.reduce((sum, log)=>sum + log.tokens, 0);\n        const tokensPerSection = {};\n        lessonLogs.forEach((log)=>{\n            tokensPerSection[log.section] = (tokensPerSection[log.section] || 0) + log.tokens;\n        });\n        // Calculate optimization savings for this lesson\n        const lessonOptimizationLogs = this.optimizationLogs.filter((log)=>log.lessonId === lessonId);\n        const optimizationSavings = lessonOptimizationLogs.reduce((sum, log)=>sum + (log.baselineTokens - log.optimizedTokens), 0);\n        // Calculate generation time (time between first and last log entry)\n        const timestamps = lessonLogs.map((log)=>log.timestamp.getTime()).sort();\n        const generationTime = timestamps.length > 1 ? timestamps[timestamps.length - 1] - timestamps[0] : 0;\n        return {\n            totalTokens,\n            tokensPerSection,\n            optimizationSavings,\n            generationTime,\n            timestamp: new Date(timestamps[0])\n        };\n    }\n    /**\r\n   * Clear old logs to prevent memory overflow\r\n   */ async clearOldLogs(olderThanDays) {\n        const cutoffDate = new Date(Date.now() - olderThanDays * 24 * 60 * 60 * 1000);\n        const initialUsageCount = this.usageLogs.length;\n        const initialErrorCount = this.errorLogs.length;\n        const initialOptimizationCount = this.optimizationLogs.length;\n        this.usageLogs = this.usageLogs.filter((log)=>log.timestamp >= cutoffDate);\n        this.errorLogs = this.errorLogs.filter((log)=>log.timestamp >= cutoffDate);\n        this.optimizationLogs = this.optimizationLogs.filter((log)=>log.timestamp >= cutoffDate);\n        const clearedUsage = initialUsageCount - this.usageLogs.length;\n        const clearedErrors = initialErrorCount - this.errorLogs.length;\n        const clearedOptimizations = initialOptimizationCount - this.optimizationLogs.length;\n        console.log(`[UsageMonitor] Cleared old logs: ${clearedUsage} usage, ${clearedErrors} errors, ${clearedOptimizations} optimizations`);\n    }\n    /**\r\n   * Trim logs to prevent memory overflow\r\n   */ trimLogs() {\n        if (this.usageLogs.length > this.maxLogEntries) {\n            this.usageLogs = this.usageLogs.slice(-this.maxLogEntries);\n        }\n        if (this.errorLogs.length > this.maxLogEntries) {\n            this.errorLogs = this.errorLogs.slice(-this.maxLogEntries);\n        }\n        if (this.optimizationLogs.length > this.maxLogEntries) {\n            this.optimizationLogs = this.optimizationLogs.slice(-this.maxLogEntries);\n        }\n    }\n    /**\r\n   * Get current log counts (for debugging)\r\n   */ getLogCounts() {\n        return {\n            usage: this.usageLogs.length,\n            errors: this.errorLogs.length,\n            optimizations: this.optimizationLogs.length\n        };\n    }\n    /**\r\n   * Export logs for external analysis\r\n   */ exportLogs() {\n        return {\n            usage: [\n                ...this.usageLogs\n            ],\n            errors: [\n                ...this.errorLogs\n            ],\n            optimizations: [\n                ...this.optimizationLogs\n            ]\n        };\n    }\n    constructor(){\n        this.usageLogs = [];\n        this.errorLogs = [];\n        this.optimizationLogs = [];\n        this.maxLogEntries = 10000 // Prevent memory overflow\n        ;\n    }\n}\n// Singleton instance for global usage monitoring\nconst usageMonitor = new InMemoryUsageMonitor();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/usage-monitor.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/next","vendor-chunks/whatwg-url","vendor-chunks/tr46","vendor-chunks/webidl-conversions","vendor-chunks/cookie"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();