"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-lesson/route";
exports.ids = ["app/api/generate-lesson/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-lesson/route.ts */ \"(rsc)/./app/api/generate-lesson/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-lesson/route\",\n        pathname: \"/api/generate-lesson\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-lesson/route\"\n    },\n    resolvedPagePath: \"D:\\\\linguaspark\\\\app\\\\api\\\\generate-lesson\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-lesson/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1sZXNzb24lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbGluZ3Vhc3BhcmslNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNsaW5ndWFzcGFyayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDSTtBQUNqRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzI3ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlLWxlc3NvblwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZ2VuZXJhdGUtbGVzc29uL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-lesson/route.ts":
/*!******************************************!*\
  !*** ./app/api/generate-lesson/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/lesson-ai-generator-server */ \"(rsc)/./lib/lesson-ai-generator-server.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase-server */ \"(rsc)/./lib/supabase-server.ts\");\n\n // Updated import to use server-side generator\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = body;\n        // Validate required fields\n        if (!sourceText || !lessonType || !studentLevel || !targetLanguage) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing required fields\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate user authentication\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__.createServerSupabaseClient)();\n        const { data: { user }, error: authError } = await supabase.auth.getUser();\n        if (authError || !user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        // Generate lesson using enhanced AI pipeline with contextual information\n        const lesson = await _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__.lessonAIServerGenerator.generateLesson({\n            sourceText,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sourceUrl,\n            contentMetadata,\n            structuredContent,\n            wordCount,\n            readingTime\n        });\n        console.log(\"\\uD83C\\uDF93 Generated lesson structure:\", {\n            hasLesson: !!lesson,\n            hasSections: !!lesson?.sections,\n            sectionKeys: lesson?.sections ? Object.keys(lesson.sections) : [],\n            lessonType: lesson?.lessonType,\n            studentLevel: lesson?.studentLevel,\n            targetLanguage: lesson?.targetLanguage\n        });\n        // Ensure lesson has proper structure\n        const safeLesson = {\n            lessonType: lesson.lessonType || lessonType,\n            studentLevel: lesson.studentLevel || studentLevel,\n            targetLanguage: lesson.targetLanguage || targetLanguage,\n            sections: {\n                warmup: lesson.sections?.warmup || [\n                    \"What do you already know about this topic?\",\n                    \"Have you had similar experiences?\",\n                    \"What would you like to learn more about?\"\n                ],\n                vocabulary: lesson.sections?.vocabulary || [],\n                reading: lesson.sections?.reading || sourceText.substring(0, 500),\n                comprehension: lesson.sections?.comprehension || [\n                    \"What is the main idea of this text?\",\n                    \"What supporting details can you identify?\"\n                ],\n                discussion: lesson.sections?.discussion || [\n                    \"What is your opinion on this topic?\",\n                    \"How would you handle this situation?\"\n                ],\n                grammar: lesson.sections?.grammar || {\n                    focus: \"Present Perfect Tense\",\n                    examples: [\n                        \"I have learned many new things.\",\n                        \"She has improved her skills.\"\n                    ],\n                    exercise: [\n                        \"I _____ (learn) a lot today.\",\n                        \"They _____ (complete) the project.\"\n                    ]\n                },\n                pronunciation: lesson.sections?.pronunciation || {\n                    word: \"communication\",\n                    ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n                    practice: \"Practice saying: communication in a sentence.\"\n                },\n                wrapup: lesson.sections?.wrapup || [\n                    \"What new vocabulary did you learn?\",\n                    \"Which concepts need more practice?\"\n                ]\n            }\n        };\n        console.log(\"✅ Safe lesson structure created with all required sections\");\n        // Save lesson to database\n        const { data: savedLesson, error: saveError } = await supabase.from(\"lessons\").insert({\n            tutor_id: user.id,\n            title: `${lessonType} Lesson - ${new Date().toLocaleDateString()}`,\n            lesson_type: lessonType,\n            student_level: studentLevel,\n            target_language: targetLanguage,\n            source_url: sourceUrl,\n            source_text: sourceText,\n            lesson_data: safeLesson\n        }).select().single();\n        if (saveError) {\n            console.error(\"Error saving lesson:\", saveError);\n            // Return lesson even if save fails\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                lesson: safeLesson\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            lesson: {\n                ...safeLesson,\n                id: savedLesson.id\n            }\n        });\n    } catch (error) {\n        console.error(\"Error generating lesson:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate lesson\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-lesson/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-ai-server.ts":
/*!*********************************!*\
  !*** ./lib/google-ai-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleAIServerService: () => (/* binding */ createGoogleAIServerService)\n/* harmony export */ });\n// Server-side Google AI (Gemini) APIs service layer\nclass GoogleAIServerService {\n    constructor(config){\n        this.model = \"models/gemini-2.5-flash\" // Use actual available model\n        ;\n        this.config = config;\n    }\n    async makeGeminiRequest(prompt, options = {}) {\n        // Try different model names based on actual available models from API\n        const modelsToTry = [\n            \"models/gemini-2.5-flash\",\n            \"models/gemini-2.5-pro\",\n            \"models/gemini-2.0-flash\",\n            \"models/gemini-flash-latest\",\n            \"models/gemini-pro-latest\",\n            \"models/gemini-2.0-flash-001\",\n            \"gemini-2.5-flash\",\n            \"gemini-2.5-pro\",\n            \"gemini-2.0-flash\",\n            \"gemini-flash-latest\",\n            \"gemini-pro-latest\"\n        ];\n        const possibleUrls = [];\n        // Generate URLs for different combinations\n        for (const model of modelsToTry){\n            possibleUrls.push(`${this.config.baseUrl}/v1beta/models/${model}:generateContent?key=${this.config.apiKey}`);\n            possibleUrls.push(`${this.config.baseUrl}/v1/models/${model}:generateContent?key=${this.config.apiKey}`);\n        }\n        const requestBody = {\n            contents: [\n                {\n                    parts: [\n                        {\n                            text: prompt\n                        }\n                    ]\n                }\n            ],\n            generationConfig: {\n                temperature: options.temperature || 0.7,\n                maxOutputTokens: options.maxTokens || 1000,\n                topP: options.topP || 0.9\n            }\n        };\n        console.log(\"\\uD83D\\uDD17 Trying Gemini API endpoints...\");\n        // Try each URL until one works\n        for(let i = 0; i < possibleUrls.length; i++){\n            const url = possibleUrls[i];\n            console.log(`🌐 Attempt ${i + 1}: ${url.replace(this.config.apiKey, \"API_KEY_HIDDEN\")}`);\n            try {\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(requestBody)\n                });\n                console.log(`📡 Response status: ${response.status} ${response.statusText}`);\n                if (response.ok) {\n                    const result = await response.json();\n                    console.log(\"✅ Successful API response received\");\n                    if (result.candidates && result.candidates[0] && result.candidates[0].content) {\n                        return result.candidates[0].content.parts[0].text;\n                    } else {\n                        console.warn(\"⚠️ Invalid response structure:\", result);\n                        throw new Error(\"Invalid response structure from Gemini API\");\n                    }\n                } else {\n                    const errorText = await response.text();\n                    console.warn(`❌ Attempt ${i + 1} failed:`, response.status, errorText);\n                    // If this is the last attempt, throw the error\n                    if (i === possibleUrls.length - 1) {\n                        throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);\n                    }\n                }\n            } catch (error) {\n                console.warn(`❌ Attempt ${i + 1} exception:`, error.message);\n                // If this is the last attempt, throw the error\n                if (i === possibleUrls.length - 1) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async summarize(text, options = {}) {\n        const summaryType = options.type || \"key-points\";\n        const length = options.length || \"medium\";\n        const lengthInstructions = {\n            short: \"in 2-3 sentences\",\n            medium: \"in 4-6 sentences\",\n            long: \"in 7-10 sentences\"\n        };\n        const typeInstructions = {\n            \"key-points\": \"Extract and summarize the key points\",\n            \"tl-dr\": \"Create a TL;DR summary\",\n            \"teaser\": \"Write an engaging teaser summary\",\n            \"headline\": \"Create a headline-style summary\"\n        };\n        const prompt = `${typeInstructions[summaryType]} of the following text ${lengthInstructions[length]}:\n\n${text}\n\nSummary:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.3\n            });\n        } catch (error) {\n            console.error(\"Summarization failed:\", error);\n            // Fallback to simple truncation\n            return text.substring(0, 500) + \"...\";\n        }\n    }\n    async translate(text, options) {\n        const targetLang = this.getLanguageName(options.targetLanguage);\n        const prompt = `Translate the following text to ${targetLang}. Maintain the original meaning and tone:\n\n${text}\n\nTranslation:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n        } catch (error) {\n            console.error(\"Translation failed:\", error);\n            // Return original text if translation fails\n            return text;\n        }\n    }\n    async prompt(prompt, options = {}) {\n        try {\n            return await this.makeGeminiRequest(prompt, options);\n        } catch (error) {\n            console.error(\"Prompt generation failed:\", error);\n            throw error;\n        }\n    }\n    async write(prompt, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"medium\";\n        const format = options.format || \"paragraph\";\n        const lengthInstructions = {\n            short: \"Keep it brief and concise\",\n            medium: \"Write a moderate length response\",\n            long: \"Provide a detailed and comprehensive response\"\n        };\n        const formatInstructions = {\n            paragraph: \"Write in paragraph form\",\n            \"bullet-points\": \"Format as bullet points\",\n            \"numbered-list\": \"Format as a numbered list\"\n        };\n        const enhancedPrompt = `${prompt}\n\nInstructions:\n- Tone: ${tone}\n- ${lengthInstructions[length]}\n- ${formatInstructions[format]}\n\nResponse:`;\n        try {\n            return await this.makeGeminiRequest(enhancedPrompt, {\n                temperature: 0.7\n            });\n        } catch (error) {\n            console.error(\"Writing failed:\", error);\n            throw error;\n        }\n    }\n    async rewrite(text, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"same\";\n        const audience = options.audience || \"general\";\n        const lengthInstructions = {\n            shorter: \"Make it more concise\",\n            longer: \"Expand and add more detail\",\n            same: \"Keep approximately the same length\"\n        };\n        const prompt = `Rewrite the following text with these requirements:\n- Tone: ${tone}\n- Audience: ${audience}\n- Length: ${lengthInstructions[length]}\n\nOriginal text:\n${text}\n\nRewritten text:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.5\n            });\n        } catch (error) {\n            console.error(\"Rewriting failed:\", error);\n            return text // Return original if rewriting fails\n            ;\n        }\n    }\n    async proofread(text, options = {}) {\n        const checkGrammar = options.checkGrammar !== false;\n        const checkSpelling = options.checkSpelling !== false;\n        const checkStyle = options.checkStyle !== false;\n        const checks = [];\n        if (checkGrammar) checks.push(\"grammar\");\n        if (checkSpelling) checks.push(\"spelling\");\n        if (checkStyle) checks.push(\"style and clarity\");\n        const prompt = `Proofread and correct the following text for ${checks.join(\", \")}. Return only the corrected text:\n\n${text}\n\nCorrected text:`;\n        try {\n            const correctedText = await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n            return {\n                corrected_text: correctedText,\n                suggestions: [],\n                errors: []\n            };\n        } catch (error) {\n            console.error(\"Proofreading failed:\", error);\n            return {\n                corrected_text: text,\n                suggestions: [],\n                errors: []\n            };\n        }\n    }\n    getLanguageName(code) {\n        const languageMap = {\n            es: \"Spanish\",\n            fr: \"French\",\n            de: \"German\",\n            it: \"Italian\",\n            pt: \"Portuguese\",\n            ja: \"Japanese\",\n            ko: \"Korean\",\n            zh: \"Chinese\",\n            en: \"English\"\n        };\n        return languageMap[code] || \"English\";\n    }\n}\n// Server-side only initialization\nconst createGoogleAIServerService = ()=>{\n    const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\";\n    const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n    if (!apiKey) {\n        console.warn(\"Google AI API key not found. Lesson generation will use fallback templates.\");\n        // Return a service that will always throw errors, triggering fallbacks\n        return new GoogleAIServerService({\n            apiKey: \"dummy\",\n            baseUrl\n        });\n    }\n    return new GoogleAIServerService({\n        apiKey,\n        baseUrl\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-ai-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/lesson-ai-generator-server.ts":
/*!*******************************************!*\
  !*** ./lib/lesson-ai-generator-server.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonAIServerGenerator: () => (/* binding */ LessonAIServerGenerator),\n/* harmony export */   lessonAIServerGenerator: () => (/* binding */ lessonAIServerGenerator)\n/* harmony export */ });\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n\nclass LessonAIServerGenerator {\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_0__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    async generateLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = params;\n        console.log(\"\\uD83D\\uDE80 Starting AI lesson generation with params:\", {\n            textLength: sourceText.length,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            hasMetadata: !!contentMetadata,\n            hasStructuredContent: !!structuredContent\n        });\n        try {\n            // Step 1: Analyze content context and complexity\n            console.log(\"\\uD83D\\uDCCA Step 1: Analyzing content context...\");\n            const contentAnalysis = await this.analyzeContentContext(sourceText, contentMetadata, structuredContent, studentLevel);\n            console.log(\"✅ Content analysis complete:\", contentAnalysis);\n            // Step 2: Create contextual summary based on lesson type and content analysis\n            console.log(\"\\uD83D\\uDCDD Step 2: Creating contextual summary...\");\n            const contextualSummary = await this.createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel);\n            console.log(\"✅ Contextual summary created, length:\", contextualSummary.length);\n            // Step 3: Translate if needed (for non-English target languages)\n            let translatedContent = contextualSummary;\n            if (targetLanguage !== \"english\") {\n                console.log(\"\\uD83C\\uDF10 Step 3: Translating to\", targetLanguage);\n                translatedContent = await this.getGoogleAI().translate(contextualSummary, {\n                    targetLanguage: this.getLanguageCode(targetLanguage)\n                });\n                console.log(\"✅ Translation complete, length:\", translatedContent.length);\n            } else {\n                console.log(\"⏭️ Step 3: Skipping translation (target is English)\");\n            }\n            // Step 4: Generate contextual lesson structure\n            console.log(\"\\uD83C\\uDFD7️ Step 4: Generating lesson structure...\");\n            const lessonStructure = await this.generateContextualLessonStructure(translatedContent, contentAnalysis, lessonType, studentLevel, targetLanguage, contentMetadata);\n            console.log(\"✅ Lesson structure generated:\", Object.keys(lessonStructure));\n            // Step 5: Generate detailed content for each section with context\n            console.log(\"\\uD83D\\uDD27 Step 5: Enhancing lesson content...\");\n            const detailedLesson = await this.generateDetailedContextualContent(lessonStructure, translatedContent, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent);\n            console.log(\"✅ Detailed content generated\");\n            // Step 6: Proofread and polish the final lesson\n            console.log(\"✨ Step 6: Proofreading lesson...\");\n            const polishedLesson = await this.proofreadLesson(detailedLesson);\n            console.log(\"\\uD83C\\uDF89 AI lesson generation complete!\");\n            return polishedLesson;\n        } catch (error) {\n            console.error(\"❌ Error in AI lesson generation:\", error);\n            console.log(\"\\uD83D\\uDD04 Falling back to enhanced template generation...\");\n            // Fallback to enhanced template-based generation with context\n            return this.generateEnhancedFallbackLesson(params);\n        }\n    }\n    // New method: Analyze content context and complexity\n    async analyzeContentContext(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\"\n        };\n        // Analyze content complexity based on text characteristics\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        console.log(\"\\uD83D\\uDCC8 Text complexity analysis:\", {\n            avgSentenceLength,\n            complexWords,\n            totalWords,\n            complexity: analysis.complexity\n        });\n        // Extract key topics using AI\n        try {\n            console.log(\"\\uD83C\\uDFAF Extracting topics using AI...\");\n            const topicsPrompt = `Analyze this content and identify 3-5 main topics or themes. Return only the topics, one per line:\n\n\"${sourceText.substring(0, 1000)}\"\n\nTopics:`;\n            const topicsResponse = await this.getGoogleAI().prompt(topicsPrompt, {\n                temperature: 0.3,\n                maxTokens: 200\n            });\n            console.log(\"\\uD83E\\uDD16 AI topics response:\", topicsResponse);\n            analysis.topics = this.parseListFromText(topicsResponse).slice(0, 5);\n            console.log(\"✅ Extracted topics:\", analysis.topics);\n        } catch (error) {\n            console.warn(\"⚠️ AI topic extraction failed, using fallback:\", error.message);\n            // Fallback topic extraction\n            analysis.topics = this.extractTopicsFromHeadings(structuredContent?.headings || []);\n            console.log(\"\\uD83D\\uDD04 Fallback topics:\", analysis.topics);\n        }\n        // Extract key vocabulary for the target level\n        try {\n            console.log(\"\\uD83D\\uDCDA Extracting vocabulary using AI...\");\n            const vocabPrompt = `Extract 8-10 key vocabulary words from this content that would be appropriate for ${studentLevel} level language learners. Focus on useful, practical words. Return only the words, one per line:\n\n\"${sourceText.substring(0, 800)}\"\n\nVocabulary words:`;\n            const vocabResponse = await this.getGoogleAI().prompt(vocabPrompt, {\n                temperature: 0.2,\n                maxTokens: 300\n            });\n            console.log(\"\\uD83E\\uDD16 AI vocabulary response:\", vocabResponse);\n            analysis.keyVocabulary = this.parseListFromText(vocabResponse).slice(0, 10);\n            console.log(\"✅ Extracted vocabulary:\", analysis.keyVocabulary);\n        } catch (error) {\n            console.warn(\"⚠️ AI vocabulary extraction failed, using fallback:\", error.message);\n            // Fallback vocabulary extraction\n            analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n            console.log(\"\\uD83D\\uDD04 Fallback vocabulary:\", analysis.keyVocabulary);\n        }\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n            console.log(\"\\uD83C\\uDF0D Cultural context:\", analysis.culturalContext);\n        }\n        // Generate learning objectives based on content type and lesson type\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        console.log(\"\\uD83C\\uDFAF Learning objectives:\", analysis.learningObjectives);\n        return analysis;\n    }\n    // Enhanced contextual summary creation\n    async createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDCDD Creating contextual summary...\");\n        const summaryPrompt = `Create a focused summary of this content for a ${lessonType} lesson at ${studentLevel} level.\n\nContent type: ${contentAnalysis.contentType}\nMain topics: ${contentAnalysis.topics.join(\", \")}\nComplexity: ${contentAnalysis.complexity}\n\nFocus on aspects most relevant for ${lessonType} learning objectives.\nKeep the summary appropriate for ${studentLevel} CEFR level students.\nWrite 4-6 sentences that capture the key information.\n\nContent: \"${sourceText.substring(0, 1500)}\"\n\nSummary:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual summary...\");\n            const summary = await this.getGoogleAI().prompt(summaryPrompt, {\n                temperature: 0.4,\n                maxTokens: 500\n            });\n            console.log(\"✅ AI contextual summary created:\", summary.substring(0, 100) + \"...\");\n            return summary;\n        } catch (error) {\n            console.warn(\"⚠️ AI contextual summary failed, trying basic summarization:\", error.message);\n            // Fallback to basic summarization\n            try {\n                const basicSummary = await this.getGoogleAI().summarize(sourceText, {\n                    type: \"key-points\",\n                    length: this.getSummaryLength(studentLevel),\n                    format: \"plain-text\"\n                });\n                console.log(\"✅ Basic AI summary created:\", basicSummary.substring(0, 100) + \"...\");\n                return basicSummary;\n            } catch (summaryError) {\n                console.warn(\"⚠️ All AI summarization failed, using text truncation:\", summaryError.message);\n                // Final fallback to simple truncation\n                return sourceText.substring(0, 800) + \"...\";\n            }\n        }\n    }\n    // Enhanced contextual lesson structure generation\n    async generateContextualLessonStructure(content, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFD7️ Generating contextual lesson structure...\");\n        const prompt = `Create a highly contextual ${lessonType} lesson for ${studentLevel} level students learning ${targetLanguage}.\n\nCONTENT CONTEXT:\n- Content Type: ${contentAnalysis.contentType}\n- Source: ${metadata?.domain || \"web content\"}\n- Main Topics: ${contentAnalysis.topics.join(\", \")}\n- Complexity Level: ${contentAnalysis.complexity}\n- Key Vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\n- Cultural Context: ${contentAnalysis.culturalContext}\n\nLESSON CONTENT: \"${content.substring(0, 1000)}\"\n\nCreate a JSON structure with these sections, making each section highly relevant to the source content:\n\n{\n  \"warmup\": [\"question 1\", \"question 2\", \"question 3\"],\n  \"vocabulary\": [\n    {\"word\": \"word1\", \"meaning\": \"definition\", \"example\": \"example sentence\"},\n    {\"word\": \"word2\", \"meaning\": \"definition\", \"example\": \"example sentence\"}\n  ],\n  \"reading\": \"adapted reading passage\",\n  \"comprehension\": [\"question 1\", \"question 2\", \"question 3\", \"question 4\"],\n  \"discussion\": [\"question 1\", \"question 2\", \"question 3\"],\n  \"grammar\": {\n    \"focus\": \"grammar topic\",\n    \"examples\": [\"example 1\", \"example 2\"],\n    \"exercise\": [\"exercise 1\", \"exercise 2\"]\n  },\n  \"pronunciation\": {\n    \"word\": \"challenging word\",\n    \"ipa\": \"/pronunciation/\",\n    \"practice\": \"practice sentence\"\n  },\n  \"wrapup\": [\"reflection 1\", \"reflection 2\", \"reflection 3\"]\n}\n\nIMPORTANT: \n- All content must be directly related to and derived from the source material\n- Vocabulary should come from the actual text, not generic word lists\n- Examples should reference the specific content, not generic scenarios\n- Questions should be about the actual topics discussed, not general themes\n\nReturn only valid JSON:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for lesson structure...\");\n            const response = await this.getGoogleAI().prompt(prompt, {\n                temperature: 0.7,\n                maxTokens: 2000\n            });\n            console.log(\"\\uD83E\\uDD16 AI lesson structure response:\", response.substring(0, 200) + \"...\");\n            try {\n                const parsed = JSON.parse(response);\n                console.log(\"✅ Successfully parsed lesson structure JSON\");\n                return parsed;\n            } catch (parseError) {\n                console.warn(\"⚠️ Failed to parse JSON, attempting to clean response...\");\n                // Try to extract JSON from the response\n                const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    try {\n                        const cleaned = JSON.parse(jsonMatch[0]);\n                        console.log(\"✅ Successfully parsed cleaned JSON\");\n                        return cleaned;\n                    } catch (cleanError) {\n                        console.warn(\"⚠️ Failed to parse cleaned JSON, using fallback\");\n                    }\n                }\n                // If JSON parsing fails, return a structured fallback\n                return this.createStructuredFallback(content, lessonType, studentLevel);\n            }\n        } catch (error) {\n            console.warn(\"⚠️ AI lesson structure generation failed, using fallback:\", error.message);\n            return this.createStructuredFallback(content, lessonType, studentLevel);\n        }\n    }\n    // Enhanced detailed content generation with context\n    async generateDetailedContextualContent(structure, content, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent) {\n        // Use Writer API to expand each section with contextual, detailed content\n        const sections = {\n            ...structure\n        };\n        // Enhance vocabulary section with contextual examples\n        if (sections.vocabulary) {\n            for(let i = 0; i < sections.vocabulary.length; i++){\n                const vocab = sections.vocabulary[i];\n                try {\n                    const contextualExamplePrompt = `\nCreate a natural example sentence using the word \"${vocab.word}\" that relates to this content context:\nTopics: ${contentAnalysis.topics.join(\", \")}\nContent type: ${contentAnalysis.contentType}\nLevel: ${studentLevel}\n\nMake the example relevant to the source material and appropriate for ${studentLevel} level students.\n`;\n                    const enhancedExample = await this.getGoogleAI().write(contextualExamplePrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].example = enhancedExample;\n                    // Add contextual meaning based on source content\n                    const contextualMeaningPrompt = `\nExplain the meaning of \"${vocab.word}\" in the context of: ${contentAnalysis.topics[0] || contentAnalysis.contentType}\nKeep it simple for ${studentLevel} level students.\n`;\n                    const contextualMeaning = await this.getGoogleAI().write(contextualMeaningPrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].contextualMeaning = contextualMeaning;\n                } catch (error) {\n                    // Keep original if enhancement fails\n                    console.warn(`Failed to enhance vocabulary for ${vocab.word}:`, error);\n                }\n            }\n        }\n        // Enhance discussion questions with specific content references\n        if (sections.discussion) {\n            try {\n                const enhancedDiscussionPrompt = `\nEnhance these discussion questions for a ${lessonType} lesson about ${contentAnalysis.topics.join(\" and \")}:\n${sections.discussion.join(\"\\n\")}\n\nMake them more specific to the content, engaging for ${studentLevel} level students, and encourage deeper thinking about:\n- ${contentAnalysis.topics.slice(0, 3).join(\"\\n- \")}\n\nReturn 3-4 enhanced questions that reference specific aspects of the content.\n`;\n                const enhancedDiscussion = await this.getGoogleAI().write(enhancedDiscussionPrompt, {\n                    tone: \"casual\",\n                    length: \"medium\",\n                    format: \"bullet-points\"\n                });\n                sections.discussion = this.parseListFromText(enhancedDiscussion).slice(0, 4);\n            } catch (error) {\n                console.warn(\"Failed to enhance discussion questions:\", error);\n            }\n        }\n        // Enhance reading section with better structure\n        if (sections.reading && structuredContent?.headings?.length > 0) {\n            try {\n                const structuredReadingPrompt = `\nImprove this reading text by organizing it with clear structure based on these headings from the original:\n${structuredContent.headings.slice(0, 3).map((h)=>`- ${h.text}`).join(\"\\n\")}\n\nOriginal text: \"${sections.reading}\"\n\nCreate a well-structured, ${studentLevel}-appropriate reading passage that maintains the key information but improves readability.\n`;\n                const enhancedReading = await this.getGoogleAI().rewrite(sections.reading, {\n                    tone: \"casual\",\n                    length: \"same\",\n                    audience: this.getAudienceLevel(studentLevel)\n                });\n                sections.reading = enhancedReading;\n            } catch (error) {\n                console.warn(\"Failed to enhance reading section:\", error);\n            }\n        }\n        // Enhance grammar section with content-specific examples\n        if (sections.grammar && sections.grammar.focus) {\n            try {\n                const grammarExamplesPrompt = `\nCreate 3 grammar examples for \"${sections.grammar.focus}\" using vocabulary and concepts from this content:\nTopics: ${contentAnalysis.topics.join(\", \")}\nKey vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\n\nMake examples relevant to the content and appropriate for ${studentLevel} level.\n`;\n                const contextualGrammarExamples = await this.getGoogleAI().write(grammarExamplesPrompt, {\n                    tone: \"casual\",\n                    length: \"short\",\n                    format: \"bullet-points\"\n                });\n                sections.grammar.contextualExamples = this.parseListFromText(contextualGrammarExamples);\n            } catch (error) {\n                console.warn(\"Failed to enhance grammar examples:\", error);\n            }\n        }\n        return sections;\n    }\n    async proofreadLesson(lesson) {\n        // Proofread key text sections\n        const sectionsToProofread = [\n            \"reading\",\n            \"grammar.examples\",\n            \"pronunciation.practice\"\n        ];\n        for (const sectionPath of sectionsToProofread){\n            const value = this.getNestedValue(lesson, sectionPath);\n            if (typeof value === \"string\") {\n                const proofread = await this.getGoogleAI().proofread(value, {\n                    checkGrammar: true,\n                    checkSpelling: true,\n                    checkStyle: true\n                });\n                this.setNestedValue(lesson, sectionPath, proofread.corrected_text);\n            }\n        }\n        return lesson;\n    }\n    generateFallbackLesson(params) {\n        // Template-based fallback when AI APIs fail\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getTemplateWarmup(lessonType, studentLevel),\n                vocabulary: this.extractVocabulary(sourceText, studentLevel),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n                discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getTemplateWrapup(lessonType)\n            }\n        };\n    }\n    // Helper methods\n    getSummaryLength(level) {\n        const lengthMap = {\n            A1: \"short\",\n            A2: \"short\",\n            B1: \"medium\",\n            B2: \"medium\",\n            C1: \"long\"\n        };\n        return lengthMap[level] || \"medium\";\n    }\n    getLanguageCode(language) {\n        const languageMap = {\n            spanish: \"es\",\n            french: \"fr\",\n            german: \"de\",\n            italian: \"it\",\n            portuguese: \"pt\",\n            japanese: \"ja\",\n            korean: \"ko\",\n            chinese: \"zh\"\n        };\n        return languageMap[language] || \"en\";\n    }\n    parseListFromText(text) {\n        return text.split(\"\\n\").filter((line)=>line.trim()).map((line)=>line.replace(/^[-•*]\\s*/, \"\").trim()).filter((line)=>line.length > 0).slice(0, 4) // Limit to 4 items\n        ;\n    }\n    getNestedValue(obj, path) {\n        return path.split(\".\").reduce((current, key)=>current?.[key], obj);\n    }\n    setNestedValue(obj, path, value) {\n        const keys = path.split(\".\");\n        const lastKey = keys.pop();\n        const target = keys.reduce((current, key)=>current[key], obj);\n        target[lastKey] = value;\n    }\n    createStructuredFallback(content, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDD04 Creating structured fallback lesson...\");\n        // Extract some basic information from content for better fallback\n        const words = content.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = [\n            ...new Set(words)\n        ].slice(0, 6);\n        const fallback = {\n            warmup: this.getTemplateWarmup(lessonType, studentLevel),\n            vocabulary: uniqueWords.map((word)=>({\n                    word: word,\n                    meaning: `Definition of ${word}`,\n                    example: `Example sentence with ${word}.`\n                })),\n            reading: this.simplifyText(content, studentLevel),\n            comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n            discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n            grammar: this.getTemplateGrammar(studentLevel),\n            pronunciation: this.getTemplatePronunciation(content),\n            wrapup: this.getTemplateWrapup(lessonType)\n        };\n        console.log(\"✅ Structured fallback created\");\n        return fallback;\n    }\n    getTemplateWarmup(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What do you already know about this topic?\",\n                \"Have you had similar experiences?\",\n                \"What would you like to learn more about?\"\n            ],\n            grammar: [\n                \"What grammar patterns do you notice?\",\n                \"Which sentences seem most complex?\",\n                \"What grammar rules do you remember?\"\n            ],\n            travel: [\n                \"Where would you like to travel next?\",\n                \"What travel experiences have you had?\",\n                \"What travel vocabulary do you know?\"\n            ],\n            business: [\n                \"What business situations are you familiar with?\",\n                \"How do you communicate professionally?\",\n                \"What business terms are challenging?\"\n            ],\n            pronunciation: [\n                \"Which sounds are difficult to pronounce?\",\n                \"How do you practice pronunciation?\",\n                \"What pronunciation goals do you have?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    extractVocabulary(text, studentLevel) {\n        // Simple vocabulary extraction based on word frequency and complexity\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = [\n            ...new Set(words)\n        ];\n        const selectedWords = uniqueWords.slice(0, 6);\n        return selectedWords.map((word)=>({\n                word: word,\n                meaning: `Definition of ${word}`,\n                example: `Example sentence with ${word}.`\n            }));\n    }\n    simplifyText(text, studentLevel) {\n        // Basic text simplification based on level\n        const maxLength = {\n            A1: 200,\n            A2: 300,\n            B1: 400,\n            B2: 500,\n            C1: 600\n        };\n        const limit = maxLength[studentLevel] || 400;\n        return text.substring(0, limit) + (text.length > limit ? \"...\" : \"\");\n    }\n    getTemplateComprehension(lessonType, studentLevel) {\n        return [\n            \"What is the main idea of this text?\",\n            \"What supporting details can you identify?\",\n            \"How does this relate to your experience?\",\n            \"What conclusions can you draw?\"\n        ];\n    }\n    getTemplateDiscussion(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What is your opinion on this topic?\",\n                \"How would you handle this situation?\",\n                \"What alternative approaches exist?\"\n            ],\n            business: [\n                \"How would you apply this professionally?\",\n                \"What business challenges does this address?\",\n                \"How would you present this to colleagues?\"\n            ],\n            travel: [\n                \"How would this help while traveling?\",\n                \"What preparations would you make?\",\n                \"How would you share this experience?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    getTemplateGrammar(studentLevel) {\n        const grammarFoci = {\n            A1: \"Present Simple Tense\",\n            A2: \"Past Simple Tense\",\n            B1: \"Present Perfect Tense\",\n            B2: \"Conditional Sentences\",\n            C1: \"Advanced Grammar Structures\"\n        };\n        return {\n            focus: grammarFoci[studentLevel] || \"Present Perfect Tense\",\n            examples: [\n                \"I have learned many new things.\",\n                \"She has improved her skills.\",\n                \"We have discussed this topic.\"\n            ],\n            exercise: [\n                \"I _____ (learn) a lot today.\",\n                \"They _____ (complete) the project.\",\n                \"She _____ (improve) significantly.\"\n            ]\n        };\n    }\n    getTemplatePronunciation(text) {\n        // Extract a challenging word from the text\n        const words = text.match(/\\b[a-z]{6,}\\b/gi) || [\n            \"communication\"\n        ];\n        const selectedWord = words[0] || \"communication\";\n        return {\n            word: selectedWord.toLowerCase(),\n            ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n            practice: `Practice saying: \"${selectedWord}\" in a sentence.`\n        };\n    }\n    getTemplateWrapup(lessonType) {\n        return [\n            \"What new vocabulary did you learn?\",\n            \"Which concepts need more practice?\",\n            \"How will you use this knowledge?\",\n            \"What questions do you still have?\"\n        ];\n    }\n    // New helper methods for enhanced contextual analysis\n    extractTopicsFromHeadings(headings) {\n        return headings.filter((h)=>h.level <= 3) // Focus on main headings\n        .map((h)=>h.text).slice(0, 5);\n    }\n    extractVocabularyFromText(text, level) {\n        // Extract words based on complexity appropriate for the level\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = [\n            ...new Set(words)\n        ];\n        // Filter by complexity based on level\n        const complexityThreshold = {\n            \"A1\": 6,\n            \"A2\": 7,\n            \"B1\": 8,\n            \"B2\": 10,\n            \"C1\": 12\n        };\n        const maxLength = complexityThreshold[level] || 8;\n        return uniqueWords.filter((word)=>word.length <= maxLength && word.length >= 4).slice(0, 8);\n    }\n    determineCulturalContext(domain, text) {\n        // Determine cultural context based on domain and content\n        const culturalIndicators = {\n            \"bbc.com\": \"British English, UK culture\",\n            \"cnn.com\": \"American English, US culture\",\n            \"wikipedia.org\": \"International, encyclopedic\",\n            \"nytimes.com\": \"American English, US perspective\",\n            \"theguardian.com\": \"British English, UK perspective\"\n        };\n        if (culturalIndicators[domain]) {\n            return culturalIndicators[domain];\n        }\n        // Analyze text for cultural markers\n        const americanMarkers = [\n            \"dollar\",\n            \"president\",\n            \"congress\",\n            \"state\",\n            \"federal\"\n        ];\n        const britishMarkers = [\n            \"pound\",\n            \"minister\",\n            \"parliament\",\n            \"council\",\n            \"government\"\n        ];\n        const americanCount = americanMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        const britishCount = britishMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        if (americanCount > britishCount) {\n            return \"American English context\";\n        } else if (britishCount > americanCount) {\n            return \"British English context\";\n        }\n        return \"International context\";\n    }\n    generateLearningObjectives(contentType, topics, level) {\n        const objectives = [];\n        // Base objectives on content type\n        switch(contentType){\n            case \"news\":\n                objectives.push(\"Understand current events vocabulary\");\n                objectives.push(\"Practice reading news articles\");\n                break;\n            case \"blog\":\n                objectives.push(\"Learn informal writing style\");\n                objectives.push(\"Understand personal opinions and experiences\");\n                break;\n            case \"tutorial\":\n                objectives.push(\"Follow step-by-step instructions\");\n                objectives.push(\"Learn technical vocabulary\");\n                break;\n            case \"encyclopedia\":\n                objectives.push(\"Understand factual information\");\n                objectives.push(\"Learn academic vocabulary\");\n                break;\n            default:\n                objectives.push(\"Improve reading comprehension\");\n                objectives.push(\"Expand vocabulary knowledge\");\n        }\n        // Add topic-specific objectives\n        topics.slice(0, 2).forEach((topic)=>{\n            objectives.push(`Discuss topics related to ${topic.toLowerCase()}`);\n        });\n        return objectives.slice(0, 4);\n    }\n    getAudienceLevel(cefrLevel) {\n        const levelMap = {\n            \"A1\": \"beginner\",\n            \"A2\": \"beginner\",\n            \"B1\": \"general\",\n            \"B2\": \"general\",\n            \"C1\": \"expert\"\n        };\n        return levelMap[cefrLevel] || \"general\";\n    }\n    // Enhanced fallback lesson generation with context\n    generateEnhancedFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, contentMetadata, structuredContent } = params;\n        // Use available context even in fallback\n        const topics = structuredContent?.headings?.map((h)=>h.text).slice(0, 3) || [];\n        const contentType = contentMetadata?.contentType || \"general\";\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getContextualWarmup(lessonType, studentLevel, topics, contentType),\n                vocabulary: this.extractContextualVocabulary(sourceText, studentLevel, topics),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getContextualComprehension(lessonType, studentLevel, topics),\n                discussion: this.getContextualDiscussion(lessonType, studentLevel, topics),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getContextualWrapup(lessonType, topics)\n            }\n        };\n    }\n    getContextualWarmup(lessonType, studentLevel, topics, contentType) {\n        const baseQuestions = this.getTemplateWarmup(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What do you know about ${topics[0]?.toLowerCase()}?`,\n                `Have you experienced anything related to ${topics[1]?.toLowerCase() || topics[0]?.toLowerCase()}?`,\n                `What would you like to learn about this ${contentType} content?`\n            ];\n        }\n        return baseQuestions;\n    }\n    extractContextualVocabulary(text, studentLevel, topics) {\n        const vocabulary = this.extractVocabulary(text, studentLevel);\n        // Enhance with topic context if available\n        if (topics.length > 0) {\n            return vocabulary.map((vocab, index)=>({\n                    ...vocab,\n                    context: index < topics.length ? `Related to ${topics[index].toLowerCase()}` : vocab.meaning\n                }));\n        }\n        return vocabulary;\n    }\n    getContextualComprehension(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateComprehension(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is the main point about ${topics[0]?.toLowerCase()}?`,\n                `How does the text explain ${topics[1]?.toLowerCase() || \"the topic\"}?`,\n                \"What supporting details can you identify?\",\n                \"What conclusions can you draw from this information?\"\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualDiscussion(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateDiscussion(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is your opinion about ${topics[0]?.toLowerCase()}?`,\n                `How would you apply this information about ${topics[1]?.toLowerCase() || \"this topic\"}?`,\n                `What are the implications of what you learned about ${topics[0]?.toLowerCase()}?`\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualWrapup(lessonType, topics) {\n        if (topics.length > 0) {\n            return [\n                `What new vocabulary did you learn about ${topics[0]?.toLowerCase()}?`,\n                `Which concepts about ${topics[1]?.toLowerCase() || \"this topic\"} need more practice?`,\n                \"How will you use this knowledge in real situations?\",\n                \"What questions do you still have about this content?\"\n            ];\n        }\n        return this.getTemplateWrapup(lessonType);\n    }\n    constructor(){\n        this.googleAI = null;\n    }\n}\nconst lessonAIServerGenerator = new LessonAIServerGenerator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/lesson-ai-generator-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase-server.ts":
/*!********************************!*\
  !*** ./lib/supabase-server.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerSupabaseClient: () => (/* binding */ createServerSupabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\nconst createServerSupabaseClient = ()=>{\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://jbkpnirowdvlwlgheqho.supabase.co\" || 0, \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impia3BuaXJvd2R2bHdsZ2hlcWhvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MTQ3NTEsImV4cCI6MjA3NDQ5MDc1MX0.FZhruXKDzIkZLhla5oerfs7yzjvTsGLlKTUer34N6N0\" || 0, {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            },\n            set (name, value, options) {\n                cookieStore.set({\n                    name,\n                    value,\n                    ...options\n                });\n            },\n            remove (name, options) {\n                cookieStore.set({\n                    name,\n                    value: \"\",\n                    ...options\n                });\n            }\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUNaO0FBRS9CLE1BQU1FLDZCQUE2QjtJQUN4QyxNQUFNQyxjQUFjRixxREFBT0E7SUFFM0IsT0FBT0QsaUVBQWtCQSxDQUN2QkksMENBQW9DLElBQUksR0FDeENBLGtOQUF5QyxJQUFJLEdBQzdDO1FBQ0FILFNBQVM7WUFDUE8sS0FBSUMsSUFBWTtnQkFDZCxPQUFPTixZQUFZSyxHQUFHLENBQUNDLE9BQU9DO1lBQ2hDO1lBQ0FDLEtBQUlGLElBQVksRUFBRUMsS0FBYSxFQUFFRSxPQUFZO2dCQUMzQ1QsWUFBWVEsR0FBRyxDQUFDO29CQUFFRjtvQkFBTUM7b0JBQU8sR0FBR0UsT0FBTztnQkFBQztZQUM1QztZQUNBQyxRQUFPSixJQUFZLEVBQUVHLE9BQVk7Z0JBQy9CVCxZQUFZUSxHQUFHLENBQUM7b0JBQUVGO29CQUFNQyxPQUFPO29CQUFJLEdBQUdFLE9BQU87Z0JBQUM7WUFDaEQ7UUFDRjtJQUNGO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzPzA5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VydmVyQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zc3JcIlxuaW1wb3J0IHsgY29va2llcyB9IGZyb20gXCJuZXh0L2hlYWRlcnNcIlxuXG5leHBvcnQgY29uc3QgY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IGNvb2tpZVN0b3JlID0gY29va2llcygpXG5cbiAgcmV0dXJuIGNyZWF0ZVNlcnZlckNsaWVudChcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgfHwgJ2h0dHBzOi8vcGxhY2Vob2xkZXIuc3VwYWJhc2UuY28nLCBcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCAncGxhY2Vob2xkZXIta2V5JywgXG4gICAge1xuICAgIGNvb2tpZXM6IHtcbiAgICAgIGdldChuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNvb2tpZVN0b3JlLmdldChuYW1lKT8udmFsdWVcbiAgICAgIH0sXG4gICAgICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWUsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgICByZW1vdmUobmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWU6IFwiXCIsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJDbGllbnQiLCJjb29raWVzIiwiY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQiLCJjb29raWVTdG9yZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsImdldCIsIm5hbWUiLCJ2YWx1ZSIsInNldCIsIm9wdGlvbnMiLCJyZW1vdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase-server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/cookie","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();