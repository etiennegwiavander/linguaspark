"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-lesson/route";
exports.ids = ["app/api/generate-lesson/route"];
exports.modules = {

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-lesson/route.ts */ \"(rsc)/./app/api/generate-lesson/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-lesson/route\",\n        pathname: \"/api/generate-lesson\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-lesson/route\"\n    },\n    resolvedPagePath: \"D:\\\\linguaspark\\\\app\\\\api\\\\generate-lesson\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_linguaspark_app_api_generate_lesson_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-lesson/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1sZXNzb24lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLWxlc3NvbiUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbGluZ3Vhc3BhcmslNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNsaW5ndWFzcGFyayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDSTtBQUNqRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzI3ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlLWxlc3NvblwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZ2VuZXJhdGUtbGVzc29uL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFxnZW5lcmF0ZS1sZXNzb25cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlLWxlc3Nvbi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-lesson/route.ts":
/*!******************************************!*\
  !*** ./app/api/generate-lesson/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/lesson-ai-generator-server */ \"(rsc)/./lib/lesson-ai-generator-server.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase-server */ \"(rsc)/./lib/supabase-server.ts\");\n\n // Updated import to use server-side generator\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = body;\n        // Validate required fields\n        if (!sourceText || !lessonType || !studentLevel || !targetLanguage) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing required fields\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate user authentication\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__.createServerSupabaseClient)();\n        const { data: { user }, error: authError } = await supabase.auth.getUser();\n        if (authError || !user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        // Generate lesson using enhanced AI pipeline with contextual information\n        const lesson = await _lib_lesson_ai_generator_server__WEBPACK_IMPORTED_MODULE_1__.lessonAIServerGenerator.generateLesson({\n            sourceText,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sourceUrl,\n            contentMetadata,\n            structuredContent,\n            wordCount,\n            readingTime\n        });\n        console.log(\"\\uD83C\\uDF93 Generated lesson structure:\", {\n            hasLesson: !!lesson,\n            hasSections: !!lesson?.sections,\n            sectionKeys: lesson?.sections ? Object.keys(lesson.sections) : [],\n            lessonType: lesson?.lessonType,\n            studentLevel: lesson?.studentLevel,\n            targetLanguage: lesson?.targetLanguage,\n            warmupQuestions: lesson?.sections?.warmup?.length || 0,\n            vocabularyItems: lesson?.sections?.vocabulary?.length || 0\n        });\n        // Check if we have a valid AI-generated lesson\n        if (lesson && lesson.sections && Object.keys(lesson.sections).length > 0) {\n            console.log(\"✅ Using AI-generated lesson content\");\n            // Use AI-generated content with minimal fallbacks only for missing properties\n            const finalLesson = {\n                lessonType: lesson.lessonType || lessonType,\n                studentLevel: lesson.studentLevel || studentLevel,\n                targetLanguage: lesson.targetLanguage || targetLanguage,\n                sections: lesson.sections // Use AI-generated sections as-is\n            };\n            console.log(\"\\uD83C\\uDF89 Returning AI-generated lesson with sections:\", Object.keys(finalLesson.sections));\n            // Save and return the AI-generated lesson\n            const { data: savedLesson, error: saveError } = await supabase.from(\"lessons\").insert({\n                tutor_id: user.id,\n                title: `${lessonType} Lesson - ${new Date().toLocaleDateString()}`,\n                lesson_type: lessonType,\n                student_level: studentLevel,\n                target_language: targetLanguage,\n                source_url: sourceUrl,\n                source_text: sourceText,\n                lesson_data: finalLesson\n            }).select().single();\n            if (saveError) {\n                console.error(\"Error saving lesson:\", saveError);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    lesson: finalLesson\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                lesson: {\n                    ...finalLesson,\n                    id: savedLesson.id\n                }\n            });\n        }\n        // Only use fallback if AI generation completely failed\n        console.warn(\"⚠️ AI generation failed, using fallback lesson structure\");\n        const safeLesson = {\n            lessonType: lessonType,\n            studentLevel: studentLevel,\n            targetLanguage: targetLanguage,\n            sections: {\n                warmup: [\n                    \"What do you already know about this topic?\",\n                    \"Have you had similar experiences?\",\n                    \"What would you like to learn more about?\"\n                ],\n                vocabulary: [],\n                reading: sourceText.substring(0, 500),\n                comprehension: [\n                    \"What is the main idea of this text?\",\n                    \"What supporting details can you identify?\"\n                ],\n                discussion: [\n                    \"What is your opinion on this topic?\",\n                    \"How would you handle this situation?\"\n                ],\n                grammar: {\n                    focus: \"Present Perfect Tense\",\n                    examples: [\n                        \"I have learned many new things.\",\n                        \"She has improved her skills.\"\n                    ],\n                    exercise: [\n                        \"I _____ (learn) a lot today.\",\n                        \"They _____ (complete) the project.\"\n                    ]\n                },\n                pronunciation: {\n                    word: \"communication\",\n                    ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n                    practice: \"Practice saying: communication in a sentence.\"\n                },\n                wrapup: [\n                    \"What new vocabulary did you learn?\",\n                    \"Which concepts need more practice?\"\n                ]\n            }\n        };\n        console.log(\"✅ Using fallback lesson structure\");\n        // Save fallback lesson to database\n        const { data: savedLesson, error: saveError } = await supabase.from(\"lessons\").insert({\n            tutor_id: user.id,\n            title: `${lessonType} Lesson - ${new Date().toLocaleDateString()}`,\n            lesson_type: lessonType,\n            student_level: studentLevel,\n            target_language: targetLanguage,\n            source_url: sourceUrl,\n            source_text: sourceText,\n            lesson_data: safeLesson\n        }).select().single();\n        if (saveError) {\n            console.error(\"Error saving lesson:\", saveError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                lesson: safeLesson\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            lesson: {\n                ...safeLesson,\n                id: savedLesson.id\n            }\n        });\n    } catch (error) {\n        console.error(\"Error generating lesson:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate lesson\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-lesson/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-ai-server.ts":
/*!*********************************!*\
  !*** ./lib/google-ai-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleAIServerService: () => (/* binding */ createGoogleAIServerService)\n/* harmony export */ });\n// Server-side Google AI (Gemini) APIs service layer\nclass GoogleAIServerService {\n    constructor(config){\n        this.model = \"models/gemini-2.5-flash\" // Use actual available model\n        ;\n        this.config = config;\n    }\n    async makeGeminiRequest(prompt, options = {}) {\n        // Use only the working model\n        const modelsToTry = [\n            \"models/gemini-2.5-flash\"\n        ];\n        const possibleUrls = [];\n        // Generate URLs for different combinations\n        for (const model of modelsToTry){\n            possibleUrls.push(`${this.config.baseUrl}/v1beta/models/${model}:generateContent?key=${this.config.apiKey}`);\n            possibleUrls.push(`${this.config.baseUrl}/v1/models/${model}:generateContent?key=${this.config.apiKey}`);\n        }\n        const requestBody = {\n            contents: [\n                {\n                    parts: [\n                        {\n                            text: prompt\n                        }\n                    ]\n                }\n            ],\n            generationConfig: {\n                temperature: options.temperature || 0.7,\n                maxOutputTokens: options.maxTokens || 2000,\n                topP: options.topP || 0.9\n            }\n        };\n        console.log(\"\\uD83D\\uDD17 Using working Gemini API endpoint...\");\n        // Use only the working endpoint\n        const url = `${this.config.baseUrl}/v1beta/models/gemini-2.5-flash:generateContent?key=${this.config.apiKey}`;\n        console.log(`🌐 API URL: ${url.replace(this.config.apiKey, \"API_KEY_HIDDEN\")}`);\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(requestBody)\n            });\n            console.log(`📡 Response status: ${response.status} ${response.statusText}`);\n            if (response.ok) {\n                const result = await response.json();\n                console.log(\"✅ Successful API response received\");\n                console.log(\"\\uD83D\\uDD0D Full API response structure:\", JSON.stringify(result, null, 2));\n                // More robust response parsing with MAX_TOKENS handling\n                if (result.candidates && result.candidates.length > 0) {\n                    const candidate = result.candidates[0];\n                    // Check if we hit MAX_TOKENS limit\n                    if (candidate.finishReason === \"MAX_TOKENS\") {\n                        console.warn(\"⚠️ Hit MAX_TOKENS limit, response may be incomplete\");\n                        // Still try to extract partial content if available\n                        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                            const text = candidate.content.parts[0].text;\n                            console.log(\"⚠️ Extracted partial text due to MAX_TOKENS:\", text.substring(0, 100) + \"...\");\n                            return text;\n                        } else {\n                            console.warn(\"❌ MAX_TOKENS hit and no content available\");\n                            throw new Error(\"API response hit token limit with no usable content\");\n                        }\n                    }\n                    // Normal response processing\n                    if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {\n                        const text = candidate.content.parts[0].text;\n                        console.log(\"✅ Extracted text:\", text);\n                        return text;\n                    } else {\n                        console.warn(\"⚠️ Invalid content structure in candidate:\", candidate);\n                        throw new Error(\"Invalid content structure in API response\");\n                    }\n                } else {\n                    console.warn(\"⚠️ No candidates in response:\", result);\n                    throw new Error(\"No candidates in API response\");\n                }\n            } else {\n                const errorText = await response.text();\n                console.error(`❌ API call failed:`, response.status, errorText);\n                throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n        } catch (error) {\n            console.error(`❌ API call exception:`, error.message);\n            throw error;\n        }\n    }\n    async summarize(text, options = {}) {\n        const summaryType = options.type || \"key-points\";\n        const length = options.length || \"medium\";\n        const lengthInstructions = {\n            short: \"in 2-3 sentences\",\n            medium: \"in 4-6 sentences\",\n            long: \"in 7-10 sentences\"\n        };\n        const typeInstructions = {\n            \"key-points\": \"Extract and summarize the key points\",\n            \"tl-dr\": \"Create a TL;DR summary\",\n            \"teaser\": \"Write an engaging teaser summary\",\n            \"headline\": \"Create a headline-style summary\"\n        };\n        const prompt = `${typeInstructions[summaryType]} of the following text ${lengthInstructions[length]}:\n\n${text}\n\nSummary:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.3\n            });\n        } catch (error) {\n            console.error(\"Summarization failed:\", error);\n            // Fallback to simple truncation\n            return text.substring(0, 500) + \"...\";\n        }\n    }\n    async translate(text, options) {\n        const targetLang = this.getLanguageName(options.targetLanguage);\n        const prompt = `Translate the following text to ${targetLang}. Maintain the original meaning and tone:\n\n${text}\n\nTranslation:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n        } catch (error) {\n            console.error(\"Translation failed:\", error);\n            // Return original text if translation fails\n            return text;\n        }\n    }\n    async prompt(prompt, options = {}) {\n        try {\n            return await this.makeGeminiRequest(prompt, options);\n        } catch (error) {\n            console.error(\"Prompt generation failed:\", error);\n            throw error;\n        }\n    }\n    async write(prompt, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"medium\";\n        const format = options.format || \"paragraph\";\n        const lengthInstructions = {\n            short: \"Keep it brief and concise\",\n            medium: \"Write a moderate length response\",\n            long: \"Provide a detailed and comprehensive response\"\n        };\n        const formatInstructions = {\n            paragraph: \"Write in paragraph form\",\n            \"bullet-points\": \"Format as bullet points\",\n            \"numbered-list\": \"Format as a numbered list\"\n        };\n        const enhancedPrompt = `${prompt}\n\nInstructions:\n- Tone: ${tone}\n- ${lengthInstructions[length]}\n- ${formatInstructions[format]}\n\nResponse:`;\n        try {\n            return await this.makeGeminiRequest(enhancedPrompt, {\n                temperature: 0.7\n            });\n        } catch (error) {\n            console.error(\"Writing failed:\", error);\n            throw error;\n        }\n    }\n    async rewrite(text, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"same\";\n        const audience = options.audience || \"general\";\n        const lengthInstructions = {\n            shorter: \"Make it more concise\",\n            longer: \"Expand and add more detail\",\n            same: \"Keep approximately the same length\"\n        };\n        const prompt = `Rewrite the following text with these requirements:\n- Tone: ${tone}\n- Audience: ${audience}\n- Length: ${lengthInstructions[length]}\n\nOriginal text:\n${text}\n\nRewritten text:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.5\n            });\n        } catch (error) {\n            console.error(\"Rewriting failed:\", error);\n            return text // Return original if rewriting fails\n            ;\n        }\n    }\n    async proofread(text, options = {}) {\n        const checkGrammar = options.checkGrammar !== false;\n        const checkSpelling = options.checkSpelling !== false;\n        const checkStyle = options.checkStyle !== false;\n        const checks = [];\n        if (checkGrammar) checks.push(\"grammar\");\n        if (checkSpelling) checks.push(\"spelling\");\n        if (checkStyle) checks.push(\"style and clarity\");\n        const prompt = `Proofread and correct the following text for ${checks.join(\", \")}. Return only the corrected text:\n\n${text}\n\nCorrected text:`;\n        try {\n            const correctedText = await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n            return {\n                corrected_text: correctedText,\n                suggestions: [],\n                errors: []\n            };\n        } catch (error) {\n            console.error(\"Proofreading failed:\", error);\n            return {\n                corrected_text: text,\n                suggestions: [],\n                errors: []\n            };\n        }\n    }\n    getLanguageName(code) {\n        const languageMap = {\n            es: \"Spanish\",\n            fr: \"French\",\n            de: \"German\",\n            it: \"Italian\",\n            pt: \"Portuguese\",\n            ja: \"Japanese\",\n            ko: \"Korean\",\n            zh: \"Chinese\",\n            en: \"English\"\n        };\n        return languageMap[code] || \"English\";\n    }\n}\n// Server-side only initialization\nconst createGoogleAIServerService = ()=>{\n    const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\";\n    const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n    if (!apiKey) {\n        console.warn(\"Google AI API key not found. Lesson generation will use fallback templates.\");\n        // Return a service that will always throw errors, triggering fallbacks\n        return new GoogleAIServerService({\n            apiKey: \"dummy\",\n            baseUrl\n        });\n    }\n    return new GoogleAIServerService({\n        apiKey,\n        baseUrl\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-ai-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/lesson-ai-generator-server.ts":
/*!*******************************************!*\
  !*** ./lib/lesson-ai-generator-server.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonAIServerGenerator: () => (/* binding */ LessonAIServerGenerator),\n/* harmony export */   lessonAIServerGenerator: () => (/* binding */ lessonAIServerGenerator)\n/* harmony export */ });\n/* harmony import */ var _google_ai_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n\nclass LessonAIServerGenerator {\n    getGoogleAI() {\n        if (!this.googleAI) {\n            this.googleAI = (0,_google_ai_server__WEBPACK_IMPORTED_MODULE_0__.createGoogleAIServerService)();\n        }\n        return this.googleAI;\n    }\n    async generateLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, sourceUrl, contentMetadata, structuredContent, wordCount, readingTime } = params;\n        console.log(\"\\uD83D\\uDE80 Starting optimized AI lesson generation with params:\", {\n            textLength: sourceText.length,\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            hasMetadata: !!contentMetadata,\n            hasStructuredContent: !!structuredContent\n        });\n        try {\n            // Use ultra-minimal AI approach to avoid MAX_TOKENS\n            console.log(\"\\uD83E\\uDD16 Step 1: Generating lesson with ultra-minimal AI prompts...\");\n            const lessonStructure = await this.generateMinimalAILesson(sourceText, lessonType, studentLevel, targetLanguage, contentMetadata);\n            console.log(\"✅ Minimal AI lesson generated:\", Object.keys(lessonStructure));\n            // Return properly structured GeneratedLesson object\n            const finalLesson = {\n                lessonType,\n                studentLevel,\n                targetLanguage,\n                sections: lessonStructure\n            };\n            console.log(\"\\uD83C\\uDFAF Returning AI-generated lesson:\", {\n                lessonType: finalLesson.lessonType,\n                studentLevel: finalLesson.studentLevel,\n                targetLanguage: finalLesson.targetLanguage,\n                sectionsCount: Object.keys(finalLesson.sections).length,\n                warmupCount: finalLesson.sections.warmup?.length || 0,\n                vocabularyCount: finalLesson.sections.vocabulary?.length || 0\n            });\n            console.log(\"\\uD83C\\uDF89 Optimized AI lesson generation complete!\");\n            return finalLesson;\n        } catch (error) {\n            console.error(\"❌ Error in AI lesson generation:\", error);\n            console.log(\"\\uD83D\\uDD04 Falling back to smart template generation...\");\n            // Fallback to smart templates if AI fails\n            return await this.generateSmartTemplateFallback(params);\n        }\n    }\n    // Ultra-minimal AI lesson generation to avoid MAX_TOKENS\n    async generateMinimalAILesson(sourceText, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFAF Using ultra-minimal AI prompts to avoid token limits...\");\n        // Step 1: Generate just the essential parts with minimal prompts\n        const warmupQuestions = await this.generateMinimalWarmup(sourceText, studentLevel);\n        const vocabulary = await this.generateMinimalVocabulary(sourceText, studentLevel);\n        const comprehensionQuestions = await this.generateMinimalComprehension(sourceText, studentLevel);\n        // Step 2: Use hybrid approach - AI for key parts, templates for the rest\n        return {\n            warmup: this.addWarmupInstructions(warmupQuestions, studentLevel),\n            vocabulary: vocabulary,\n            reading: this.generateSmartReading(sourceText, studentLevel),\n            comprehension: this.addComprehensionInstructions(comprehensionQuestions, studentLevel),\n            discussion: this.addDiscussionInstructions(this.generateSmartDiscussion(this.extractBetterTopics(sourceText), lessonType, studentLevel), studentLevel),\n            grammar: this.generateSmartGrammar(studentLevel, sourceText),\n            pronunciation: this.generateSmartPronunciation(vocabulary.map((v)=>v.word)),\n            wrapup: this.addWrapupInstructions(this.generateSmartWrapup(this.extractBetterTopics(sourceText), studentLevel), studentLevel)\n        };\n    }\n    // Ultra-minimal warmup generation\n    async generateMinimalWarmup(sourceText, studentLevel) {\n        // Extract better context for topic identification\n        const topics = this.extractBetterTopics(sourceText);\n        const mainTopic = topics[0] || \"this topic\";\n        // Create a more specific prompt that avoids content assumptions\n        const prompt = `Write 3 ${studentLevel} warm-up questions about ${mainTopic}. Ask about students' prior knowledge and experience. Do not mention any specific events or results. Format: just the questions, one per line:`;\n        try {\n            console.log(\"\\uD83D\\uDD25 Minimal warmup prompt:\", prompt.length, \"chars\");\n            console.log(\"\\uD83C\\uDFAF Topic identified:\", mainTopic);\n            const response = await this.getGoogleAI().prompt(prompt);\n            // Extract only actual questions (must end with ?)\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question (ends with ?) and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\") && !line.toLowerCase().includes(\"headline mentions\") && !line.toLowerCase().includes(\"the text\") && !line.toLowerCase().includes(\"the article\") && !line.toLowerCase().includes(\"according to\") && !line.toLowerCase().includes(\"the passage\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^-\\s*/, \"\").trim()).slice(0, 3);\n            console.log(\"\\uD83C\\uDFAF Extracted warmup questions:\", questions);\n            return questions.length >= 3 ? questions : this.generateSmartWarmupQuestions(topics, studentLevel, {});\n        } catch (error) {\n            console.log(\"⚠️ Minimal warmup failed, using template\");\n            return this.generateSmartWarmupQuestions(this.extractBetterTopics(sourceText), studentLevel, {});\n        }\n    }\n    // Add instructional text to sections\n    addWarmupInstructions(questions, studentLevel) {\n        const instruction = \"Have the following conversations or discussions with your tutor before reading the text:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addComprehensionInstructions(questions, studentLevel) {\n        const instruction = \"After reading the text, answer these comprehension questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addDiscussionInstructions(questions, studentLevel) {\n        const instruction = \"Discuss these questions with your tutor to explore the topic in depth:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    addWrapupInstructions(questions, studentLevel) {\n        const instruction = \"Reflect on your learning by discussing these wrap-up questions:\";\n        return [\n            instruction,\n            ...questions\n        ];\n    }\n    // Better topic extraction that recognizes compound terms\n    extractBetterTopics(text) {\n        const topics = [];\n        // Look for compound terms first (like \"Ryder Cup\", \"World Cup\", etc.)\n        const compoundPatterns = [\n            /\\b(Ryder Cup|World Cup|Champions League|Premier League|Super Bowl|Olympics|World Series)\\b/gi,\n            /\\b(artificial intelligence|machine learning|climate change|social media)\\b/gi,\n            /\\b([A-Z][a-z]+ [A-Z][a-z]+)\\b/g // General compound proper nouns\n        ];\n        for (const pattern of compoundPatterns){\n            const matches = text.match(pattern);\n            if (matches) {\n                topics.push(...matches.map((m)=>m.toLowerCase()));\n            }\n        }\n        // If no compound terms found, fall back to single words\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"europe\",\n                \"team\",\n                \"golf\",\n                \"tournament\",\n                \"sports\",\n                \"competition\"\n            ];\n            const foundWords = words.filter((word)=>commonWords.includes(word));\n            topics.push(...foundWords.slice(0, 3));\n        }\n        return topics.length > 0 ? topics : [\n            \"sports\"\n        ];\n    }\n    // Enhanced vocabulary generation with AI-generated contextual examples\n    async generateMinimalVocabulary(sourceText, studentLevel) {\n        const words = sourceText.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words)).slice(0, 8) // 6-10 words, start with 8\n        ;\n        const vocabulary = [];\n        for (const word of uniqueWords){\n            try {\n                const capitalizedWord = this.capitalizeWord(word);\n                // Generate AI definition\n                const definitionPrompt = `Define \"${word}\" simply for ${studentLevel} level. Context: ${sourceText.substring(0, 80)}. Give only the definition, no extra text:`;\n                console.log(\"\\uD83D\\uDCDA Vocab definition prompt:\", definitionPrompt.length, \"chars\");\n                const rawMeaning = await this.getGoogleAI().prompt(definitionPrompt);\n                const meaning = this.cleanDefinition(rawMeaning, studentLevel);\n                // Generate AI contextual examples\n                const examples = await this.generateAIExampleSentences(word, studentLevel, sourceText);\n                vocabulary.push({\n                    word: capitalizedWord,\n                    meaning: meaning.trim().substring(0, 200),\n                    example: examples\n                });\n            } catch (error) {\n                console.log(`⚠️ Vocab failed for ${word}, using enhanced template`);\n                const capitalizedWord = this.capitalizeWord(word);\n                vocabulary.push({\n                    word: capitalizedWord,\n                    meaning: this.generateContextualWordMeaning(word, studentLevel, sourceText),\n                    example: await this.generateAIExampleSentences(word, studentLevel, sourceText)\n                });\n            }\n        }\n        // Ensure we have 6-10 words\n        return vocabulary.slice(0, 10).length >= 6 ? vocabulary.slice(0, 10) : vocabulary.slice(0, 6);\n    }\n    // Ultra-minimal comprehension generation\n    async generateMinimalComprehension(sourceText, studentLevel) {\n        const shortText = sourceText.substring(0, 150) // Use only first 150 chars\n        ;\n        const prompt = `Write 3 ${studentLevel} reading comprehension questions about this text. Only return questions, no instructions: ${shortText}`;\n        try {\n            console.log(\"❓ Minimal comprehension prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            const questions = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>{\n                // Must be a question and not an instruction\n                return line.endsWith(\"?\") && line.length > 10 && !line.toLowerCase().includes(\"here are\") && !line.toLowerCase().includes(\"based on\");\n            }).map((line)=>line.replace(/^\\d+\\.?\\s*/, \"\").replace(/^\\*\\*/, \"\").replace(/\\*\\*$/, \"\").trim()).slice(0, 3);\n            return questions.length >= 3 ? questions : this.generateSmartComprehension(this.extractBetterTopics(sourceText), studentLevel);\n        } catch (error) {\n            console.log(\"⚠️ Minimal comprehension failed, using template\");\n            return this.generateSmartComprehension(this.extractBetterTopics(sourceText), studentLevel);\n        }\n    }\n    // Smart template fallback with AI-generated examples\n    async generateSmartTemplateFallback(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        console.log(\"\\uD83C\\uDFA8 Using smart template fallback...\");\n        const topics = this.extractBetterTopics(sourceText);\n        const vocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.addWarmupInstructions(this.generateSmartWarmupQuestions(topics, studentLevel, {}), studentLevel),\n                vocabulary: await this.generateSmartVocabulary(vocabulary, sourceText, studentLevel),\n                reading: this.generateSmartReading(sourceText, studentLevel),\n                comprehension: this.addComprehensionInstructions(this.generateSmartComprehension(topics, studentLevel), studentLevel),\n                discussion: this.addDiscussionInstructions(this.generateSmartDiscussion(topics, lessonType, studentLevel), studentLevel),\n                grammar: this.generateSmartGrammar(studentLevel, sourceText),\n                pronunciation: this.generateSmartPronunciation(vocabulary),\n                wrapup: this.addWrapupInstructions(this.generateSmartWrapup(topics, studentLevel), studentLevel)\n            }\n        };\n    }\n    // Content analysis without AI calls\n    analyzeContentContextNoAI(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context without AI...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        // Extract topics using text analysis\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        // Extract vocabulary using text analysis\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n        }\n        // Generate learning objectives\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        return analysis;\n    }\n    // New method: Analyze content context and complexity\n    async analyzeContentContext(sourceText, metadata, structuredContent, studentLevel) {\n        console.log(\"\\uD83D\\uDD0D Analyzing content context...\");\n        const analysis = {\n            contentType: metadata?.contentType || \"general\",\n            domain: metadata?.domain || \"\",\n            complexity: \"medium\",\n            topics: [],\n            keyVocabulary: [],\n            culturalContext: \"\",\n            learningObjectives: [],\n            difficulty: studentLevel || \"B1\",\n            title: metadata?.title || \"\",\n            sourceCountry: this.determineSourceCountry(metadata?.domain || \"\")\n        };\n        // Analyze content complexity based on text characteristics\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const avgSentenceLength = sentences.length > 0 ? sentences.reduce((sum, s)=>sum + s.split(\" \").length, 0) / sentences.length : 0;\n        const complexWords = sourceText.match(/\\b\\w{8,}\\b/g)?.length || 0;\n        const totalWords = sourceText.split(/\\s+/).length;\n        if (avgSentenceLength > 20 || complexWords / totalWords > 0.15) {\n            analysis.complexity = \"high\";\n        } else if (avgSentenceLength < 12 && complexWords / totalWords < 0.08) {\n            analysis.complexity = \"low\";\n        }\n        console.log(\"\\uD83D\\uDCC8 Text complexity analysis:\", {\n            avgSentenceLength,\n            complexWords,\n            totalWords,\n            complexity: analysis.complexity\n        });\n        // Extract key topics using simple text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83C\\uDFAF Extracting topics using text analysis...\");\n        analysis.topics = this.extractTopicsFromText(sourceText, structuredContent?.headings || []);\n        console.log(\"✅ Extracted topics:\", analysis.topics);\n        // Extract key vocabulary using text analysis (skip AI to avoid token limits)\n        console.log(\"\\uD83D\\uDCDA Extracting vocabulary using text analysis...\");\n        analysis.keyVocabulary = this.extractVocabularyFromText(sourceText, studentLevel);\n        console.log(\"✅ Extracted vocabulary:\", analysis.keyVocabulary);\n        // Determine cultural context\n        if (metadata?.domain) {\n            analysis.culturalContext = this.determineCulturalContext(metadata.domain, sourceText);\n            console.log(\"\\uD83C\\uDF0D Cultural context:\", analysis.culturalContext);\n        }\n        // Generate learning objectives based on content type and lesson type\n        analysis.learningObjectives = this.generateLearningObjectives(analysis.contentType, analysis.topics, studentLevel);\n        console.log(\"\\uD83C\\uDFAF Learning objectives:\", analysis.learningObjectives);\n        return analysis;\n    }\n    // Enhanced contextual summary creation\n    async createContextualSummary(sourceText, contentAnalysis, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDCDD Creating contextual summary...\");\n        // Use simple prompt to avoid token limits\n        const summaryPrompt = `Summarize this text in 4-5 sentences for ${studentLevel} level students:\n\n${sourceText.substring(0, 800)}\n\nSummary:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual summary...\");\n            const summary = await this.getGoogleAI().prompt(summaryPrompt, {\n                temperature: 0.4,\n                maxTokens: 300\n            });\n            console.log(\"✅ AI contextual summary created:\", summary.substring(0, 100) + \"...\");\n            return summary;\n        } catch (error) {\n            console.warn(\"⚠️ AI contextual summary failed, using text truncation:\", error.message);\n            // Skip complex fallbacks, just use truncation\n            const truncated = sourceText.substring(0, 600) + \"...\";\n            console.log(\"\\uD83D\\uDD04 Using truncated text as summary\");\n            return truncated;\n        }\n    }\n    // Generate CEFR-adapted warm-up questions\n    async generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata) {\n        console.log(\"\\uD83D\\uDD25 Generating CEFR-adapted warm-up questions...\");\n        const levelInstructions = {\n            \"A1\": `\nCreate 3 warm-up questions for A1 (beginner) level:\n- Use simple present tense and basic vocabulary\n- Ask yes/no questions or simple choice questions\n- Focus on familiar, concrete concepts\n- Keep questions short and direct\n- Use vocabulary the student likely knows\nExample: \"Do you use [topic] in your daily life? Yes or No?\"`,\n            \"A2\": `\nCreate 3 warm-up questions for A2 (elementary) level:\n- Use simple past tense and personal experiences\n- Ask for short, simple answers\n- Include basic comparisons with \"different\" or \"same\"\n- Focus on personal experiences and familiar situations\n- Use simple connecting words like \"and\", \"but\"\nExample: \"Have you ever [experienced topic]? How was it?\"`,\n            \"B1\": `\nCreate 3 warm-up questions for B1 (intermediate) level:\n- Ask for opinions with \"What do you think...?\"\n- Include comparisons between countries/cultures\n- Ask students to explain reasons with \"because\" or \"why\"\n- Discuss advantages and disadvantages\n- Use more varied vocabulary but keep structure clear\nExample: \"What do you think about [topic]? How is it different in your country?\"`,\n            \"B2\": `\nCreate 3 warm-up questions for B2 (upper intermediate) level:\n- Ask students to analyze situations and predict outcomes\n- Include complex opinions and explanations\n- Discuss implications and consequences\n- Use conditional language (\"What would happen if...?\")\n- Encourage detailed responses with examples\nExample: \"What challenges do you think [specific group] face with [topic]?\"`,\n            \"C1\": `\nCreate 3 warm-up questions for C1 (advanced) level:\n- Ask students to evaluate arguments and consider multiple perspectives\n- Include abstract concepts and societal implications\n- Use sophisticated vocabulary and complex structures\n- Encourage critical thinking and nuanced discussion\n- Ask about broader cultural and social contexts\nExample: \"How do cultural attitudes toward [concept] influence [topic] in different societies?\"`\n        };\n        // Ultra-simple prompt to avoid token limits\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const warmupPrompt = `Create 3 ${studentLevel} level warm-up questions about ${topic}. Return only the questions:`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for contextual warm-up questions...\");\n            console.log(\"\\uD83D\\uDCDD Warm-up prompt:\", warmupPrompt.substring(0, 200) + \"...\");\n            const response = await this.getGoogleAI().prompt(warmupPrompt, {\n                temperature: 0.6,\n                maxTokens: 150\n            });\n            console.log(\"✅ AI warm-up questions generated\");\n            console.log(\"\\uD83E\\uDD16 Raw AI response:\", response);\n            const questions = this.parseListFromText(response).slice(0, 3);\n            console.log(\"\\uD83D\\uDD25 Parsed warm-up questions:\", questions);\n            console.log(\"\\uD83D\\uDD0D Questions array length:\", questions.length);\n            // Ensure we have 3 questions, add fallbacks if needed\n            while(questions.length < 3){\n                const fallbackQuestion = this.getFallbackWarmupQuestion(studentLevel, contentAnalysis, questions.length);\n                console.log(`🔄 Adding fallback question ${questions.length + 1}:`, fallbackQuestion);\n                questions.push(fallbackQuestion);\n            }\n            console.log(\"✅ Final warm-up questions:\", questions);\n            // Final safety check - if still empty, use basic fallback\n            if (questions.length === 0) {\n                console.warn(\"⚠️ No questions generated, using emergency fallback\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return questions;\n        } catch (error) {\n            console.warn(\"⚠️ AI warm-up generation failed, using contextual fallbacks:\", error.message);\n            const fallbackQuestions = this.getContextualWarmupFallback(studentLevel, contentAnalysis, metadata);\n            console.log(\"\\uD83D\\uDD04 Fallback warm-up questions:\", fallbackQuestions);\n            // Final safety check for fallback\n            if (!fallbackQuestions || fallbackQuestions.length === 0) {\n                console.warn(\"⚠️ Fallback also empty, using emergency questions\");\n                return [\n                    \"What do you know about this topic?\",\n                    \"Have you experienced something similar?\",\n                    \"What would you like to learn?\"\n                ];\n            }\n            return fallbackQuestions;\n        }\n    }\n    // Enhanced contextual lesson structure generation\n    async generateContextualLessonStructure(content, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFD7️ Generating contextual lesson structure...\");\n        // Generate contextual warm-up questions first\n        const contextualWarmup = await this.generateContextualWarmupQuestions(content, contentAnalysis, studentLevel, metadata);\n        console.log(\"\\uD83D\\uDD25 Generated contextual warm-up questions:\", contextualWarmup);\n        // Ultra-simplified prompt to avoid token limits\n        const topics = contentAnalysis.topics.slice(0, 2).join(\", \") || \"technology\";\n        const vocab = contentAnalysis.keyVocabulary.slice(0, 4).join(\", \");\n        const prompt = `Create a ${lessonType} lesson for ${studentLevel} students about: ${topics}\n\nContent: \"${content.substring(0, 400)}\"\nKey words: ${vocab}\n\nReturn JSON with: warmup (use provided), vocabulary (4 words from content), reading (simplified content), comprehension (3 questions), discussion (3 questions), grammar (focus + examples), pronunciation (1 word), wrapup (3 questions).\n\n{\n  \"warmup\": ${JSON.stringify(contextualWarmup)},\n  \"vocabulary\": [{\"word\": \"word\", \"meaning\": \"definition\", \"example\": \"sentence\"}],\n  \"reading\": \"text\",\n  \"comprehension\": [\"question\"],\n  \"discussion\": [\"question\"], \n  \"grammar\": {\"focus\": \"topic\", \"examples\": [\"example\"], \"exercise\": [\"exercise\"]},\n  \"pronunciation\": {\"word\": \"word\", \"ipa\": \"/ipa/\", \"practice\": \"sentence\"},\n  \"wrapup\": [\"question\"]\n}`;\n        try {\n            console.log(\"\\uD83E\\uDD16 Calling AI for lesson structure...\");\n            const response = await this.getGoogleAI().prompt(prompt, {\n                temperature: 0.7,\n                maxTokens: 1500\n            });\n            console.log(\"\\uD83E\\uDD16 AI lesson structure response:\", response.substring(0, 200) + \"...\");\n            try {\n                const parsed = JSON.parse(response);\n                console.log(\"✅ Successfully parsed lesson structure JSON\");\n                // Ensure our contextual warm-up questions are preserved\n                parsed.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in final structure\");\n                return parsed;\n            } catch (parseError) {\n                console.warn(\"⚠️ Failed to parse JSON, attempting to clean response...\");\n                // Try to extract JSON from the response\n                const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    try {\n                        const cleaned = JSON.parse(jsonMatch[0]);\n                        console.log(\"✅ Successfully parsed cleaned JSON\");\n                        // Ensure our contextual warm-up questions are preserved\n                        cleaned.warmup = contextualWarmup;\n                        console.log(\"\\uD83D\\uDD25 Preserved contextual warm-up questions in cleaned structure\");\n                        return cleaned;\n                    } catch (cleanError) {\n                        console.warn(\"⚠️ Failed to parse cleaned JSON, using fallback\");\n                    }\n                }\n                // If JSON parsing fails, return a structured fallback with contextual warm-up\n                const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n                fallback.warmup = contextualWarmup;\n                console.log(\"\\uD83D\\uDD25 Using fallback with contextual warm-up questions\");\n                return fallback;\n            }\n        } catch (error) {\n            console.warn(\"⚠️ AI lesson structure generation failed, using fallback:\", error.message);\n            const fallback = this.createStructuredFallback(content, lessonType, studentLevel);\n            fallback.warmup = contextualWarmup;\n            console.log(\"\\uD83D\\uDD25 Using error fallback with contextual warm-up questions\");\n            return fallback;\n        }\n    }\n    // Enhanced detailed content generation with context\n    async generateDetailedContextualContent(structure, content, contentAnalysis, lessonType, studentLevel, targetLanguage, structuredContent) {\n        // Use Writer API to expand each section with contextual, detailed content\n        const sections = {\n            ...structure\n        };\n        // Enhance vocabulary section with contextual examples\n        if (sections.vocabulary) {\n            for(let i = 0; i < sections.vocabulary.length; i++){\n                const vocab = sections.vocabulary[i];\n                try {\n                    const contextualExamplePrompt = `\nCreate a natural example sentence using the word \"${vocab.word}\" that relates to this content context:\nTopics: ${contentAnalysis.topics.join(\", \")}\nContent type: ${contentAnalysis.contentType}\nLevel: ${studentLevel}\n\nMake the example relevant to the source material and appropriate for ${studentLevel} level students.\n`;\n                    const enhancedExample = await this.getGoogleAI().write(contextualExamplePrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].example = enhancedExample;\n                    // Add contextual meaning based on source content\n                    const contextualMeaningPrompt = `\nExplain the meaning of \"${vocab.word}\" in the context of: ${contentAnalysis.topics[0] || contentAnalysis.contentType}\nKeep it simple for ${studentLevel} level students.\n`;\n                    const contextualMeaning = await this.getGoogleAI().write(contextualMeaningPrompt, {\n                        tone: \"casual\",\n                        length: \"short\"\n                    });\n                    sections.vocabulary[i].contextualMeaning = contextualMeaning;\n                } catch (error) {\n                    // Keep original if enhancement fails\n                    console.warn(`Failed to enhance vocabulary for ${vocab.word}:`, error);\n                }\n            }\n        }\n        // Enhance discussion questions with specific content references\n        if (sections.discussion) {\n            try {\n                const enhancedDiscussionPrompt = `\nEnhance these discussion questions for a ${lessonType} lesson about ${contentAnalysis.topics.join(\" and \")}:\n${sections.discussion.join(\"\\n\")}\n\nMake them more specific to the content, engaging for ${studentLevel} level students, and encourage deeper thinking about:\n- ${contentAnalysis.topics.slice(0, 3).join(\"\\n- \")}\n\nReturn 3-4 enhanced questions that reference specific aspects of the content.\n`;\n                const enhancedDiscussion = await this.getGoogleAI().write(enhancedDiscussionPrompt, {\n                    tone: \"casual\",\n                    length: \"medium\",\n                    format: \"bullet-points\"\n                });\n                sections.discussion = this.parseListFromText(enhancedDiscussion).slice(0, 4);\n            } catch (error) {\n                console.warn(\"Failed to enhance discussion questions:\", error);\n            }\n        }\n        // Enhance reading section with better structure\n        if (sections.reading && structuredContent?.headings?.length > 0) {\n            try {\n                const structuredReadingPrompt = `\nImprove this reading text by organizing it with clear structure based on these headings from the original:\n${structuredContent.headings.slice(0, 3).map((h)=>`- ${h.text}`).join(\"\\n\")}\n\nOriginal text: \"${sections.reading}\"\n\nCreate a well-structured, ${studentLevel}-appropriate reading passage that maintains the key information but improves readability.\n`;\n                const enhancedReading = await this.getGoogleAI().rewrite(sections.reading, {\n                    tone: \"casual\",\n                    length: \"same\",\n                    audience: this.getAudienceLevel(studentLevel)\n                });\n                sections.reading = enhancedReading;\n            } catch (error) {\n                console.warn(\"Failed to enhance reading section:\", error);\n            }\n        }\n        // Enhance grammar section with content-specific examples\n        if (sections.grammar && sections.grammar.focus) {\n            try {\n                const grammarExamplesPrompt = `\nCreate 3 grammar examples for \"${sections.grammar.focus}\" using vocabulary and concepts from this content:\nTopics: ${contentAnalysis.topics.join(\", \")}\nKey vocabulary: ${contentAnalysis.keyVocabulary.slice(0, 5).join(\", \")}\n\nMake examples relevant to the content and appropriate for ${studentLevel} level.\n`;\n                const contextualGrammarExamples = await this.getGoogleAI().write(grammarExamplesPrompt, {\n                    tone: \"casual\",\n                    length: \"short\",\n                    format: \"bullet-points\"\n                });\n                sections.grammar.contextualExamples = this.parseListFromText(contextualGrammarExamples);\n            } catch (error) {\n                console.warn(\"Failed to enhance grammar examples:\", error);\n            }\n        }\n        return sections;\n    }\n    async proofreadLesson(lesson) {\n        // Proofread key text sections\n        const sectionsToProofread = [\n            \"reading\",\n            \"grammar.examples\",\n            \"pronunciation.practice\"\n        ];\n        for (const sectionPath of sectionsToProofread){\n            const value = this.getNestedValue(lesson, sectionPath);\n            if (typeof value === \"string\") {\n                const proofread = await this.getGoogleAI().proofread(value, {\n                    checkGrammar: true,\n                    checkSpelling: true,\n                    checkStyle: true\n                });\n                this.setNestedValue(lesson, sectionPath, proofread.corrected_text);\n            }\n        }\n        return lesson;\n    }\n    generateFallbackLesson(params) {\n        // Template-based fallback when AI APIs fail\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: this.getTemplateWarmup(lessonType, studentLevel),\n                vocabulary: this.extractVocabulary(sourceText, studentLevel),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n                discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getTemplateWrapup(lessonType)\n            }\n        };\n    }\n    // Helper methods\n    getSummaryLength(level) {\n        const lengthMap = {\n            A1: \"short\",\n            A2: \"short\",\n            B1: \"medium\",\n            B2: \"medium\",\n            C1: \"long\"\n        };\n        return lengthMap[level] || \"medium\";\n    }\n    getLanguageCode(language) {\n        const languageMap = {\n            spanish: \"es\",\n            french: \"fr\",\n            german: \"de\",\n            italian: \"it\",\n            portuguese: \"pt\",\n            japanese: \"ja\",\n            korean: \"ko\",\n            chinese: \"zh\"\n        };\n        return languageMap[language] || \"en\";\n    }\n    parseListFromText(text) {\n        return text.split(\"\\n\").filter((line)=>line.trim()).map((line)=>line.replace(/^[-•*]\\s*/, \"\").trim()).filter((line)=>line.length > 0).slice(0, 4) // Limit to 4 items\n        ;\n    }\n    getNestedValue(obj, path) {\n        return path.split(\".\").reduce((current, key)=>current?.[key], obj);\n    }\n    setNestedValue(obj, path, value) {\n        const keys = path.split(\".\");\n        const lastKey = keys.pop();\n        const target = keys.reduce((current, key)=>current[key], obj);\n        target[lastKey] = value;\n    }\n    createStructuredFallback(content, lessonType, studentLevel) {\n        console.log(\"\\uD83D\\uDD04 Creating structured fallback lesson...\");\n        // Extract some basic information from content for better fallback\n        const words = content.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words)).slice(0, 6);\n        const fallback = {\n            warmup: [],\n            vocabulary: uniqueWords.map((word)=>({\n                    word: word,\n                    meaning: `Definition of ${word}`,\n                    example: `Example sentence with ${word}.`\n                })),\n            reading: this.simplifyText(content, studentLevel),\n            comprehension: this.getTemplateComprehension(lessonType, studentLevel),\n            discussion: this.getTemplateDiscussion(lessonType, studentLevel),\n            grammar: this.getTemplateGrammar(studentLevel),\n            pronunciation: this.getTemplatePronunciation(content),\n            wrapup: this.getTemplateWrapup(lessonType)\n        };\n        console.log(\"✅ Structured fallback created (warmup will be set by caller)\");\n        return fallback;\n    }\n    getTemplateWarmup(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What do you already know about this topic?\",\n                \"Have you had similar experiences?\",\n                \"What would you like to learn more about?\"\n            ],\n            grammar: [\n                \"What grammar patterns do you notice?\",\n                \"Which sentences seem most complex?\",\n                \"What grammar rules do you remember?\"\n            ],\n            travel: [\n                \"Where would you like to travel next?\",\n                \"What travel experiences have you had?\",\n                \"What travel vocabulary do you know?\"\n            ],\n            business: [\n                \"What business situations are you familiar with?\",\n                \"How do you communicate professionally?\",\n                \"What business terms are challenging?\"\n            ],\n            pronunciation: [\n                \"Which sounds are difficult to pronounce?\",\n                \"How do you practice pronunciation?\",\n                \"What pronunciation goals do you have?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    extractVocabulary(text, studentLevel) {\n        // Simple vocabulary extraction based on word frequency and complexity\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        const selectedWords = uniqueWords.slice(0, 6);\n        return selectedWords.map((word)=>({\n                word: word,\n                meaning: `Definition of ${word}`,\n                example: `Example sentence with ${word}.`\n            }));\n    }\n    simplifyText(text, studentLevel) {\n        // Basic text simplification based on level\n        const maxLength = {\n            A1: 200,\n            A2: 300,\n            B1: 400,\n            B2: 500,\n            C1: 600\n        };\n        const limit = maxLength[studentLevel] || 400;\n        return text.substring(0, limit) + (text.length > limit ? \"...\" : \"\");\n    }\n    getTemplateComprehension(lessonType, studentLevel) {\n        return [\n            \"What is the main idea of this text?\",\n            \"What supporting details can you identify?\",\n            \"How does this relate to your experience?\",\n            \"What conclusions can you draw?\"\n        ];\n    }\n    getTemplateDiscussion(lessonType, studentLevel) {\n        const templates = {\n            discussion: [\n                \"What is your opinion on this topic?\",\n                \"How would you handle this situation?\",\n                \"What alternative approaches exist?\"\n            ],\n            business: [\n                \"How would you apply this professionally?\",\n                \"What business challenges does this address?\",\n                \"How would you present this to colleagues?\"\n            ],\n            travel: [\n                \"How would this help while traveling?\",\n                \"What preparations would you make?\",\n                \"How would you share this experience?\"\n            ]\n        };\n        return templates[lessonType] || templates.discussion;\n    }\n    getTemplateGrammar(studentLevel) {\n        const grammarFoci = {\n            A1: \"Present Simple Tense\",\n            A2: \"Past Simple Tense\",\n            B1: \"Present Perfect Tense\",\n            B2: \"Conditional Sentences\",\n            C1: \"Advanced Grammar Structures\"\n        };\n        return {\n            focus: grammarFoci[studentLevel] || \"Present Perfect Tense\",\n            examples: [\n                \"I have learned many new things.\",\n                \"She has improved her skills.\",\n                \"We have discussed this topic.\"\n            ],\n            exercise: [\n                \"I _____ (learn) a lot today.\",\n                \"They _____ (complete) the project.\",\n                \"She _____ (improve) significantly.\"\n            ]\n        };\n    }\n    getTemplatePronunciation(text) {\n        // Extract a challenging word from the text\n        const words = text.match(/\\b[a-z]{6,}\\b/gi) || [\n            \"communication\"\n        ];\n        const selectedWord = words[0] || \"communication\";\n        return {\n            word: selectedWord.toLowerCase(),\n            ipa: \"/kəˌmjuːnɪˈkeɪʃən/\",\n            practice: `Practice saying: \"${selectedWord}\" in a sentence.`\n        };\n    }\n    getTemplateWrapup(lessonType) {\n        return [\n            \"What new vocabulary did you learn?\",\n            \"Which concepts need more practice?\",\n            \"How will you use this knowledge?\",\n            \"What questions do you still have?\"\n        ];\n    }\n    // New helper methods for enhanced contextual analysis\n    extractTopicsFromHeadings(headings) {\n        return headings.filter((h)=>h.level <= 3) // Focus on main headings\n        .map((h)=>h.text).slice(0, 5);\n    }\n    extractTopicsFromText(text, headings) {\n        // First try to get topics from headings\n        const headingTopics = this.extractTopicsFromHeadings(headings);\n        if (headingTopics.length > 0) {\n            return headingTopics;\n        }\n        // Fallback: extract key phrases from text\n        const sentences = text.split(/[.!?]+/).filter((s)=>s.trim().length > 20);\n        const topics = [];\n        // Look for common topic indicators\n        const topicPatterns = [\n            /about (.+?)(?:\\s|,|\\.)/gi,\n            /discuss (.+?)(?:\\s|,|\\.)/gi,\n            /focus on (.+?)(?:\\s|,|\\.)/gi,\n            /regarding (.+?)(?:\\s|,|\\.)/gi\n        ];\n        for (const sentence of sentences.slice(0, 5)){\n            for (const pattern of topicPatterns){\n                const matches = sentence.match(pattern);\n                if (matches) {\n                    topics.push(...matches.map((m)=>m.replace(pattern, \"$1\").trim()).slice(0, 2));\n                }\n            }\n        }\n        // If no patterns found, extract key nouns\n        if (topics.length === 0) {\n            const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n            const commonWords = [\n                \"this\",\n                \"that\",\n                \"with\",\n                \"from\",\n                \"they\",\n                \"have\",\n                \"been\",\n                \"will\",\n                \"more\",\n                \"some\",\n                \"what\",\n                \"when\",\n                \"where\",\n                \"which\",\n                \"their\",\n                \"would\",\n                \"could\",\n                \"should\"\n            ];\n            const keyWords = words.filter((word)=>!commonWords.includes(word)).filter((word, index, arr)=>arr.indexOf(word) === index) // unique\n            .slice(0, 3);\n            return keyWords.length > 0 ? keyWords : [\n                \"AI technology\",\n                \"mobile devices\",\n                \"privacy\"\n            ];\n        }\n        return topics.slice(0, 3);\n    }\n    extractVocabularyFromText(text, level) {\n        // Extract words based on complexity appropriate for the level\n        const words = text.toLowerCase().match(/\\b[a-z]{4,}\\b/g) || [];\n        const uniqueWords = Array.from(new Set(words));\n        // Filter by complexity based on level\n        const complexityThreshold = {\n            \"A1\": 6,\n            \"A2\": 7,\n            \"B1\": 8,\n            \"B2\": 10,\n            \"C1\": 12\n        };\n        const maxLength = complexityThreshold[level] || 8;\n        return uniqueWords.filter((word)=>word.length <= maxLength && word.length >= 4).slice(0, 8);\n    }\n    determineCulturalContext(domain, text) {\n        // Determine cultural context based on domain and content\n        const culturalIndicators = {\n            \"bbc.com\": \"British English, UK culture\",\n            \"cnn.com\": \"American English, US culture\",\n            \"wikipedia.org\": \"International, encyclopedic\",\n            \"nytimes.com\": \"American English, US perspective\",\n            \"theguardian.com\": \"British English, UK perspective\"\n        };\n        if (culturalIndicators[domain]) {\n            return culturalIndicators[domain];\n        }\n        // Analyze text for cultural markers\n        const americanMarkers = [\n            \"dollar\",\n            \"president\",\n            \"congress\",\n            \"state\",\n            \"federal\"\n        ];\n        const britishMarkers = [\n            \"pound\",\n            \"minister\",\n            \"parliament\",\n            \"council\",\n            \"government\"\n        ];\n        const americanCount = americanMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        const britishCount = britishMarkers.filter((marker)=>text.toLowerCase().includes(marker)).length;\n        if (americanCount > britishCount) {\n            return \"American English context\";\n        } else if (britishCount > americanCount) {\n            return \"British English context\";\n        }\n        return \"International context\";\n    }\n    generateLearningObjectives(contentType, topics, level) {\n        const objectives = [];\n        // Base objectives on content type\n        switch(contentType){\n            case \"news\":\n                objectives.push(\"Understand current events vocabulary\");\n                objectives.push(\"Practice reading news articles\");\n                break;\n            case \"blog\":\n                objectives.push(\"Learn informal writing style\");\n                objectives.push(\"Understand personal opinions and experiences\");\n                break;\n            case \"tutorial\":\n                objectives.push(\"Follow step-by-step instructions\");\n                objectives.push(\"Learn technical vocabulary\");\n                break;\n            case \"encyclopedia\":\n                objectives.push(\"Understand factual information\");\n                objectives.push(\"Learn academic vocabulary\");\n                break;\n            default:\n                objectives.push(\"Improve reading comprehension\");\n                objectives.push(\"Expand vocabulary knowledge\");\n        }\n        // Add topic-specific objectives\n        topics.slice(0, 2).forEach((topic)=>{\n            objectives.push(`Discuss topics related to ${topic.toLowerCase()}`);\n        });\n        return objectives.slice(0, 4);\n    }\n    getAudienceLevel(cefrLevel) {\n        const levelMap = {\n            \"A1\": \"beginner\",\n            \"A2\": \"beginner\",\n            \"B1\": \"general\",\n            \"B2\": \"general\",\n            \"C1\": \"expert\"\n        };\n        return levelMap[cefrLevel] || \"general\";\n    }\n    // Enhanced fallback lesson generation with context\n    generateEnhancedFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage, contentMetadata, structuredContent } = params;\n        console.log(\"\\uD83D\\uDD04 Generating enhanced fallback lesson with contextual warm-up...\");\n        // Use available context even in fallback\n        const topics = structuredContent?.headings?.map((h)=>h.text).slice(0, 3) || [];\n        const contentType = contentMetadata?.contentType || \"general\";\n        // Create mock content analysis for fallback warm-up generation\n        const mockContentAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: this.determineSourceCountry(contentMetadata?.domain || \"\"),\n            culturalContext: this.determineCulturalContext(contentMetadata?.domain || \"\", sourceText)\n        };\n        // Generate contextual warm-up questions even in fallback\n        const contextualWarmup = this.getContextualWarmupFallback(studentLevel, mockContentAnalysis, contentMetadata);\n        console.log(\"\\uD83D\\uDD25 Generated fallback contextual warm-up:\", contextualWarmup);\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: contextualWarmup,\n                vocabulary: this.extractContextualVocabulary(sourceText, studentLevel, topics),\n                reading: this.simplifyText(sourceText, studentLevel),\n                comprehension: this.getContextualComprehension(lessonType, studentLevel, topics),\n                discussion: this.getContextualDiscussion(lessonType, studentLevel, topics),\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: this.getTemplatePronunciation(sourceText),\n                wrapup: this.getContextualWrapup(lessonType, topics)\n            }\n        };\n    }\n    getContextualWarmup(lessonType, studentLevel, topics, contentType) {\n        // Use the same contextual fallback logic\n        const mockAnalysis = {\n            topics: topics,\n            contentType: contentType,\n            sourceCountry: \"International\"\n        };\n        return this.getContextualWarmupFallback(studentLevel, mockAnalysis, {\n            title: topics[0] || \"Content\"\n        });\n    }\n    // Basic fallback for complete failures\n    generateBasicFallbackLesson(params) {\n        const { sourceText, lessonType, studentLevel, targetLanguage } = params;\n        return {\n            lessonType,\n            studentLevel,\n            targetLanguage,\n            sections: {\n                warmup: [\n                    \"What do you already know about this topic?\",\n                    \"Have you had similar experiences?\",\n                    \"What would you like to learn?\"\n                ],\n                vocabulary: [],\n                reading: sourceText.substring(0, 400),\n                comprehension: [\n                    \"What is the main idea?\",\n                    \"What details can you identify?\"\n                ],\n                discussion: [\n                    \"What is your opinion?\",\n                    \"How would you handle this?\"\n                ],\n                grammar: this.getTemplateGrammar(studentLevel),\n                pronunciation: {\n                    word: \"example\",\n                    ipa: \"/ɪɡˈz\\xe6mpəl/\",\n                    practice: \"Practice saying example.\"\n                },\n                wrapup: [\n                    \"What did you learn?\",\n                    \"What needs more practice?\"\n                ]\n            }\n        };\n    }\n    extractContextualVocabulary(text, studentLevel, topics) {\n        const vocabulary = this.extractVocabulary(text, studentLevel);\n        // Enhance with topic context if available\n        if (topics.length > 0) {\n            return vocabulary.map((vocab, index)=>({\n                    ...vocab,\n                    context: index < topics.length ? `Related to ${topics[index].toLowerCase()}` : vocab.meaning\n                }));\n        }\n        return vocabulary;\n    }\n    getContextualComprehension(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateComprehension(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is the main point about ${topics[0]?.toLowerCase()}?`,\n                `How does the text explain ${topics[1]?.toLowerCase() || \"the topic\"}?`,\n                \"What supporting details can you identify?\",\n                \"What conclusions can you draw from this information?\"\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualDiscussion(lessonType, studentLevel, topics) {\n        const baseQuestions = this.getTemplateDiscussion(lessonType, studentLevel);\n        if (topics.length > 0) {\n            return [\n                `What is your opinion about ${topics[0]?.toLowerCase()}?`,\n                `How would you apply this information about ${topics[1]?.toLowerCase() || \"this topic\"}?`,\n                `What are the implications of what you learned about ${topics[0]?.toLowerCase()}?`\n            ];\n        }\n        return baseQuestions;\n    }\n    getContextualWrapup(lessonType, topics) {\n        if (topics.length > 0) {\n            return [\n                `What new vocabulary did you learn about ${topics[0]?.toLowerCase()}?`,\n                `Which concepts about ${topics[1]?.toLowerCase() || \"this topic\"} need more practice?`,\n                \"How will you use this knowledge in real situations?\",\n                \"What questions do you still have about this content?\"\n            ];\n        }\n        return this.getTemplateWrapup(lessonType);\n    }\n    // Smart template-based lesson generation\n    generateSmartTemplateLesson(sourceText, contentAnalysis, lessonType, studentLevel, targetLanguage, metadata) {\n        console.log(\"\\uD83C\\uDFA8 Generating smart template lesson...\");\n        const topics = contentAnalysis.topics;\n        const vocabulary = contentAnalysis.keyVocabulary;\n        const title = metadata?.title || \"Content\";\n        return {\n            warmup: this.generateSmartWarmupQuestions(topics, studentLevel, contentAnalysis),\n            vocabulary: this.generateSmartVocabulary(vocabulary, sourceText, studentLevel),\n            reading: this.generateSmartReading(sourceText, studentLevel),\n            comprehension: this.generateSmartComprehension(topics, studentLevel),\n            discussion: this.generateSmartDiscussion(topics, lessonType, studentLevel),\n            grammar: this.generateSmartGrammar(studentLevel, sourceText),\n            pronunciation: this.generateSmartPronunciation(vocabulary),\n            wrapup: this.generateSmartWrapup(topics, studentLevel)\n        };\n    }\n    // Smart warm-up questions based on content (prior knowledge activation)\n    generateSmartWarmupQuestions(topics, studentLevel, contentAnalysis) {\n        const topic = topics[0] || \"this topic\";\n        const secondTopic = topics[1] || \"technology\";\n        // Focus on activating prior knowledge, not assuming content knowledge\n        const levelQuestions = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} popular in your country?`,\n                `Do you like ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you heard about ${topic.toLowerCase()} before?`,\n                `What do you already know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} common in your country?`\n            ],\n            \"B1\": [\n                `What comes to mind when you hear about ${topic.toLowerCase()}?`,\n                `Have you had any experience with ${topic.toLowerCase()}?`,\n                `What would you like to know about ${topic.toLowerCase()}?`\n            ],\n            \"B2\": [\n                `What is your general opinion about ${topic.toLowerCase()}?`,\n                `How familiar are you with ${topic.toLowerCase()}?`,\n                `What role does ${topic.toLowerCase()} play in your daily life?`\n            ],\n            \"C1\": [\n                `How would you describe the significance of ${topic.toLowerCase()} in modern society?`,\n                `What are your thoughts on the current state of ${topic.toLowerCase()}?`,\n                `How do you think ${topic.toLowerCase()} has evolved over time?`\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Enhanced smart vocabulary with AI-generated contextual examples\n    async generateSmartVocabulary(vocabulary, sourceText, studentLevel) {\n        const selectedWords = vocabulary.slice(0, 8) // Start with 8 words\n        ;\n        const vocabPromises = selectedWords.map(async (word)=>{\n            const capitalizedWord = this.capitalizeWord(word);\n            return {\n                word: capitalizedWord,\n                meaning: this.generateContextualWordMeaning(word, studentLevel, sourceText),\n                example: await this.generateAIExampleSentences(word, studentLevel, sourceText)\n            };\n        });\n        const results = await Promise.all(vocabPromises);\n        // Ensure we have 6-10 words\n        return results.slice(0, 10).length >= 6 ? results.slice(0, 10) : results.slice(0, 6);\n    }\n    // Capitalize word properly\n    capitalizeWord(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }\n    // Generate contextual word meanings based on level and source text\n    generateContextualWordMeaning(word, level, sourceText) {\n        const lowerWord = word.toLowerCase();\n        // Enhanced contextual definitions based on level\n        const contextualMeanings = {\n            \"efficient\": {\n                \"A1\": \"working well without wasting time\",\n                \"A2\": \"doing something well and quickly without wasting time or energy\",\n                \"B1\": \"working in a way that achieves the best results with the least waste of time and effort\",\n                \"B2\": \"achieving maximum productivity with minimum wasted effort or expense\",\n                \"C1\": \"achieving maximum productivity with minimum wasted effort, expense, or unnecessary activity\"\n            },\n            \"technology\": {\n                \"A1\": \"computers and machines that help us\",\n                \"A2\": \"machines and computer systems that make life easier\",\n                \"B1\": \"the use of scientific knowledge to create useful tools and machines\",\n                \"B2\": \"the application of scientific knowledge for practical purposes in industry and daily life\",\n                \"C1\": \"the systematic application of scientific knowledge to develop practical solutions and innovations\"\n            },\n            \"europe\": {\n                \"A1\": \"a big area with many countries\",\n                \"A2\": \"a continent with many different countries like France, Germany, and Italy\",\n                \"B1\": \"a continent consisting of many countries, known for its history and culture\",\n                \"B2\": \"a continent comprising numerous nations with diverse cultures, languages, and political systems\",\n                \"C1\": \"a geopolitical and cultural continent characterized by diverse nation-states, shared historical heritage, and economic integration\"\n            },\n            \"sensational\": {\n                \"A1\": \"very exciting and good\",\n                \"A2\": \"extremely exciting or impressive, causing strong feelings\",\n                \"B1\": \"causing great excitement, interest, or shock; extremely impressive\",\n                \"B2\": \"causing intense excitement, interest, or shock; extraordinarily impressive or remarkable\",\n                \"C1\": \"causing or designed to cause intense excitement, interest, or shock through dramatic or extraordinary qualities\"\n            },\n            \"stages\": {\n                \"A1\": \"does or makes something happen\",\n                \"A2\": \"organizes and presents an event or performance\",\n                \"B1\": \"organizes and presents an event, or refers to different parts of a process\",\n                \"B2\": \"organizes and presents an event or performance, or represents distinct phases in a process\",\n                \"C1\": \"orchestrates and presents an event or performance, or denotes sequential phases in a complex process\"\n            },\n            \"comeback\": {\n                \"A1\": \"winning after losing\",\n                \"A2\": \"returning to win after being behind in a game or competition\",\n                \"B1\": \"a return to a winning position after being behind, or a return to success\",\n                \"B2\": \"a recovery from a disadvantageous position to achieve success or victory\",\n                \"C1\": \"a strategic recovery from a disadvantageous position to achieve success, often against expectations\"\n            },\n            \"dramatic\": {\n                \"A1\": \"very exciting and surprising\",\n                \"A2\": \"very exciting, with sudden changes that surprise people\",\n                \"B1\": \"involving sudden changes or strong emotions; very noticeable or impressive\",\n                \"B2\": \"characterized by sudden, striking changes or intense emotions; highly impressive or theatrical\",\n                \"C1\": \"marked by sudden, striking developments or intense emotional impact; theatrically impressive or emotionally powerful\"\n            }\n        };\n        const levelMeanings = contextualMeanings[lowerWord];\n        if (levelMeanings && levelMeanings[level]) {\n            return levelMeanings[level];\n        }\n        // Fallback to basic level-appropriate definition\n        const isSimpleLevel = level === \"A1\" || level === \"A2\";\n        return isSimpleLevel ? `a word that means ${lowerWord}` : `a term referring to ${lowerWord} in this context`;\n    }\n    // Generate AI-powered contextual example sentences\n    async generateAIExampleSentences(word, level, sourceText) {\n        const exampleCount = this.getExampleCount(level);\n        const context = sourceText.substring(0, 120) // More context for relevance\n        ;\n        try {\n            const levelGuidance = this.getLevelGuidance(level);\n            const prompt = `Create ${exampleCount} contextual ${level} level sentences using \"${word}\" related to: ${context}. Make sentences meaningful and relevant to the topic. ${levelGuidance} Format: one sentence per line, no quotes:`;\n            console.log(\"\\uD83D\\uDCDD Contextual example sentences prompt:\", prompt.length, \"chars\");\n            const response = await this.getGoogleAI().prompt(prompt);\n            // Parse and clean AI response\n            const sentences = response.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 5 && line.toLowerCase().includes(word.toLowerCase())).map((line)=>this.cleanSentence(line)).map((line)=>this.boldifyTargetWord(line, word)).filter((line)=>line.length > 0).slice(0, exampleCount);\n            // If AI generated enough contextual sentences, use them\n            if (sentences.length >= exampleCount) {\n                return sentences.join(\" | \");\n            }\n            // Otherwise, supplement with contextual template sentences\n            const additionalNeeded = exampleCount - sentences.length;\n            const templateSentences = this.generateContextualExamples(word, level, sourceText, additionalNeeded);\n            return [\n                ...sentences,\n                ...templateSentences\n            ].slice(0, exampleCount).join(\" | \");\n        } catch (error) {\n            console.log(`⚠️ AI example generation failed for ${word}, using contextual templates`);\n            // Fallback to contextual template examples\n            return this.generateContextualExamples(word, level, sourceText, exampleCount).join(\" | \");\n        }\n    }\n    // Get level-specific guidance for AI prompts\n    getLevelGuidance(level) {\n        const guidance = {\n            \"A1\": \"Use very simple words, short sentences (5-8 words), present tense.\",\n            \"A2\": \"Use simple words, short sentences (6-10 words), basic grammar.\",\n            \"B1\": \"Use common words, medium sentences (8-12 words), clear meaning.\",\n            \"B2\": \"Use varied vocabulary, longer sentences (10-15 words), complex ideas.\",\n            \"C1\": \"Use sophisticated vocabulary, complex sentences (12+ words), nuanced meaning.\"\n        };\n        return guidance[level] || guidance[\"B1\"];\n    }\n    // Clean sentence formatting\n    cleanSentence(sentence) {\n        return sentence.replace(/^\\d+\\.?\\s*/, \"\") // Remove numbering\n        .replace(/^-\\s*/, \"\") // Remove dashes\n        .replace(/^\\*\\s*/, \"\") // Remove asterisks\n        .replace(/^•\\s*/, \"\") // Remove bullet points\n        .trim();\n    }\n    // Clean definition formatting\n    cleanDefinition(definition, level) {\n        return definition.replace(/^For an? [A-Z]\\d+ student,?\\s*/i, \"\") // Remove level prefixes\n        .replace(/^In this context,?\\s*/i, \"\") // Remove context prefixes\n        .replace(/^Here's? (a )?definition.*?:\\s*/i, \"\") // Remove definition intros\n        .replace(/^\\*\\*(.*?)\\*\\*/g, \"$1\") // Remove bold markdown\n        .replace(/\\*\\*(.*?)\\*\\*/g, \"$1\") // Remove bold markdown\n        .trim();\n    }\n    // Make target word bold in sentence\n    boldifyTargetWord(sentence, targetWord) {\n        const regex = new RegExp(`\\\\b${targetWord}\\\\b`, \"gi\");\n        return sentence.replace(regex, `**${targetWord}**`);\n    }\n    // Generate contextual examples based on source material\n    generateContextualExamples(word, level, sourceText, count) {\n        const lowerWord = word.toLowerCase();\n        const capitalizedWord = this.capitalizeWord(word);\n        // Extract themes from source text for context\n        const themes = this.extractThemesFromText(sourceText);\n        const mainTheme = themes[0] || \"this topic\";\n        const contextualExamples = {\n            \"A1\": [\n                `**${capitalizedWord}** is in the news today.`,\n                `I read about **${lowerWord}** online.`,\n                `**${capitalizedWord}** is important for ${mainTheme}.`,\n                `People talk about **${lowerWord}**.`,\n                `**${capitalizedWord}** helps with ${mainTheme}.`\n            ],\n            \"A2\": [\n                `**${capitalizedWord}** plays a big role in ${mainTheme}.`,\n                `Many people are interested in **${lowerWord}**.`,\n                `**${capitalizedWord}** affects how we think about ${mainTheme}.`,\n                `The news often mentions **${lowerWord}**.`,\n                `**${capitalizedWord}** is becoming more important in ${mainTheme}.`\n            ],\n            \"B1\": [\n                `**${capitalizedWord}** has changed the way we approach ${mainTheme}.`,\n                `Understanding **${lowerWord}** is crucial for ${mainTheme}.`,\n                `**${capitalizedWord}** continues to influence ${mainTheme}.`,\n                `The role of **${lowerWord}** in ${mainTheme} is growing.`\n            ],\n            \"B2\": [\n                `**${capitalizedWord}** represents a significant development in ${mainTheme}.`,\n                `The implications of **${lowerWord}** for ${mainTheme} are far-reaching.`,\n                `**${capitalizedWord}** has transformed our understanding of ${mainTheme}.`\n            ],\n            \"C1\": [\n                `**${capitalizedWord}** exemplifies the complex dynamics within ${mainTheme}.`,\n                `The multifaceted nature of **${lowerWord}** requires nuanced analysis in ${mainTheme}.`,\n                `**${capitalizedWord}** represents a paradigmatic shift in contemporary ${mainTheme}.`\n            ]\n        };\n        const levelExamples = contextualExamples[level] || contextualExamples[\"B1\"];\n        return levelExamples.slice(0, count);\n    }\n    // Extract themes from source text for contextual examples\n    extractThemesFromText(text) {\n        const themes = [];\n        // Common themes based on keywords\n        const themeKeywords = {\n            \"sports\": [\n                \"team\",\n                \"game\",\n                \"win\",\n                \"play\",\n                \"match\",\n                \"competition\",\n                \"tournament\",\n                \"cup\"\n            ],\n            \"technology\": [\n                \"AI\",\n                \"computer\",\n                \"digital\",\n                \"software\",\n                \"system\",\n                \"device\",\n                \"artificial\",\n                \"intelligence\"\n            ],\n            \"environment\": [\n                \"climate\",\n                \"nature\",\n                \"earth\",\n                \"green\",\n                \"pollution\",\n                \"energy\",\n                \"change\"\n            ],\n            \"health\": [\n                \"medical\",\n                \"doctor\",\n                \"treatment\",\n                \"patient\",\n                \"medicine\",\n                \"care\",\n                \"healthcare\"\n            ],\n            \"business\": [\n                \"company\",\n                \"market\",\n                \"economy\",\n                \"finance\",\n                \"industry\",\n                \"trade\"\n            ],\n            \"education\": [\n                \"student\",\n                \"learn\",\n                \"school\",\n                \"knowledge\",\n                \"study\",\n                \"teach\"\n            ]\n        };\n        const lowerText = text.toLowerCase();\n        for (const [theme, keywords] of Object.entries(themeKeywords)){\n            const matchCount = keywords.filter((keyword)=>lowerText.includes(keyword)).length;\n            if (matchCount >= 2) {\n                themes.push(theme);\n            }\n        }\n        return themes.length > 0 ? themes : [\n            \"this topic\"\n        ];\n    }\n    // Generate truly level-appropriate example sentences\n    generateLevelAppropriateExamples(word, level, count) {\n        const lowerWord = word.toLowerCase();\n        const capitalizedWord = this.capitalizeWord(word);\n        const examples = {\n            \"A1\": [\n                `${capitalizedWord} is good.`,\n                `I like ${lowerWord}.`,\n                `This is ${lowerWord}.`,\n                `${capitalizedWord} helps us.`,\n                `We see ${lowerWord}.`\n            ],\n            \"A2\": [\n                `${capitalizedWord} is very important.`,\n                `I think ${lowerWord} is interesting.`,\n                `Many people know about ${lowerWord}.`,\n                `${capitalizedWord} is useful for us.`,\n                `We can learn about ${lowerWord}.`\n            ],\n            \"B1\": [\n                `${capitalizedWord} plays an important role today.`,\n                `People are interested in ${lowerWord}.`,\n                `${capitalizedWord} affects our daily lives.`,\n                `We should understand ${lowerWord} better.`\n            ],\n            \"B2\": [\n                `${capitalizedWord} has significant implications for society.`,\n                `The impact of ${lowerWord} continues to grow.`,\n                `Understanding ${lowerWord} requires careful consideration.`\n            ],\n            \"C1\": [\n                `${capitalizedWord} exemplifies contemporary challenges.`,\n                `The complexity of ${lowerWord} demands sophisticated analysis.`,\n                `${capitalizedWord} represents a paradigm shift in thinking.`\n            ]\n        };\n        const levelExamples = examples[level] || examples[\"B1\"];\n        return levelExamples.slice(0, count);\n    }\n    // Fallback template-based example generation\n    generateTemplateExamples(word, level, sourceText) {\n        const exampleCount = this.getExampleCount(level);\n        // Try to find the word in the source text first\n        const sentences = sourceText.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const contextSentence = sentences.find((s)=>s.toLowerCase().includes(word.toLowerCase()));\n        const examples = [];\n        // Add context sentence if found\n        if (contextSentence) {\n            examples.push(contextSentence.trim());\n        }\n        // Generate additional level-appropriate examples\n        const additionalExamples = this.generateAdditionalExamples(word, level, exampleCount - examples.length);\n        examples.push(...additionalExamples);\n        // Ensure we have the right number of examples\n        return examples.slice(0, exampleCount).join(\" | \");\n    }\n    // Get number of examples based on CEFR level\n    getExampleCount(level) {\n        switch(level){\n            case \"A1\":\n            case \"A2\":\n                return 5;\n            case \"B1\":\n                return 4;\n            case \"B2\":\n            case \"C1\":\n                return 3;\n            default:\n                return 4;\n        }\n    }\n    // Generate additional level-appropriate example sentences\n    generateAdditionalExamples(word, level, count) {\n        const lowerWord = word.toLowerCase();\n        const capitalizedWord = this.capitalizeWord(word);\n        const exampleTemplates = {\n            \"A1\": [\n                `${capitalizedWord} is important.`,\n                `I like ${lowerWord}.`,\n                `This is ${lowerWord}.`,\n                `${capitalizedWord} is good.`,\n                `We use ${lowerWord}.`\n            ],\n            \"A2\": [\n                `${capitalizedWord} is very important in our daily life.`,\n                `I think ${lowerWord} is interesting.`,\n                `Many people use ${lowerWord} today.`,\n                `${capitalizedWord} helps us a lot.`,\n                `We can learn about ${lowerWord}.`\n            ],\n            \"B1\": [\n                `${capitalizedWord} plays an important role in modern society.`,\n                `The concept of ${lowerWord} has evolved significantly.`,\n                `Understanding ${lowerWord} is essential for students.`,\n                `${capitalizedWord} continues to influence our daily lives.`\n            ],\n            \"B2\": [\n                `${capitalizedWord} represents a significant development in this field.`,\n                `The implications of ${lowerWord} extend beyond immediate applications.`,\n                `Experts consider ${lowerWord} to be a crucial factor in future progress.`\n            ],\n            \"C1\": [\n                `${capitalizedWord} exemplifies the complex interplay between innovation and practical application.`,\n                `The multifaceted nature of ${lowerWord} requires comprehensive analysis.`,\n                `Contemporary discourse surrounding ${lowerWord} reflects broader societal transformations.`\n            ]\n        };\n        const templates = exampleTemplates[level] || exampleTemplates[\"B1\"];\n        return templates.slice(0, count);\n    }\n    // Smart reading passage adaptation\n    generateSmartReading(sourceText, studentLevel) {\n        const maxLength = {\n            \"A1\": 200,\n            \"A2\": 300,\n            \"B1\": 400,\n            \"B2\": 500,\n            \"C1\": 600\n        };\n        const targetLength = maxLength[studentLevel] || 400;\n        // Simplify sentences for lower levels\n        if (studentLevel === \"A1\" || studentLevel === \"A2\") {\n            const sentences = sourceText.split(/[.!?]+/);\n            const simplifiedSentences = sentences.filter((s)=>s.trim().length > 10).map((s)=>s.trim()).slice(0, 8) // Limit number of sentences\n            ;\n            return simplifiedSentences.join(\". \").substring(0, targetLength);\n        }\n        return sourceText.substring(0, targetLength);\n    }\n    // Smart comprehension questions\n    generateSmartComprehension(topics, studentLevel) {\n        const topic = topics[0] || \"the content\";\n        const levelQuestions = {\n            \"A1\": [\n                `What is ${topic.toLowerCase()}?`,\n                \"What is the main idea?\",\n                \"Is this information new to you?\"\n            ],\n            \"A2\": [\n                `What does the text say about ${topic.toLowerCase()}?`,\n                \"What are the main points?\",\n                \"Do you agree with the information?\"\n            ],\n            \"B1\": [\n                `How does the text explain ${topic.toLowerCase()}?`,\n                \"What supporting details are provided?\",\n                \"What conclusions can you draw?\",\n                \"How does this relate to your experience?\"\n            ],\n            \"B2\": [\n                `What is the author's perspective on ${topic.toLowerCase()}?`,\n                \"What evidence supports the main arguments?\",\n                \"What are the implications of this information?\",\n                \"How might this affect different groups of people?\"\n            ],\n            \"C1\": [\n                `How does the author's treatment of ${topic.toLowerCase()} reflect broader themes?`,\n                \"What underlying assumptions can you identify?\",\n                \"How might this information be interpreted differently in various contexts?\",\n                \"What are the potential long-term consequences discussed?\"\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Smart discussion questions\n    generateSmartDiscussion(topics, lessonType, studentLevel) {\n        const topic = topics[0] || \"this topic\";\n        const secondTopic = topics[1] || \"technology\";\n        const levelQuestions = {\n            \"A1\": [\n                `Do you like ${topic.toLowerCase()}? Why?`,\n                `Is ${topic.toLowerCase()} good or bad?`,\n                `Would you recommend ${topic.toLowerCase()} to friends?`\n            ],\n            \"A2\": [\n                `What is your opinion about ${topic.toLowerCase()}?`,\n                `How do you use ${topic.toLowerCase()} in your life?`,\n                `What problems can ${topic.toLowerCase()} cause?`\n            ],\n            \"B1\": [\n                `What are the advantages and disadvantages of ${topic.toLowerCase()}?`,\n                `How has ${topic.toLowerCase()} changed over time?`,\n                `What would happen if ${topic.toLowerCase()} didn't exist?`\n            ],\n            \"B2\": [\n                `How might ${topic.toLowerCase()} impact society in the next decade?`,\n                `What ethical considerations surround ${topic.toLowerCase()}?`,\n                `How does ${topic.toLowerCase()} differ across cultures?`\n            ],\n            \"C1\": [\n                `What are the broader societal implications of ${topic.toLowerCase()}?`,\n                `How might ${topic.toLowerCase()} reshape our understanding of ${secondTopic.toLowerCase()}?`,\n                `What role should regulation play in ${topic.toLowerCase()}?`\n            ]\n        };\n        return levelQuestions[studentLevel] || levelQuestions[\"B1\"];\n    }\n    // Smart grammar focus\n    generateSmartGrammar(studentLevel, sourceText) {\n        const grammarFocus = {\n            \"A1\": {\n                focus: \"Present Simple\",\n                examples: [\n                    \"It is efficient.\",\n                    \"This works well.\",\n                    \"People use technology.\"\n                ],\n                exercise: [\n                    \"It _____ (be) very useful.\",\n                    \"Technology _____ (help) people.\",\n                    \"This _____ (work) on phones.\"\n                ]\n            },\n            \"A2\": {\n                focus: \"Present Continuous and Simple\",\n                examples: [\n                    \"It is working on your device.\",\n                    \"People are using this technology.\",\n                    \"It helps with privacy.\"\n                ],\n                exercise: [\n                    \"It _____ (work) right now.\",\n                    \"People _____ (use) it every day.\",\n                    \"This _____ (help) with security.\"\n                ]\n            },\n            \"B1\": {\n                focus: \"Present Perfect\",\n                examples: [\n                    \"Technology has improved significantly.\",\n                    \"It has become more efficient.\",\n                    \"Users have experienced better privacy.\"\n                ],\n                exercise: [\n                    \"Technology _____ (improve) a lot.\",\n                    \"It _____ (become) very popular.\",\n                    \"People _____ (start) using it more.\"\n                ]\n            },\n            \"B2\": {\n                focus: \"Passive Voice\",\n                examples: [\n                    \"It is designed for mobile devices.\",\n                    \"Privacy is enhanced by this technology.\",\n                    \"Data is processed locally.\"\n                ],\n                exercise: [\n                    \"It _____ (design) for phones.\",\n                    \"Privacy _____ (improve) significantly.\",\n                    \"Information _____ (process) safely.\"\n                ]\n            },\n            \"C1\": {\n                focus: \"Complex Sentence Structures\",\n                examples: [\n                    \"Having been designed for efficiency, it operates seamlessly.\",\n                    \"The technology, which prioritizes privacy, has gained popularity.\"\n                ],\n                exercise: [\n                    \"_____ (design) for mobile use, it works offline.\",\n                    \"The system, _____ (focus) on privacy, appeals to users.\"\n                ]\n            }\n        };\n        return grammarFocus[studentLevel] || grammarFocus[\"B1\"];\n    }\n    // Smart pronunciation\n    generateSmartPronunciation(vocabulary) {\n        const word = vocabulary.find((w)=>w.length > 6) || vocabulary[0] || \"technology\";\n        const pronunciations = {\n            \"technology\": \"/tekˈnɒlədʒi/\",\n            \"efficient\": \"/ɪˈfɪʃənt/\",\n            \"privacy\": \"/ˈpraɪvəsi/\",\n            \"processing\": \"/ˈprəʊsesɪŋ/\",\n            \"device\": \"/dɪˈvaɪs/\",\n            \"artificial\": \"/ˌɑːtɪˈfɪʃəl/\",\n            \"intelligence\": \"/ɪnˈtelɪdʒəns/\",\n            \"compact\": \"/kəmˈp\\xe6kt/\",\n            \"version\": \"/ˈvɜːʃən/\",\n            \"family\": \"/ˈf\\xe6məli/\",\n            \"nano\": \"/ˈn\\xe6noʊ/\",\n            \"gemini\": \"/ˈdʒemɪnaɪ/\"\n        };\n        return {\n            word: word,\n            ipa: pronunciations[word.toLowerCase()] || `/ˈwɜːrd/`,\n            practice: `Practice saying \"${word}\" in this sentence: This ${word} is very useful.`\n        };\n    }\n    // Smart wrap-up questions\n    generateSmartWrapup(topics, studentLevel) {\n        const topic = topics[0] || \"this topic\";\n        return [\n            `What new vocabulary did you learn about ${topic.toLowerCase()}?`,\n            `Which concepts about ${topic.toLowerCase()} need more practice?`,\n            \"How will you use this knowledge in real situations?\",\n            \"What questions do you still have about this content?\"\n        ];\n    }\n    // Helper method to determine source country from domain\n    determineSourceCountry(domain) {\n        const countryMap = {\n            \"bbc.com\": \"United Kingdom\",\n            \"bbc.co.uk\": \"United Kingdom\",\n            \"cnn.com\": \"United States\",\n            \"nytimes.com\": \"United States\",\n            \"theguardian.com\": \"United Kingdom\",\n            \"washingtonpost.com\": \"United States\",\n            \"reuters.com\": \"International\",\n            \"ap.org\": \"United States\",\n            \"npr.org\": \"United States\",\n            \"abc.net.au\": \"Australia\",\n            \"cbc.ca\": \"Canada\"\n        };\n        for (const [domainKey, country] of Object.entries(countryMap)){\n            if (domain.includes(domainKey)) {\n                return country;\n            }\n        }\n        return \"International\";\n    }\n    // Fallback warm-up question generator\n    getFallbackWarmupQuestion(level, contentAnalysis, questionIndex) {\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const contentType = contentAnalysis.contentType;\n        const fallbackQuestions = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} important in your country?`,\n                `Do you like to read about ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you heard about ${topic.toLowerCase()} before?`,\n                `What do you know about ${topic.toLowerCase()}?`,\n                `Is ${topic.toLowerCase()} different in your country?`\n            ],\n            \"B1\": [\n                `What do you think about ${topic.toLowerCase()}?`,\n                `How is ${topic.toLowerCase()} important in your daily life?`,\n                `What would you like to know about ${topic.toLowerCase()}?`\n            ],\n            \"B2\": [\n                `What are your thoughts on ${topic.toLowerCase()}?`,\n                `How might ${topic.toLowerCase()} affect people in different countries?`,\n                `What questions would you ask about ${topic.toLowerCase()}?`\n            ],\n            \"C1\": [\n                `How do cultural perspectives influence attitudes toward ${topic.toLowerCase()}?`,\n                `What are the broader implications of ${topic.toLowerCase()} in modern society?`,\n                `How might ${topic.toLowerCase()} evolve in the coming years?`\n            ]\n        };\n        const levelQuestions = fallbackQuestions[level] || fallbackQuestions[\"B1\"];\n        return levelQuestions[questionIndex] || levelQuestions[0];\n    }\n    // Contextual warm-up fallback when AI fails\n    getContextualWarmupFallback(level, contentAnalysis, metadata) {\n        const topic = contentAnalysis.topics[0] || \"this topic\";\n        const sourceCountry = contentAnalysis.sourceCountry || \"this country\";\n        const title = metadata?.title || \"this content\";\n        const fallbackSets = {\n            \"A1\": [\n                `Do you know about ${topic.toLowerCase()}?`,\n                `Is this topic common in your country?`,\n                `Do you want to learn about ${topic.toLowerCase()}?`\n            ],\n            \"A2\": [\n                `Have you experienced ${topic.toLowerCase()} before?`,\n                `What is ${topic.toLowerCase()} like in your country?`,\n                `Why is ${topic.toLowerCase()} interesting to you?`\n            ],\n            \"B1\": [\n                `What do you think about ${topic.toLowerCase()}?`,\n                `How is ${topic.toLowerCase()} different in your country compared to ${sourceCountry}?`,\n                `What would you expect to learn from this ${contentAnalysis.contentType}?`\n            ],\n            \"B2\": [\n                `What are your thoughts on how ${topic.toLowerCase()} is presented in ${sourceCountry} media?`,\n                `What challenges do you think people face with ${topic.toLowerCase()}?`,\n                `How might your perspective on ${topic.toLowerCase()} differ from the author's?`\n            ],\n            \"C1\": [\n                `How do cultural attitudes toward ${topic.toLowerCase()} vary between ${sourceCountry} and your country?`,\n                `What are the broader societal implications of ${topic.toLowerCase()}?`,\n                `How might the perspective in this ${contentAnalysis.contentType} reflect ${sourceCountry} values?`\n            ]\n        };\n        return fallbackSets[level] || fallbackSets[\"B1\"];\n    }\n    constructor(){\n        this.googleAI = null;\n    }\n}\nconst lessonAIServerGenerator = new LessonAIServerGenerator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WUFDRCxNQUFNO2dCQUNKLENBQUMsaUNBQWlDLEVBQUV1RSxNQUFNdkUsV0FBVyxHQUFHLGNBQWMsRUFBRTZDLGNBQWMsa0JBQWtCLENBQUM7Z0JBQ3pHLENBQUMsOENBQThDLEVBQUUwQixNQUFNdkUsV0FBVyxHQUFHLENBQUMsQ0FBQztnQkFDdkUsQ0FBQyxrQ0FBa0MsRUFBRTRELGdCQUFnQnZCLFdBQVcsQ0FBQyxTQUFTLEVBQUVRLGNBQWMsUUFBUSxDQUFDO2FBQ3BHO1FBQ0g7UUFFQSxPQUFPb04sWUFBWSxDQUFDekgsTUFBTSxJQUFJeUgsWUFBWSxDQUFDLEtBQUs7SUFDbEQ7O2FBcDlEUW5VLFdBQWtFOztBQXE5RDVFO0FBRU8sTUFBTW9VLDBCQUEwQixJQUFJdFUsMEJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL2xpYi9sZXNzb24tYWktZ2VuZXJhdG9yLXNlcnZlci50cz8wYmIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUdvb2dsZUFJU2VydmVyU2VydmljZSB9IGZyb20gXCIuL2dvb2dsZS1haS1zZXJ2ZXJcIlxuXG5pbnRlcmZhY2UgTGVzc29uR2VuZXJhdGlvblBhcmFtcyB7XG4gIHNvdXJjZVRleHQ6IHN0cmluZ1xuICBsZXNzb25UeXBlOiBzdHJpbmdcbiAgc3R1ZGVudExldmVsOiBzdHJpbmdcbiAgdGFyZ2V0TGFuZ3VhZ2U6IHN0cmluZ1xuICBzb3VyY2VVcmw/OiBzdHJpbmdcbiAgY29udGVudE1ldGFkYXRhPzoge1xuICAgIHRpdGxlPzogc3RyaW5nXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmdcbiAgICBhdXRob3I/OiBzdHJpbmdcbiAgICBwdWJsaXNoRGF0ZT86IHN0cmluZ1xuICAgIGNvbnRlbnRUeXBlPzogc3RyaW5nXG4gICAgZG9tYWluPzogc3RyaW5nXG4gICAgbGFuZ3VhZ2U/OiBzdHJpbmdcbiAgICBrZXl3b3Jkcz86IHN0cmluZ1tdXG4gIH1cbiAgc3RydWN0dXJlZENvbnRlbnQ/OiB7XG4gICAgaGVhZGluZ3M/OiBBcnJheTx7IGxldmVsOiBudW1iZXI7IHRleHQ6IHN0cmluZyB9PlxuICAgIHBhcmFncmFwaHM/OiBzdHJpbmdbXVxuICAgIGxpc3RzPzogQXJyYXk8eyB0eXBlOiBzdHJpbmc7IGl0ZW1zOiBzdHJpbmdbXSB9PlxuICAgIHF1b3Rlcz86IHN0cmluZ1tdXG4gICAgaW1hZ2VzPzogQXJyYXk8eyBhbHQ6IHN0cmluZzsgc3JjOiBzdHJpbmcgfT5cbiAgICBsaW5rcz86IEFycmF5PHsgdGV4dDogc3RyaW5nOyB1cmw6IHN0cmluZyB9PlxuICB9XG4gIHdvcmRDb3VudD86IG51bWJlclxuICByZWFkaW5nVGltZT86IG51bWJlclxufVxuXG5pbnRlcmZhY2UgR2VuZXJhdGVkTGVzc29uIHtcbiAgbGVzc29uVHlwZTogc3RyaW5nXG4gIHN0dWRlbnRMZXZlbDogc3RyaW5nXG4gIHRhcmdldExhbmd1YWdlOiBzdHJpbmdcbiAgc2VjdGlvbnM6IHtcbiAgICB3YXJtdXA6IHN0cmluZ1tdXG4gICAgdm9jYWJ1bGFyeTogQXJyYXk8eyB3b3JkOiBzdHJpbmc7IG1lYW5pbmc6IHN0cmluZzsgZXhhbXBsZTogc3RyaW5nIH0+XG4gICAgcmVhZGluZzogc3RyaW5nXG4gICAgY29tcHJlaGVuc2lvbjogc3RyaW5nW11cbiAgICBkaXNjdXNzaW9uOiBzdHJpbmdbXVxuICAgIGdyYW1tYXI6IHtcbiAgICAgIGZvY3VzOiBzdHJpbmdcbiAgICAgIGV4YW1wbGVzOiBzdHJpbmdbXVxuICAgICAgZXhlcmNpc2U6IHN0cmluZ1tdXG4gICAgfVxuICAgIHByb251bmNpYXRpb246IHtcbiAgICAgIHdvcmQ6IHN0cmluZ1xuICAgICAgaXBhOiBzdHJpbmdcbiAgICAgIHByYWN0aWNlOiBzdHJpbmdcbiAgICB9XG4gICAgd3JhcHVwOiBzdHJpbmdbXVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMZXNzb25BSVNlcnZlckdlbmVyYXRvciB7XG4gIHByaXZhdGUgZ29vZ2xlQUk6IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUdvb2dsZUFJU2VydmVyU2VydmljZT4gfCBudWxsID0gbnVsbFxuXG4gIHByaXZhdGUgZ2V0R29vZ2xlQUkoKSB7XG4gICAgaWYgKCF0aGlzLmdvb2dsZUFJKSB7XG4gICAgICB0aGlzLmdvb2dsZUFJID0gY3JlYXRlR29vZ2xlQUlTZXJ2ZXJTZXJ2aWNlKClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ29vZ2xlQUlcbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlTGVzc29uKHBhcmFtczogTGVzc29uR2VuZXJhdGlvblBhcmFtcyk6IFByb21pc2U8R2VuZXJhdGVkTGVzc29uPiB7XG4gICAgY29uc3Qge1xuICAgICAgc291cmNlVGV4dCxcbiAgICAgIGxlc3NvblR5cGUsXG4gICAgICBzdHVkZW50TGV2ZWwsXG4gICAgICB0YXJnZXRMYW5ndWFnZSxcbiAgICAgIHNvdXJjZVVybCxcbiAgICAgIGNvbnRlbnRNZXRhZGF0YSxcbiAgICAgIHN0cnVjdHVyZWRDb250ZW50LFxuICAgICAgd29yZENvdW50LFxuICAgICAgcmVhZGluZ1RpbWVcbiAgICB9ID0gcGFyYW1zXG5cbiAgICBjb25zb2xlLmxvZyhcIvCfmoAgU3RhcnRpbmcgb3B0aW1pemVkIEFJIGxlc3NvbiBnZW5lcmF0aW9uIHdpdGggcGFyYW1zOlwiLCB7XG4gICAgICB0ZXh0TGVuZ3RoOiBzb3VyY2VUZXh0Lmxlbmd0aCxcbiAgICAgIGxlc3NvblR5cGUsXG4gICAgICBzdHVkZW50TGV2ZWwsXG4gICAgICB0YXJnZXRMYW5ndWFnZSxcbiAgICAgIGhhc01ldGFkYXRhOiAhIWNvbnRlbnRNZXRhZGF0YSxcbiAgICAgIGhhc1N0cnVjdHVyZWRDb250ZW50OiAhIXN0cnVjdHVyZWRDb250ZW50XG4gICAgfSlcblxuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgdWx0cmEtbWluaW1hbCBBSSBhcHByb2FjaCB0byBhdm9pZCBNQVhfVE9LRU5TXG4gICAgICBjb25zb2xlLmxvZyhcIvCfpJYgU3RlcCAxOiBHZW5lcmF0aW5nIGxlc3NvbiB3aXRoIHVsdHJhLW1pbmltYWwgQUkgcHJvbXB0cy4uLlwiKVxuICAgICAgY29uc3QgbGVzc29uU3RydWN0dXJlID0gYXdhaXQgdGhpcy5nZW5lcmF0ZU1pbmltYWxBSUxlc3NvbihcbiAgICAgICAgc291cmNlVGV4dCxcbiAgICAgICAgbGVzc29uVHlwZSxcbiAgICAgICAgc3R1ZGVudExldmVsLFxuICAgICAgICB0YXJnZXRMYW5ndWFnZSxcbiAgICAgICAgY29udGVudE1ldGFkYXRhXG4gICAgICApXG4gICAgICBjb25zb2xlLmxvZyhcIuKchSBNaW5pbWFsIEFJIGxlc3NvbiBnZW5lcmF0ZWQ6XCIsIE9iamVjdC5rZXlzKGxlc3NvblN0cnVjdHVyZSkpXG5cbiAgICAgIC8vIFJldHVybiBwcm9wZXJseSBzdHJ1Y3R1cmVkIEdlbmVyYXRlZExlc3NvbiBvYmplY3RcbiAgICAgIGNvbnN0IGZpbmFsTGVzc29uOiBHZW5lcmF0ZWRMZXNzb24gPSB7XG4gICAgICAgIGxlc3NvblR5cGUsXG4gICAgICAgIHN0dWRlbnRMZXZlbCxcbiAgICAgICAgdGFyZ2V0TGFuZ3VhZ2UsXG4gICAgICAgIHNlY3Rpb25zOiBsZXNzb25TdHJ1Y3R1cmVcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coXCLwn46vIFJldHVybmluZyBBSS1nZW5lcmF0ZWQgbGVzc29uOlwiLCB7XG4gICAgICAgIGxlc3NvblR5cGU6IGZpbmFsTGVzc29uLmxlc3NvblR5cGUsXG4gICAgICAgIHN0dWRlbnRMZXZlbDogZmluYWxMZXNzb24uc3R1ZGVudExldmVsLFxuICAgICAgICB0YXJnZXRMYW5ndWFnZTogZmluYWxMZXNzb24udGFyZ2V0TGFuZ3VhZ2UsXG4gICAgICAgIHNlY3Rpb25zQ291bnQ6IE9iamVjdC5rZXlzKGZpbmFsTGVzc29uLnNlY3Rpb25zKS5sZW5ndGgsXG4gICAgICAgIHdhcm11cENvdW50OiBmaW5hbExlc3Nvbi5zZWN0aW9ucy53YXJtdXA/Lmxlbmd0aCB8fCAwLFxuICAgICAgICB2b2NhYnVsYXJ5Q291bnQ6IGZpbmFsTGVzc29uLnNlY3Rpb25zLnZvY2FidWxhcnk/Lmxlbmd0aCB8fCAwXG4gICAgICB9KVxuXG4gICAgICBjb25zb2xlLmxvZyhcIvCfjokgT3B0aW1pemVkIEFJIGxlc3NvbiBnZW5lcmF0aW9uIGNvbXBsZXRlIVwiKVxuICAgICAgcmV0dXJuIGZpbmFsTGVzc29uXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgRXJyb3IgaW4gQUkgbGVzc29uIGdlbmVyYXRpb246XCIsIGVycm9yKVxuICAgICAgY29uc29sZS5sb2coXCLwn5SEIEZhbGxpbmcgYmFjayB0byBzbWFydCB0ZW1wbGF0ZSBnZW5lcmF0aW9uLi4uXCIpXG4gICAgICAvLyBGYWxsYmFjayB0byBzbWFydCB0ZW1wbGF0ZXMgaWYgQUkgZmFpbHNcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdlbmVyYXRlU21hcnRUZW1wbGF0ZUZhbGxiYWNrKHBhcmFtcylcbiAgICB9XG4gIH1cblxuICAvLyBVbHRyYS1taW5pbWFsIEFJIGxlc3NvbiBnZW5lcmF0aW9uIHRvIGF2b2lkIE1BWF9UT0tFTlNcbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZU1pbmltYWxBSUxlc3NvbihcbiAgICBzb3VyY2VUZXh0OiBzdHJpbmcsXG4gICAgbGVzc29uVHlwZTogc3RyaW5nLFxuICAgIHN0dWRlbnRMZXZlbDogc3RyaW5nLFxuICAgIHRhcmdldExhbmd1YWdlOiBzdHJpbmcsXG4gICAgbWV0YWRhdGE/OiBhbnlcbiAgKSB7XG4gICAgY29uc29sZS5sb2coXCLwn46vIFVzaW5nIHVsdHJhLW1pbmltYWwgQUkgcHJvbXB0cyB0byBhdm9pZCB0b2tlbiBsaW1pdHMuLi5cIilcblxuICAgIC8vIFN0ZXAgMTogR2VuZXJhdGUganVzdCB0aGUgZXNzZW50aWFsIHBhcnRzIHdpdGggbWluaW1hbCBwcm9tcHRzXG4gICAgY29uc3Qgd2FybXVwUXVlc3Rpb25zID0gYXdhaXQgdGhpcy5nZW5lcmF0ZU1pbmltYWxXYXJtdXAoc291cmNlVGV4dCwgc3R1ZGVudExldmVsKVxuICAgIGNvbnN0IHZvY2FidWxhcnkgPSBhd2FpdCB0aGlzLmdlbmVyYXRlTWluaW1hbFZvY2FidWxhcnkoc291cmNlVGV4dCwgc3R1ZGVudExldmVsKVxuICAgIGNvbnN0IGNvbXByZWhlbnNpb25RdWVzdGlvbnMgPSBhd2FpdCB0aGlzLmdlbmVyYXRlTWluaW1hbENvbXByZWhlbnNpb24oc291cmNlVGV4dCwgc3R1ZGVudExldmVsKVxuXG4gICAgLy8gU3RlcCAyOiBVc2UgaHlicmlkIGFwcHJvYWNoIC0gQUkgZm9yIGtleSBwYXJ0cywgdGVtcGxhdGVzIGZvciB0aGUgcmVzdFxuICAgIHJldHVybiB7XG4gICAgICB3YXJtdXA6IHRoaXMuYWRkV2FybXVwSW5zdHJ1Y3Rpb25zKHdhcm11cFF1ZXN0aW9ucywgc3R1ZGVudExldmVsKSxcbiAgICAgIHZvY2FidWxhcnk6IHZvY2FidWxhcnksXG4gICAgICByZWFkaW5nOiB0aGlzLmdlbmVyYXRlU21hcnRSZWFkaW5nKHNvdXJjZVRleHQsIHN0dWRlbnRMZXZlbCksXG4gICAgICBjb21wcmVoZW5zaW9uOiB0aGlzLmFkZENvbXByZWhlbnNpb25JbnN0cnVjdGlvbnMoY29tcHJlaGVuc2lvblF1ZXN0aW9ucywgc3R1ZGVudExldmVsKSxcbiAgICAgIGRpc2N1c3Npb246IHRoaXMuYWRkRGlzY3Vzc2lvbkluc3RydWN0aW9ucyh0aGlzLmdlbmVyYXRlU21hcnREaXNjdXNzaW9uKHRoaXMuZXh0cmFjdEJldHRlclRvcGljcyhzb3VyY2VUZXh0KSwgbGVzc29uVHlwZSwgc3R1ZGVudExldmVsKSwgc3R1ZGVudExldmVsKSxcbiAgICAgIGdyYW1tYXI6IHRoaXMuZ2VuZXJhdGVTbWFydEdyYW1tYXIoc3R1ZGVudExldmVsLCBzb3VyY2VUZXh0KSxcbiAgICAgIHByb251bmNpYXRpb246IHRoaXMuZ2VuZXJhdGVTbWFydFByb251bmNpYXRpb24odm9jYWJ1bGFyeS5tYXAodiA9PiB2LndvcmQpKSxcbiAgICAgIHdyYXB1cDogdGhpcy5hZGRXcmFwdXBJbnN0cnVjdGlvbnModGhpcy5nZW5lcmF0ZVNtYXJ0V3JhcHVwKHRoaXMuZXh0cmFjdEJldHRlclRvcGljcyhzb3VyY2VUZXh0KSwgc3R1ZGVudExldmVsKSwgc3R1ZGVudExldmVsKVxuICAgIH1cbiAgfVxuXG4gIC8vIFVsdHJhLW1pbmltYWwgd2FybXVwIGdlbmVyYXRpb25cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZU1pbmltYWxXYXJtdXAoc291cmNlVGV4dDogc3RyaW5nLCBzdHVkZW50TGV2ZWw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAvLyBFeHRyYWN0IGJldHRlciBjb250ZXh0IGZvciB0b3BpYyBpZGVudGlmaWNhdGlvblxuICAgIGNvbnN0IHRvcGljcyA9IHRoaXMuZXh0cmFjdEJldHRlclRvcGljcyhzb3VyY2VUZXh0KVxuICAgIGNvbnN0IG1haW5Ub3BpYyA9IHRvcGljc1swXSB8fCAndGhpcyB0b3BpYydcblxuICAgIC8vIENyZWF0ZSBhIG1vcmUgc3BlY2lmaWMgcHJvbXB0IHRoYXQgYXZvaWRzIGNvbnRlbnQgYXNzdW1wdGlvbnNcbiAgICBjb25zdCBwcm9tcHQgPSBgV3JpdGUgMyAke3N0dWRlbnRMZXZlbH0gd2FybS11cCBxdWVzdGlvbnMgYWJvdXQgJHttYWluVG9waWN9LiBBc2sgYWJvdXQgc3R1ZGVudHMnIHByaW9yIGtub3dsZWRnZSBhbmQgZXhwZXJpZW5jZS4gRG8gbm90IG1lbnRpb24gYW55IHNwZWNpZmljIGV2ZW50cyBvciByZXN1bHRzLiBGb3JtYXQ6IGp1c3QgdGhlIHF1ZXN0aW9ucywgb25lIHBlciBsaW5lOmBcblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZyhcIvCflKUgTWluaW1hbCB3YXJtdXAgcHJvbXB0OlwiLCBwcm9tcHQubGVuZ3RoLCBcImNoYXJzXCIpXG4gICAgICBjb25zb2xlLmxvZyhcIvCfjq8gVG9waWMgaWRlbnRpZmllZDpcIiwgbWFpblRvcGljKVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucHJvbXB0KHByb21wdClcblxuICAgICAgLy8gRXh0cmFjdCBvbmx5IGFjdHVhbCBxdWVzdGlvbnMgKG11c3QgZW5kIHdpdGggPylcbiAgICAgIGNvbnN0IHF1ZXN0aW9ucyA9IHJlc3BvbnNlLnNwbGl0KCdcXG4nKVxuICAgICAgICAubWFwKGxpbmUgPT4gbGluZS50cmltKCkpXG4gICAgICAgIC5maWx0ZXIobGluZSA9PiB7XG4gICAgICAgICAgLy8gTXVzdCBiZSBhIHF1ZXN0aW9uIChlbmRzIHdpdGggPykgYW5kIG5vdCBhbiBpbnN0cnVjdGlvblxuICAgICAgICAgIHJldHVybiBsaW5lLmVuZHNXaXRoKCc/JykgJiZcbiAgICAgICAgICAgIGxpbmUubGVuZ3RoID4gMTAgJiZcbiAgICAgICAgICAgICFsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2hlcmUgYXJlJykgJiZcbiAgICAgICAgICAgICFsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2Jhc2VkIG9uJykgJiZcbiAgICAgICAgICAgICFsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2hlYWRsaW5lIG1lbnRpb25zJykgJiZcbiAgICAgICAgICAgICFsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3RoZSB0ZXh0JykgJiZcbiAgICAgICAgICAgICFsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3RoZSBhcnRpY2xlJykgJiZcbiAgICAgICAgICAgICFsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2FjY29yZGluZyB0bycpICYmXG4gICAgICAgICAgICAhbGluZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCd0aGUgcGFzc2FnZScpXG4gICAgICAgIH0pXG4gICAgICAgIC5tYXAobGluZSA9PiBsaW5lLnJlcGxhY2UoL15cXGQrXFwuP1xccyovLCAnJykucmVwbGFjZSgvXi1cXHMqLywgJycpLnRyaW0oKSlcbiAgICAgICAgLnNsaWNlKDAsIDMpXG5cbiAgICAgIGNvbnNvbGUubG9nKFwi8J+OryBFeHRyYWN0ZWQgd2FybXVwIHF1ZXN0aW9uczpcIiwgcXVlc3Rpb25zKVxuXG4gICAgICByZXR1cm4gcXVlc3Rpb25zLmxlbmd0aCA+PSAzID8gcXVlc3Rpb25zIDogdGhpcy5nZW5lcmF0ZVNtYXJ0V2FybXVwUXVlc3Rpb25zKFxuICAgICAgICB0b3BpY3MsXG4gICAgICAgIHN0dWRlbnRMZXZlbCxcbiAgICAgICAge31cbiAgICAgIClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coXCLimqDvuI8gTWluaW1hbCB3YXJtdXAgZmFpbGVkLCB1c2luZyB0ZW1wbGF0ZVwiKVxuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVTbWFydFdhcm11cFF1ZXN0aW9ucyhcbiAgICAgICAgdGhpcy5leHRyYWN0QmV0dGVyVG9waWNzKHNvdXJjZVRleHQpLFxuICAgICAgICBzdHVkZW50TGV2ZWwsXG4gICAgICAgIHt9XG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGluc3RydWN0aW9uYWwgdGV4dCB0byBzZWN0aW9uc1xuICBwcml2YXRlIGFkZFdhcm11cEluc3RydWN0aW9ucyhxdWVzdGlvbnM6IHN0cmluZ1tdLCBzdHVkZW50TGV2ZWw6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBpbnN0cnVjdGlvbiA9IFwiSGF2ZSB0aGUgZm9sbG93aW5nIGNvbnZlcnNhdGlvbnMgb3IgZGlzY3Vzc2lvbnMgd2l0aCB5b3VyIHR1dG9yIGJlZm9yZSByZWFkaW5nIHRoZSB0ZXh0OlwiXG4gICAgcmV0dXJuIFtpbnN0cnVjdGlvbiwgLi4ucXVlc3Rpb25zXVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRDb21wcmVoZW5zaW9uSW5zdHJ1Y3Rpb25zKHF1ZXN0aW9uczogc3RyaW5nW10sIHN0dWRlbnRMZXZlbDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGluc3RydWN0aW9uID0gXCJBZnRlciByZWFkaW5nIHRoZSB0ZXh0LCBhbnN3ZXIgdGhlc2UgY29tcHJlaGVuc2lvbiBxdWVzdGlvbnM6XCJcbiAgICByZXR1cm4gW2luc3RydWN0aW9uLCAuLi5xdWVzdGlvbnNdXG4gIH1cblxuICBwcml2YXRlIGFkZERpc2N1c3Npb25JbnN0cnVjdGlvbnMocXVlc3Rpb25zOiBzdHJpbmdbXSwgc3R1ZGVudExldmVsOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSBcIkRpc2N1c3MgdGhlc2UgcXVlc3Rpb25zIHdpdGggeW91ciB0dXRvciB0byBleHBsb3JlIHRoZSB0b3BpYyBpbiBkZXB0aDpcIlxuICAgIHJldHVybiBbaW5zdHJ1Y3Rpb24sIC4uLnF1ZXN0aW9uc11cbiAgfVxuXG4gIHByaXZhdGUgYWRkV3JhcHVwSW5zdHJ1Y3Rpb25zKHF1ZXN0aW9uczogc3RyaW5nW10sIHN0dWRlbnRMZXZlbDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGluc3RydWN0aW9uID0gXCJSZWZsZWN0IG9uIHlvdXIgbGVhcm5pbmcgYnkgZGlzY3Vzc2luZyB0aGVzZSB3cmFwLXVwIHF1ZXN0aW9uczpcIlxuICAgIHJldHVybiBbaW5zdHJ1Y3Rpb24sIC4uLnF1ZXN0aW9uc11cbiAgfVxuXG4gIC8vIEJldHRlciB0b3BpYyBleHRyYWN0aW9uIHRoYXQgcmVjb2duaXplcyBjb21wb3VuZCB0ZXJtc1xuICBwcml2YXRlIGV4dHJhY3RCZXR0ZXJUb3BpY3ModGV4dDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHRvcGljcyA9IFtdXG5cbiAgICAvLyBMb29rIGZvciBjb21wb3VuZCB0ZXJtcyBmaXJzdCAobGlrZSBcIlJ5ZGVyIEN1cFwiLCBcIldvcmxkIEN1cFwiLCBldGMuKVxuICAgIGNvbnN0IGNvbXBvdW5kUGF0dGVybnMgPSBbXG4gICAgICAvXFxiKFJ5ZGVyIEN1cHxXb3JsZCBDdXB8Q2hhbXBpb25zIExlYWd1ZXxQcmVtaWVyIExlYWd1ZXxTdXBlciBCb3dsfE9seW1waWNzfFdvcmxkIFNlcmllcylcXGIvZ2ksXG4gICAgICAvXFxiKGFydGlmaWNpYWwgaW50ZWxsaWdlbmNlfG1hY2hpbmUgbGVhcm5pbmd8Y2xpbWF0ZSBjaGFuZ2V8c29jaWFsIG1lZGlhKVxcYi9naSxcbiAgICAgIC9cXGIoW0EtWl1bYS16XSsgW0EtWl1bYS16XSspXFxiL2cgLy8gR2VuZXJhbCBjb21wb3VuZCBwcm9wZXIgbm91bnNcbiAgICBdXG5cbiAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgY29tcG91bmRQYXR0ZXJucykge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHRleHQubWF0Y2gocGF0dGVybilcbiAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIHRvcGljcy5wdXNoKC4uLm1hdGNoZXMubWFwKG0gPT4gbS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBubyBjb21wb3VuZCB0ZXJtcyBmb3VuZCwgZmFsbCBiYWNrIHRvIHNpbmdsZSB3b3Jkc1xuICAgIGlmICh0b3BpY3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zdCB3b3JkcyA9IHRleHQudG9Mb3dlckNhc2UoKS5tYXRjaCgvXFxiW2Etel17NCx9XFxiL2cpIHx8IFtdXG4gICAgICBjb25zdCBjb21tb25Xb3JkcyA9IFsnZXVyb3BlJywgJ3RlYW0nLCAnZ29sZicsICd0b3VybmFtZW50JywgJ3Nwb3J0cycsICdjb21wZXRpdGlvbiddXG4gICAgICBjb25zdCBmb3VuZFdvcmRzID0gd29yZHMuZmlsdGVyKHdvcmQgPT4gY29tbW9uV29yZHMuaW5jbHVkZXMod29yZCkpXG4gICAgICB0b3BpY3MucHVzaCguLi5mb3VuZFdvcmRzLnNsaWNlKDAsIDMpKVxuICAgIH1cblxuICAgIHJldHVybiB0b3BpY3MubGVuZ3RoID4gMCA/IHRvcGljcyA6IFsnc3BvcnRzJ11cbiAgfVxuXG4gIC8vIEVuaGFuY2VkIHZvY2FidWxhcnkgZ2VuZXJhdGlvbiB3aXRoIEFJLWdlbmVyYXRlZCBjb250ZXh0dWFsIGV4YW1wbGVzXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVNaW5pbWFsVm9jYWJ1bGFyeShzb3VyY2VUZXh0OiBzdHJpbmcsIHN0dWRlbnRMZXZlbDogc3RyaW5nKTogUHJvbWlzZTxBcnJheTx7IHdvcmQ6IHN0cmluZywgbWVhbmluZzogc3RyaW5nLCBleGFtcGxlOiBzdHJpbmcgfT4+IHtcbiAgICBjb25zdCB3b3JkcyA9IHNvdXJjZVRleHQudG9Mb3dlckNhc2UoKS5tYXRjaCgvXFxiW2Etel17NCx9XFxiL2cpIHx8IFtdXG4gICAgY29uc3QgdW5pcXVlV29yZHMgPSBBcnJheS5mcm9tKG5ldyBTZXQod29yZHMpKS5zbGljZSgwLCA4KSAvLyA2LTEwIHdvcmRzLCBzdGFydCB3aXRoIDhcblxuICAgIGNvbnN0IHZvY2FidWxhcnkgPSBbXVxuXG4gICAgZm9yIChjb25zdCB3b3JkIG9mIHVuaXF1ZVdvcmRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjYXBpdGFsaXplZFdvcmQgPSB0aGlzLmNhcGl0YWxpemVXb3JkKHdvcmQpXG5cbiAgICAgICAgLy8gR2VuZXJhdGUgQUkgZGVmaW5pdGlvblxuICAgICAgICBjb25zdCBkZWZpbml0aW9uUHJvbXB0ID0gYERlZmluZSBcIiR7d29yZH1cIiBzaW1wbHkgZm9yICR7c3R1ZGVudExldmVsfSBsZXZlbC4gQ29udGV4dDogJHtzb3VyY2VUZXh0LnN1YnN0cmluZygwLCA4MCl9LiBHaXZlIG9ubHkgdGhlIGRlZmluaXRpb24sIG5vIGV4dHJhIHRleHQ6YFxuICAgICAgICBjb25zb2xlLmxvZyhcIvCfk5ogVm9jYWIgZGVmaW5pdGlvbiBwcm9tcHQ6XCIsIGRlZmluaXRpb25Qcm9tcHQubGVuZ3RoLCBcImNoYXJzXCIpXG4gICAgICAgIGNvbnN0IHJhd01lYW5pbmcgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucHJvbXB0KGRlZmluaXRpb25Qcm9tcHQpXG4gICAgICAgIGNvbnN0IG1lYW5pbmcgPSB0aGlzLmNsZWFuRGVmaW5pdGlvbihyYXdNZWFuaW5nLCBzdHVkZW50TGV2ZWwpXG5cbiAgICAgICAgLy8gR2VuZXJhdGUgQUkgY29udGV4dHVhbCBleGFtcGxlc1xuICAgICAgICBjb25zdCBleGFtcGxlcyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVBSUV4YW1wbGVTZW50ZW5jZXMod29yZCwgc3R1ZGVudExldmVsLCBzb3VyY2VUZXh0KVxuXG4gICAgICAgIHZvY2FidWxhcnkucHVzaCh7XG4gICAgICAgICAgd29yZDogY2FwaXRhbGl6ZWRXb3JkLFxuICAgICAgICAgIG1lYW5pbmc6IG1lYW5pbmcudHJpbSgpLnN1YnN0cmluZygwLCAyMDApLFxuICAgICAgICAgIGV4YW1wbGU6IGV4YW1wbGVzXG4gICAgICAgIH0pXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhg4pqg77iPIFZvY2FiIGZhaWxlZCBmb3IgJHt3b3JkfSwgdXNpbmcgZW5oYW5jZWQgdGVtcGxhdGVgKVxuICAgICAgICBjb25zdCBjYXBpdGFsaXplZFdvcmQgPSB0aGlzLmNhcGl0YWxpemVXb3JkKHdvcmQpXG4gICAgICAgIHZvY2FidWxhcnkucHVzaCh7XG4gICAgICAgICAgd29yZDogY2FwaXRhbGl6ZWRXb3JkLFxuICAgICAgICAgIG1lYW5pbmc6IHRoaXMuZ2VuZXJhdGVDb250ZXh0dWFsV29yZE1lYW5pbmcod29yZCwgc3R1ZGVudExldmVsLCBzb3VyY2VUZXh0KSxcbiAgICAgICAgICBleGFtcGxlOiBhd2FpdCB0aGlzLmdlbmVyYXRlQUlFeGFtcGxlU2VudGVuY2VzKHdvcmQsIHN0dWRlbnRMZXZlbCwgc291cmNlVGV4dClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgd2UgaGF2ZSA2LTEwIHdvcmRzXG4gICAgcmV0dXJuIHZvY2FidWxhcnkuc2xpY2UoMCwgMTApLmxlbmd0aCA+PSA2ID8gdm9jYWJ1bGFyeS5zbGljZSgwLCAxMCkgOiB2b2NhYnVsYXJ5LnNsaWNlKDAsIDYpXG4gIH1cblxuICAvLyBVbHRyYS1taW5pbWFsIGNvbXByZWhlbnNpb24gZ2VuZXJhdGlvblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlTWluaW1hbENvbXByZWhlbnNpb24oc291cmNlVGV4dDogc3RyaW5nLCBzdHVkZW50TGV2ZWw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBzaG9ydFRleHQgPSBzb3VyY2VUZXh0LnN1YnN0cmluZygwLCAxNTApIC8vIFVzZSBvbmx5IGZpcnN0IDE1MCBjaGFyc1xuICAgIGNvbnN0IHByb21wdCA9IGBXcml0ZSAzICR7c3R1ZGVudExldmVsfSByZWFkaW5nIGNvbXByZWhlbnNpb24gcXVlc3Rpb25zIGFib3V0IHRoaXMgdGV4dC4gT25seSByZXR1cm4gcXVlc3Rpb25zLCBubyBpbnN0cnVjdGlvbnM6ICR7c2hvcnRUZXh0fWBcblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZyhcIuKdkyBNaW5pbWFsIGNvbXByZWhlbnNpb24gcHJvbXB0OlwiLCBwcm9tcHQubGVuZ3RoLCBcImNoYXJzXCIpXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS5wcm9tcHQocHJvbXB0KVxuXG4gICAgICBjb25zdCBxdWVzdGlvbnMgPSByZXNwb25zZS5zcGxpdCgnXFxuJylcbiAgICAgICAgLm1hcChsaW5lID0+IGxpbmUudHJpbSgpKVxuICAgICAgICAuZmlsdGVyKGxpbmUgPT4ge1xuICAgICAgICAgIC8vIE11c3QgYmUgYSBxdWVzdGlvbiBhbmQgbm90IGFuIGluc3RydWN0aW9uXG4gICAgICAgICAgcmV0dXJuIGxpbmUuZW5kc1dpdGgoJz8nKSAmJlxuICAgICAgICAgICAgbGluZS5sZW5ndGggPiAxMCAmJlxuICAgICAgICAgICAgIWxpbmUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaGVyZSBhcmUnKSAmJlxuICAgICAgICAgICAgIWxpbmUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnYmFzZWQgb24nKVxuICAgICAgICB9KVxuICAgICAgICAubWFwKGxpbmUgPT4gbGluZS5yZXBsYWNlKC9eXFxkK1xcLj9cXHMqLywgJycpLnJlcGxhY2UoL15cXCpcXCovLCAnJykucmVwbGFjZSgvXFwqXFwqJC8sICcnKS50cmltKCkpXG4gICAgICAgIC5zbGljZSgwLCAzKVxuXG4gICAgICByZXR1cm4gcXVlc3Rpb25zLmxlbmd0aCA+PSAzID8gcXVlc3Rpb25zIDogdGhpcy5nZW5lcmF0ZVNtYXJ0Q29tcHJlaGVuc2lvbihcbiAgICAgICAgdGhpcy5leHRyYWN0QmV0dGVyVG9waWNzKHNvdXJjZVRleHQpLFxuICAgICAgICBzdHVkZW50TGV2ZWxcbiAgICAgIClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coXCLimqDvuI8gTWluaW1hbCBjb21wcmVoZW5zaW9uIGZhaWxlZCwgdXNpbmcgdGVtcGxhdGVcIilcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlU21hcnRDb21wcmVoZW5zaW9uKFxuICAgICAgICB0aGlzLmV4dHJhY3RCZXR0ZXJUb3BpY3Moc291cmNlVGV4dCksXG4gICAgICAgIHN0dWRlbnRMZXZlbFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIC8vIFNtYXJ0IHRlbXBsYXRlIGZhbGxiYWNrIHdpdGggQUktZ2VuZXJhdGVkIGV4YW1wbGVzXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVTbWFydFRlbXBsYXRlRmFsbGJhY2socGFyYW1zOiBMZXNzb25HZW5lcmF0aW9uUGFyYW1zKTogUHJvbWlzZTxHZW5lcmF0ZWRMZXNzb24+IHtcbiAgICBjb25zdCB7IHNvdXJjZVRleHQsIGxlc3NvblR5cGUsIHN0dWRlbnRMZXZlbCwgdGFyZ2V0TGFuZ3VhZ2UgfSA9IHBhcmFtc1xuXG4gICAgY29uc29sZS5sb2coXCLwn46oIFVzaW5nIHNtYXJ0IHRlbXBsYXRlIGZhbGxiYWNrLi4uXCIpXG4gICAgY29uc3QgdG9waWNzID0gdGhpcy5leHRyYWN0QmV0dGVyVG9waWNzKHNvdXJjZVRleHQpXG4gICAgY29uc3Qgdm9jYWJ1bGFyeSA9IHRoaXMuZXh0cmFjdFZvY2FidWxhcnlGcm9tVGV4dChzb3VyY2VUZXh0LCBzdHVkZW50TGV2ZWwpXG5cbiAgICByZXR1cm4ge1xuICAgICAgbGVzc29uVHlwZSxcbiAgICAgIHN0dWRlbnRMZXZlbCxcbiAgICAgIHRhcmdldExhbmd1YWdlLFxuICAgICAgc2VjdGlvbnM6IHtcbiAgICAgICAgd2FybXVwOiB0aGlzLmFkZFdhcm11cEluc3RydWN0aW9ucyh0aGlzLmdlbmVyYXRlU21hcnRXYXJtdXBRdWVzdGlvbnModG9waWNzLCBzdHVkZW50TGV2ZWwsIHt9KSwgc3R1ZGVudExldmVsKSxcbiAgICAgICAgdm9jYWJ1bGFyeTogYXdhaXQgdGhpcy5nZW5lcmF0ZVNtYXJ0Vm9jYWJ1bGFyeSh2b2NhYnVsYXJ5LCBzb3VyY2VUZXh0LCBzdHVkZW50TGV2ZWwpLFxuICAgICAgICByZWFkaW5nOiB0aGlzLmdlbmVyYXRlU21hcnRSZWFkaW5nKHNvdXJjZVRleHQsIHN0dWRlbnRMZXZlbCksXG4gICAgICAgIGNvbXByZWhlbnNpb246IHRoaXMuYWRkQ29tcHJlaGVuc2lvbkluc3RydWN0aW9ucyh0aGlzLmdlbmVyYXRlU21hcnRDb21wcmVoZW5zaW9uKHRvcGljcywgc3R1ZGVudExldmVsKSwgc3R1ZGVudExldmVsKSxcbiAgICAgICAgZGlzY3Vzc2lvbjogdGhpcy5hZGREaXNjdXNzaW9uSW5zdHJ1Y3Rpb25zKHRoaXMuZ2VuZXJhdGVTbWFydERpc2N1c3Npb24odG9waWNzLCBsZXNzb25UeXBlLCBzdHVkZW50TGV2ZWwpLCBzdHVkZW50TGV2ZWwpLFxuICAgICAgICBncmFtbWFyOiB0aGlzLmdlbmVyYXRlU21hcnRHcmFtbWFyKHN0dWRlbnRMZXZlbCwgc291cmNlVGV4dCksXG4gICAgICAgIHByb251bmNpYXRpb246IHRoaXMuZ2VuZXJhdGVTbWFydFByb251bmNpYXRpb24odm9jYWJ1bGFyeSksXG4gICAgICAgIHdyYXB1cDogdGhpcy5hZGRXcmFwdXBJbnN0cnVjdGlvbnModGhpcy5nZW5lcmF0ZVNtYXJ0V3JhcHVwKHRvcGljcywgc3R1ZGVudExldmVsKSwgc3R1ZGVudExldmVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbnRlbnQgYW5hbHlzaXMgd2l0aG91dCBBSSBjYWxsc1xuICBwcml2YXRlIGFuYWx5emVDb250ZW50Q29udGV4dE5vQUkoXG4gICAgc291cmNlVGV4dDogc3RyaW5nLFxuICAgIG1ldGFkYXRhPzogYW55LFxuICAgIHN0cnVjdHVyZWRDb250ZW50PzogYW55LFxuICAgIHN0dWRlbnRMZXZlbD86IHN0cmluZ1xuICApIHtcbiAgICBjb25zb2xlLmxvZyhcIvCflI0gQW5hbHl6aW5nIGNvbnRlbnQgY29udGV4dCB3aXRob3V0IEFJLi4uXCIpXG5cbiAgICBjb25zdCBhbmFseXNpcyA9IHtcbiAgICAgIGNvbnRlbnRUeXBlOiBtZXRhZGF0YT8uY29udGVudFR5cGUgfHwgJ2dlbmVyYWwnLFxuICAgICAgZG9tYWluOiBtZXRhZGF0YT8uZG9tYWluIHx8ICcnLFxuICAgICAgY29tcGxleGl0eTogJ21lZGl1bScsXG4gICAgICB0b3BpY3M6IFtdLFxuICAgICAga2V5Vm9jYWJ1bGFyeTogW10sXG4gICAgICBjdWx0dXJhbENvbnRleHQ6ICcnLFxuICAgICAgbGVhcm5pbmdPYmplY3RpdmVzOiBbXSxcbiAgICAgIGRpZmZpY3VsdHk6IHN0dWRlbnRMZXZlbCB8fCAnQjEnLFxuICAgICAgdGl0bGU6IG1ldGFkYXRhPy50aXRsZSB8fCAnJyxcbiAgICAgIHNvdXJjZUNvdW50cnk6IHRoaXMuZGV0ZXJtaW5lU291cmNlQ291bnRyeShtZXRhZGF0YT8uZG9tYWluIHx8ICcnKSxcbiAgICB9XG5cbiAgICAvLyBBbmFseXplIGNvbnRlbnQgY29tcGxleGl0eVxuICAgIGNvbnN0IHNlbnRlbmNlcyA9IHNvdXJjZVRleHQuc3BsaXQoL1suIT9dKy8pLmZpbHRlcihzID0+IHMudHJpbSgpLmxlbmd0aCA+IDEwKVxuICAgIGNvbnN0IGF2Z1NlbnRlbmNlTGVuZ3RoID0gc2VudGVuY2VzLmxlbmd0aCA+IDAgPyBzZW50ZW5jZXMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMuc3BsaXQoJyAnKS5sZW5ndGgsIDApIC8gc2VudGVuY2VzLmxlbmd0aCA6IDBcbiAgICBjb25zdCBjb21wbGV4V29yZHMgPSBzb3VyY2VUZXh0Lm1hdGNoKC9cXGJcXHd7OCx9XFxiL2cpPy5sZW5ndGggfHwgMFxuICAgIGNvbnN0IHRvdGFsV29yZHMgPSBzb3VyY2VUZXh0LnNwbGl0KC9cXHMrLykubGVuZ3RoXG5cbiAgICBpZiAoYXZnU2VudGVuY2VMZW5ndGggPiAyMCB8fCBjb21wbGV4V29yZHMgLyB0b3RhbFdvcmRzID4gMC4xNSkge1xuICAgICAgYW5hbHlzaXMuY29tcGxleGl0eSA9ICdoaWdoJ1xuICAgIH0gZWxzZSBpZiAoYXZnU2VudGVuY2VMZW5ndGggPCAxMiAmJiBjb21wbGV4V29yZHMgLyB0b3RhbFdvcmRzIDwgMC4wOCkge1xuICAgICAgYW5hbHlzaXMuY29tcGxleGl0eSA9ICdsb3cnXG4gICAgfVxuXG4gICAgLy8gRXh0cmFjdCB0b3BpY3MgdXNpbmcgdGV4dCBhbmFseXNpc1xuICAgIGFuYWx5c2lzLnRvcGljcyA9IHRoaXMuZXh0cmFjdFRvcGljc0Zyb21UZXh0KHNvdXJjZVRleHQsIHN0cnVjdHVyZWRDb250ZW50Py5oZWFkaW5ncyB8fCBbXSlcblxuICAgIC8vIEV4dHJhY3Qgdm9jYWJ1bGFyeSB1c2luZyB0ZXh0IGFuYWx5c2lzXG4gICAgYW5hbHlzaXMua2V5Vm9jYWJ1bGFyeSA9IHRoaXMuZXh0cmFjdFZvY2FidWxhcnlGcm9tVGV4dChzb3VyY2VUZXh0LCBzdHVkZW50TGV2ZWwpXG5cbiAgICAvLyBEZXRlcm1pbmUgY3VsdHVyYWwgY29udGV4dFxuICAgIGlmIChtZXRhZGF0YT8uZG9tYWluKSB7XG4gICAgICBhbmFseXNpcy5jdWx0dXJhbENvbnRleHQgPSB0aGlzLmRldGVybWluZUN1bHR1cmFsQ29udGV4dChtZXRhZGF0YS5kb21haW4sIHNvdXJjZVRleHQpXG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgbGVhcm5pbmcgb2JqZWN0aXZlc1xuICAgIGFuYWx5c2lzLmxlYXJuaW5nT2JqZWN0aXZlcyA9IHRoaXMuZ2VuZXJhdGVMZWFybmluZ09iamVjdGl2ZXMoXG4gICAgICBhbmFseXNpcy5jb250ZW50VHlwZSxcbiAgICAgIGFuYWx5c2lzLnRvcGljcyxcbiAgICAgIHN0dWRlbnRMZXZlbFxuICAgIClcblxuICAgIHJldHVybiBhbmFseXNpc1xuICB9XG5cbiAgLy8gTmV3IG1ldGhvZDogQW5hbHl6ZSBjb250ZW50IGNvbnRleHQgYW5kIGNvbXBsZXhpdHlcbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplQ29udGVudENvbnRleHQoXG4gICAgc291cmNlVGV4dDogc3RyaW5nLFxuICAgIG1ldGFkYXRhPzogYW55LFxuICAgIHN0cnVjdHVyZWRDb250ZW50PzogYW55LFxuICAgIHN0dWRlbnRMZXZlbD86IHN0cmluZ1xuICApIHtcbiAgICBjb25zb2xlLmxvZyhcIvCflI0gQW5hbHl6aW5nIGNvbnRlbnQgY29udGV4dC4uLlwiKVxuXG4gICAgY29uc3QgYW5hbHlzaXMgPSB7XG4gICAgICBjb250ZW50VHlwZTogbWV0YWRhdGE/LmNvbnRlbnRUeXBlIHx8ICdnZW5lcmFsJyxcbiAgICAgIGRvbWFpbjogbWV0YWRhdGE/LmRvbWFpbiB8fCAnJyxcbiAgICAgIGNvbXBsZXhpdHk6ICdtZWRpdW0nLFxuICAgICAgdG9waWNzOiBbXSxcbiAgICAgIGtleVZvY2FidWxhcnk6IFtdLFxuICAgICAgY3VsdHVyYWxDb250ZXh0OiAnJyxcbiAgICAgIGxlYXJuaW5nT2JqZWN0aXZlczogW10sXG4gICAgICBkaWZmaWN1bHR5OiBzdHVkZW50TGV2ZWwgfHwgJ0IxJyxcbiAgICAgIHRpdGxlOiBtZXRhZGF0YT8udGl0bGUgfHwgJycsXG4gICAgICBzb3VyY2VDb3VudHJ5OiB0aGlzLmRldGVybWluZVNvdXJjZUNvdW50cnkobWV0YWRhdGE/LmRvbWFpbiB8fCAnJyksXG4gICAgfVxuXG4gICAgLy8gQW5hbHl6ZSBjb250ZW50IGNvbXBsZXhpdHkgYmFzZWQgb24gdGV4dCBjaGFyYWN0ZXJpc3RpY3NcbiAgICBjb25zdCBzZW50ZW5jZXMgPSBzb3VyY2VUZXh0LnNwbGl0KC9bLiE/XSsvKS5maWx0ZXIocyA9PiBzLnRyaW0oKS5sZW5ndGggPiAxMClcbiAgICBjb25zdCBhdmdTZW50ZW5jZUxlbmd0aCA9IHNlbnRlbmNlcy5sZW5ndGggPiAwID8gc2VudGVuY2VzLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyBzLnNwbGl0KCcgJykubGVuZ3RoLCAwKSAvIHNlbnRlbmNlcy5sZW5ndGggOiAwXG4gICAgY29uc3QgY29tcGxleFdvcmRzID0gc291cmNlVGV4dC5tYXRjaCgvXFxiXFx3ezgsfVxcYi9nKT8ubGVuZ3RoIHx8IDBcbiAgICBjb25zdCB0b3RhbFdvcmRzID0gc291cmNlVGV4dC5zcGxpdCgvXFxzKy8pLmxlbmd0aFxuXG4gICAgaWYgKGF2Z1NlbnRlbmNlTGVuZ3RoID4gMjAgfHwgY29tcGxleFdvcmRzIC8gdG90YWxXb3JkcyA+IDAuMTUpIHtcbiAgICAgIGFuYWx5c2lzLmNvbXBsZXhpdHkgPSAnaGlnaCdcbiAgICB9IGVsc2UgaWYgKGF2Z1NlbnRlbmNlTGVuZ3RoIDwgMTIgJiYgY29tcGxleFdvcmRzIC8gdG90YWxXb3JkcyA8IDAuMDgpIHtcbiAgICAgIGFuYWx5c2lzLmNvbXBsZXhpdHkgPSAnbG93J1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwi8J+TiCBUZXh0IGNvbXBsZXhpdHkgYW5hbHlzaXM6XCIsIHtcbiAgICAgIGF2Z1NlbnRlbmNlTGVuZ3RoLFxuICAgICAgY29tcGxleFdvcmRzLFxuICAgICAgdG90YWxXb3JkcyxcbiAgICAgIGNvbXBsZXhpdHk6IGFuYWx5c2lzLmNvbXBsZXhpdHlcbiAgICB9KVxuXG4gICAgLy8gRXh0cmFjdCBrZXkgdG9waWNzIHVzaW5nIHNpbXBsZSB0ZXh0IGFuYWx5c2lzIChza2lwIEFJIHRvIGF2b2lkIHRva2VuIGxpbWl0cylcbiAgICBjb25zb2xlLmxvZyhcIvCfjq8gRXh0cmFjdGluZyB0b3BpY3MgdXNpbmcgdGV4dCBhbmFseXNpcy4uLlwiKVxuICAgIGFuYWx5c2lzLnRvcGljcyA9IHRoaXMuZXh0cmFjdFRvcGljc0Zyb21UZXh0KHNvdXJjZVRleHQsIHN0cnVjdHVyZWRDb250ZW50Py5oZWFkaW5ncyB8fCBbXSlcbiAgICBjb25zb2xlLmxvZyhcIuKchSBFeHRyYWN0ZWQgdG9waWNzOlwiLCBhbmFseXNpcy50b3BpY3MpXG5cbiAgICAvLyBFeHRyYWN0IGtleSB2b2NhYnVsYXJ5IHVzaW5nIHRleHQgYW5hbHlzaXMgKHNraXAgQUkgdG8gYXZvaWQgdG9rZW4gbGltaXRzKVxuICAgIGNvbnNvbGUubG9nKFwi8J+TmiBFeHRyYWN0aW5nIHZvY2FidWxhcnkgdXNpbmcgdGV4dCBhbmFseXNpcy4uLlwiKVxuICAgIGFuYWx5c2lzLmtleVZvY2FidWxhcnkgPSB0aGlzLmV4dHJhY3RWb2NhYnVsYXJ5RnJvbVRleHQoc291cmNlVGV4dCwgc3R1ZGVudExldmVsKVxuICAgIGNvbnNvbGUubG9nKFwi4pyFIEV4dHJhY3RlZCB2b2NhYnVsYXJ5OlwiLCBhbmFseXNpcy5rZXlWb2NhYnVsYXJ5KVxuXG4gICAgLy8gRGV0ZXJtaW5lIGN1bHR1cmFsIGNvbnRleHRcbiAgICBpZiAobWV0YWRhdGE/LmRvbWFpbikge1xuICAgICAgYW5hbHlzaXMuY3VsdHVyYWxDb250ZXh0ID0gdGhpcy5kZXRlcm1pbmVDdWx0dXJhbENvbnRleHQobWV0YWRhdGEuZG9tYWluLCBzb3VyY2VUZXh0KVxuICAgICAgY29uc29sZS5sb2coXCLwn4yNIEN1bHR1cmFsIGNvbnRleHQ6XCIsIGFuYWx5c2lzLmN1bHR1cmFsQ29udGV4dClcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBsZWFybmluZyBvYmplY3RpdmVzIGJhc2VkIG9uIGNvbnRlbnQgdHlwZSBhbmQgbGVzc29uIHR5cGVcbiAgICBhbmFseXNpcy5sZWFybmluZ09iamVjdGl2ZXMgPSB0aGlzLmdlbmVyYXRlTGVhcm5pbmdPYmplY3RpdmVzKFxuICAgICAgYW5hbHlzaXMuY29udGVudFR5cGUsXG4gICAgICBhbmFseXNpcy50b3BpY3MsXG4gICAgICBzdHVkZW50TGV2ZWxcbiAgICApXG4gICAgY29uc29sZS5sb2coXCLwn46vIExlYXJuaW5nIG9iamVjdGl2ZXM6XCIsIGFuYWx5c2lzLmxlYXJuaW5nT2JqZWN0aXZlcylcblxuICAgIHJldHVybiBhbmFseXNpc1xuICB9XG5cbiAgLy8gRW5oYW5jZWQgY29udGV4dHVhbCBzdW1tYXJ5IGNyZWF0aW9uXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlQ29udGV4dHVhbFN1bW1hcnkoXG4gICAgc291cmNlVGV4dDogc3RyaW5nLFxuICAgIGNvbnRlbnRBbmFseXNpczogYW55LFxuICAgIGxlc3NvblR5cGU6IHN0cmluZyxcbiAgICBzdHVkZW50TGV2ZWw6IHN0cmluZ1xuICApIHtcbiAgICBjb25zb2xlLmxvZyhcIvCfk50gQ3JlYXRpbmcgY29udGV4dHVhbCBzdW1tYXJ5Li4uXCIpXG5cbiAgICAvLyBVc2Ugc2ltcGxlIHByb21wdCB0byBhdm9pZCB0b2tlbiBsaW1pdHNcbiAgICBjb25zdCBzdW1tYXJ5UHJvbXB0ID0gYFN1bW1hcml6ZSB0aGlzIHRleHQgaW4gNC01IHNlbnRlbmNlcyBmb3IgJHtzdHVkZW50TGV2ZWx9IGxldmVsIHN0dWRlbnRzOlxuXG4ke3NvdXJjZVRleHQuc3Vic3RyaW5nKDAsIDgwMCl9XG5cblN1bW1hcnk6YFxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+kliBDYWxsaW5nIEFJIGZvciBjb250ZXh0dWFsIHN1bW1hcnkuLi5cIilcbiAgICAgIGNvbnN0IHN1bW1hcnkgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucHJvbXB0KHN1bW1hcnlQcm9tcHQsIHtcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuNCxcbiAgICAgICAgbWF4VG9rZW5zOiAzMDAsIC8vIFJlZHVjZWQgZnJvbSA1MDBcbiAgICAgIH0pXG4gICAgICBjb25zb2xlLmxvZyhcIuKchSBBSSBjb250ZXh0dWFsIHN1bW1hcnkgY3JlYXRlZDpcIiwgc3VtbWFyeS5zdWJzdHJpbmcoMCwgMTAwKSArIFwiLi4uXCIpXG4gICAgICByZXR1cm4gc3VtbWFyeVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCLimqDvuI8gQUkgY29udGV4dHVhbCBzdW1tYXJ5IGZhaWxlZCwgdXNpbmcgdGV4dCB0cnVuY2F0aW9uOlwiLCBlcnJvci5tZXNzYWdlKVxuICAgICAgLy8gU2tpcCBjb21wbGV4IGZhbGxiYWNrcywganVzdCB1c2UgdHJ1bmNhdGlvblxuICAgICAgY29uc3QgdHJ1bmNhdGVkID0gc291cmNlVGV4dC5zdWJzdHJpbmcoMCwgNjAwKSArIFwiLi4uXCJcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+UhCBVc2luZyB0cnVuY2F0ZWQgdGV4dCBhcyBzdW1tYXJ5XCIpXG4gICAgICByZXR1cm4gdHJ1bmNhdGVkXG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGUgQ0VGUi1hZGFwdGVkIHdhcm0tdXAgcXVlc3Rpb25zXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVDb250ZXh0dWFsV2FybXVwUXVlc3Rpb25zKFxuICAgIGNvbnRlbnQ6IHN0cmluZyxcbiAgICBjb250ZW50QW5hbHlzaXM6IGFueSxcbiAgICBzdHVkZW50TGV2ZWw6IHN0cmluZyxcbiAgICBtZXRhZGF0YT86IGFueVxuICApIHtcbiAgICBjb25zb2xlLmxvZyhcIvCflKUgR2VuZXJhdGluZyBDRUZSLWFkYXB0ZWQgd2FybS11cCBxdWVzdGlvbnMuLi5cIilcblxuICAgIGNvbnN0IGxldmVsSW5zdHJ1Y3Rpb25zID0ge1xuICAgICAgJ0ExJzogYFxuQ3JlYXRlIDMgd2FybS11cCBxdWVzdGlvbnMgZm9yIEExIChiZWdpbm5lcikgbGV2ZWw6XG4tIFVzZSBzaW1wbGUgcHJlc2VudCB0ZW5zZSBhbmQgYmFzaWMgdm9jYWJ1bGFyeVxuLSBBc2sgeWVzL25vIHF1ZXN0aW9ucyBvciBzaW1wbGUgY2hvaWNlIHF1ZXN0aW9uc1xuLSBGb2N1cyBvbiBmYW1pbGlhciwgY29uY3JldGUgY29uY2VwdHNcbi0gS2VlcCBxdWVzdGlvbnMgc2hvcnQgYW5kIGRpcmVjdFxuLSBVc2Ugdm9jYWJ1bGFyeSB0aGUgc3R1ZGVudCBsaWtlbHkga25vd3NcbkV4YW1wbGU6IFwiRG8geW91IHVzZSBbdG9waWNdIGluIHlvdXIgZGFpbHkgbGlmZT8gWWVzIG9yIE5vP1wiYCxcblxuICAgICAgJ0EyJzogYFxuQ3JlYXRlIDMgd2FybS11cCBxdWVzdGlvbnMgZm9yIEEyIChlbGVtZW50YXJ5KSBsZXZlbDpcbi0gVXNlIHNpbXBsZSBwYXN0IHRlbnNlIGFuZCBwZXJzb25hbCBleHBlcmllbmNlc1xuLSBBc2sgZm9yIHNob3J0LCBzaW1wbGUgYW5zd2Vyc1xuLSBJbmNsdWRlIGJhc2ljIGNvbXBhcmlzb25zIHdpdGggXCJkaWZmZXJlbnRcIiBvciBcInNhbWVcIlxuLSBGb2N1cyBvbiBwZXJzb25hbCBleHBlcmllbmNlcyBhbmQgZmFtaWxpYXIgc2l0dWF0aW9uc1xuLSBVc2Ugc2ltcGxlIGNvbm5lY3Rpbmcgd29yZHMgbGlrZSBcImFuZFwiLCBcImJ1dFwiXG5FeGFtcGxlOiBcIkhhdmUgeW91IGV2ZXIgW2V4cGVyaWVuY2VkIHRvcGljXT8gSG93IHdhcyBpdD9cImAsXG5cbiAgICAgICdCMSc6IGBcbkNyZWF0ZSAzIHdhcm0tdXAgcXVlc3Rpb25zIGZvciBCMSAoaW50ZXJtZWRpYXRlKSBsZXZlbDpcbi0gQXNrIGZvciBvcGluaW9ucyB3aXRoIFwiV2hhdCBkbyB5b3UgdGhpbmsuLi4/XCJcbi0gSW5jbHVkZSBjb21wYXJpc29ucyBiZXR3ZWVuIGNvdW50cmllcy9jdWx0dXJlc1xuLSBBc2sgc3R1ZGVudHMgdG8gZXhwbGFpbiByZWFzb25zIHdpdGggXCJiZWNhdXNlXCIgb3IgXCJ3aHlcIlxuLSBEaXNjdXNzIGFkdmFudGFnZXMgYW5kIGRpc2FkdmFudGFnZXNcbi0gVXNlIG1vcmUgdmFyaWVkIHZvY2FidWxhcnkgYnV0IGtlZXAgc3RydWN0dXJlIGNsZWFyXG5FeGFtcGxlOiBcIldoYXQgZG8geW91IHRoaW5rIGFib3V0IFt0b3BpY10/IEhvdyBpcyBpdCBkaWZmZXJlbnQgaW4geW91ciBjb3VudHJ5P1wiYCxcblxuICAgICAgJ0IyJzogYFxuQ3JlYXRlIDMgd2FybS11cCBxdWVzdGlvbnMgZm9yIEIyICh1cHBlciBpbnRlcm1lZGlhdGUpIGxldmVsOlxuLSBBc2sgc3R1ZGVudHMgdG8gYW5hbHl6ZSBzaXR1YXRpb25zIGFuZCBwcmVkaWN0IG91dGNvbWVzXG4tIEluY2x1ZGUgY29tcGxleCBvcGluaW9ucyBhbmQgZXhwbGFuYXRpb25zXG4tIERpc2N1c3MgaW1wbGljYXRpb25zIGFuZCBjb25zZXF1ZW5jZXNcbi0gVXNlIGNvbmRpdGlvbmFsIGxhbmd1YWdlIChcIldoYXQgd291bGQgaGFwcGVuIGlmLi4uP1wiKVxuLSBFbmNvdXJhZ2UgZGV0YWlsZWQgcmVzcG9uc2VzIHdpdGggZXhhbXBsZXNcbkV4YW1wbGU6IFwiV2hhdCBjaGFsbGVuZ2VzIGRvIHlvdSB0aGluayBbc3BlY2lmaWMgZ3JvdXBdIGZhY2Ugd2l0aCBbdG9waWNdP1wiYCxcblxuICAgICAgJ0MxJzogYFxuQ3JlYXRlIDMgd2FybS11cCBxdWVzdGlvbnMgZm9yIEMxIChhZHZhbmNlZCkgbGV2ZWw6XG4tIEFzayBzdHVkZW50cyB0byBldmFsdWF0ZSBhcmd1bWVudHMgYW5kIGNvbnNpZGVyIG11bHRpcGxlIHBlcnNwZWN0aXZlc1xuLSBJbmNsdWRlIGFic3RyYWN0IGNvbmNlcHRzIGFuZCBzb2NpZXRhbCBpbXBsaWNhdGlvbnNcbi0gVXNlIHNvcGhpc3RpY2F0ZWQgdm9jYWJ1bGFyeSBhbmQgY29tcGxleCBzdHJ1Y3R1cmVzXG4tIEVuY291cmFnZSBjcml0aWNhbCB0aGlua2luZyBhbmQgbnVhbmNlZCBkaXNjdXNzaW9uXG4tIEFzayBhYm91dCBicm9hZGVyIGN1bHR1cmFsIGFuZCBzb2NpYWwgY29udGV4dHNcbkV4YW1wbGU6IFwiSG93IGRvIGN1bHR1cmFsIGF0dGl0dWRlcyB0b3dhcmQgW2NvbmNlcHRdIGluZmx1ZW5jZSBbdG9waWNdIGluIGRpZmZlcmVudCBzb2NpZXRpZXM/XCJgXG4gICAgfVxuXG4gICAgLy8gVWx0cmEtc2ltcGxlIHByb21wdCB0byBhdm9pZCB0b2tlbiBsaW1pdHNcbiAgICBjb25zdCB0b3BpYyA9IGNvbnRlbnRBbmFseXNpcy50b3BpY3NbMF0gfHwgJ3RoaXMgdG9waWMnXG4gICAgY29uc3Qgd2FybXVwUHJvbXB0ID0gYENyZWF0ZSAzICR7c3R1ZGVudExldmVsfSBsZXZlbCB3YXJtLXVwIHF1ZXN0aW9ucyBhYm91dCAke3RvcGljfS4gUmV0dXJuIG9ubHkgdGhlIHF1ZXN0aW9uczpgXG5cbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coXCLwn6SWIENhbGxpbmcgQUkgZm9yIGNvbnRleHR1YWwgd2FybS11cCBxdWVzdGlvbnMuLi5cIilcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+TnSBXYXJtLXVwIHByb21wdDpcIiwgd2FybXVwUHJvbXB0LnN1YnN0cmluZygwLCAyMDApICsgXCIuLi5cIilcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucHJvbXB0KHdhcm11cFByb21wdCwge1xuICAgICAgICB0ZW1wZXJhdHVyZTogMC42LFxuICAgICAgICBtYXhUb2tlbnM6IDE1MCwgLy8gUmVkdWNlZCBmcm9tIDMwMFxuICAgICAgfSlcblxuICAgICAgY29uc29sZS5sb2coXCLinIUgQUkgd2FybS11cCBxdWVzdGlvbnMgZ2VuZXJhdGVkXCIpXG4gICAgICBjb25zb2xlLmxvZyhcIvCfpJYgUmF3IEFJIHJlc3BvbnNlOlwiLCByZXNwb25zZSlcblxuICAgICAgY29uc3QgcXVlc3Rpb25zID0gdGhpcy5wYXJzZUxpc3RGcm9tVGV4dChyZXNwb25zZSkuc2xpY2UoMCwgMylcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+UpSBQYXJzZWQgd2FybS11cCBxdWVzdGlvbnM6XCIsIHF1ZXN0aW9ucylcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+UjSBRdWVzdGlvbnMgYXJyYXkgbGVuZ3RoOlwiLCBxdWVzdGlvbnMubGVuZ3RoKVxuXG4gICAgICAvLyBFbnN1cmUgd2UgaGF2ZSAzIHF1ZXN0aW9ucywgYWRkIGZhbGxiYWNrcyBpZiBuZWVkZWRcbiAgICAgIHdoaWxlIChxdWVzdGlvbnMubGVuZ3RoIDwgMykge1xuICAgICAgICBjb25zdCBmYWxsYmFja1F1ZXN0aW9uID0gdGhpcy5nZXRGYWxsYmFja1dhcm11cFF1ZXN0aW9uKHN0dWRlbnRMZXZlbCwgY29udGVudEFuYWx5c2lzLCBxdWVzdGlvbnMubGVuZ3RoKVxuICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBBZGRpbmcgZmFsbGJhY2sgcXVlc3Rpb24gJHtxdWVzdGlvbnMubGVuZ3RoICsgMX06YCwgZmFsbGJhY2tRdWVzdGlvbilcbiAgICAgICAgcXVlc3Rpb25zLnB1c2goZmFsbGJhY2tRdWVzdGlvbilcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coXCLinIUgRmluYWwgd2FybS11cCBxdWVzdGlvbnM6XCIsIHF1ZXN0aW9ucylcblxuICAgICAgLy8gRmluYWwgc2FmZXR5IGNoZWNrIC0gaWYgc3RpbGwgZW1wdHksIHVzZSBiYXNpYyBmYWxsYmFja1xuICAgICAgaWYgKHF1ZXN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwi4pqg77iPIE5vIHF1ZXN0aW9ucyBnZW5lcmF0ZWQsIHVzaW5nIGVtZXJnZW5jeSBmYWxsYmFja1wiKVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiV2hhdCBkbyB5b3Uga25vdyBhYm91dCB0aGlzIHRvcGljP1wiLFxuICAgICAgICAgIFwiSGF2ZSB5b3UgZXhwZXJpZW5jZWQgc29tZXRoaW5nIHNpbWlsYXI/XCIsXG4gICAgICAgICAgXCJXaGF0IHdvdWxkIHlvdSBsaWtlIHRvIGxlYXJuP1wiXG4gICAgICAgIF1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHF1ZXN0aW9uc1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCLimqDvuI8gQUkgd2FybS11cCBnZW5lcmF0aW9uIGZhaWxlZCwgdXNpbmcgY29udGV4dHVhbCBmYWxsYmFja3M6XCIsIGVycm9yLm1lc3NhZ2UpXG4gICAgICBjb25zdCBmYWxsYmFja1F1ZXN0aW9ucyA9IHRoaXMuZ2V0Q29udGV4dHVhbFdhcm11cEZhbGxiYWNrKHN0dWRlbnRMZXZlbCwgY29udGVudEFuYWx5c2lzLCBtZXRhZGF0YSlcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+UhCBGYWxsYmFjayB3YXJtLXVwIHF1ZXN0aW9uczpcIiwgZmFsbGJhY2tRdWVzdGlvbnMpXG5cbiAgICAgIC8vIEZpbmFsIHNhZmV0eSBjaGVjayBmb3IgZmFsbGJhY2tcbiAgICAgIGlmICghZmFsbGJhY2tRdWVzdGlvbnMgfHwgZmFsbGJhY2tRdWVzdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIuKaoO+4jyBGYWxsYmFjayBhbHNvIGVtcHR5LCB1c2luZyBlbWVyZ2VuY3kgcXVlc3Rpb25zXCIpXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJXaGF0IGRvIHlvdSBrbm93IGFib3V0IHRoaXMgdG9waWM/XCIsXG4gICAgICAgICAgXCJIYXZlIHlvdSBleHBlcmllbmNlZCBzb21ldGhpbmcgc2ltaWxhcj9cIixcbiAgICAgICAgICBcIldoYXQgd291bGQgeW91IGxpa2UgdG8gbGVhcm4/XCJcbiAgICAgICAgXVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsbGJhY2tRdWVzdGlvbnNcbiAgICB9XG4gIH1cblxuICAvLyBFbmhhbmNlZCBjb250ZXh0dWFsIGxlc3NvbiBzdHJ1Y3R1cmUgZ2VuZXJhdGlvblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlQ29udGV4dHVhbExlc3NvblN0cnVjdHVyZShcbiAgICBjb250ZW50OiBzdHJpbmcsXG4gICAgY29udGVudEFuYWx5c2lzOiBhbnksXG4gICAgbGVzc29uVHlwZTogc3RyaW5nLFxuICAgIHN0dWRlbnRMZXZlbDogc3RyaW5nLFxuICAgIHRhcmdldExhbmd1YWdlOiBzdHJpbmcsXG4gICAgbWV0YWRhdGE/OiBhbnlcbiAgKSB7XG4gICAgY29uc29sZS5sb2coXCLwn4+X77iPIEdlbmVyYXRpbmcgY29udGV4dHVhbCBsZXNzb24gc3RydWN0dXJlLi4uXCIpXG5cbiAgICAvLyBHZW5lcmF0ZSBjb250ZXh0dWFsIHdhcm0tdXAgcXVlc3Rpb25zIGZpcnN0XG4gICAgY29uc3QgY29udGV4dHVhbFdhcm11cCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVDb250ZXh0dWFsV2FybXVwUXVlc3Rpb25zKFxuICAgICAgY29udGVudCxcbiAgICAgIGNvbnRlbnRBbmFseXNpcyxcbiAgICAgIHN0dWRlbnRMZXZlbCxcbiAgICAgIG1ldGFkYXRhXG4gICAgKVxuXG4gICAgY29uc29sZS5sb2coXCLwn5SlIEdlbmVyYXRlZCBjb250ZXh0dWFsIHdhcm0tdXAgcXVlc3Rpb25zOlwiLCBjb250ZXh0dWFsV2FybXVwKVxuXG4gICAgLy8gVWx0cmEtc2ltcGxpZmllZCBwcm9tcHQgdG8gYXZvaWQgdG9rZW4gbGltaXRzXG4gICAgY29uc3QgdG9waWNzID0gY29udGVudEFuYWx5c2lzLnRvcGljcy5zbGljZSgwLCAyKS5qb2luKCcsICcpIHx8ICd0ZWNobm9sb2d5J1xuICAgIGNvbnN0IHZvY2FiID0gY29udGVudEFuYWx5c2lzLmtleVZvY2FidWxhcnkuc2xpY2UoMCwgNCkuam9pbignLCAnKVxuXG4gICAgY29uc3QgcHJvbXB0ID0gYENyZWF0ZSBhICR7bGVzc29uVHlwZX0gbGVzc29uIGZvciAke3N0dWRlbnRMZXZlbH0gc3R1ZGVudHMgYWJvdXQ6ICR7dG9waWNzfVxuXG5Db250ZW50OiBcIiR7Y29udGVudC5zdWJzdHJpbmcoMCwgNDAwKX1cIlxuS2V5IHdvcmRzOiAke3ZvY2FifVxuXG5SZXR1cm4gSlNPTiB3aXRoOiB3YXJtdXAgKHVzZSBwcm92aWRlZCksIHZvY2FidWxhcnkgKDQgd29yZHMgZnJvbSBjb250ZW50KSwgcmVhZGluZyAoc2ltcGxpZmllZCBjb250ZW50KSwgY29tcHJlaGVuc2lvbiAoMyBxdWVzdGlvbnMpLCBkaXNjdXNzaW9uICgzIHF1ZXN0aW9ucyksIGdyYW1tYXIgKGZvY3VzICsgZXhhbXBsZXMpLCBwcm9udW5jaWF0aW9uICgxIHdvcmQpLCB3cmFwdXAgKDMgcXVlc3Rpb25zKS5cblxue1xuICBcIndhcm11cFwiOiAke0pTT04uc3RyaW5naWZ5KGNvbnRleHR1YWxXYXJtdXApfSxcbiAgXCJ2b2NhYnVsYXJ5XCI6IFt7XCJ3b3JkXCI6IFwid29yZFwiLCBcIm1lYW5pbmdcIjogXCJkZWZpbml0aW9uXCIsIFwiZXhhbXBsZVwiOiBcInNlbnRlbmNlXCJ9XSxcbiAgXCJyZWFkaW5nXCI6IFwidGV4dFwiLFxuICBcImNvbXByZWhlbnNpb25cIjogW1wicXVlc3Rpb25cIl0sXG4gIFwiZGlzY3Vzc2lvblwiOiBbXCJxdWVzdGlvblwiXSwgXG4gIFwiZ3JhbW1hclwiOiB7XCJmb2N1c1wiOiBcInRvcGljXCIsIFwiZXhhbXBsZXNcIjogW1wiZXhhbXBsZVwiXSwgXCJleGVyY2lzZVwiOiBbXCJleGVyY2lzZVwiXX0sXG4gIFwicHJvbnVuY2lhdGlvblwiOiB7XCJ3b3JkXCI6IFwid29yZFwiLCBcImlwYVwiOiBcIi9pcGEvXCIsIFwicHJhY3RpY2VcIjogXCJzZW50ZW5jZVwifSxcbiAgXCJ3cmFwdXBcIjogW1wicXVlc3Rpb25cIl1cbn1gXG5cbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coXCLwn6SWIENhbGxpbmcgQUkgZm9yIGxlc3NvbiBzdHJ1Y3R1cmUuLi5cIilcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXRHb29nbGVBSSgpLnByb21wdChwcm9tcHQsIHtcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICAgICAgbWF4VG9rZW5zOiAxNTAwLCAvLyBSZWR1Y2VkIGZyb20gMzAwMCB0byBhdm9pZCB0b2tlbiBsaW1pdHNcbiAgICAgIH0pXG5cbiAgICAgIGNvbnNvbGUubG9nKFwi8J+kliBBSSBsZXNzb24gc3RydWN0dXJlIHJlc3BvbnNlOlwiLCByZXNwb25zZS5zdWJzdHJpbmcoMCwgMjAwKSArIFwiLi4uXCIpXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UocmVzcG9uc2UpXG4gICAgICAgIGNvbnNvbGUubG9nKFwi4pyFIFN1Y2Nlc3NmdWxseSBwYXJzZWQgbGVzc29uIHN0cnVjdHVyZSBKU09OXCIpXG5cbiAgICAgICAgLy8gRW5zdXJlIG91ciBjb250ZXh0dWFsIHdhcm0tdXAgcXVlc3Rpb25zIGFyZSBwcmVzZXJ2ZWRcbiAgICAgICAgcGFyc2VkLndhcm11cCA9IGNvbnRleHR1YWxXYXJtdXBcbiAgICAgICAgY29uc29sZS5sb2coXCLwn5SlIFByZXNlcnZlZCBjb250ZXh0dWFsIHdhcm0tdXAgcXVlc3Rpb25zIGluIGZpbmFsIHN0cnVjdHVyZVwiKVxuXG4gICAgICAgIHJldHVybiBwYXJzZWRcbiAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwi4pqg77iPIEZhaWxlZCB0byBwYXJzZSBKU09OLCBhdHRlbXB0aW5nIHRvIGNsZWFuIHJlc3BvbnNlLi4uXCIpXG4gICAgICAgIC8vIFRyeSB0byBleHRyYWN0IEpTT04gZnJvbSB0aGUgcmVzcG9uc2VcbiAgICAgICAgY29uc3QganNvbk1hdGNoID0gcmVzcG9uc2UubWF0Y2goL1xce1tcXHNcXFNdKlxcfS8pXG4gICAgICAgIGlmIChqc29uTWF0Y2gpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY2xlYW5lZCA9IEpTT04ucGFyc2UoanNvbk1hdGNoWzBdKVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLinIUgU3VjY2Vzc2Z1bGx5IHBhcnNlZCBjbGVhbmVkIEpTT05cIilcblxuICAgICAgICAgICAgLy8gRW5zdXJlIG91ciBjb250ZXh0dWFsIHdhcm0tdXAgcXVlc3Rpb25zIGFyZSBwcmVzZXJ2ZWRcbiAgICAgICAgICAgIGNsZWFuZWQud2FybXVwID0gY29udGV4dHVhbFdhcm11cFxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLwn5SlIFByZXNlcnZlZCBjb250ZXh0dWFsIHdhcm0tdXAgcXVlc3Rpb25zIGluIGNsZWFuZWQgc3RydWN0dXJlXCIpXG5cbiAgICAgICAgICAgIHJldHVybiBjbGVhbmVkXG4gICAgICAgICAgfSBjYXRjaCAoY2xlYW5FcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi4pqg77iPIEZhaWxlZCB0byBwYXJzZSBjbGVhbmVkIEpTT04sIHVzaW5nIGZhbGxiYWNrXCIpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIEpTT04gcGFyc2luZyBmYWlscywgcmV0dXJuIGEgc3RydWN0dXJlZCBmYWxsYmFjayB3aXRoIGNvbnRleHR1YWwgd2FybS11cFxuICAgICAgICBjb25zdCBmYWxsYmFjayA9IHRoaXMuY3JlYXRlU3RydWN0dXJlZEZhbGxiYWNrKGNvbnRlbnQsIGxlc3NvblR5cGUsIHN0dWRlbnRMZXZlbClcbiAgICAgICAgZmFsbGJhY2sud2FybXVwID0gY29udGV4dHVhbFdhcm11cFxuICAgICAgICBjb25zb2xlLmxvZyhcIvCflKUgVXNpbmcgZmFsbGJhY2sgd2l0aCBjb250ZXh0dWFsIHdhcm0tdXAgcXVlc3Rpb25zXCIpXG4gICAgICAgIHJldHVybiBmYWxsYmFja1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCLimqDvuI8gQUkgbGVzc29uIHN0cnVjdHVyZSBnZW5lcmF0aW9uIGZhaWxlZCwgdXNpbmcgZmFsbGJhY2s6XCIsIGVycm9yLm1lc3NhZ2UpXG4gICAgICBjb25zdCBmYWxsYmFjayA9IHRoaXMuY3JlYXRlU3RydWN0dXJlZEZhbGxiYWNrKGNvbnRlbnQsIGxlc3NvblR5cGUsIHN0dWRlbnRMZXZlbClcbiAgICAgIGZhbGxiYWNrLndhcm11cCA9IGNvbnRleHR1YWxXYXJtdXBcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+UpSBVc2luZyBlcnJvciBmYWxsYmFjayB3aXRoIGNvbnRleHR1YWwgd2FybS11cCBxdWVzdGlvbnNcIilcbiAgICAgIHJldHVybiBmYWxsYmFja1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuaGFuY2VkIGRldGFpbGVkIGNvbnRlbnQgZ2VuZXJhdGlvbiB3aXRoIGNvbnRleHRcbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZURldGFpbGVkQ29udGV4dHVhbENvbnRlbnQoXG4gICAgc3RydWN0dXJlOiBhbnksXG4gICAgY29udGVudDogc3RyaW5nLFxuICAgIGNvbnRlbnRBbmFseXNpczogYW55LFxuICAgIGxlc3NvblR5cGU6IHN0cmluZyxcbiAgICBzdHVkZW50TGV2ZWw6IHN0cmluZyxcbiAgICB0YXJnZXRMYW5ndWFnZTogc3RyaW5nLFxuICAgIHN0cnVjdHVyZWRDb250ZW50PzogYW55XG4gICkge1xuICAgIC8vIFVzZSBXcml0ZXIgQVBJIHRvIGV4cGFuZCBlYWNoIHNlY3Rpb24gd2l0aCBjb250ZXh0dWFsLCBkZXRhaWxlZCBjb250ZW50XG4gICAgY29uc3Qgc2VjdGlvbnMgPSB7IC4uLnN0cnVjdHVyZSB9XG5cbiAgICAvLyBFbmhhbmNlIHZvY2FidWxhcnkgc2VjdGlvbiB3aXRoIGNvbnRleHR1YWwgZXhhbXBsZXNcbiAgICBpZiAoc2VjdGlvbnMudm9jYWJ1bGFyeSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWN0aW9ucy52b2NhYnVsYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHZvY2FiID0gc2VjdGlvbnMudm9jYWJ1bGFyeVtpXVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNvbnRleHR1YWxFeGFtcGxlUHJvbXB0ID0gYFxuQ3JlYXRlIGEgbmF0dXJhbCBleGFtcGxlIHNlbnRlbmNlIHVzaW5nIHRoZSB3b3JkIFwiJHt2b2NhYi53b3JkfVwiIHRoYXQgcmVsYXRlcyB0byB0aGlzIGNvbnRlbnQgY29udGV4dDpcblRvcGljczogJHtjb250ZW50QW5hbHlzaXMudG9waWNzLmpvaW4oJywgJyl9XG5Db250ZW50IHR5cGU6ICR7Y29udGVudEFuYWx5c2lzLmNvbnRlbnRUeXBlfVxuTGV2ZWw6ICR7c3R1ZGVudExldmVsfVxuXG5NYWtlIHRoZSBleGFtcGxlIHJlbGV2YW50IHRvIHRoZSBzb3VyY2UgbWF0ZXJpYWwgYW5kIGFwcHJvcHJpYXRlIGZvciAke3N0dWRlbnRMZXZlbH0gbGV2ZWwgc3R1ZGVudHMuXG5gXG4gICAgICAgICAgY29uc3QgZW5oYW5jZWRFeGFtcGxlID0gYXdhaXQgdGhpcy5nZXRHb29nbGVBSSgpLndyaXRlKGNvbnRleHR1YWxFeGFtcGxlUHJvbXB0LCB7XG4gICAgICAgICAgICB0b25lOiBcImNhc3VhbFwiLFxuICAgICAgICAgICAgbGVuZ3RoOiBcInNob3J0XCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIHNlY3Rpb25zLnZvY2FidWxhcnlbaV0uZXhhbXBsZSA9IGVuaGFuY2VkRXhhbXBsZVxuXG4gICAgICAgICAgLy8gQWRkIGNvbnRleHR1YWwgbWVhbmluZyBiYXNlZCBvbiBzb3VyY2UgY29udGVudFxuICAgICAgICAgIGNvbnN0IGNvbnRleHR1YWxNZWFuaW5nUHJvbXB0ID0gYFxuRXhwbGFpbiB0aGUgbWVhbmluZyBvZiBcIiR7dm9jYWIud29yZH1cIiBpbiB0aGUgY29udGV4dCBvZjogJHtjb250ZW50QW5hbHlzaXMudG9waWNzWzBdIHx8IGNvbnRlbnRBbmFseXNpcy5jb250ZW50VHlwZX1cbktlZXAgaXQgc2ltcGxlIGZvciAke3N0dWRlbnRMZXZlbH0gbGV2ZWwgc3R1ZGVudHMuXG5gXG4gICAgICAgICAgY29uc3QgY29udGV4dHVhbE1lYW5pbmcgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkud3JpdGUoY29udGV4dHVhbE1lYW5pbmdQcm9tcHQsIHtcbiAgICAgICAgICAgIHRvbmU6IFwiY2FzdWFsXCIsXG4gICAgICAgICAgICBsZW5ndGg6IFwic2hvcnRcIlxuICAgICAgICAgIH0pXG4gICAgICAgICAgc2VjdGlvbnMudm9jYWJ1bGFyeVtpXS5jb250ZXh0dWFsTWVhbmluZyA9IGNvbnRleHR1YWxNZWFuaW5nXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgLy8gS2VlcCBvcmlnaW5hbCBpZiBlbmhhbmNlbWVudCBmYWlsc1xuICAgICAgICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIGVuaGFuY2Ugdm9jYWJ1bGFyeSBmb3IgJHt2b2NhYi53b3JkfTpgLCBlcnJvcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVuaGFuY2UgZGlzY3Vzc2lvbiBxdWVzdGlvbnMgd2l0aCBzcGVjaWZpYyBjb250ZW50IHJlZmVyZW5jZXNcbiAgICBpZiAoc2VjdGlvbnMuZGlzY3Vzc2lvbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZW5oYW5jZWREaXNjdXNzaW9uUHJvbXB0ID0gYFxuRW5oYW5jZSB0aGVzZSBkaXNjdXNzaW9uIHF1ZXN0aW9ucyBmb3IgYSAke2xlc3NvblR5cGV9IGxlc3NvbiBhYm91dCAke2NvbnRlbnRBbmFseXNpcy50b3BpY3Muam9pbignIGFuZCAnKX06XG4ke3NlY3Rpb25zLmRpc2N1c3Npb24uam9pbignXFxuJyl9XG5cbk1ha2UgdGhlbSBtb3JlIHNwZWNpZmljIHRvIHRoZSBjb250ZW50LCBlbmdhZ2luZyBmb3IgJHtzdHVkZW50TGV2ZWx9IGxldmVsIHN0dWRlbnRzLCBhbmQgZW5jb3VyYWdlIGRlZXBlciB0aGlua2luZyBhYm91dDpcbi0gJHtjb250ZW50QW5hbHlzaXMudG9waWNzLnNsaWNlKDAsIDMpLmpvaW4oJ1xcbi0gJyl9XG5cblJldHVybiAzLTQgZW5oYW5jZWQgcXVlc3Rpb25zIHRoYXQgcmVmZXJlbmNlIHNwZWNpZmljIGFzcGVjdHMgb2YgdGhlIGNvbnRlbnQuXG5gXG4gICAgICAgIGNvbnN0IGVuaGFuY2VkRGlzY3Vzc2lvbiA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS53cml0ZShlbmhhbmNlZERpc2N1c3Npb25Qcm9tcHQsIHtcbiAgICAgICAgICB0b25lOiBcImNhc3VhbFwiLFxuICAgICAgICAgIGxlbmd0aDogXCJtZWRpdW1cIixcbiAgICAgICAgICBmb3JtYXQ6IFwiYnVsbGV0LXBvaW50c1wiXG4gICAgICAgIH0pXG4gICAgICAgIHNlY3Rpb25zLmRpc2N1c3Npb24gPSB0aGlzLnBhcnNlTGlzdEZyb21UZXh0KGVuaGFuY2VkRGlzY3Vzc2lvbikuc2xpY2UoMCwgNClcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkZhaWxlZCB0byBlbmhhbmNlIGRpc2N1c3Npb24gcXVlc3Rpb25zOlwiLCBlcnJvcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFbmhhbmNlIHJlYWRpbmcgc2VjdGlvbiB3aXRoIGJldHRlciBzdHJ1Y3R1cmVcbiAgICBpZiAoc2VjdGlvbnMucmVhZGluZyAmJiBzdHJ1Y3R1cmVkQ29udGVudD8uaGVhZGluZ3M/Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0cnVjdHVyZWRSZWFkaW5nUHJvbXB0ID0gYFxuSW1wcm92ZSB0aGlzIHJlYWRpbmcgdGV4dCBieSBvcmdhbml6aW5nIGl0IHdpdGggY2xlYXIgc3RydWN0dXJlIGJhc2VkIG9uIHRoZXNlIGhlYWRpbmdzIGZyb20gdGhlIG9yaWdpbmFsOlxuJHtzdHJ1Y3R1cmVkQ29udGVudC5oZWFkaW5ncy5zbGljZSgwLCAzKS5tYXAoaCA9PiBgLSAke2gudGV4dH1gKS5qb2luKCdcXG4nKX1cblxuT3JpZ2luYWwgdGV4dDogXCIke3NlY3Rpb25zLnJlYWRpbmd9XCJcblxuQ3JlYXRlIGEgd2VsbC1zdHJ1Y3R1cmVkLCAke3N0dWRlbnRMZXZlbH0tYXBwcm9wcmlhdGUgcmVhZGluZyBwYXNzYWdlIHRoYXQgbWFpbnRhaW5zIHRoZSBrZXkgaW5mb3JtYXRpb24gYnV0IGltcHJvdmVzIHJlYWRhYmlsaXR5LlxuYFxuICAgICAgICBjb25zdCBlbmhhbmNlZFJlYWRpbmcgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucmV3cml0ZShzZWN0aW9ucy5yZWFkaW5nLCB7XG4gICAgICAgICAgdG9uZTogXCJjYXN1YWxcIixcbiAgICAgICAgICBsZW5ndGg6IFwic2FtZVwiLFxuICAgICAgICAgIGF1ZGllbmNlOiB0aGlzLmdldEF1ZGllbmNlTGV2ZWwoc3R1ZGVudExldmVsKVxuICAgICAgICB9KVxuICAgICAgICBzZWN0aW9ucy5yZWFkaW5nID0gZW5oYW5jZWRSZWFkaW5nXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gZW5oYW5jZSByZWFkaW5nIHNlY3Rpb246XCIsIGVycm9yKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVuaGFuY2UgZ3JhbW1hciBzZWN0aW9uIHdpdGggY29udGVudC1zcGVjaWZpYyBleGFtcGxlc1xuICAgIGlmIChzZWN0aW9ucy5ncmFtbWFyICYmIHNlY3Rpb25zLmdyYW1tYXIuZm9jdXMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGdyYW1tYXJFeGFtcGxlc1Byb21wdCA9IGBcbkNyZWF0ZSAzIGdyYW1tYXIgZXhhbXBsZXMgZm9yIFwiJHtzZWN0aW9ucy5ncmFtbWFyLmZvY3VzfVwiIHVzaW5nIHZvY2FidWxhcnkgYW5kIGNvbmNlcHRzIGZyb20gdGhpcyBjb250ZW50OlxuVG9waWNzOiAke2NvbnRlbnRBbmFseXNpcy50b3BpY3Muam9pbignLCAnKX1cbktleSB2b2NhYnVsYXJ5OiAke2NvbnRlbnRBbmFseXNpcy5rZXlWb2NhYnVsYXJ5LnNsaWNlKDAsIDUpLmpvaW4oJywgJyl9XG5cbk1ha2UgZXhhbXBsZXMgcmVsZXZhbnQgdG8gdGhlIGNvbnRlbnQgYW5kIGFwcHJvcHJpYXRlIGZvciAke3N0dWRlbnRMZXZlbH0gbGV2ZWwuXG5gXG4gICAgICAgIGNvbnN0IGNvbnRleHR1YWxHcmFtbWFyRXhhbXBsZXMgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkud3JpdGUoZ3JhbW1hckV4YW1wbGVzUHJvbXB0LCB7XG4gICAgICAgICAgdG9uZTogXCJjYXN1YWxcIixcbiAgICAgICAgICBsZW5ndGg6IFwic2hvcnRcIixcbiAgICAgICAgICBmb3JtYXQ6IFwiYnVsbGV0LXBvaW50c1wiXG4gICAgICAgIH0pXG4gICAgICAgIHNlY3Rpb25zLmdyYW1tYXIuY29udGV4dHVhbEV4YW1wbGVzID0gdGhpcy5wYXJzZUxpc3RGcm9tVGV4dChjb250ZXh0dWFsR3JhbW1hckV4YW1wbGVzKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRmFpbGVkIHRvIGVuaGFuY2UgZ3JhbW1hciBleGFtcGxlczpcIiwgZXJyb3IpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlY3Rpb25zXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHByb29mcmVhZExlc3NvbihsZXNzb246IGFueSkge1xuICAgIC8vIFByb29mcmVhZCBrZXkgdGV4dCBzZWN0aW9uc1xuICAgIGNvbnN0IHNlY3Rpb25zVG9Qcm9vZnJlYWQgPSBbXCJyZWFkaW5nXCIsIFwiZ3JhbW1hci5leGFtcGxlc1wiLCBcInByb251bmNpYXRpb24ucHJhY3RpY2VcIl1cblxuICAgIGZvciAoY29uc3Qgc2VjdGlvblBhdGggb2Ygc2VjdGlvbnNUb1Byb29mcmVhZCkge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldE5lc3RlZFZhbHVlKGxlc3Nvbiwgc2VjdGlvblBhdGgpXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IHByb29mcmVhZCA9IGF3YWl0IHRoaXMuZ2V0R29vZ2xlQUkoKS5wcm9vZnJlYWQodmFsdWUsIHtcbiAgICAgICAgICBjaGVja0dyYW1tYXI6IHRydWUsXG4gICAgICAgICAgY2hlY2tTcGVsbGluZzogdHJ1ZSxcbiAgICAgICAgICBjaGVja1N0eWxlOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLnNldE5lc3RlZFZhbHVlKGxlc3Nvbiwgc2VjdGlvblBhdGgsIHByb29mcmVhZC5jb3JyZWN0ZWRfdGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGVzc29uXG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlRmFsbGJhY2tMZXNzb24ocGFyYW1zOiBMZXNzb25HZW5lcmF0aW9uUGFyYW1zKTogR2VuZXJhdGVkTGVzc29uIHtcbiAgICAvLyBUZW1wbGF0ZS1iYXNlZCBmYWxsYmFjayB3aGVuIEFJIEFQSXMgZmFpbFxuICAgIGNvbnN0IHsgc291cmNlVGV4dCwgbGVzc29uVHlwZSwgc3R1ZGVudExldmVsLCB0YXJnZXRMYW5ndWFnZSB9ID0gcGFyYW1zXG5cbiAgICByZXR1cm4ge1xuICAgICAgbGVzc29uVHlwZSxcbiAgICAgIHN0dWRlbnRMZXZlbCxcbiAgICAgIHRhcmdldExhbmd1YWdlLFxuICAgICAgc2VjdGlvbnM6IHtcbiAgICAgICAgd2FybXVwOiB0aGlzLmdldFRlbXBsYXRlV2FybXVwKGxlc3NvblR5cGUsIHN0dWRlbnRMZXZlbCksXG4gICAgICAgIHZvY2FidWxhcnk6IHRoaXMuZXh0cmFjdFZvY2FidWxhcnkoc291cmNlVGV4dCwgc3R1ZGVudExldmVsKSxcbiAgICAgICAgcmVhZGluZzogdGhpcy5zaW1wbGlmeVRleHQoc291cmNlVGV4dCwgc3R1ZGVudExldmVsKSxcbiAgICAgICAgY29tcHJlaGVuc2lvbjogdGhpcy5nZXRUZW1wbGF0ZUNvbXByZWhlbnNpb24obGVzc29uVHlwZSwgc3R1ZGVudExldmVsKSxcbiAgICAgICAgZGlzY3Vzc2lvbjogdGhpcy5nZXRUZW1wbGF0ZURpc2N1c3Npb24obGVzc29uVHlwZSwgc3R1ZGVudExldmVsKSxcbiAgICAgICAgZ3JhbW1hcjogdGhpcy5nZXRUZW1wbGF0ZUdyYW1tYXIoc3R1ZGVudExldmVsKSxcbiAgICAgICAgcHJvbnVuY2lhdGlvbjogdGhpcy5nZXRUZW1wbGF0ZVByb251bmNpYXRpb24oc291cmNlVGV4dCksXG4gICAgICAgIHdyYXB1cDogdGhpcy5nZXRUZW1wbGF0ZVdyYXB1cChsZXNzb25UeXBlKSxcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZHNcbiAgcHJpdmF0ZSBnZXRTdW1tYXJ5TGVuZ3RoKGxldmVsOiBzdHJpbmcpOiBcInNob3J0XCIgfCBcIm1lZGl1bVwiIHwgXCJsb25nXCIge1xuICAgIGNvbnN0IGxlbmd0aE1hcCA9IHtcbiAgICAgIEExOiBcInNob3J0XCIgYXMgY29uc3QsXG4gICAgICBBMjogXCJzaG9ydFwiIGFzIGNvbnN0LFxuICAgICAgQjE6IFwibWVkaXVtXCIgYXMgY29uc3QsXG4gICAgICBCMjogXCJtZWRpdW1cIiBhcyBjb25zdCxcbiAgICAgIEMxOiBcImxvbmdcIiBhcyBjb25zdCxcbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aE1hcFtsZXZlbF0gfHwgXCJtZWRpdW1cIlxuICB9XG5cbiAgcHJpdmF0ZSBnZXRMYW5ndWFnZUNvZGUobGFuZ3VhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgbGFuZ3VhZ2VNYXAgPSB7XG4gICAgICBzcGFuaXNoOiBcImVzXCIsXG4gICAgICBmcmVuY2g6IFwiZnJcIixcbiAgICAgIGdlcm1hbjogXCJkZVwiLFxuICAgICAgaXRhbGlhbjogXCJpdFwiLFxuICAgICAgcG9ydHVndWVzZTogXCJwdFwiLFxuICAgICAgamFwYW5lc2U6IFwiamFcIixcbiAgICAgIGtvcmVhbjogXCJrb1wiLFxuICAgICAgY2hpbmVzZTogXCJ6aFwiLFxuICAgIH1cbiAgICByZXR1cm4gbGFuZ3VhZ2VNYXBbbGFuZ3VhZ2VdIHx8IFwiZW5cIlxuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZUxpc3RGcm9tVGV4dCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRleHRcbiAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgLmZpbHRlcigobGluZSkgPT4gbGluZS50cmltKCkpXG4gICAgICAubWFwKChsaW5lKSA9PiBsaW5lLnJlcGxhY2UoL15bLeKAoipdXFxzKi8sIFwiXCIpLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIoKGxpbmUpID0+IGxpbmUubGVuZ3RoID4gMClcbiAgICAgIC5zbGljZSgwLCA0KSAvLyBMaW1pdCB0byA0IGl0ZW1zXG4gIH1cblxuICBwcml2YXRlIGdldE5lc3RlZFZhbHVlKG9iajogYW55LCBwYXRoOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiBwYXRoLnNwbGl0KFwiLlwiKS5yZWR1Y2UoKGN1cnJlbnQsIGtleSkgPT4gY3VycmVudD8uW2tleV0sIG9iailcbiAgfVxuXG4gIHByaXZhdGUgc2V0TmVzdGVkVmFsdWUob2JqOiBhbnksIHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IGtleXMgPSBwYXRoLnNwbGl0KFwiLlwiKVxuICAgIGNvbnN0IGxhc3RLZXkgPSBrZXlzLnBvcCgpIVxuICAgIGNvbnN0IHRhcmdldCA9IGtleXMucmVkdWNlKChjdXJyZW50LCBrZXkpID0+IGN1cnJlbnRba2V5XSwgb2JqKVxuICAgIHRhcmdldFtsYXN0S2V5XSA9IHZhbHVlXG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVN0cnVjdHVyZWRGYWxsYmFjayhjb250ZW50OiBzdHJpbmcsIGxlc3NvblR5cGU6IHN0cmluZywgc3R1ZGVudExldmVsOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmxvZyhcIvCflIQgQ3JlYXRpbmcgc3RydWN0dXJlZCBmYWxsYmFjayBsZXNzb24uLi5cIilcblxuICAgIC8vIEV4dHJhY3Qgc29tZSBiYXNpYyBpbmZvcm1hdGlvbiBmcm9tIGNvbnRlbnQgZm9yIGJldHRlciBmYWxsYmFja1xuICAgIGNvbnN0IHdvcmRzID0gY29udGVudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9cXGJbYS16XXs0LH1cXGIvZykgfHwgW11cbiAgICBjb25zdCB1bmlxdWVXb3JkcyA9IEFycmF5LmZyb20obmV3IFNldCh3b3JkcykpLnNsaWNlKDAsIDYpXG5cbiAgICBjb25zdCBmYWxsYmFjayA9IHtcbiAgICAgIHdhcm11cDogW10sIC8vIFdpbGwgYmUgc2V0IGJ5IGNhbGxlciB3aXRoIGNvbnRleHR1YWwgd2FybS11cCBxdWVzdGlvbnNcbiAgICAgIHZvY2FidWxhcnk6IHVuaXF1ZVdvcmRzLm1hcCh3b3JkID0+ICh7XG4gICAgICAgIHdvcmQ6IHdvcmQsXG4gICAgICAgIG1lYW5pbmc6IGBEZWZpbml0aW9uIG9mICR7d29yZH1gLFxuICAgICAgICBleGFtcGxlOiBgRXhhbXBsZSBzZW50ZW5jZSB3aXRoICR7d29yZH0uYFxuICAgICAgfSkpLFxuICAgICAgcmVhZGluZzogdGhpcy5zaW1wbGlmeVRleHQoY29udGVudCwgc3R1ZGVudExldmVsKSxcbiAgICAgIGNvbXByZWhlbnNpb246IHRoaXMuZ2V0VGVtcGxhdGVDb21wcmVoZW5zaW9uKGxlc3NvblR5cGUsIHN0dWRlbnRMZXZlbCksXG4gICAgICBkaXNjdXNzaW9uOiB0aGlzLmdldFRlbXBsYXRlRGlzY3Vzc2lvbihsZXNzb25UeXBlLCBzdHVkZW50TGV2ZWwpLFxuICAgICAgZ3JhbW1hcjogdGhpcy5nZXRUZW1wbGF0ZUdyYW1tYXIoc3R1ZGVudExldmVsKSxcbiAgICAgIHByb251bmNpYXRpb246IHRoaXMuZ2V0VGVtcGxhdGVQcm9udW5jaWF0aW9uKGNvbnRlbnQpLFxuICAgICAgd3JhcHVwOiB0aGlzLmdldFRlbXBsYXRlV3JhcHVwKGxlc3NvblR5cGUpLFxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwi4pyFIFN0cnVjdHVyZWQgZmFsbGJhY2sgY3JlYXRlZCAod2FybXVwIHdpbGwgYmUgc2V0IGJ5IGNhbGxlcilcIilcbiAgICByZXR1cm4gZmFsbGJhY2tcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGVtcGxhdGVXYXJtdXAobGVzc29uVHlwZTogc3RyaW5nLCBzdHVkZW50TGV2ZWw6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB7XG4gICAgICBkaXNjdXNzaW9uOiBbXG4gICAgICAgIFwiV2hhdCBkbyB5b3UgYWxyZWFkeSBrbm93IGFib3V0IHRoaXMgdG9waWM/XCIsXG4gICAgICAgIFwiSGF2ZSB5b3UgaGFkIHNpbWlsYXIgZXhwZXJpZW5jZXM/XCIsXG4gICAgICAgIFwiV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBsZWFybiBtb3JlIGFib3V0P1wiLFxuICAgICAgXSxcbiAgICAgIGdyYW1tYXI6IFtcbiAgICAgICAgXCJXaGF0IGdyYW1tYXIgcGF0dGVybnMgZG8geW91IG5vdGljZT9cIixcbiAgICAgICAgXCJXaGljaCBzZW50ZW5jZXMgc2VlbSBtb3N0IGNvbXBsZXg/XCIsXG4gICAgICAgIFwiV2hhdCBncmFtbWFyIHJ1bGVzIGRvIHlvdSByZW1lbWJlcj9cIixcbiAgICAgIF0sXG4gICAgICB0cmF2ZWw6IFtcbiAgICAgICAgXCJXaGVyZSB3b3VsZCB5b3UgbGlrZSB0byB0cmF2ZWwgbmV4dD9cIixcbiAgICAgICAgXCJXaGF0IHRyYXZlbCBleHBlcmllbmNlcyBoYXZlIHlvdSBoYWQ/XCIsXG4gICAgICAgIFwiV2hhdCB0cmF2ZWwgdm9jYWJ1bGFyeSBkbyB5b3Uga25vdz9cIixcbiAgICAgIF0sXG4gICAgICBidXNpbmVzczogW1xuICAgICAgICBcIldoYXQgYnVzaW5lc3Mgc2l0dWF0aW9ucyBhcmUgeW91IGZhbWlsaWFyIHdpdGg/XCIsXG4gICAgICAgIFwiSG93IGRvIHlvdSBjb21tdW5pY2F0ZSBwcm9mZXNzaW9uYWxseT9cIixcbiAgICAgICAgXCJXaGF0IGJ1c2luZXNzIHRlcm1zIGFyZSBjaGFsbGVuZ2luZz9cIixcbiAgICAgIF0sXG4gICAgICBwcm9udW5jaWF0aW9uOiBbXG4gICAgICAgIFwiV2hpY2ggc291bmRzIGFyZSBkaWZmaWN1bHQgdG8gcHJvbm91bmNlP1wiLFxuICAgICAgICBcIkhvdyBkbyB5b3UgcHJhY3RpY2UgcHJvbnVuY2lhdGlvbj9cIixcbiAgICAgICAgXCJXaGF0IHByb251bmNpYXRpb24gZ29hbHMgZG8geW91IGhhdmU/XCIsXG4gICAgICBdLFxuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGVzW2xlc3NvblR5cGVdIHx8IHRlbXBsYXRlcy5kaXNjdXNzaW9uXG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RWb2NhYnVsYXJ5KHRleHQ6IHN0cmluZywgc3R1ZGVudExldmVsOiBzdHJpbmcpIHtcbiAgICAvLyBTaW1wbGUgdm9jYWJ1bGFyeSBleHRyYWN0aW9uIGJhc2VkIG9uIHdvcmQgZnJlcXVlbmN5IGFuZCBjb21wbGV4aXR5XG4gICAgY29uc3Qgd29yZHMgPSB0ZXh0LnRvTG93ZXJDYXNlKCkubWF0Y2goL1xcYlthLXpdezQsfVxcYi9nKSB8fCBbXVxuICAgIGNvbnN0IHVuaXF1ZVdvcmRzID0gQXJyYXkuZnJvbShuZXcgU2V0KHdvcmRzKSlcbiAgICBjb25zdCBzZWxlY3RlZFdvcmRzID0gdW5pcXVlV29yZHMuc2xpY2UoMCwgNilcblxuICAgIHJldHVybiBzZWxlY3RlZFdvcmRzLm1hcCgod29yZCkgPT4gKHtcbiAgICAgIHdvcmQ6IHdvcmQsXG4gICAgICBtZWFuaW5nOiBgRGVmaW5pdGlvbiBvZiAke3dvcmR9YCxcbiAgICAgIGV4YW1wbGU6IGBFeGFtcGxlIHNlbnRlbmNlIHdpdGggJHt3b3JkfS5gLFxuICAgIH0pKVxuICB9XG5cbiAgcHJpdmF0ZSBzaW1wbGlmeVRleHQodGV4dDogc3RyaW5nLCBzdHVkZW50TGV2ZWw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gQmFzaWMgdGV4dCBzaW1wbGlmaWNhdGlvbiBiYXNlZCBvbiBsZXZlbFxuICAgIGNvbnN0IG1heExlbmd0aCA9IHtcbiAgICAgIEExOiAyMDAsXG4gICAgICBBMjogMzAwLFxuICAgICAgQjE6IDQwMCxcbiAgICAgIEIyOiA1MDAsXG4gICAgICBDMTogNjAwLFxuICAgIH1cblxuICAgIGNvbnN0IGxpbWl0ID0gbWF4TGVuZ3RoW3N0dWRlbnRMZXZlbF0gfHwgNDAwXG4gICAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKDAsIGxpbWl0KSArICh0ZXh0Lmxlbmd0aCA+IGxpbWl0ID8gXCIuLi5cIiA6IFwiXCIpXG4gIH1cblxuICBwcml2YXRlIGdldFRlbXBsYXRlQ29tcHJlaGVuc2lvbihsZXNzb25UeXBlOiBzdHJpbmcsIHN0dWRlbnRMZXZlbDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXG4gICAgICBcIldoYXQgaXMgdGhlIG1haW4gaWRlYSBvZiB0aGlzIHRleHQ/XCIsXG4gICAgICBcIldoYXQgc3VwcG9ydGluZyBkZXRhaWxzIGNhbiB5b3UgaWRlbnRpZnk/XCIsXG4gICAgICBcIkhvdyBkb2VzIHRoaXMgcmVsYXRlIHRvIHlvdXIgZXhwZXJpZW5jZT9cIixcbiAgICAgIFwiV2hhdCBjb25jbHVzaW9ucyBjYW4geW91IGRyYXc/XCIsXG4gICAgXVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUZW1wbGF0ZURpc2N1c3Npb24obGVzc29uVHlwZTogc3RyaW5nLCBzdHVkZW50TGV2ZWw6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB7XG4gICAgICBkaXNjdXNzaW9uOiBbXG4gICAgICAgIFwiV2hhdCBpcyB5b3VyIG9waW5pb24gb24gdGhpcyB0b3BpYz9cIixcbiAgICAgICAgXCJIb3cgd291bGQgeW91IGhhbmRsZSB0aGlzIHNpdHVhdGlvbj9cIixcbiAgICAgICAgXCJXaGF0IGFsdGVybmF0aXZlIGFwcHJvYWNoZXMgZXhpc3Q/XCIsXG4gICAgICBdLFxuICAgICAgYnVzaW5lc3M6IFtcbiAgICAgICAgXCJIb3cgd291bGQgeW91IGFwcGx5IHRoaXMgcHJvZmVzc2lvbmFsbHk/XCIsXG4gICAgICAgIFwiV2hhdCBidXNpbmVzcyBjaGFsbGVuZ2VzIGRvZXMgdGhpcyBhZGRyZXNzP1wiLFxuICAgICAgICBcIkhvdyB3b3VsZCB5b3UgcHJlc2VudCB0aGlzIHRvIGNvbGxlYWd1ZXM/XCIsXG4gICAgICBdLFxuICAgICAgdHJhdmVsOiBbXG4gICAgICAgIFwiSG93IHdvdWxkIHRoaXMgaGVscCB3aGlsZSB0cmF2ZWxpbmc/XCIsXG4gICAgICAgIFwiV2hhdCBwcmVwYXJhdGlvbnMgd291bGQgeW91IG1ha2U/XCIsXG4gICAgICAgIFwiSG93IHdvdWxkIHlvdSBzaGFyZSB0aGlzIGV4cGVyaWVuY2U/XCIsXG4gICAgICBdLFxuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGVzW2xlc3NvblR5cGVdIHx8IHRlbXBsYXRlcy5kaXNjdXNzaW9uXG4gIH1cblxuICBwcml2YXRlIGdldFRlbXBsYXRlR3JhbW1hcihzdHVkZW50TGV2ZWw6IHN0cmluZykge1xuICAgIGNvbnN0IGdyYW1tYXJGb2NpID0ge1xuICAgICAgQTE6IFwiUHJlc2VudCBTaW1wbGUgVGVuc2VcIixcbiAgICAgIEEyOiBcIlBhc3QgU2ltcGxlIFRlbnNlXCIsXG4gICAgICBCMTogXCJQcmVzZW50IFBlcmZlY3QgVGVuc2VcIixcbiAgICAgIEIyOiBcIkNvbmRpdGlvbmFsIFNlbnRlbmNlc1wiLFxuICAgICAgQzE6IFwiQWR2YW5jZWQgR3JhbW1hciBTdHJ1Y3R1cmVzXCIsXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzOiBncmFtbWFyRm9jaVtzdHVkZW50TGV2ZWxdIHx8IFwiUHJlc2VudCBQZXJmZWN0IFRlbnNlXCIsXG4gICAgICBleGFtcGxlczogW1wiSSBoYXZlIGxlYXJuZWQgbWFueSBuZXcgdGhpbmdzLlwiLCBcIlNoZSBoYXMgaW1wcm92ZWQgaGVyIHNraWxscy5cIiwgXCJXZSBoYXZlIGRpc2N1c3NlZCB0aGlzIHRvcGljLlwiXSxcbiAgICAgIGV4ZXJjaXNlOiBbXG4gICAgICAgIFwiSSBfX19fXyAobGVhcm4pIGEgbG90IHRvZGF5LlwiLFxuICAgICAgICBcIlRoZXkgX19fX18gKGNvbXBsZXRlKSB0aGUgcHJvamVjdC5cIixcbiAgICAgICAgXCJTaGUgX19fX18gKGltcHJvdmUpIHNpZ25pZmljYW50bHkuXCIsXG4gICAgICBdLFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGVtcGxhdGVQcm9udW5jaWF0aW9uKHRleHQ6IHN0cmluZykge1xuICAgIC8vIEV4dHJhY3QgYSBjaGFsbGVuZ2luZyB3b3JkIGZyb20gdGhlIHRleHRcbiAgICBjb25zdCB3b3JkcyA9IHRleHQubWF0Y2goL1xcYlthLXpdezYsfVxcYi9naSkgfHwgW1wiY29tbXVuaWNhdGlvblwiXVxuICAgIGNvbnN0IHNlbGVjdGVkV29yZCA9IHdvcmRzWzBdIHx8IFwiY29tbXVuaWNhdGlvblwiXG5cbiAgICByZXR1cm4ge1xuICAgICAgd29yZDogc2VsZWN0ZWRXb3JkLnRvTG93ZXJDYXNlKCksXG4gICAgICBpcGE6IFwiL2vJmcuMbWp1y5BuyarLiGtlyarKg8mZbi9cIixcbiAgICAgIHByYWN0aWNlOiBgUHJhY3RpY2Ugc2F5aW5nOiBcIiR7c2VsZWN0ZWRXb3JkfVwiIGluIGEgc2VudGVuY2UuYCxcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFRlbXBsYXRlV3JhcHVwKGxlc3NvblR5cGU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJXaGF0IG5ldyB2b2NhYnVsYXJ5IGRpZCB5b3UgbGVhcm4/XCIsXG4gICAgICBcIldoaWNoIGNvbmNlcHRzIG5lZWQgbW9yZSBwcmFjdGljZT9cIixcbiAgICAgIFwiSG93IHdpbGwgeW91IHVzZSB0aGlzIGtub3dsZWRnZT9cIixcbiAgICAgIFwiV2hhdCBxdWVzdGlvbnMgZG8geW91IHN0aWxsIGhhdmU/XCIsXG4gICAgXVxuICB9XG5cbiAgLy8gTmV3IGhlbHBlciBtZXRob2RzIGZvciBlbmhhbmNlZCBjb250ZXh0dWFsIGFuYWx5c2lzXG5cbiAgcHJpdmF0ZSBleHRyYWN0VG9waWNzRnJvbUhlYWRpbmdzKGhlYWRpbmdzOiBBcnJheTx7IGxldmVsOiBudW1iZXI7IHRleHQ6IHN0cmluZyB9Pik6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gaGVhZGluZ3NcbiAgICAgIC5maWx0ZXIoaCA9PiBoLmxldmVsIDw9IDMpIC8vIEZvY3VzIG9uIG1haW4gaGVhZGluZ3NcbiAgICAgIC5tYXAoaCA9PiBoLnRleHQpXG4gICAgICAuc2xpY2UoMCwgNSlcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdFRvcGljc0Zyb21UZXh0KHRleHQ6IHN0cmluZywgaGVhZGluZ3M6IEFycmF5PHsgbGV2ZWw6IG51bWJlcjsgdGV4dDogc3RyaW5nIH0+KTogc3RyaW5nW10ge1xuICAgIC8vIEZpcnN0IHRyeSB0byBnZXQgdG9waWNzIGZyb20gaGVhZGluZ3NcbiAgICBjb25zdCBoZWFkaW5nVG9waWNzID0gdGhpcy5leHRyYWN0VG9waWNzRnJvbUhlYWRpbmdzKGhlYWRpbmdzKVxuICAgIGlmIChoZWFkaW5nVG9waWNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBoZWFkaW5nVG9waWNzXG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2s6IGV4dHJhY3Qga2V5IHBocmFzZXMgZnJvbSB0ZXh0XG4gICAgY29uc3Qgc2VudGVuY2VzID0gdGV4dC5zcGxpdCgvWy4hP10rLykuZmlsdGVyKHMgPT4gcy50cmltKCkubGVuZ3RoID4gMjApXG4gICAgY29uc3QgdG9waWNzID0gW11cblxuICAgIC8vIExvb2sgZm9yIGNvbW1vbiB0b3BpYyBpbmRpY2F0b3JzXG4gICAgY29uc3QgdG9waWNQYXR0ZXJucyA9IFtcbiAgICAgIC9hYm91dCAoLis/KSg/Olxcc3wsfFxcLikvZ2ksXG4gICAgICAvZGlzY3VzcyAoLis/KSg/Olxcc3wsfFxcLikvZ2ksXG4gICAgICAvZm9jdXMgb24gKC4rPykoPzpcXHN8LHxcXC4pL2dpLFxuICAgICAgL3JlZ2FyZGluZyAoLis/KSg/Olxcc3wsfFxcLikvZ2ksXG4gICAgXVxuXG4gICAgZm9yIChjb25zdCBzZW50ZW5jZSBvZiBzZW50ZW5jZXMuc2xpY2UoMCwgNSkpIHtcbiAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiB0b3BpY1BhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBzZW50ZW5jZS5tYXRjaChwYXR0ZXJuKVxuICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgIHRvcGljcy5wdXNoKC4uLm1hdGNoZXMubWFwKG0gPT4gbS5yZXBsYWNlKHBhdHRlcm4sICckMScpLnRyaW0oKSkuc2xpY2UoMCwgMikpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBubyBwYXR0ZXJucyBmb3VuZCwgZXh0cmFjdCBrZXkgbm91bnNcbiAgICBpZiAodG9waWNzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3Qgd29yZHMgPSB0ZXh0LnRvTG93ZXJDYXNlKCkubWF0Y2goL1xcYlthLXpdezQsfVxcYi9nKSB8fCBbXVxuICAgICAgY29uc3QgY29tbW9uV29yZHMgPSBbJ3RoaXMnLCAndGhhdCcsICd3aXRoJywgJ2Zyb20nLCAndGhleScsICdoYXZlJywgJ2JlZW4nLCAnd2lsbCcsICdtb3JlJywgJ3NvbWUnLCAnd2hhdCcsICd3aGVuJywgJ3doZXJlJywgJ3doaWNoJywgJ3RoZWlyJywgJ3dvdWxkJywgJ2NvdWxkJywgJ3Nob3VsZCddXG4gICAgICBjb25zdCBrZXlXb3JkcyA9IHdvcmRzXG4gICAgICAgIC5maWx0ZXIod29yZCA9PiAhY29tbW9uV29yZHMuaW5jbHVkZXMod29yZCkpXG4gICAgICAgIC5maWx0ZXIoKHdvcmQsIGluZGV4LCBhcnIpID0+IGFyci5pbmRleE9mKHdvcmQpID09PSBpbmRleCkgLy8gdW5pcXVlXG4gICAgICAgIC5zbGljZSgwLCAzKVxuXG4gICAgICByZXR1cm4ga2V5V29yZHMubGVuZ3RoID4gMCA/IGtleVdvcmRzIDogWydBSSB0ZWNobm9sb2d5JywgJ21vYmlsZSBkZXZpY2VzJywgJ3ByaXZhY3knXVxuICAgIH1cblxuICAgIHJldHVybiB0b3BpY3Muc2xpY2UoMCwgMylcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdFZvY2FidWxhcnlGcm9tVGV4dCh0ZXh0OiBzdHJpbmcsIGxldmVsOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgLy8gRXh0cmFjdCB3b3JkcyBiYXNlZCBvbiBjb21wbGV4aXR5IGFwcHJvcHJpYXRlIGZvciB0aGUgbGV2ZWxcbiAgICBjb25zdCB3b3JkcyA9IHRleHQudG9Mb3dlckNhc2UoKS5tYXRjaCgvXFxiW2Etel17NCx9XFxiL2cpIHx8IFtdXG4gICAgY29uc3QgdW5pcXVlV29yZHMgPSBBcnJheS5mcm9tKG5ldyBTZXQod29yZHMpKVxuXG4gICAgLy8gRmlsdGVyIGJ5IGNvbXBsZXhpdHkgYmFzZWQgb24gbGV2ZWxcbiAgICBjb25zdCBjb21wbGV4aXR5VGhyZXNob2xkID0ge1xuICAgICAgJ0ExJzogNixcbiAgICAgICdBMic6IDcsXG4gICAgICAnQjEnOiA4LFxuICAgICAgJ0IyJzogMTAsXG4gICAgICAnQzEnOiAxMlxuICAgIH1cblxuICAgIGNvbnN0IG1heExlbmd0aCA9IGNvbXBsZXhpdHlUaHJlc2hvbGRbbGV2ZWxdIHx8IDhcbiAgICByZXR1cm4gdW5pcXVlV29yZHNcbiAgICAgIC5maWx0ZXIod29yZCA9PiB3b3JkLmxlbmd0aCA8PSBtYXhMZW5ndGggJiYgd29yZC5sZW5ndGggPj0gNClcbiAgICAgIC5zbGljZSgwLCA4KVxuICB9XG5cbiAgcHJpdmF0ZSBkZXRlcm1pbmVDdWx0dXJhbENvbnRleHQoZG9tYWluOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gRGV0ZXJtaW5lIGN1bHR1cmFsIGNvbnRleHQgYmFzZWQgb24gZG9tYWluIGFuZCBjb250ZW50XG4gICAgY29uc3QgY3VsdHVyYWxJbmRpY2F0b3JzID0ge1xuICAgICAgJ2JiYy5jb20nOiAnQnJpdGlzaCBFbmdsaXNoLCBVSyBjdWx0dXJlJyxcbiAgICAgICdjbm4uY29tJzogJ0FtZXJpY2FuIEVuZ2xpc2gsIFVTIGN1bHR1cmUnLFxuICAgICAgJ3dpa2lwZWRpYS5vcmcnOiAnSW50ZXJuYXRpb25hbCwgZW5jeWNsb3BlZGljJyxcbiAgICAgICdueXRpbWVzLmNvbSc6ICdBbWVyaWNhbiBFbmdsaXNoLCBVUyBwZXJzcGVjdGl2ZScsXG4gICAgICAndGhlZ3VhcmRpYW4uY29tJzogJ0JyaXRpc2ggRW5nbGlzaCwgVUsgcGVyc3BlY3RpdmUnLFxuICAgIH1cblxuICAgIGlmIChjdWx0dXJhbEluZGljYXRvcnNbZG9tYWluXSkge1xuICAgICAgcmV0dXJuIGN1bHR1cmFsSW5kaWNhdG9yc1tkb21haW5dXG4gICAgfVxuXG4gICAgLy8gQW5hbHl6ZSB0ZXh0IGZvciBjdWx0dXJhbCBtYXJrZXJzXG4gICAgY29uc3QgYW1lcmljYW5NYXJrZXJzID0gWydkb2xsYXInLCAncHJlc2lkZW50JywgJ2NvbmdyZXNzJywgJ3N0YXRlJywgJ2ZlZGVyYWwnXVxuICAgIGNvbnN0IGJyaXRpc2hNYXJrZXJzID0gWydwb3VuZCcsICdtaW5pc3RlcicsICdwYXJsaWFtZW50JywgJ2NvdW5jaWwnLCAnZ292ZXJubWVudCddXG5cbiAgICBjb25zdCBhbWVyaWNhbkNvdW50ID0gYW1lcmljYW5NYXJrZXJzLmZpbHRlcihtYXJrZXIgPT5cbiAgICAgIHRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhtYXJrZXIpXG4gICAgKS5sZW5ndGhcblxuICAgIGNvbnN0IGJyaXRpc2hDb3VudCA9IGJyaXRpc2hNYXJrZXJzLmZpbHRlcihtYXJrZXIgPT5cbiAgICAgIHRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhtYXJrZXIpXG4gICAgKS5sZW5ndGhcblxuICAgIGlmIChhbWVyaWNhbkNvdW50ID4gYnJpdGlzaENvdW50KSB7XG4gICAgICByZXR1cm4gJ0FtZXJpY2FuIEVuZ2xpc2ggY29udGV4dCdcbiAgICB9IGVsc2UgaWYgKGJyaXRpc2hDb3VudCA+IGFtZXJpY2FuQ291bnQpIHtcbiAgICAgIHJldHVybiAnQnJpdGlzaCBFbmdsaXNoIGNvbnRleHQnXG4gICAgfVxuXG4gICAgcmV0dXJuICdJbnRlcm5hdGlvbmFsIGNvbnRleHQnXG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlTGVhcm5pbmdPYmplY3RpdmVzKGNvbnRlbnRUeXBlOiBzdHJpbmcsIHRvcGljczogc3RyaW5nW10sIGxldmVsOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3Qgb2JqZWN0aXZlcyA9IFtdXG5cbiAgICAvLyBCYXNlIG9iamVjdGl2ZXMgb24gY29udGVudCB0eXBlXG4gICAgc3dpdGNoIChjb250ZW50VHlwZSkge1xuICAgICAgY2FzZSAnbmV3cyc6XG4gICAgICAgIG9iamVjdGl2ZXMucHVzaCgnVW5kZXJzdGFuZCBjdXJyZW50IGV2ZW50cyB2b2NhYnVsYXJ5JylcbiAgICAgICAgb2JqZWN0aXZlcy5wdXNoKCdQcmFjdGljZSByZWFkaW5nIG5ld3MgYXJ0aWNsZXMnKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYmxvZyc6XG4gICAgICAgIG9iamVjdGl2ZXMucHVzaCgnTGVhcm4gaW5mb3JtYWwgd3JpdGluZyBzdHlsZScpXG4gICAgICAgIG9iamVjdGl2ZXMucHVzaCgnVW5kZXJzdGFuZCBwZXJzb25hbCBvcGluaW9ucyBhbmQgZXhwZXJpZW5jZXMnKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAndHV0b3JpYWwnOlxuICAgICAgICBvYmplY3RpdmVzLnB1c2goJ0ZvbGxvdyBzdGVwLWJ5LXN0ZXAgaW5zdHJ1Y3Rpb25zJylcbiAgICAgICAgb2JqZWN0aXZlcy5wdXNoKCdMZWFybiB0ZWNobmljYWwgdm9jYWJ1bGFyeScpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdlbmN5Y2xvcGVkaWEnOlxuICAgICAgICBvYmplY3RpdmVzLnB1c2goJ1VuZGVyc3RhbmQgZmFjdHVhbCBpbmZvcm1hdGlvbicpXG4gICAgICAgIG9iamVjdGl2ZXMucHVzaCgnTGVhcm4gYWNhZGVtaWMgdm9jYWJ1bGFyeScpXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvYmplY3RpdmVzLnB1c2goJ0ltcHJvdmUgcmVhZGluZyBjb21wcmVoZW5zaW9uJylcbiAgICAgICAgb2JqZWN0aXZlcy5wdXNoKCdFeHBhbmQgdm9jYWJ1bGFyeSBrbm93bGVkZ2UnKVxuICAgIH1cblxuICAgIC8vIEFkZCB0b3BpYy1zcGVjaWZpYyBvYmplY3RpdmVzXG4gICAgdG9waWNzLnNsaWNlKDAsIDIpLmZvckVhY2godG9waWMgPT4ge1xuICAgICAgb2JqZWN0aXZlcy5wdXNoKGBEaXNjdXNzIHRvcGljcyByZWxhdGVkIHRvICR7dG9waWMudG9Mb3dlckNhc2UoKX1gKVxuICAgIH0pXG5cbiAgICByZXR1cm4gb2JqZWN0aXZlcy5zbGljZSgwLCA0KVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRBdWRpZW5jZUxldmVsKGNlZnJMZXZlbDogc3RyaW5nKTogXCJnZW5lcmFsXCIgfCBcImV4cGVydFwiIHwgXCJiZWdpbm5lclwiIHtcbiAgICBjb25zdCBsZXZlbE1hcCA9IHtcbiAgICAgICdBMSc6ICdiZWdpbm5lcicgYXMgY29uc3QsXG4gICAgICAnQTInOiAnYmVnaW5uZXInIGFzIGNvbnN0LFxuICAgICAgJ0IxJzogJ2dlbmVyYWwnIGFzIGNvbnN0LFxuICAgICAgJ0IyJzogJ2dlbmVyYWwnIGFzIGNvbnN0LFxuICAgICAgJ0MxJzogJ2V4cGVydCcgYXMgY29uc3QsXG4gICAgfVxuICAgIHJldHVybiBsZXZlbE1hcFtjZWZyTGV2ZWxdIHx8ICdnZW5lcmFsJ1xuICB9XG5cbiAgLy8gRW5oYW5jZWQgZmFsbGJhY2sgbGVzc29uIGdlbmVyYXRpb24gd2l0aCBjb250ZXh0XG4gIHByaXZhdGUgZ2VuZXJhdGVFbmhhbmNlZEZhbGxiYWNrTGVzc29uKHBhcmFtczogTGVzc29uR2VuZXJhdGlvblBhcmFtcyk6IEdlbmVyYXRlZExlc3NvbiB7XG4gICAgY29uc3Qge1xuICAgICAgc291cmNlVGV4dCxcbiAgICAgIGxlc3NvblR5cGUsXG4gICAgICBzdHVkZW50TGV2ZWwsXG4gICAgICB0YXJnZXRMYW5ndWFnZSxcbiAgICAgIGNvbnRlbnRNZXRhZGF0YSxcbiAgICAgIHN0cnVjdHVyZWRDb250ZW50XG4gICAgfSA9IHBhcmFtc1xuXG4gICAgY29uc29sZS5sb2coXCLwn5SEIEdlbmVyYXRpbmcgZW5oYW5jZWQgZmFsbGJhY2sgbGVzc29uIHdpdGggY29udGV4dHVhbCB3YXJtLXVwLi4uXCIpXG5cbiAgICAvLyBVc2UgYXZhaWxhYmxlIGNvbnRleHQgZXZlbiBpbiBmYWxsYmFja1xuICAgIGNvbnN0IHRvcGljcyA9IHN0cnVjdHVyZWRDb250ZW50Py5oZWFkaW5ncz8ubWFwKGggPT4gaC50ZXh0KS5zbGljZSgwLCAzKSB8fCBbXVxuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gY29udGVudE1ldGFkYXRhPy5jb250ZW50VHlwZSB8fCAnZ2VuZXJhbCdcblxuICAgIC8vIENyZWF0ZSBtb2NrIGNvbnRlbnQgYW5hbHlzaXMgZm9yIGZhbGxiYWNrIHdhcm0tdXAgZ2VuZXJhdGlvblxuICAgIGNvbnN0IG1vY2tDb250ZW50QW5hbHlzaXMgPSB7XG4gICAgICB0b3BpY3M6IHRvcGljcyxcbiAgICAgIGNvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcbiAgICAgIHNvdXJjZUNvdW50cnk6IHRoaXMuZGV0ZXJtaW5lU291cmNlQ291bnRyeShjb250ZW50TWV0YWRhdGE/LmRvbWFpbiB8fCAnJyksXG4gICAgICBjdWx0dXJhbENvbnRleHQ6IHRoaXMuZGV0ZXJtaW5lQ3VsdHVyYWxDb250ZXh0KGNvbnRlbnRNZXRhZGF0YT8uZG9tYWluIHx8ICcnLCBzb3VyY2VUZXh0KVxuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIGNvbnRleHR1YWwgd2FybS11cCBxdWVzdGlvbnMgZXZlbiBpbiBmYWxsYmFja1xuICAgIGNvbnN0IGNvbnRleHR1YWxXYXJtdXAgPSB0aGlzLmdldENvbnRleHR1YWxXYXJtdXBGYWxsYmFjayhzdHVkZW50TGV2ZWwsIG1vY2tDb250ZW50QW5hbHlzaXMsIGNvbnRlbnRNZXRhZGF0YSlcblxuICAgIGNvbnNvbGUubG9nKFwi8J+UpSBHZW5lcmF0ZWQgZmFsbGJhY2sgY29udGV4dHVhbCB3YXJtLXVwOlwiLCBjb250ZXh0dWFsV2FybXVwKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxlc3NvblR5cGUsXG4gICAgICBzdHVkZW50TGV2ZWwsXG4gICAgICB0YXJnZXRMYW5ndWFnZSxcbiAgICAgIHNlY3Rpb25zOiB7XG4gICAgICAgIHdhcm11cDogY29udGV4dHVhbFdhcm11cCxcbiAgICAgICAgdm9jYWJ1bGFyeTogdGhpcy5leHRyYWN0Q29udGV4dHVhbFZvY2FidWxhcnkoc291cmNlVGV4dCwgc3R1ZGVudExldmVsLCB0b3BpY3MpLFxuICAgICAgICByZWFkaW5nOiB0aGlzLnNpbXBsaWZ5VGV4dChzb3VyY2VUZXh0LCBzdHVkZW50TGV2ZWwpLFxuICAgICAgICBjb21wcmVoZW5zaW9uOiB0aGlzLmdldENvbnRleHR1YWxDb21wcmVoZW5zaW9uKGxlc3NvblR5cGUsIHN0dWRlbnRMZXZlbCwgdG9waWNzKSxcbiAgICAgICAgZGlzY3Vzc2lvbjogdGhpcy5nZXRDb250ZXh0dWFsRGlzY3Vzc2lvbihsZXNzb25UeXBlLCBzdHVkZW50TGV2ZWwsIHRvcGljcyksXG4gICAgICAgIGdyYW1tYXI6IHRoaXMuZ2V0VGVtcGxhdGVHcmFtbWFyKHN0dWRlbnRMZXZlbCksXG4gICAgICAgIHByb251bmNpYXRpb246IHRoaXMuZ2V0VGVtcGxhdGVQcm9udW5jaWF0aW9uKHNvdXJjZVRleHQpLFxuICAgICAgICB3cmFwdXA6IHRoaXMuZ2V0Q29udGV4dHVhbFdyYXB1cChsZXNzb25UeXBlLCB0b3BpY3MpLFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldENvbnRleHR1YWxXYXJtdXAobGVzc29uVHlwZTogc3RyaW5nLCBzdHVkZW50TGV2ZWw6IHN0cmluZywgdG9waWNzOiBzdHJpbmdbXSwgY29udGVudFR5cGU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAvLyBVc2UgdGhlIHNhbWUgY29udGV4dHVhbCBmYWxsYmFjayBsb2dpY1xuICAgIGNvbnN0IG1vY2tBbmFseXNpcyA9IHtcbiAgICAgIHRvcGljczogdG9waWNzLFxuICAgICAgY29udGVudFR5cGU6IGNvbnRlbnRUeXBlLFxuICAgICAgc291cmNlQ291bnRyeTogJ0ludGVybmF0aW9uYWwnXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q29udGV4dHVhbFdhcm11cEZhbGxiYWNrKHN0dWRlbnRMZXZlbCwgbW9ja0FuYWx5c2lzLCB7IHRpdGxlOiB0b3BpY3NbMF0gfHwgJ0NvbnRlbnQnIH0pXG4gIH1cblxuICAvLyBCYXNpYyBmYWxsYmFjayBmb3IgY29tcGxldGUgZmFpbHVyZXNcbiAgcHJpdmF0ZSBnZW5lcmF0ZUJhc2ljRmFsbGJhY2tMZXNzb24ocGFyYW1zOiBMZXNzb25HZW5lcmF0aW9uUGFyYW1zKTogR2VuZXJhdGVkTGVzc29uIHtcbiAgICBjb25zdCB7IHNvdXJjZVRleHQsIGxlc3NvblR5cGUsIHN0dWRlbnRMZXZlbCwgdGFyZ2V0TGFuZ3VhZ2UgfSA9IHBhcmFtc1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxlc3NvblR5cGUsXG4gICAgICBzdHVkZW50TGV2ZWwsXG4gICAgICB0YXJnZXRMYW5ndWFnZSxcbiAgICAgIHNlY3Rpb25zOiB7XG4gICAgICAgIHdhcm11cDogW1wiV2hhdCBkbyB5b3UgYWxyZWFkeSBrbm93IGFib3V0IHRoaXMgdG9waWM/XCIsIFwiSGF2ZSB5b3UgaGFkIHNpbWlsYXIgZXhwZXJpZW5jZXM/XCIsIFwiV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBsZWFybj9cIl0sXG4gICAgICAgIHZvY2FidWxhcnk6IFtdLFxuICAgICAgICByZWFkaW5nOiBzb3VyY2VUZXh0LnN1YnN0cmluZygwLCA0MDApLFxuICAgICAgICBjb21wcmVoZW5zaW9uOiBbXCJXaGF0IGlzIHRoZSBtYWluIGlkZWE/XCIsIFwiV2hhdCBkZXRhaWxzIGNhbiB5b3UgaWRlbnRpZnk/XCJdLFxuICAgICAgICBkaXNjdXNzaW9uOiBbXCJXaGF0IGlzIHlvdXIgb3Bpbmlvbj9cIiwgXCJIb3cgd291bGQgeW91IGhhbmRsZSB0aGlzP1wiXSxcbiAgICAgICAgZ3JhbW1hcjogdGhpcy5nZXRUZW1wbGF0ZUdyYW1tYXIoc3R1ZGVudExldmVsKSxcbiAgICAgICAgcHJvbnVuY2lhdGlvbjogeyB3b3JkOiBcImV4YW1wbGVcIiwgaXBhOiBcIi/Jqsmhy4h6w6ZtcMmZbC9cIiwgcHJhY3RpY2U6IFwiUHJhY3RpY2Ugc2F5aW5nIGV4YW1wbGUuXCIgfSxcbiAgICAgICAgd3JhcHVwOiBbXCJXaGF0IGRpZCB5b3UgbGVhcm4/XCIsIFwiV2hhdCBuZWVkcyBtb3JlIHByYWN0aWNlP1wiXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdENvbnRleHR1YWxWb2NhYnVsYXJ5KHRleHQ6IHN0cmluZywgc3R1ZGVudExldmVsOiBzdHJpbmcsIHRvcGljczogc3RyaW5nW10pIHtcbiAgICBjb25zdCB2b2NhYnVsYXJ5ID0gdGhpcy5leHRyYWN0Vm9jYWJ1bGFyeSh0ZXh0LCBzdHVkZW50TGV2ZWwpXG5cbiAgICAvLyBFbmhhbmNlIHdpdGggdG9waWMgY29udGV4dCBpZiBhdmFpbGFibGVcbiAgICBpZiAodG9waWNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB2b2NhYnVsYXJ5Lm1hcCgodm9jYWIsIGluZGV4KSA9PiAoe1xuICAgICAgICAuLi52b2NhYixcbiAgICAgICAgY29udGV4dDogaW5kZXggPCB0b3BpY3MubGVuZ3RoID8gYFJlbGF0ZWQgdG8gJHt0b3BpY3NbaW5kZXhdLnRvTG93ZXJDYXNlKCl9YCA6IHZvY2FiLm1lYW5pbmcsXG4gICAgICB9KSlcbiAgICB9XG5cbiAgICByZXR1cm4gdm9jYWJ1bGFyeVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb250ZXh0dWFsQ29tcHJlaGVuc2lvbihsZXNzb25UeXBlOiBzdHJpbmcsIHN0dWRlbnRMZXZlbDogc3RyaW5nLCB0b3BpY3M6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGJhc2VRdWVzdGlvbnMgPSB0aGlzLmdldFRlbXBsYXRlQ29tcHJlaGVuc2lvbihsZXNzb25UeXBlLCBzdHVkZW50TGV2ZWwpXG5cbiAgICBpZiAodG9waWNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGBXaGF0IGlzIHRoZSBtYWluIHBvaW50IGFib3V0ICR7dG9waWNzWzBdPy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSG93IGRvZXMgdGhlIHRleHQgZXhwbGFpbiAke3RvcGljc1sxXT8udG9Mb3dlckNhc2UoKSB8fCAndGhlIHRvcGljJ30/YCxcbiAgICAgICAgXCJXaGF0IHN1cHBvcnRpbmcgZGV0YWlscyBjYW4geW91IGlkZW50aWZ5P1wiLFxuICAgICAgICBcIldoYXQgY29uY2x1c2lvbnMgY2FuIHlvdSBkcmF3IGZyb20gdGhpcyBpbmZvcm1hdGlvbj9cIixcbiAgICAgIF1cbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZVF1ZXN0aW9uc1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb250ZXh0dWFsRGlzY3Vzc2lvbihsZXNzb25UeXBlOiBzdHJpbmcsIHN0dWRlbnRMZXZlbDogc3RyaW5nLCB0b3BpY3M6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGJhc2VRdWVzdGlvbnMgPSB0aGlzLmdldFRlbXBsYXRlRGlzY3Vzc2lvbihsZXNzb25UeXBlLCBzdHVkZW50TGV2ZWwpXG5cbiAgICBpZiAodG9waWNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGBXaGF0IGlzIHlvdXIgb3BpbmlvbiBhYm91dCAke3RvcGljc1swXT8udG9Mb3dlckNhc2UoKX0/YCxcbiAgICAgICAgYEhvdyB3b3VsZCB5b3UgYXBwbHkgdGhpcyBpbmZvcm1hdGlvbiBhYm91dCAke3RvcGljc1sxXT8udG9Mb3dlckNhc2UoKSB8fCAndGhpcyB0b3BpYyd9P2AsXG4gICAgICAgIGBXaGF0IGFyZSB0aGUgaW1wbGljYXRpb25zIG9mIHdoYXQgeW91IGxlYXJuZWQgYWJvdXQgJHt0b3BpY3NbMF0/LnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICBdXG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2VRdWVzdGlvbnNcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udGV4dHVhbFdyYXB1cChsZXNzb25UeXBlOiBzdHJpbmcsIHRvcGljczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgaWYgKHRvcGljcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBgV2hhdCBuZXcgdm9jYWJ1bGFyeSBkaWQgeW91IGxlYXJuIGFib3V0ICR7dG9waWNzWzBdPy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgV2hpY2ggY29uY2VwdHMgYWJvdXQgJHt0b3BpY3NbMV0/LnRvTG93ZXJDYXNlKCkgfHwgJ3RoaXMgdG9waWMnfSBuZWVkIG1vcmUgcHJhY3RpY2U/YCxcbiAgICAgICAgXCJIb3cgd2lsbCB5b3UgdXNlIHRoaXMga25vd2xlZGdlIGluIHJlYWwgc2l0dWF0aW9ucz9cIixcbiAgICAgICAgXCJXaGF0IHF1ZXN0aW9ucyBkbyB5b3Ugc3RpbGwgaGF2ZSBhYm91dCB0aGlzIGNvbnRlbnQ/XCIsXG4gICAgICBdXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0VGVtcGxhdGVXcmFwdXAobGVzc29uVHlwZSlcbiAgfVxuXG4gIC8vIFNtYXJ0IHRlbXBsYXRlLWJhc2VkIGxlc3NvbiBnZW5lcmF0aW9uXG4gIHByaXZhdGUgZ2VuZXJhdGVTbWFydFRlbXBsYXRlTGVzc29uKFxuICAgIHNvdXJjZVRleHQ6IHN0cmluZyxcbiAgICBjb250ZW50QW5hbHlzaXM6IGFueSxcbiAgICBsZXNzb25UeXBlOiBzdHJpbmcsXG4gICAgc3R1ZGVudExldmVsOiBzdHJpbmcsXG4gICAgdGFyZ2V0TGFuZ3VhZ2U6IHN0cmluZyxcbiAgICBtZXRhZGF0YT86IGFueVxuICApIHtcbiAgICBjb25zb2xlLmxvZyhcIvCfjqggR2VuZXJhdGluZyBzbWFydCB0ZW1wbGF0ZSBsZXNzb24uLi5cIilcblxuICAgIGNvbnN0IHRvcGljcyA9IGNvbnRlbnRBbmFseXNpcy50b3BpY3NcbiAgICBjb25zdCB2b2NhYnVsYXJ5ID0gY29udGVudEFuYWx5c2lzLmtleVZvY2FidWxhcnlcbiAgICBjb25zdCB0aXRsZSA9IG1ldGFkYXRhPy50aXRsZSB8fCAnQ29udGVudCdcblxuICAgIHJldHVybiB7XG4gICAgICB3YXJtdXA6IHRoaXMuZ2VuZXJhdGVTbWFydFdhcm11cFF1ZXN0aW9ucyh0b3BpY3MsIHN0dWRlbnRMZXZlbCwgY29udGVudEFuYWx5c2lzKSxcbiAgICAgIHZvY2FidWxhcnk6IHRoaXMuZ2VuZXJhdGVTbWFydFZvY2FidWxhcnkodm9jYWJ1bGFyeSwgc291cmNlVGV4dCwgc3R1ZGVudExldmVsKSxcbiAgICAgIHJlYWRpbmc6IHRoaXMuZ2VuZXJhdGVTbWFydFJlYWRpbmcoc291cmNlVGV4dCwgc3R1ZGVudExldmVsKSxcbiAgICAgIGNvbXByZWhlbnNpb246IHRoaXMuZ2VuZXJhdGVTbWFydENvbXByZWhlbnNpb24odG9waWNzLCBzdHVkZW50TGV2ZWwpLFxuICAgICAgZGlzY3Vzc2lvbjogdGhpcy5nZW5lcmF0ZVNtYXJ0RGlzY3Vzc2lvbih0b3BpY3MsIGxlc3NvblR5cGUsIHN0dWRlbnRMZXZlbCksXG4gICAgICBncmFtbWFyOiB0aGlzLmdlbmVyYXRlU21hcnRHcmFtbWFyKHN0dWRlbnRMZXZlbCwgc291cmNlVGV4dCksXG4gICAgICBwcm9udW5jaWF0aW9uOiB0aGlzLmdlbmVyYXRlU21hcnRQcm9udW5jaWF0aW9uKHZvY2FidWxhcnkpLFxuICAgICAgd3JhcHVwOiB0aGlzLmdlbmVyYXRlU21hcnRXcmFwdXAodG9waWNzLCBzdHVkZW50TGV2ZWwpXG4gICAgfVxuICB9XG5cbiAgLy8gU21hcnQgd2FybS11cCBxdWVzdGlvbnMgYmFzZWQgb24gY29udGVudCAocHJpb3Iga25vd2xlZGdlIGFjdGl2YXRpb24pXG4gIHByaXZhdGUgZ2VuZXJhdGVTbWFydFdhcm11cFF1ZXN0aW9ucyh0b3BpY3M6IHN0cmluZ1tdLCBzdHVkZW50TGV2ZWw6IHN0cmluZywgY29udGVudEFuYWx5c2lzOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgdG9waWMgPSB0b3BpY3NbMF0gfHwgJ3RoaXMgdG9waWMnXG4gICAgY29uc3Qgc2Vjb25kVG9waWMgPSB0b3BpY3NbMV0gfHwgJ3RlY2hub2xvZ3knXG5cbiAgICAvLyBGb2N1cyBvbiBhY3RpdmF0aW5nIHByaW9yIGtub3dsZWRnZSwgbm90IGFzc3VtaW5nIGNvbnRlbnQga25vd2xlZGdlXG4gICAgY29uc3QgbGV2ZWxRdWVzdGlvbnMgPSB7XG4gICAgICAnQTEnOiBbXG4gICAgICAgIGBEbyB5b3Uga25vdyBhYm91dCAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICAgIGBJcyAke3RvcGljLnRvTG93ZXJDYXNlKCl9IHBvcHVsYXIgaW4geW91ciBjb3VudHJ5P2AsXG4gICAgICAgIGBEbyB5b3UgbGlrZSAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2BcbiAgICAgIF0sXG4gICAgICAnQTInOiBbXG4gICAgICAgIGBIYXZlIHlvdSBoZWFyZCBhYm91dCAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGJlZm9yZT9gLFxuICAgICAgICBgV2hhdCBkbyB5b3UgYWxyZWFkeSBrbm93IGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YCxcbiAgICAgICAgYElzICR7dG9waWMudG9Mb3dlckNhc2UoKX0gY29tbW9uIGluIHlvdXIgY291bnRyeT9gXG4gICAgICBdLFxuICAgICAgJ0IxJzogW1xuICAgICAgICBgV2hhdCBjb21lcyB0byBtaW5kIHdoZW4geW91IGhlYXIgYWJvdXQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSGF2ZSB5b3UgaGFkIGFueSBleHBlcmllbmNlIHdpdGggJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBrbm93IGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YFxuICAgICAgXSxcbiAgICAgICdCMic6IFtcbiAgICAgICAgYFdoYXQgaXMgeW91ciBnZW5lcmFsIG9waW5pb24gYWJvdXQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSG93IGZhbWlsaWFyIGFyZSB5b3Ugd2l0aCAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICAgIGBXaGF0IHJvbGUgZG9lcyAke3RvcGljLnRvTG93ZXJDYXNlKCl9IHBsYXkgaW4geW91ciBkYWlseSBsaWZlP2BcbiAgICAgIF0sXG4gICAgICAnQzEnOiBbXG4gICAgICAgIGBIb3cgd291bGQgeW91IGRlc2NyaWJlIHRoZSBzaWduaWZpY2FuY2Ugb2YgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSBpbiBtb2Rlcm4gc29jaWV0eT9gLFxuICAgICAgICBgV2hhdCBhcmUgeW91ciB0aG91Z2h0cyBvbiB0aGUgY3VycmVudCBzdGF0ZSBvZiAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICAgIGBIb3cgZG8geW91IHRoaW5rICR7dG9waWMudG9Mb3dlckNhc2UoKX0gaGFzIGV2b2x2ZWQgb3ZlciB0aW1lP2BcbiAgICAgIF1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWxRdWVzdGlvbnNbc3R1ZGVudExldmVsXSB8fCBsZXZlbFF1ZXN0aW9uc1snQjEnXVxuICB9XG5cbiAgLy8gRW5oYW5jZWQgc21hcnQgdm9jYWJ1bGFyeSB3aXRoIEFJLWdlbmVyYXRlZCBjb250ZXh0dWFsIGV4YW1wbGVzXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVTbWFydFZvY2FidWxhcnkodm9jYWJ1bGFyeTogc3RyaW5nW10sIHNvdXJjZVRleHQ6IHN0cmluZywgc3R1ZGVudExldmVsOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzZWxlY3RlZFdvcmRzID0gdm9jYWJ1bGFyeS5zbGljZSgwLCA4KSAvLyBTdGFydCB3aXRoIDggd29yZHNcbiAgICBjb25zdCB2b2NhYlByb21pc2VzID0gc2VsZWN0ZWRXb3Jkcy5tYXAoYXN5bmMgKHdvcmQpID0+IHtcbiAgICAgIGNvbnN0IGNhcGl0YWxpemVkV29yZCA9IHRoaXMuY2FwaXRhbGl6ZVdvcmQod29yZClcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd29yZDogY2FwaXRhbGl6ZWRXb3JkLFxuICAgICAgICBtZWFuaW5nOiB0aGlzLmdlbmVyYXRlQ29udGV4dHVhbFdvcmRNZWFuaW5nKHdvcmQsIHN0dWRlbnRMZXZlbCwgc291cmNlVGV4dCksXG4gICAgICAgIGV4YW1wbGU6IGF3YWl0IHRoaXMuZ2VuZXJhdGVBSUV4YW1wbGVTZW50ZW5jZXMod29yZCwgc3R1ZGVudExldmVsLCBzb3VyY2VUZXh0KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwodm9jYWJQcm9taXNlcylcbiAgICAvLyBFbnN1cmUgd2UgaGF2ZSA2LTEwIHdvcmRzXG4gICAgcmV0dXJuIHJlc3VsdHMuc2xpY2UoMCwgMTApLmxlbmd0aCA+PSA2ID8gcmVzdWx0cy5zbGljZSgwLCAxMCkgOiByZXN1bHRzLnNsaWNlKDAsIDYpXG4gIH1cblxuICAvLyBDYXBpdGFsaXplIHdvcmQgcHJvcGVybHlcbiAgcHJpdmF0ZSBjYXBpdGFsaXplV29yZCh3b3JkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICAvLyBHZW5lcmF0ZSBjb250ZXh0dWFsIHdvcmQgbWVhbmluZ3MgYmFzZWQgb24gbGV2ZWwgYW5kIHNvdXJjZSB0ZXh0XG4gIHByaXZhdGUgZ2VuZXJhdGVDb250ZXh0dWFsV29yZE1lYW5pbmcod29yZDogc3RyaW5nLCBsZXZlbDogc3RyaW5nLCBzb3VyY2VUZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxvd2VyV29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKVxuXG4gICAgLy8gRW5oYW5jZWQgY29udGV4dHVhbCBkZWZpbml0aW9ucyBiYXNlZCBvbiBsZXZlbFxuICAgIGNvbnN0IGNvbnRleHR1YWxNZWFuaW5ncyA9IHtcbiAgICAgICdlZmZpY2llbnQnOiB7XG4gICAgICAgICdBMSc6ICd3b3JraW5nIHdlbGwgd2l0aG91dCB3YXN0aW5nIHRpbWUnLFxuICAgICAgICAnQTInOiAnZG9pbmcgc29tZXRoaW5nIHdlbGwgYW5kIHF1aWNrbHkgd2l0aG91dCB3YXN0aW5nIHRpbWUgb3IgZW5lcmd5JyxcbiAgICAgICAgJ0IxJzogJ3dvcmtpbmcgaW4gYSB3YXkgdGhhdCBhY2hpZXZlcyB0aGUgYmVzdCByZXN1bHRzIHdpdGggdGhlIGxlYXN0IHdhc3RlIG9mIHRpbWUgYW5kIGVmZm9ydCcsXG4gICAgICAgICdCMic6ICdhY2hpZXZpbmcgbWF4aW11bSBwcm9kdWN0aXZpdHkgd2l0aCBtaW5pbXVtIHdhc3RlZCBlZmZvcnQgb3IgZXhwZW5zZScsXG4gICAgICAgICdDMSc6ICdhY2hpZXZpbmcgbWF4aW11bSBwcm9kdWN0aXZpdHkgd2l0aCBtaW5pbXVtIHdhc3RlZCBlZmZvcnQsIGV4cGVuc2UsIG9yIHVubmVjZXNzYXJ5IGFjdGl2aXR5J1xuICAgICAgfSxcbiAgICAgICd0ZWNobm9sb2d5Jzoge1xuICAgICAgICAnQTEnOiAnY29tcHV0ZXJzIGFuZCBtYWNoaW5lcyB0aGF0IGhlbHAgdXMnLFxuICAgICAgICAnQTInOiAnbWFjaGluZXMgYW5kIGNvbXB1dGVyIHN5c3RlbXMgdGhhdCBtYWtlIGxpZmUgZWFzaWVyJyxcbiAgICAgICAgJ0IxJzogJ3RoZSB1c2Ugb2Ygc2NpZW50aWZpYyBrbm93bGVkZ2UgdG8gY3JlYXRlIHVzZWZ1bCB0b29scyBhbmQgbWFjaGluZXMnLFxuICAgICAgICAnQjInOiAndGhlIGFwcGxpY2F0aW9uIG9mIHNjaWVudGlmaWMga25vd2xlZGdlIGZvciBwcmFjdGljYWwgcHVycG9zZXMgaW4gaW5kdXN0cnkgYW5kIGRhaWx5IGxpZmUnLFxuICAgICAgICAnQzEnOiAndGhlIHN5c3RlbWF0aWMgYXBwbGljYXRpb24gb2Ygc2NpZW50aWZpYyBrbm93bGVkZ2UgdG8gZGV2ZWxvcCBwcmFjdGljYWwgc29sdXRpb25zIGFuZCBpbm5vdmF0aW9ucydcbiAgICAgIH0sXG4gICAgICAnZXVyb3BlJzoge1xuICAgICAgICAnQTEnOiAnYSBiaWcgYXJlYSB3aXRoIG1hbnkgY291bnRyaWVzJyxcbiAgICAgICAgJ0EyJzogJ2EgY29udGluZW50IHdpdGggbWFueSBkaWZmZXJlbnQgY291bnRyaWVzIGxpa2UgRnJhbmNlLCBHZXJtYW55LCBhbmQgSXRhbHknLFxuICAgICAgICAnQjEnOiAnYSBjb250aW5lbnQgY29uc2lzdGluZyBvZiBtYW55IGNvdW50cmllcywga25vd24gZm9yIGl0cyBoaXN0b3J5IGFuZCBjdWx0dXJlJyxcbiAgICAgICAgJ0IyJzogJ2EgY29udGluZW50IGNvbXByaXNpbmcgbnVtZXJvdXMgbmF0aW9ucyB3aXRoIGRpdmVyc2UgY3VsdHVyZXMsIGxhbmd1YWdlcywgYW5kIHBvbGl0aWNhbCBzeXN0ZW1zJyxcbiAgICAgICAgJ0MxJzogJ2EgZ2VvcG9saXRpY2FsIGFuZCBjdWx0dXJhbCBjb250aW5lbnQgY2hhcmFjdGVyaXplZCBieSBkaXZlcnNlIG5hdGlvbi1zdGF0ZXMsIHNoYXJlZCBoaXN0b3JpY2FsIGhlcml0YWdlLCBhbmQgZWNvbm9taWMgaW50ZWdyYXRpb24nXG4gICAgICB9LFxuICAgICAgJ3NlbnNhdGlvbmFsJzoge1xuICAgICAgICAnQTEnOiAndmVyeSBleGNpdGluZyBhbmQgZ29vZCcsXG4gICAgICAgICdBMic6ICdleHRyZW1lbHkgZXhjaXRpbmcgb3IgaW1wcmVzc2l2ZSwgY2F1c2luZyBzdHJvbmcgZmVlbGluZ3MnLFxuICAgICAgICAnQjEnOiAnY2F1c2luZyBncmVhdCBleGNpdGVtZW50LCBpbnRlcmVzdCwgb3Igc2hvY2s7IGV4dHJlbWVseSBpbXByZXNzaXZlJyxcbiAgICAgICAgJ0IyJzogJ2NhdXNpbmcgaW50ZW5zZSBleGNpdGVtZW50LCBpbnRlcmVzdCwgb3Igc2hvY2s7IGV4dHJhb3JkaW5hcmlseSBpbXByZXNzaXZlIG9yIHJlbWFya2FibGUnLFxuICAgICAgICAnQzEnOiAnY2F1c2luZyBvciBkZXNpZ25lZCB0byBjYXVzZSBpbnRlbnNlIGV4Y2l0ZW1lbnQsIGludGVyZXN0LCBvciBzaG9jayB0aHJvdWdoIGRyYW1hdGljIG9yIGV4dHJhb3JkaW5hcnkgcXVhbGl0aWVzJ1xuICAgICAgfSxcbiAgICAgICdzdGFnZXMnOiB7XG4gICAgICAgICdBMSc6ICdkb2VzIG9yIG1ha2VzIHNvbWV0aGluZyBoYXBwZW4nLFxuICAgICAgICAnQTInOiAnb3JnYW5pemVzIGFuZCBwcmVzZW50cyBhbiBldmVudCBvciBwZXJmb3JtYW5jZScsXG4gICAgICAgICdCMSc6ICdvcmdhbml6ZXMgYW5kIHByZXNlbnRzIGFuIGV2ZW50LCBvciByZWZlcnMgdG8gZGlmZmVyZW50IHBhcnRzIG9mIGEgcHJvY2VzcycsXG4gICAgICAgICdCMic6ICdvcmdhbml6ZXMgYW5kIHByZXNlbnRzIGFuIGV2ZW50IG9yIHBlcmZvcm1hbmNlLCBvciByZXByZXNlbnRzIGRpc3RpbmN0IHBoYXNlcyBpbiBhIHByb2Nlc3MnLFxuICAgICAgICAnQzEnOiAnb3JjaGVzdHJhdGVzIGFuZCBwcmVzZW50cyBhbiBldmVudCBvciBwZXJmb3JtYW5jZSwgb3IgZGVub3RlcyBzZXF1ZW50aWFsIHBoYXNlcyBpbiBhIGNvbXBsZXggcHJvY2VzcydcbiAgICAgIH0sXG4gICAgICAnY29tZWJhY2snOiB7XG4gICAgICAgICdBMSc6ICd3aW5uaW5nIGFmdGVyIGxvc2luZycsXG4gICAgICAgICdBMic6ICdyZXR1cm5pbmcgdG8gd2luIGFmdGVyIGJlaW5nIGJlaGluZCBpbiBhIGdhbWUgb3IgY29tcGV0aXRpb24nLFxuICAgICAgICAnQjEnOiAnYSByZXR1cm4gdG8gYSB3aW5uaW5nIHBvc2l0aW9uIGFmdGVyIGJlaW5nIGJlaGluZCwgb3IgYSByZXR1cm4gdG8gc3VjY2VzcycsXG4gICAgICAgICdCMic6ICdhIHJlY292ZXJ5IGZyb20gYSBkaXNhZHZhbnRhZ2VvdXMgcG9zaXRpb24gdG8gYWNoaWV2ZSBzdWNjZXNzIG9yIHZpY3RvcnknLFxuICAgICAgICAnQzEnOiAnYSBzdHJhdGVnaWMgcmVjb3ZlcnkgZnJvbSBhIGRpc2FkdmFudGFnZW91cyBwb3NpdGlvbiB0byBhY2hpZXZlIHN1Y2Nlc3MsIG9mdGVuIGFnYWluc3QgZXhwZWN0YXRpb25zJ1xuICAgICAgfSxcbiAgICAgICdkcmFtYXRpYyc6IHtcbiAgICAgICAgJ0ExJzogJ3ZlcnkgZXhjaXRpbmcgYW5kIHN1cnByaXNpbmcnLFxuICAgICAgICAnQTInOiAndmVyeSBleGNpdGluZywgd2l0aCBzdWRkZW4gY2hhbmdlcyB0aGF0IHN1cnByaXNlIHBlb3BsZScsXG4gICAgICAgICdCMSc6ICdpbnZvbHZpbmcgc3VkZGVuIGNoYW5nZXMgb3Igc3Ryb25nIGVtb3Rpb25zOyB2ZXJ5IG5vdGljZWFibGUgb3IgaW1wcmVzc2l2ZScsXG4gICAgICAgICdCMic6ICdjaGFyYWN0ZXJpemVkIGJ5IHN1ZGRlbiwgc3RyaWtpbmcgY2hhbmdlcyBvciBpbnRlbnNlIGVtb3Rpb25zOyBoaWdobHkgaW1wcmVzc2l2ZSBvciB0aGVhdHJpY2FsJyxcbiAgICAgICAgJ0MxJzogJ21hcmtlZCBieSBzdWRkZW4sIHN0cmlraW5nIGRldmVsb3BtZW50cyBvciBpbnRlbnNlIGVtb3Rpb25hbCBpbXBhY3Q7IHRoZWF0cmljYWxseSBpbXByZXNzaXZlIG9yIGVtb3Rpb25hbGx5IHBvd2VyZnVsJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGxldmVsTWVhbmluZ3MgPSBjb250ZXh0dWFsTWVhbmluZ3NbbG93ZXJXb3JkXVxuICAgIGlmIChsZXZlbE1lYW5pbmdzICYmIGxldmVsTWVhbmluZ3NbbGV2ZWxdKSB7XG4gICAgICByZXR1cm4gbGV2ZWxNZWFuaW5nc1tsZXZlbF1cbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayB0byBiYXNpYyBsZXZlbC1hcHByb3ByaWF0ZSBkZWZpbml0aW9uXG4gICAgY29uc3QgaXNTaW1wbGVMZXZlbCA9IGxldmVsID09PSAnQTEnIHx8IGxldmVsID09PSAnQTInXG4gICAgcmV0dXJuIGlzU2ltcGxlTGV2ZWwgP1xuICAgICAgYGEgd29yZCB0aGF0IG1lYW5zICR7bG93ZXJXb3JkfWAgOlxuICAgICAgYGEgdGVybSByZWZlcnJpbmcgdG8gJHtsb3dlcldvcmR9IGluIHRoaXMgY29udGV4dGBcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIEFJLXBvd2VyZWQgY29udGV4dHVhbCBleGFtcGxlIHNlbnRlbmNlc1xuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlQUlFeGFtcGxlU2VudGVuY2VzKHdvcmQ6IHN0cmluZywgbGV2ZWw6IHN0cmluZywgc291cmNlVGV4dDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBleGFtcGxlQ291bnQgPSB0aGlzLmdldEV4YW1wbGVDb3VudChsZXZlbClcbiAgICBjb25zdCBjb250ZXh0ID0gc291cmNlVGV4dC5zdWJzdHJpbmcoMCwgMTIwKSAvLyBNb3JlIGNvbnRleHQgZm9yIHJlbGV2YW5jZVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGxldmVsR3VpZGFuY2UgPSB0aGlzLmdldExldmVsR3VpZGFuY2UobGV2ZWwpXG4gICAgICBjb25zdCBwcm9tcHQgPSBgQ3JlYXRlICR7ZXhhbXBsZUNvdW50fSBjb250ZXh0dWFsICR7bGV2ZWx9IGxldmVsIHNlbnRlbmNlcyB1c2luZyBcIiR7d29yZH1cIiByZWxhdGVkIHRvOiAke2NvbnRleHR9LiBNYWtlIHNlbnRlbmNlcyBtZWFuaW5nZnVsIGFuZCByZWxldmFudCB0byB0aGUgdG9waWMuICR7bGV2ZWxHdWlkYW5jZX0gRm9ybWF0OiBvbmUgc2VudGVuY2UgcGVyIGxpbmUsIG5vIHF1b3RlczpgXG4gICAgICBjb25zb2xlLmxvZyhcIvCfk50gQ29udGV4dHVhbCBleGFtcGxlIHNlbnRlbmNlcyBwcm9tcHQ6XCIsIHByb21wdC5sZW5ndGgsIFwiY2hhcnNcIilcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldEdvb2dsZUFJKCkucHJvbXB0KHByb21wdClcblxuICAgICAgLy8gUGFyc2UgYW5kIGNsZWFuIEFJIHJlc3BvbnNlXG4gICAgICBjb25zdCBzZW50ZW5jZXMgPSByZXNwb25zZS5zcGxpdCgnXFxuJylcbiAgICAgICAgLm1hcChsaW5lID0+IGxpbmUudHJpbSgpKVxuICAgICAgICAuZmlsdGVyKGxpbmUgPT4gbGluZS5sZW5ndGggPiA1ICYmIGxpbmUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh3b3JkLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAubWFwKGxpbmUgPT4gdGhpcy5jbGVhblNlbnRlbmNlKGxpbmUpKVxuICAgICAgICAubWFwKGxpbmUgPT4gdGhpcy5ib2xkaWZ5VGFyZ2V0V29yZChsaW5lLCB3b3JkKSlcbiAgICAgICAgLmZpbHRlcihsaW5lID0+IGxpbmUubGVuZ3RoID4gMClcbiAgICAgICAgLnNsaWNlKDAsIGV4YW1wbGVDb3VudClcblxuICAgICAgLy8gSWYgQUkgZ2VuZXJhdGVkIGVub3VnaCBjb250ZXh0dWFsIHNlbnRlbmNlcywgdXNlIHRoZW1cbiAgICAgIGlmIChzZW50ZW5jZXMubGVuZ3RoID49IGV4YW1wbGVDb3VudCkge1xuICAgICAgICByZXR1cm4gc2VudGVuY2VzLmpvaW4oJyB8ICcpXG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgc3VwcGxlbWVudCB3aXRoIGNvbnRleHR1YWwgdGVtcGxhdGUgc2VudGVuY2VzXG4gICAgICBjb25zdCBhZGRpdGlvbmFsTmVlZGVkID0gZXhhbXBsZUNvdW50IC0gc2VudGVuY2VzLmxlbmd0aFxuICAgICAgY29uc3QgdGVtcGxhdGVTZW50ZW5jZXMgPSB0aGlzLmdlbmVyYXRlQ29udGV4dHVhbEV4YW1wbGVzKHdvcmQsIGxldmVsLCBzb3VyY2VUZXh0LCBhZGRpdGlvbmFsTmVlZGVkKVxuXG4gICAgICByZXR1cm4gWy4uLnNlbnRlbmNlcywgLi4udGVtcGxhdGVTZW50ZW5jZXNdLnNsaWNlKDAsIGV4YW1wbGVDb3VudCkuam9pbignIHwgJylcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhg4pqg77iPIEFJIGV4YW1wbGUgZ2VuZXJhdGlvbiBmYWlsZWQgZm9yICR7d29yZH0sIHVzaW5nIGNvbnRleHR1YWwgdGVtcGxhdGVzYClcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGNvbnRleHR1YWwgdGVtcGxhdGUgZXhhbXBsZXNcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlQ29udGV4dHVhbEV4YW1wbGVzKHdvcmQsIGxldmVsLCBzb3VyY2VUZXh0LCBleGFtcGxlQ291bnQpLmpvaW4oJyB8ICcpXG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGxldmVsLXNwZWNpZmljIGd1aWRhbmNlIGZvciBBSSBwcm9tcHRzXG4gIHByaXZhdGUgZ2V0TGV2ZWxHdWlkYW5jZShsZXZlbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBndWlkYW5jZSA9IHtcbiAgICAgICdBMSc6ICdVc2UgdmVyeSBzaW1wbGUgd29yZHMsIHNob3J0IHNlbnRlbmNlcyAoNS04IHdvcmRzKSwgcHJlc2VudCB0ZW5zZS4nLFxuICAgICAgJ0EyJzogJ1VzZSBzaW1wbGUgd29yZHMsIHNob3J0IHNlbnRlbmNlcyAoNi0xMCB3b3JkcyksIGJhc2ljIGdyYW1tYXIuJyxcbiAgICAgICdCMSc6ICdVc2UgY29tbW9uIHdvcmRzLCBtZWRpdW0gc2VudGVuY2VzICg4LTEyIHdvcmRzKSwgY2xlYXIgbWVhbmluZy4nLFxuICAgICAgJ0IyJzogJ1VzZSB2YXJpZWQgdm9jYWJ1bGFyeSwgbG9uZ2VyIHNlbnRlbmNlcyAoMTAtMTUgd29yZHMpLCBjb21wbGV4IGlkZWFzLicsXG4gICAgICAnQzEnOiAnVXNlIHNvcGhpc3RpY2F0ZWQgdm9jYWJ1bGFyeSwgY29tcGxleCBzZW50ZW5jZXMgKDEyKyB3b3JkcyksIG51YW5jZWQgbWVhbmluZy4nXG4gICAgfVxuICAgIHJldHVybiBndWlkYW5jZVtsZXZlbF0gfHwgZ3VpZGFuY2VbJ0IxJ11cbiAgfVxuXG4gIC8vIENsZWFuIHNlbnRlbmNlIGZvcm1hdHRpbmdcbiAgcHJpdmF0ZSBjbGVhblNlbnRlbmNlKHNlbnRlbmNlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzZW50ZW5jZVxuICAgICAgLnJlcGxhY2UoL15cXGQrXFwuP1xccyovLCAnJykgLy8gUmVtb3ZlIG51bWJlcmluZ1xuICAgICAgLnJlcGxhY2UoL14tXFxzKi8sICcnKSAvLyBSZW1vdmUgZGFzaGVzXG4gICAgICAucmVwbGFjZSgvXlxcKlxccyovLCAnJykgLy8gUmVtb3ZlIGFzdGVyaXNrc1xuICAgICAgLnJlcGxhY2UoL17igKJcXHMqLywgJycpIC8vIFJlbW92ZSBidWxsZXQgcG9pbnRzXG4gICAgICAudHJpbSgpXG4gIH1cblxuICAvLyBDbGVhbiBkZWZpbml0aW9uIGZvcm1hdHRpbmdcbiAgcHJpdmF0ZSBjbGVhbkRlZmluaXRpb24oZGVmaW5pdGlvbjogc3RyaW5nLCBsZXZlbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgLnJlcGxhY2UoL15Gb3IgYW4/IFtBLVpdXFxkKyBzdHVkZW50LD9cXHMqL2ksICcnKSAvLyBSZW1vdmUgbGV2ZWwgcHJlZml4ZXNcbiAgICAgIC5yZXBsYWNlKC9eSW4gdGhpcyBjb250ZXh0LD9cXHMqL2ksICcnKSAvLyBSZW1vdmUgY29udGV4dCBwcmVmaXhlc1xuICAgICAgLnJlcGxhY2UoL15IZXJlJ3M/IChhICk/ZGVmaW5pdGlvbi4qPzpcXHMqL2ksICcnKSAvLyBSZW1vdmUgZGVmaW5pdGlvbiBpbnRyb3NcbiAgICAgIC5yZXBsYWNlKC9eXFwqXFwqKC4qPylcXCpcXCovZywgJyQxJykgLy8gUmVtb3ZlIGJvbGQgbWFya2Rvd25cbiAgICAgIC5yZXBsYWNlKC9cXCpcXCooLio/KVxcKlxcKi9nLCAnJDEnKSAvLyBSZW1vdmUgYm9sZCBtYXJrZG93blxuICAgICAgLnRyaW0oKVxuICB9XG5cbiAgLy8gTWFrZSB0YXJnZXQgd29yZCBib2xkIGluIHNlbnRlbmNlXG4gIHByaXZhdGUgYm9sZGlmeVRhcmdldFdvcmQoc2VudGVuY2U6IHN0cmluZywgdGFyZ2V0V29yZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYFxcXFxiJHt0YXJnZXRXb3JkfVxcXFxiYCwgJ2dpJylcbiAgICByZXR1cm4gc2VudGVuY2UucmVwbGFjZShyZWdleCwgYCoqJHt0YXJnZXRXb3JkfSoqYClcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIGNvbnRleHR1YWwgZXhhbXBsZXMgYmFzZWQgb24gc291cmNlIG1hdGVyaWFsXG4gIHByaXZhdGUgZ2VuZXJhdGVDb250ZXh0dWFsRXhhbXBsZXMod29yZDogc3RyaW5nLCBsZXZlbDogc3RyaW5nLCBzb3VyY2VUZXh0OiBzdHJpbmcsIGNvdW50OiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgbG93ZXJXb3JkID0gd29yZC50b0xvd2VyQ2FzZSgpXG4gICAgY29uc3QgY2FwaXRhbGl6ZWRXb3JkID0gdGhpcy5jYXBpdGFsaXplV29yZCh3b3JkKVxuXG4gICAgLy8gRXh0cmFjdCB0aGVtZXMgZnJvbSBzb3VyY2UgdGV4dCBmb3IgY29udGV4dFxuICAgIGNvbnN0IHRoZW1lcyA9IHRoaXMuZXh0cmFjdFRoZW1lc0Zyb21UZXh0KHNvdXJjZVRleHQpXG4gICAgY29uc3QgbWFpblRoZW1lID0gdGhlbWVzWzBdIHx8ICd0aGlzIHRvcGljJ1xuXG4gICAgY29uc3QgY29udGV4dHVhbEV4YW1wbGVzID0ge1xuICAgICAgJ0ExJzogW1xuICAgICAgICBgKioke2NhcGl0YWxpemVkV29yZH0qKiBpcyBpbiB0aGUgbmV3cyB0b2RheS5gLFxuICAgICAgICBgSSByZWFkIGFib3V0ICoqJHtsb3dlcldvcmR9Kiogb25saW5lLmAsXG4gICAgICAgIGAqKiR7Y2FwaXRhbGl6ZWRXb3JkfSoqIGlzIGltcG9ydGFudCBmb3IgJHttYWluVGhlbWV9LmAsXG4gICAgICAgIGBQZW9wbGUgdGFsayBhYm91dCAqKiR7bG93ZXJXb3JkfSoqLmAsXG4gICAgICAgIGAqKiR7Y2FwaXRhbGl6ZWRXb3JkfSoqIGhlbHBzIHdpdGggJHttYWluVGhlbWV9LmBcbiAgICAgIF0sXG4gICAgICAnQTInOiBbXG4gICAgICAgIGAqKiR7Y2FwaXRhbGl6ZWRXb3JkfSoqIHBsYXlzIGEgYmlnIHJvbGUgaW4gJHttYWluVGhlbWV9LmAsXG4gICAgICAgIGBNYW55IHBlb3BsZSBhcmUgaW50ZXJlc3RlZCBpbiAqKiR7bG93ZXJXb3JkfSoqLmAsXG4gICAgICAgIGAqKiR7Y2FwaXRhbGl6ZWRXb3JkfSoqIGFmZmVjdHMgaG93IHdlIHRoaW5rIGFib3V0ICR7bWFpblRoZW1lfS5gLFxuICAgICAgICBgVGhlIG5ld3Mgb2Z0ZW4gbWVudGlvbnMgKioke2xvd2VyV29yZH0qKi5gLFxuICAgICAgICBgKioke2NhcGl0YWxpemVkV29yZH0qKiBpcyBiZWNvbWluZyBtb3JlIGltcG9ydGFudCBpbiAke21haW5UaGVtZX0uYFxuICAgICAgXSxcbiAgICAgICdCMSc6IFtcbiAgICAgICAgYCoqJHtjYXBpdGFsaXplZFdvcmR9KiogaGFzIGNoYW5nZWQgdGhlIHdheSB3ZSBhcHByb2FjaCAke21haW5UaGVtZX0uYCxcbiAgICAgICAgYFVuZGVyc3RhbmRpbmcgKioke2xvd2VyV29yZH0qKiBpcyBjcnVjaWFsIGZvciAke21haW5UaGVtZX0uYCxcbiAgICAgICAgYCoqJHtjYXBpdGFsaXplZFdvcmR9KiogY29udGludWVzIHRvIGluZmx1ZW5jZSAke21haW5UaGVtZX0uYCxcbiAgICAgICAgYFRoZSByb2xlIG9mICoqJHtsb3dlcldvcmR9KiogaW4gJHttYWluVGhlbWV9IGlzIGdyb3dpbmcuYFxuICAgICAgXSxcbiAgICAgICdCMic6IFtcbiAgICAgICAgYCoqJHtjYXBpdGFsaXplZFdvcmR9KiogcmVwcmVzZW50cyBhIHNpZ25pZmljYW50IGRldmVsb3BtZW50IGluICR7bWFpblRoZW1lfS5gLFxuICAgICAgICBgVGhlIGltcGxpY2F0aW9ucyBvZiAqKiR7bG93ZXJXb3JkfSoqIGZvciAke21haW5UaGVtZX0gYXJlIGZhci1yZWFjaGluZy5gLFxuICAgICAgICBgKioke2NhcGl0YWxpemVkV29yZH0qKiBoYXMgdHJhbnNmb3JtZWQgb3VyIHVuZGVyc3RhbmRpbmcgb2YgJHttYWluVGhlbWV9LmBcbiAgICAgIF0sXG4gICAgICAnQzEnOiBbXG4gICAgICAgIGAqKiR7Y2FwaXRhbGl6ZWRXb3JkfSoqIGV4ZW1wbGlmaWVzIHRoZSBjb21wbGV4IGR5bmFtaWNzIHdpdGhpbiAke21haW5UaGVtZX0uYCxcbiAgICAgICAgYFRoZSBtdWx0aWZhY2V0ZWQgbmF0dXJlIG9mICoqJHtsb3dlcldvcmR9KiogcmVxdWlyZXMgbnVhbmNlZCBhbmFseXNpcyBpbiAke21haW5UaGVtZX0uYCxcbiAgICAgICAgYCoqJHtjYXBpdGFsaXplZFdvcmR9KiogcmVwcmVzZW50cyBhIHBhcmFkaWdtYXRpYyBzaGlmdCBpbiBjb250ZW1wb3JhcnkgJHttYWluVGhlbWV9LmBcbiAgICAgIF1cbiAgICB9XG5cbiAgICBjb25zdCBsZXZlbEV4YW1wbGVzID0gY29udGV4dHVhbEV4YW1wbGVzW2xldmVsXSB8fCBjb250ZXh0dWFsRXhhbXBsZXNbJ0IxJ11cbiAgICByZXR1cm4gbGV2ZWxFeGFtcGxlcy5zbGljZSgwLCBjb3VudClcbiAgfVxuXG4gIC8vIEV4dHJhY3QgdGhlbWVzIGZyb20gc291cmNlIHRleHQgZm9yIGNvbnRleHR1YWwgZXhhbXBsZXNcbiAgcHJpdmF0ZSBleHRyYWN0VGhlbWVzRnJvbVRleHQodGV4dDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHRoZW1lcyA9IFtdXG5cbiAgICAvLyBDb21tb24gdGhlbWVzIGJhc2VkIG9uIGtleXdvcmRzXG4gICAgY29uc3QgdGhlbWVLZXl3b3JkcyA9IHtcbiAgICAgICdzcG9ydHMnOiBbJ3RlYW0nLCAnZ2FtZScsICd3aW4nLCAncGxheScsICdtYXRjaCcsICdjb21wZXRpdGlvbicsICd0b3VybmFtZW50JywgJ2N1cCddLFxuICAgICAgJ3RlY2hub2xvZ3knOiBbJ0FJJywgJ2NvbXB1dGVyJywgJ2RpZ2l0YWwnLCAnc29mdHdhcmUnLCAnc3lzdGVtJywgJ2RldmljZScsICdhcnRpZmljaWFsJywgJ2ludGVsbGlnZW5jZSddLFxuICAgICAgJ2Vudmlyb25tZW50JzogWydjbGltYXRlJywgJ25hdHVyZScsICdlYXJ0aCcsICdncmVlbicsICdwb2xsdXRpb24nLCAnZW5lcmd5JywgJ2NoYW5nZSddLFxuICAgICAgJ2hlYWx0aCc6IFsnbWVkaWNhbCcsICdkb2N0b3InLCAndHJlYXRtZW50JywgJ3BhdGllbnQnLCAnbWVkaWNpbmUnLCAnY2FyZScsICdoZWFsdGhjYXJlJ10sXG4gICAgICAnYnVzaW5lc3MnOiBbJ2NvbXBhbnknLCAnbWFya2V0JywgJ2Vjb25vbXknLCAnZmluYW5jZScsICdpbmR1c3RyeScsICd0cmFkZSddLFxuICAgICAgJ2VkdWNhdGlvbic6IFsnc3R1ZGVudCcsICdsZWFybicsICdzY2hvb2wnLCAna25vd2xlZGdlJywgJ3N0dWR5JywgJ3RlYWNoJ11cbiAgICB9XG5cbiAgICBjb25zdCBsb3dlclRleHQgPSB0ZXh0LnRvTG93ZXJDYXNlKClcblxuICAgIGZvciAoY29uc3QgW3RoZW1lLCBrZXl3b3Jkc10gb2YgT2JqZWN0LmVudHJpZXModGhlbWVLZXl3b3JkcykpIHtcbiAgICAgIGNvbnN0IG1hdGNoQ291bnQgPSBrZXl3b3Jkcy5maWx0ZXIoa2V5d29yZCA9PiBsb3dlclRleHQuaW5jbHVkZXMoa2V5d29yZCkpLmxlbmd0aFxuICAgICAgaWYgKG1hdGNoQ291bnQgPj0gMikge1xuICAgICAgICB0aGVtZXMucHVzaCh0aGVtZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhlbWVzLmxlbmd0aCA+IDAgPyB0aGVtZXMgOiBbJ3RoaXMgdG9waWMnXVxuICB9XG5cbiAgLy8gR2VuZXJhdGUgdHJ1bHkgbGV2ZWwtYXBwcm9wcmlhdGUgZXhhbXBsZSBzZW50ZW5jZXNcbiAgcHJpdmF0ZSBnZW5lcmF0ZUxldmVsQXBwcm9wcmlhdGVFeGFtcGxlcyh3b3JkOiBzdHJpbmcsIGxldmVsOiBzdHJpbmcsIGNvdW50OiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgbG93ZXJXb3JkID0gd29yZC50b0xvd2VyQ2FzZSgpXG4gICAgY29uc3QgY2FwaXRhbGl6ZWRXb3JkID0gdGhpcy5jYXBpdGFsaXplV29yZCh3b3JkKVxuXG4gICAgY29uc3QgZXhhbXBsZXMgPSB7XG4gICAgICAnQTEnOiBbXG4gICAgICAgIGAke2NhcGl0YWxpemVkV29yZH0gaXMgZ29vZC5gLFxuICAgICAgICBgSSBsaWtlICR7bG93ZXJXb3JkfS5gLFxuICAgICAgICBgVGhpcyBpcyAke2xvd2VyV29yZH0uYCxcbiAgICAgICAgYCR7Y2FwaXRhbGl6ZWRXb3JkfSBoZWxwcyB1cy5gLFxuICAgICAgICBgV2Ugc2VlICR7bG93ZXJXb3JkfS5gXG4gICAgICBdLFxuICAgICAgJ0EyJzogW1xuICAgICAgICBgJHtjYXBpdGFsaXplZFdvcmR9IGlzIHZlcnkgaW1wb3J0YW50LmAsXG4gICAgICAgIGBJIHRoaW5rICR7bG93ZXJXb3JkfSBpcyBpbnRlcmVzdGluZy5gLFxuICAgICAgICBgTWFueSBwZW9wbGUga25vdyBhYm91dCAke2xvd2VyV29yZH0uYCxcbiAgICAgICAgYCR7Y2FwaXRhbGl6ZWRXb3JkfSBpcyB1c2VmdWwgZm9yIHVzLmAsXG4gICAgICAgIGBXZSBjYW4gbGVhcm4gYWJvdXQgJHtsb3dlcldvcmR9LmBcbiAgICAgIF0sXG4gICAgICAnQjEnOiBbXG4gICAgICAgIGAke2NhcGl0YWxpemVkV29yZH0gcGxheXMgYW4gaW1wb3J0YW50IHJvbGUgdG9kYXkuYCxcbiAgICAgICAgYFBlb3BsZSBhcmUgaW50ZXJlc3RlZCBpbiAke2xvd2VyV29yZH0uYCxcbiAgICAgICAgYCR7Y2FwaXRhbGl6ZWRXb3JkfSBhZmZlY3RzIG91ciBkYWlseSBsaXZlcy5gLFxuICAgICAgICBgV2Ugc2hvdWxkIHVuZGVyc3RhbmQgJHtsb3dlcldvcmR9IGJldHRlci5gXG4gICAgICBdLFxuICAgICAgJ0IyJzogW1xuICAgICAgICBgJHtjYXBpdGFsaXplZFdvcmR9IGhhcyBzaWduaWZpY2FudCBpbXBsaWNhdGlvbnMgZm9yIHNvY2lldHkuYCxcbiAgICAgICAgYFRoZSBpbXBhY3Qgb2YgJHtsb3dlcldvcmR9IGNvbnRpbnVlcyB0byBncm93LmAsXG4gICAgICAgIGBVbmRlcnN0YW5kaW5nICR7bG93ZXJXb3JkfSByZXF1aXJlcyBjYXJlZnVsIGNvbnNpZGVyYXRpb24uYFxuICAgICAgXSxcbiAgICAgICdDMSc6IFtcbiAgICAgICAgYCR7Y2FwaXRhbGl6ZWRXb3JkfSBleGVtcGxpZmllcyBjb250ZW1wb3JhcnkgY2hhbGxlbmdlcy5gLFxuICAgICAgICBgVGhlIGNvbXBsZXhpdHkgb2YgJHtsb3dlcldvcmR9IGRlbWFuZHMgc29waGlzdGljYXRlZCBhbmFseXNpcy5gLFxuICAgICAgICBgJHtjYXBpdGFsaXplZFdvcmR9IHJlcHJlc2VudHMgYSBwYXJhZGlnbSBzaGlmdCBpbiB0aGlua2luZy5gXG4gICAgICBdXG4gICAgfVxuXG4gICAgY29uc3QgbGV2ZWxFeGFtcGxlcyA9IGV4YW1wbGVzW2xldmVsXSB8fCBleGFtcGxlc1snQjEnXVxuICAgIHJldHVybiBsZXZlbEV4YW1wbGVzLnNsaWNlKDAsIGNvdW50KVxuICB9XG5cbiAgLy8gRmFsbGJhY2sgdGVtcGxhdGUtYmFzZWQgZXhhbXBsZSBnZW5lcmF0aW9uXG4gIHByaXZhdGUgZ2VuZXJhdGVUZW1wbGF0ZUV4YW1wbGVzKHdvcmQ6IHN0cmluZywgbGV2ZWw6IHN0cmluZywgc291cmNlVGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBleGFtcGxlQ291bnQgPSB0aGlzLmdldEV4YW1wbGVDb3VudChsZXZlbClcblxuICAgIC8vIFRyeSB0byBmaW5kIHRoZSB3b3JkIGluIHRoZSBzb3VyY2UgdGV4dCBmaXJzdFxuICAgIGNvbnN0IHNlbnRlbmNlcyA9IHNvdXJjZVRleHQuc3BsaXQoL1suIT9dKy8pLmZpbHRlcihzID0+IHMudHJpbSgpLmxlbmd0aCA+IDEwKVxuICAgIGNvbnN0IGNvbnRleHRTZW50ZW5jZSA9IHNlbnRlbmNlcy5maW5kKHMgPT4gcy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHdvcmQudG9Mb3dlckNhc2UoKSkpXG5cbiAgICBjb25zdCBleGFtcGxlcyA9IFtdXG5cbiAgICAvLyBBZGQgY29udGV4dCBzZW50ZW5jZSBpZiBmb3VuZFxuICAgIGlmIChjb250ZXh0U2VudGVuY2UpIHtcbiAgICAgIGV4YW1wbGVzLnB1c2goY29udGV4dFNlbnRlbmNlLnRyaW0oKSlcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBhZGRpdGlvbmFsIGxldmVsLWFwcHJvcHJpYXRlIGV4YW1wbGVzXG4gICAgY29uc3QgYWRkaXRpb25hbEV4YW1wbGVzID0gdGhpcy5nZW5lcmF0ZUFkZGl0aW9uYWxFeGFtcGxlcyh3b3JkLCBsZXZlbCwgZXhhbXBsZUNvdW50IC0gZXhhbXBsZXMubGVuZ3RoKVxuICAgIGV4YW1wbGVzLnB1c2goLi4uYWRkaXRpb25hbEV4YW1wbGVzKVxuXG4gICAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IG51bWJlciBvZiBleGFtcGxlc1xuICAgIHJldHVybiBleGFtcGxlcy5zbGljZSgwLCBleGFtcGxlQ291bnQpLmpvaW4oJyB8ICcpXG4gIH1cblxuICAvLyBHZXQgbnVtYmVyIG9mIGV4YW1wbGVzIGJhc2VkIG9uIENFRlIgbGV2ZWxcbiAgcHJpdmF0ZSBnZXRFeGFtcGxlQ291bnQobGV2ZWw6IHN0cmluZyk6IG51bWJlciB7XG4gICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgY2FzZSAnQTEnOlxuICAgICAgY2FzZSAnQTInOlxuICAgICAgICByZXR1cm4gNVxuICAgICAgY2FzZSAnQjEnOlxuICAgICAgICByZXR1cm4gNFxuICAgICAgY2FzZSAnQjInOlxuICAgICAgY2FzZSAnQzEnOlxuICAgICAgICByZXR1cm4gM1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIDRcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmF0ZSBhZGRpdGlvbmFsIGxldmVsLWFwcHJvcHJpYXRlIGV4YW1wbGUgc2VudGVuY2VzXG4gIHByaXZhdGUgZ2VuZXJhdGVBZGRpdGlvbmFsRXhhbXBsZXMod29yZDogc3RyaW5nLCBsZXZlbDogc3RyaW5nLCBjb3VudDogbnVtYmVyKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGxvd2VyV29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKVxuICAgIGNvbnN0IGNhcGl0YWxpemVkV29yZCA9IHRoaXMuY2FwaXRhbGl6ZVdvcmQod29yZClcblxuICAgIGNvbnN0IGV4YW1wbGVUZW1wbGF0ZXMgPSB7XG4gICAgICAnQTEnOiBbXG4gICAgICAgIGAke2NhcGl0YWxpemVkV29yZH0gaXMgaW1wb3J0YW50LmAsXG4gICAgICAgIGBJIGxpa2UgJHtsb3dlcldvcmR9LmAsXG4gICAgICAgIGBUaGlzIGlzICR7bG93ZXJXb3JkfS5gLFxuICAgICAgICBgJHtjYXBpdGFsaXplZFdvcmR9IGlzIGdvb2QuYCxcbiAgICAgICAgYFdlIHVzZSAke2xvd2VyV29yZH0uYFxuICAgICAgXSxcbiAgICAgICdBMic6IFtcbiAgICAgICAgYCR7Y2FwaXRhbGl6ZWRXb3JkfSBpcyB2ZXJ5IGltcG9ydGFudCBpbiBvdXIgZGFpbHkgbGlmZS5gLFxuICAgICAgICBgSSB0aGluayAke2xvd2VyV29yZH0gaXMgaW50ZXJlc3RpbmcuYCxcbiAgICAgICAgYE1hbnkgcGVvcGxlIHVzZSAke2xvd2VyV29yZH0gdG9kYXkuYCxcbiAgICAgICAgYCR7Y2FwaXRhbGl6ZWRXb3JkfSBoZWxwcyB1cyBhIGxvdC5gLFxuICAgICAgICBgV2UgY2FuIGxlYXJuIGFib3V0ICR7bG93ZXJXb3JkfS5gXG4gICAgICBdLFxuICAgICAgJ0IxJzogW1xuICAgICAgICBgJHtjYXBpdGFsaXplZFdvcmR9IHBsYXlzIGFuIGltcG9ydGFudCByb2xlIGluIG1vZGVybiBzb2NpZXR5LmAsXG4gICAgICAgIGBUaGUgY29uY2VwdCBvZiAke2xvd2VyV29yZH0gaGFzIGV2b2x2ZWQgc2lnbmlmaWNhbnRseS5gLFxuICAgICAgICBgVW5kZXJzdGFuZGluZyAke2xvd2VyV29yZH0gaXMgZXNzZW50aWFsIGZvciBzdHVkZW50cy5gLFxuICAgICAgICBgJHtjYXBpdGFsaXplZFdvcmR9IGNvbnRpbnVlcyB0byBpbmZsdWVuY2Ugb3VyIGRhaWx5IGxpdmVzLmBcbiAgICAgIF0sXG4gICAgICAnQjInOiBbXG4gICAgICAgIGAke2NhcGl0YWxpemVkV29yZH0gcmVwcmVzZW50cyBhIHNpZ25pZmljYW50IGRldmVsb3BtZW50IGluIHRoaXMgZmllbGQuYCxcbiAgICAgICAgYFRoZSBpbXBsaWNhdGlvbnMgb2YgJHtsb3dlcldvcmR9IGV4dGVuZCBiZXlvbmQgaW1tZWRpYXRlIGFwcGxpY2F0aW9ucy5gLFxuICAgICAgICBgRXhwZXJ0cyBjb25zaWRlciAke2xvd2VyV29yZH0gdG8gYmUgYSBjcnVjaWFsIGZhY3RvciBpbiBmdXR1cmUgcHJvZ3Jlc3MuYFxuICAgICAgXSxcbiAgICAgICdDMSc6IFtcbiAgICAgICAgYCR7Y2FwaXRhbGl6ZWRXb3JkfSBleGVtcGxpZmllcyB0aGUgY29tcGxleCBpbnRlcnBsYXkgYmV0d2VlbiBpbm5vdmF0aW9uIGFuZCBwcmFjdGljYWwgYXBwbGljYXRpb24uYCxcbiAgICAgICAgYFRoZSBtdWx0aWZhY2V0ZWQgbmF0dXJlIG9mICR7bG93ZXJXb3JkfSByZXF1aXJlcyBjb21wcmVoZW5zaXZlIGFuYWx5c2lzLmAsXG4gICAgICAgIGBDb250ZW1wb3JhcnkgZGlzY291cnNlIHN1cnJvdW5kaW5nICR7bG93ZXJXb3JkfSByZWZsZWN0cyBicm9hZGVyIHNvY2lldGFsIHRyYW5zZm9ybWF0aW9ucy5gXG4gICAgICBdXG4gICAgfVxuXG4gICAgY29uc3QgdGVtcGxhdGVzID0gZXhhbXBsZVRlbXBsYXRlc1tsZXZlbF0gfHwgZXhhbXBsZVRlbXBsYXRlc1snQjEnXVxuICAgIHJldHVybiB0ZW1wbGF0ZXMuc2xpY2UoMCwgY291bnQpXG4gIH1cblxuICAvLyBTbWFydCByZWFkaW5nIHBhc3NhZ2UgYWRhcHRhdGlvblxuICBwcml2YXRlIGdlbmVyYXRlU21hcnRSZWFkaW5nKHNvdXJjZVRleHQ6IHN0cmluZywgc3R1ZGVudExldmVsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IG1heExlbmd0aCA9IHtcbiAgICAgICdBMSc6IDIwMCxcbiAgICAgICdBMic6IDMwMCxcbiAgICAgICdCMSc6IDQwMCxcbiAgICAgICdCMic6IDUwMCxcbiAgICAgICdDMSc6IDYwMFxuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldExlbmd0aCA9IG1heExlbmd0aFtzdHVkZW50TGV2ZWxdIHx8IDQwMFxuXG4gICAgLy8gU2ltcGxpZnkgc2VudGVuY2VzIGZvciBsb3dlciBsZXZlbHNcbiAgICBpZiAoc3R1ZGVudExldmVsID09PSAnQTEnIHx8IHN0dWRlbnRMZXZlbCA9PT0gJ0EyJykge1xuICAgICAgY29uc3Qgc2VudGVuY2VzID0gc291cmNlVGV4dC5zcGxpdCgvWy4hP10rLylcbiAgICAgIGNvbnN0IHNpbXBsaWZpZWRTZW50ZW5jZXMgPSBzZW50ZW5jZXNcbiAgICAgICAgLmZpbHRlcihzID0+IHMudHJpbSgpLmxlbmd0aCA+IDEwKVxuICAgICAgICAubWFwKHMgPT4gcy50cmltKCkpXG4gICAgICAgIC5zbGljZSgwLCA4KSAvLyBMaW1pdCBudW1iZXIgb2Ygc2VudGVuY2VzXG5cbiAgICAgIHJldHVybiBzaW1wbGlmaWVkU2VudGVuY2VzLmpvaW4oJy4gJykuc3Vic3RyaW5nKDAsIHRhcmdldExlbmd0aClcbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlVGV4dC5zdWJzdHJpbmcoMCwgdGFyZ2V0TGVuZ3RoKVxuICB9XG5cbiAgLy8gU21hcnQgY29tcHJlaGVuc2lvbiBxdWVzdGlvbnNcbiAgcHJpdmF0ZSBnZW5lcmF0ZVNtYXJ0Q29tcHJlaGVuc2lvbih0b3BpY3M6IHN0cmluZ1tdLCBzdHVkZW50TGV2ZWw6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCB0b3BpYyA9IHRvcGljc1swXSB8fCAndGhlIGNvbnRlbnQnXG5cbiAgICBjb25zdCBsZXZlbFF1ZXN0aW9ucyA9IHtcbiAgICAgICdBMSc6IFtcbiAgICAgICAgYFdoYXQgaXMgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBcIldoYXQgaXMgdGhlIG1haW4gaWRlYT9cIixcbiAgICAgICAgXCJJcyB0aGlzIGluZm9ybWF0aW9uIG5ldyB0byB5b3U/XCJcbiAgICAgIF0sXG4gICAgICAnQTInOiBbXG4gICAgICAgIGBXaGF0IGRvZXMgdGhlIHRleHQgc2F5IGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YCxcbiAgICAgICAgXCJXaGF0IGFyZSB0aGUgbWFpbiBwb2ludHM/XCIsXG4gICAgICAgIFwiRG8geW91IGFncmVlIHdpdGggdGhlIGluZm9ybWF0aW9uP1wiXG4gICAgICBdLFxuICAgICAgJ0IxJzogW1xuICAgICAgICBgSG93IGRvZXMgdGhlIHRleHQgZXhwbGFpbiAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICAgIFwiV2hhdCBzdXBwb3J0aW5nIGRldGFpbHMgYXJlIHByb3ZpZGVkP1wiLFxuICAgICAgICBcIldoYXQgY29uY2x1c2lvbnMgY2FuIHlvdSBkcmF3P1wiLFxuICAgICAgICBcIkhvdyBkb2VzIHRoaXMgcmVsYXRlIHRvIHlvdXIgZXhwZXJpZW5jZT9cIlxuICAgICAgXSxcbiAgICAgICdCMic6IFtcbiAgICAgICAgYFdoYXQgaXMgdGhlIGF1dGhvcidzIHBlcnNwZWN0aXZlIG9uICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YCxcbiAgICAgICAgXCJXaGF0IGV2aWRlbmNlIHN1cHBvcnRzIHRoZSBtYWluIGFyZ3VtZW50cz9cIixcbiAgICAgICAgXCJXaGF0IGFyZSB0aGUgaW1wbGljYXRpb25zIG9mIHRoaXMgaW5mb3JtYXRpb24/XCIsXG4gICAgICAgIFwiSG93IG1pZ2h0IHRoaXMgYWZmZWN0IGRpZmZlcmVudCBncm91cHMgb2YgcGVvcGxlP1wiXG4gICAgICBdLFxuICAgICAgJ0MxJzogW1xuICAgICAgICBgSG93IGRvZXMgdGhlIGF1dGhvcidzIHRyZWF0bWVudCBvZiAke3RvcGljLnRvTG93ZXJDYXNlKCl9IHJlZmxlY3QgYnJvYWRlciB0aGVtZXM/YCxcbiAgICAgICAgXCJXaGF0IHVuZGVybHlpbmcgYXNzdW1wdGlvbnMgY2FuIHlvdSBpZGVudGlmeT9cIixcbiAgICAgICAgXCJIb3cgbWlnaHQgdGhpcyBpbmZvcm1hdGlvbiBiZSBpbnRlcnByZXRlZCBkaWZmZXJlbnRseSBpbiB2YXJpb3VzIGNvbnRleHRzP1wiLFxuICAgICAgICBcIldoYXQgYXJlIHRoZSBwb3RlbnRpYWwgbG9uZy10ZXJtIGNvbnNlcXVlbmNlcyBkaXNjdXNzZWQ/XCJcbiAgICAgIF1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWxRdWVzdGlvbnNbc3R1ZGVudExldmVsXSB8fCBsZXZlbFF1ZXN0aW9uc1snQjEnXVxuICB9XG5cbiAgLy8gU21hcnQgZGlzY3Vzc2lvbiBxdWVzdGlvbnNcbiAgcHJpdmF0ZSBnZW5lcmF0ZVNtYXJ0RGlzY3Vzc2lvbih0b3BpY3M6IHN0cmluZ1tdLCBsZXNzb25UeXBlOiBzdHJpbmcsIHN0dWRlbnRMZXZlbDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHRvcGljID0gdG9waWNzWzBdIHx8ICd0aGlzIHRvcGljJ1xuICAgIGNvbnN0IHNlY29uZFRvcGljID0gdG9waWNzWzFdIHx8ICd0ZWNobm9sb2d5J1xuXG4gICAgY29uc3QgbGV2ZWxRdWVzdGlvbnMgPSB7XG4gICAgICAnQTEnOiBbXG4gICAgICAgIGBEbyB5b3UgbGlrZSAke3RvcGljLnRvTG93ZXJDYXNlKCl9PyBXaHk/YCxcbiAgICAgICAgYElzICR7dG9waWMudG9Mb3dlckNhc2UoKX0gZ29vZCBvciBiYWQ/YCxcbiAgICAgICAgYFdvdWxkIHlvdSByZWNvbW1lbmQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSB0byBmcmllbmRzP2BcbiAgICAgIF0sXG4gICAgICAnQTInOiBbXG4gICAgICAgIGBXaGF0IGlzIHlvdXIgb3BpbmlvbiBhYm91dCAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICAgIGBIb3cgZG8geW91IHVzZSAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGluIHlvdXIgbGlmZT9gLFxuICAgICAgICBgV2hhdCBwcm9ibGVtcyBjYW4gJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSBjYXVzZT9gXG4gICAgICBdLFxuICAgICAgJ0IxJzogW1xuICAgICAgICBgV2hhdCBhcmUgdGhlIGFkdmFudGFnZXMgYW5kIGRpc2FkdmFudGFnZXMgb2YgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSG93IGhhcyAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGNoYW5nZWQgb3ZlciB0aW1lP2AsXG4gICAgICAgIGBXaGF0IHdvdWxkIGhhcHBlbiBpZiAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGRpZG4ndCBleGlzdD9gXG4gICAgICBdLFxuICAgICAgJ0IyJzogW1xuICAgICAgICBgSG93IG1pZ2h0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0gaW1wYWN0IHNvY2lldHkgaW4gdGhlIG5leHQgZGVjYWRlP2AsXG4gICAgICAgIGBXaGF0IGV0aGljYWwgY29uc2lkZXJhdGlvbnMgc3Vycm91bmQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSG93IGRvZXMgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSBkaWZmZXIgYWNyb3NzIGN1bHR1cmVzP2BcbiAgICAgIF0sXG4gICAgICAnQzEnOiBbXG4gICAgICAgIGBXaGF0IGFyZSB0aGUgYnJvYWRlciBzb2NpZXRhbCBpbXBsaWNhdGlvbnMgb2YgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSG93IG1pZ2h0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0gcmVzaGFwZSBvdXIgdW5kZXJzdGFuZGluZyBvZiAke3NlY29uZFRvcGljLnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICAgIGBXaGF0IHJvbGUgc2hvdWxkIHJlZ3VsYXRpb24gcGxheSBpbiAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2BcbiAgICAgIF1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWxRdWVzdGlvbnNbc3R1ZGVudExldmVsXSB8fCBsZXZlbFF1ZXN0aW9uc1snQjEnXVxuICB9XG5cbiAgLy8gU21hcnQgZ3JhbW1hciBmb2N1c1xuICBwcml2YXRlIGdlbmVyYXRlU21hcnRHcmFtbWFyKHN0dWRlbnRMZXZlbDogc3RyaW5nLCBzb3VyY2VUZXh0OiBzdHJpbmcpIHtcbiAgICBjb25zdCBncmFtbWFyRm9jdXMgPSB7XG4gICAgICAnQTEnOiB7XG4gICAgICAgIGZvY3VzOiAnUHJlc2VudCBTaW1wbGUnLFxuICAgICAgICBleGFtcGxlczogWydJdCBpcyBlZmZpY2llbnQuJywgJ1RoaXMgd29ya3Mgd2VsbC4nLCAnUGVvcGxlIHVzZSB0ZWNobm9sb2d5LiddLFxuICAgICAgICBleGVyY2lzZTogWydJdCBfX19fXyAoYmUpIHZlcnkgdXNlZnVsLicsICdUZWNobm9sb2d5IF9fX19fIChoZWxwKSBwZW9wbGUuJywgJ1RoaXMgX19fX18gKHdvcmspIG9uIHBob25lcy4nXVxuICAgICAgfSxcbiAgICAgICdBMic6IHtcbiAgICAgICAgZm9jdXM6ICdQcmVzZW50IENvbnRpbnVvdXMgYW5kIFNpbXBsZScsXG4gICAgICAgIGV4YW1wbGVzOiBbJ0l0IGlzIHdvcmtpbmcgb24geW91ciBkZXZpY2UuJywgJ1Blb3BsZSBhcmUgdXNpbmcgdGhpcyB0ZWNobm9sb2d5LicsICdJdCBoZWxwcyB3aXRoIHByaXZhY3kuJ10sXG4gICAgICAgIGV4ZXJjaXNlOiBbJ0l0IF9fX19fICh3b3JrKSByaWdodCBub3cuJywgJ1Blb3BsZSBfX19fXyAodXNlKSBpdCBldmVyeSBkYXkuJywgJ1RoaXMgX19fX18gKGhlbHApIHdpdGggc2VjdXJpdHkuJ11cbiAgICAgIH0sXG4gICAgICAnQjEnOiB7XG4gICAgICAgIGZvY3VzOiAnUHJlc2VudCBQZXJmZWN0JyxcbiAgICAgICAgZXhhbXBsZXM6IFsnVGVjaG5vbG9neSBoYXMgaW1wcm92ZWQgc2lnbmlmaWNhbnRseS4nLCAnSXQgaGFzIGJlY29tZSBtb3JlIGVmZmljaWVudC4nLCAnVXNlcnMgaGF2ZSBleHBlcmllbmNlZCBiZXR0ZXIgcHJpdmFjeS4nXSxcbiAgICAgICAgZXhlcmNpc2U6IFsnVGVjaG5vbG9neSBfX19fXyAoaW1wcm92ZSkgYSBsb3QuJywgJ0l0IF9fX19fIChiZWNvbWUpIHZlcnkgcG9wdWxhci4nLCAnUGVvcGxlIF9fX19fIChzdGFydCkgdXNpbmcgaXQgbW9yZS4nXVxuICAgICAgfSxcbiAgICAgICdCMic6IHtcbiAgICAgICAgZm9jdXM6ICdQYXNzaXZlIFZvaWNlJyxcbiAgICAgICAgZXhhbXBsZXM6IFsnSXQgaXMgZGVzaWduZWQgZm9yIG1vYmlsZSBkZXZpY2VzLicsICdQcml2YWN5IGlzIGVuaGFuY2VkIGJ5IHRoaXMgdGVjaG5vbG9neS4nLCAnRGF0YSBpcyBwcm9jZXNzZWQgbG9jYWxseS4nXSxcbiAgICAgICAgZXhlcmNpc2U6IFsnSXQgX19fX18gKGRlc2lnbikgZm9yIHBob25lcy4nLCAnUHJpdmFjeSBfX19fXyAoaW1wcm92ZSkgc2lnbmlmaWNhbnRseS4nLCAnSW5mb3JtYXRpb24gX19fX18gKHByb2Nlc3MpIHNhZmVseS4nXVxuICAgICAgfSxcbiAgICAgICdDMSc6IHtcbiAgICAgICAgZm9jdXM6ICdDb21wbGV4IFNlbnRlbmNlIFN0cnVjdHVyZXMnLFxuICAgICAgICBleGFtcGxlczogWydIYXZpbmcgYmVlbiBkZXNpZ25lZCBmb3IgZWZmaWNpZW5jeSwgaXQgb3BlcmF0ZXMgc2VhbWxlc3NseS4nLCAnVGhlIHRlY2hub2xvZ3ksIHdoaWNoIHByaW9yaXRpemVzIHByaXZhY3ksIGhhcyBnYWluZWQgcG9wdWxhcml0eS4nXSxcbiAgICAgICAgZXhlcmNpc2U6IFsnX19fX18gKGRlc2lnbikgZm9yIG1vYmlsZSB1c2UsIGl0IHdvcmtzIG9mZmxpbmUuJywgJ1RoZSBzeXN0ZW0sIF9fX19fIChmb2N1cykgb24gcHJpdmFjeSwgYXBwZWFscyB0byB1c2Vycy4nXVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBncmFtbWFyRm9jdXNbc3R1ZGVudExldmVsXSB8fCBncmFtbWFyRm9jdXNbJ0IxJ11cbiAgfVxuXG4gIC8vIFNtYXJ0IHByb251bmNpYXRpb25cbiAgcHJpdmF0ZSBnZW5lcmF0ZVNtYXJ0UHJvbnVuY2lhdGlvbih2b2NhYnVsYXJ5OiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IHdvcmQgPSB2b2NhYnVsYXJ5LmZpbmQodyA9PiB3Lmxlbmd0aCA+IDYpIHx8IHZvY2FidWxhcnlbMF0gfHwgJ3RlY2hub2xvZ3knXG5cbiAgICBjb25zdCBwcm9udW5jaWF0aW9ucyA9IHtcbiAgICAgICd0ZWNobm9sb2d5JzogJy90ZWvLiG7JkmzJmWTKkmkvJyxcbiAgICAgICdlZmZpY2llbnQnOiAnL8mqy4hmyarKg8mZbnQvJyxcbiAgICAgICdwcml2YWN5JzogJy/LiHByYcmqdsmZc2kvJyxcbiAgICAgICdwcm9jZXNzaW5nJzogJy/LiHByyZnKinNlc8mqxYsvJyxcbiAgICAgICdkZXZpY2UnOiAnL2TJqsuIdmHJqnMvJyxcbiAgICAgICdhcnRpZmljaWFsJzogJy/LjMmRy5B0yarLiGbJqsqDyZlsLycsXG4gICAgICAnaW50ZWxsaWdlbmNlJzogJy/Jqm7LiHRlbMmqZMqSyZlucy8nLFxuICAgICAgJ2NvbXBhY3QnOiAnL2vJmW3LiHDDpmt0LycsXG4gICAgICAndmVyc2lvbic6ICcvy4h2yZzLkMqDyZluLycsXG4gICAgICAnZmFtaWx5JzogJy/LiGbDpm3JmWxpLycsXG4gICAgICAnbmFubyc6ICcvy4huw6Zub8qKLycsXG4gICAgICAnZ2VtaW5pJzogJy/LiGTKkmVtyapuYcmqLydcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgd29yZDogd29yZCxcbiAgICAgIGlwYTogcHJvbnVuY2lhdGlvbnNbd29yZC50b0xvd2VyQ2FzZSgpXSB8fCBgL8uId8mcy5ByZC9gLFxuICAgICAgcHJhY3RpY2U6IGBQcmFjdGljZSBzYXlpbmcgXCIke3dvcmR9XCIgaW4gdGhpcyBzZW50ZW5jZTogVGhpcyAke3dvcmR9IGlzIHZlcnkgdXNlZnVsLmBcbiAgICB9XG4gIH1cblxuICAvLyBTbWFydCB3cmFwLXVwIHF1ZXN0aW9uc1xuICBwcml2YXRlIGdlbmVyYXRlU21hcnRXcmFwdXAodG9waWNzOiBzdHJpbmdbXSwgc3R1ZGVudExldmVsOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgdG9waWMgPSB0b3BpY3NbMF0gfHwgJ3RoaXMgdG9waWMnXG5cbiAgICByZXR1cm4gW1xuICAgICAgYFdoYXQgbmV3IHZvY2FidWxhcnkgZGlkIHlvdSBsZWFybiBhYm91dCAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICBgV2hpY2ggY29uY2VwdHMgYWJvdXQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSBuZWVkIG1vcmUgcHJhY3RpY2U/YCxcbiAgICAgIFwiSG93IHdpbGwgeW91IHVzZSB0aGlzIGtub3dsZWRnZSBpbiByZWFsIHNpdHVhdGlvbnM/XCIsXG4gICAgICBcIldoYXQgcXVlc3Rpb25zIGRvIHlvdSBzdGlsbCBoYXZlIGFib3V0IHRoaXMgY29udGVudD9cIlxuICAgIF1cbiAgfVxuXG4gIC8vIEhlbHBlciBtZXRob2QgdG8gZGV0ZXJtaW5lIHNvdXJjZSBjb3VudHJ5IGZyb20gZG9tYWluXG4gIHByaXZhdGUgZGV0ZXJtaW5lU291cmNlQ291bnRyeShkb21haW46IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgY291bnRyeU1hcCA9IHtcbiAgICAgICdiYmMuY29tJzogJ1VuaXRlZCBLaW5nZG9tJyxcbiAgICAgICdiYmMuY28udWsnOiAnVW5pdGVkIEtpbmdkb20nLFxuICAgICAgJ2Nubi5jb20nOiAnVW5pdGVkIFN0YXRlcycsXG4gICAgICAnbnl0aW1lcy5jb20nOiAnVW5pdGVkIFN0YXRlcycsXG4gICAgICAndGhlZ3VhcmRpYW4uY29tJzogJ1VuaXRlZCBLaW5nZG9tJyxcbiAgICAgICd3YXNoaW5ndG9ucG9zdC5jb20nOiAnVW5pdGVkIFN0YXRlcycsXG4gICAgICAncmV1dGVycy5jb20nOiAnSW50ZXJuYXRpb25hbCcsXG4gICAgICAnYXAub3JnJzogJ1VuaXRlZCBTdGF0ZXMnLFxuICAgICAgJ25wci5vcmcnOiAnVW5pdGVkIFN0YXRlcycsXG4gICAgICAnYWJjLm5ldC5hdSc6ICdBdXN0cmFsaWEnLFxuICAgICAgJ2NiYy5jYSc6ICdDYW5hZGEnLFxuICAgIH1cblxuICAgIGZvciAoY29uc3QgW2RvbWFpbktleSwgY291bnRyeV0gb2YgT2JqZWN0LmVudHJpZXMoY291bnRyeU1hcCkpIHtcbiAgICAgIGlmIChkb21haW4uaW5jbHVkZXMoZG9tYWluS2V5KSkge1xuICAgICAgICByZXR1cm4gY291bnRyeVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnSW50ZXJuYXRpb25hbCdcbiAgfVxuXG4gIC8vIEZhbGxiYWNrIHdhcm0tdXAgcXVlc3Rpb24gZ2VuZXJhdG9yXG4gIHByaXZhdGUgZ2V0RmFsbGJhY2tXYXJtdXBRdWVzdGlvbihsZXZlbDogc3RyaW5nLCBjb250ZW50QW5hbHlzaXM6IGFueSwgcXVlc3Rpb25JbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCB0b3BpYyA9IGNvbnRlbnRBbmFseXNpcy50b3BpY3NbMF0gfHwgJ3RoaXMgdG9waWMnXG4gICAgY29uc3QgY29udGVudFR5cGUgPSBjb250ZW50QW5hbHlzaXMuY29udGVudFR5cGVcblxuICAgIGNvbnN0IGZhbGxiYWNrUXVlc3Rpb25zID0ge1xuICAgICAgJ0ExJzogW1xuICAgICAgICBgRG8geW91IGtub3cgYWJvdXQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSXMgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSBpbXBvcnRhbnQgaW4geW91ciBjb3VudHJ5P2AsXG4gICAgICAgIGBEbyB5b3UgbGlrZSB0byByZWFkIGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YFxuICAgICAgXSxcbiAgICAgICdBMic6IFtcbiAgICAgICAgYEhhdmUgeW91IGhlYXJkIGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0gYmVmb3JlP2AsXG4gICAgICAgIGBXaGF0IGRvIHlvdSBrbm93IGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YCxcbiAgICAgICAgYElzICR7dG9waWMudG9Mb3dlckNhc2UoKX0gZGlmZmVyZW50IGluIHlvdXIgY291bnRyeT9gXG4gICAgICBdLFxuICAgICAgJ0IxJzogW1xuICAgICAgICBgV2hhdCBkbyB5b3UgdGhpbmsgYWJvdXQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSG93IGlzICR7dG9waWMudG9Mb3dlckNhc2UoKX0gaW1wb3J0YW50IGluIHlvdXIgZGFpbHkgbGlmZT9gLFxuICAgICAgICBgV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBrbm93IGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YFxuICAgICAgXSxcbiAgICAgICdCMic6IFtcbiAgICAgICAgYFdoYXQgYXJlIHlvdXIgdGhvdWdodHMgb24gJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSG93IG1pZ2h0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0gYWZmZWN0IHBlb3BsZSBpbiBkaWZmZXJlbnQgY291bnRyaWVzP2AsXG4gICAgICAgIGBXaGF0IHF1ZXN0aW9ucyB3b3VsZCB5b3UgYXNrIGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YFxuICAgICAgXSxcbiAgICAgICdDMSc6IFtcbiAgICAgICAgYEhvdyBkbyBjdWx0dXJhbCBwZXJzcGVjdGl2ZXMgaW5mbHVlbmNlIGF0dGl0dWRlcyB0b3dhcmQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgV2hhdCBhcmUgdGhlIGJyb2FkZXIgaW1wbGljYXRpb25zIG9mICR7dG9waWMudG9Mb3dlckNhc2UoKX0gaW4gbW9kZXJuIHNvY2lldHk/YCxcbiAgICAgICAgYEhvdyBtaWdodCAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGV2b2x2ZSBpbiB0aGUgY29taW5nIHllYXJzP2BcbiAgICAgIF1cbiAgICB9XG5cbiAgICBjb25zdCBsZXZlbFF1ZXN0aW9ucyA9IGZhbGxiYWNrUXVlc3Rpb25zW2xldmVsXSB8fCBmYWxsYmFja1F1ZXN0aW9uc1snQjEnXVxuICAgIHJldHVybiBsZXZlbFF1ZXN0aW9uc1txdWVzdGlvbkluZGV4XSB8fCBsZXZlbFF1ZXN0aW9uc1swXVxuICB9XG5cbiAgLy8gQ29udGV4dHVhbCB3YXJtLXVwIGZhbGxiYWNrIHdoZW4gQUkgZmFpbHNcbiAgcHJpdmF0ZSBnZXRDb250ZXh0dWFsV2FybXVwRmFsbGJhY2sobGV2ZWw6IHN0cmluZywgY29udGVudEFuYWx5c2lzOiBhbnksIG1ldGFkYXRhPzogYW55KTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHRvcGljID0gY29udGVudEFuYWx5c2lzLnRvcGljc1swXSB8fCAndGhpcyB0b3BpYydcbiAgICBjb25zdCBzb3VyY2VDb3VudHJ5ID0gY29udGVudEFuYWx5c2lzLnNvdXJjZUNvdW50cnkgfHwgJ3RoaXMgY291bnRyeSdcbiAgICBjb25zdCB0aXRsZSA9IG1ldGFkYXRhPy50aXRsZSB8fCAndGhpcyBjb250ZW50J1xuXG4gICAgY29uc3QgZmFsbGJhY2tTZXRzID0ge1xuICAgICAgJ0ExJzogW1xuICAgICAgICBgRG8geW91IGtub3cgYWJvdXQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSXMgdGhpcyB0b3BpYyBjb21tb24gaW4geW91ciBjb3VudHJ5P2AsXG4gICAgICAgIGBEbyB5b3Ugd2FudCB0byBsZWFybiBhYm91dCAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2BcbiAgICAgIF0sXG4gICAgICAnQTInOiBbXG4gICAgICAgIGBIYXZlIHlvdSBleHBlcmllbmNlZCAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGJlZm9yZT9gLFxuICAgICAgICBgV2hhdCBpcyAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGxpa2UgaW4geW91ciBjb3VudHJ5P2AsXG4gICAgICAgIGBXaHkgaXMgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSBpbnRlcmVzdGluZyB0byB5b3U/YFxuICAgICAgXSxcbiAgICAgICdCMSc6IFtcbiAgICAgICAgYFdoYXQgZG8geW91IHRoaW5rIGFib3V0ICR7dG9waWMudG9Mb3dlckNhc2UoKX0/YCxcbiAgICAgICAgYEhvdyBpcyAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGRpZmZlcmVudCBpbiB5b3VyIGNvdW50cnkgY29tcGFyZWQgdG8gJHtzb3VyY2VDb3VudHJ5fT9gLFxuICAgICAgICBgV2hhdCB3b3VsZCB5b3UgZXhwZWN0IHRvIGxlYXJuIGZyb20gdGhpcyAke2NvbnRlbnRBbmFseXNpcy5jb250ZW50VHlwZX0/YFxuICAgICAgXSxcbiAgICAgICdCMic6IFtcbiAgICAgICAgYFdoYXQgYXJlIHlvdXIgdGhvdWdodHMgb24gaG93ICR7dG9waWMudG9Mb3dlckNhc2UoKX0gaXMgcHJlc2VudGVkIGluICR7c291cmNlQ291bnRyeX0gbWVkaWE/YCxcbiAgICAgICAgYFdoYXQgY2hhbGxlbmdlcyBkbyB5b3UgdGhpbmsgcGVvcGxlIGZhY2Ugd2l0aCAke3RvcGljLnRvTG93ZXJDYXNlKCl9P2AsXG4gICAgICAgIGBIb3cgbWlnaHQgeW91ciBwZXJzcGVjdGl2ZSBvbiAke3RvcGljLnRvTG93ZXJDYXNlKCl9IGRpZmZlciBmcm9tIHRoZSBhdXRob3Incz9gXG4gICAgICBdLFxuICAgICAgJ0MxJzogW1xuICAgICAgICBgSG93IGRvIGN1bHR1cmFsIGF0dGl0dWRlcyB0b3dhcmQgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSB2YXJ5IGJldHdlZW4gJHtzb3VyY2VDb3VudHJ5fSBhbmQgeW91ciBjb3VudHJ5P2AsXG4gICAgICAgIGBXaGF0IGFyZSB0aGUgYnJvYWRlciBzb2NpZXRhbCBpbXBsaWNhdGlvbnMgb2YgJHt0b3BpYy50b0xvd2VyQ2FzZSgpfT9gLFxuICAgICAgICBgSG93IG1pZ2h0IHRoZSBwZXJzcGVjdGl2ZSBpbiB0aGlzICR7Y29udGVudEFuYWx5c2lzLmNvbnRlbnRUeXBlfSByZWZsZWN0ICR7c291cmNlQ291bnRyeX0gdmFsdWVzP2BcbiAgICAgIF1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsbGJhY2tTZXRzW2xldmVsXSB8fCBmYWxsYmFja1NldHNbJ0IxJ11cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbGVzc29uQUlTZXJ2ZXJHZW5lcmF0b3IgPSBuZXcgTGVzc29uQUlTZXJ2ZXJHZW5lcmF0b3IoKVxuIl0sIm5hbWVzIjpbImNyZWF0ZUdvb2dsZUFJU2VydmVyU2VydmljZSIsIkxlc3NvbkFJU2VydmVyR2VuZXJhdG9yIiwiZ2V0R29vZ2xlQUkiLCJnb29nbGVBSSIsImdlbmVyYXRlTGVzc29uIiwicGFyYW1zIiwic291cmNlVGV4dCIsImxlc3NvblR5cGUiLCJzdHVkZW50TGV2ZWwiLCJ0YXJnZXRMYW5ndWFnZSIsInNvdXJjZVVybCIsImNvbnRlbnRNZXRhZGF0YSIsInN0cnVjdHVyZWRDb250ZW50Iiwid29yZENvdW50IiwicmVhZGluZ1RpbWUiLCJjb25zb2xlIiwibG9nIiwidGV4dExlbmd0aCIsImxlbmd0aCIsImhhc01ldGFkYXRhIiwiaGFzU3RydWN0dXJlZENvbnRlbnQiLCJsZXNzb25TdHJ1Y3R1cmUiLCJnZW5lcmF0ZU1pbmltYWxBSUxlc3NvbiIsIk9iamVjdCIsImtleXMiLCJmaW5hbExlc3NvbiIsInNlY3Rpb25zIiwic2VjdGlvbnNDb3VudCIsIndhcm11cENvdW50Iiwid2FybXVwIiwidm9jYWJ1bGFyeUNvdW50Iiwidm9jYWJ1bGFyeSIsImVycm9yIiwiZ2VuZXJhdGVTbWFydFRlbXBsYXRlRmFsbGJhY2siLCJtZXRhZGF0YSIsIndhcm11cFF1ZXN0aW9ucyIsImdlbmVyYXRlTWluaW1hbFdhcm11cCIsImdlbmVyYXRlTWluaW1hbFZvY2FidWxhcnkiLCJjb21wcmVoZW5zaW9uUXVlc3Rpb25zIiwiZ2VuZXJhdGVNaW5pbWFsQ29tcHJlaGVuc2lvbiIsImFkZFdhcm11cEluc3RydWN0aW9ucyIsInJlYWRpbmciLCJnZW5lcmF0ZVNtYXJ0UmVhZGluZyIsImNvbXByZWhlbnNpb24iLCJhZGRDb21wcmVoZW5zaW9uSW5zdHJ1Y3Rpb25zIiwiZGlzY3Vzc2lvbiIsImFkZERpc2N1c3Npb25JbnN0cnVjdGlvbnMiLCJnZW5lcmF0ZVNtYXJ0RGlzY3Vzc2lvbiIsImV4dHJhY3RCZXR0ZXJUb3BpY3MiLCJncmFtbWFyIiwiZ2VuZXJhdGVTbWFydEdyYW1tYXIiLCJwcm9udW5jaWF0aW9uIiwiZ2VuZXJhdGVTbWFydFByb251bmNpYXRpb24iLCJtYXAiLCJ2Iiwid29yZCIsIndyYXB1cCIsImFkZFdyYXB1cEluc3RydWN0aW9ucyIsImdlbmVyYXRlU21hcnRXcmFwdXAiLCJ0b3BpY3MiLCJtYWluVG9waWMiLCJwcm9tcHQiLCJyZXNwb25zZSIsInF1ZXN0aW9ucyIsInNwbGl0IiwibGluZSIsInRyaW0iLCJmaWx0ZXIiLCJlbmRzV2l0aCIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJyZXBsYWNlIiwic2xpY2UiLCJnZW5lcmF0ZVNtYXJ0V2FybXVwUXVlc3Rpb25zIiwiaW5zdHJ1Y3Rpb24iLCJ0ZXh0IiwiY29tcG91bmRQYXR0ZXJucyIsInBhdHRlcm4iLCJtYXRjaGVzIiwibWF0Y2giLCJwdXNoIiwibSIsIndvcmRzIiwiY29tbW9uV29yZHMiLCJmb3VuZFdvcmRzIiwidW5pcXVlV29yZHMiLCJBcnJheSIsImZyb20iLCJTZXQiLCJjYXBpdGFsaXplZFdvcmQiLCJjYXBpdGFsaXplV29yZCIsImRlZmluaXRpb25Qcm9tcHQiLCJzdWJzdHJpbmciLCJyYXdNZWFuaW5nIiwibWVhbmluZyIsImNsZWFuRGVmaW5pdGlvbiIsImV4YW1wbGVzIiwiZ2VuZXJhdGVBSUV4YW1wbGVTZW50ZW5jZXMiLCJleGFtcGxlIiwiZ2VuZXJhdGVDb250ZXh0dWFsV29yZE1lYW5pbmciLCJzaG9ydFRleHQiLCJnZW5lcmF0ZVNtYXJ0Q29tcHJlaGVuc2lvbiIsImV4dHJhY3RWb2NhYnVsYXJ5RnJvbVRleHQiLCJnZW5lcmF0ZVNtYXJ0Vm9jYWJ1bGFyeSIsImFuYWx5emVDb250ZW50Q29udGV4dE5vQUkiLCJhbmFseXNpcyIsImNvbnRlbnRUeXBlIiwiZG9tYWluIiwiY29tcGxleGl0eSIsImtleVZvY2FidWxhcnkiLCJjdWx0dXJhbENvbnRleHQiLCJsZWFybmluZ09iamVjdGl2ZXMiLCJkaWZmaWN1bHR5IiwidGl0bGUiLCJzb3VyY2VDb3VudHJ5IiwiZGV0ZXJtaW5lU291cmNlQ291bnRyeSIsInNlbnRlbmNlcyIsInMiLCJhdmdTZW50ZW5jZUxlbmd0aCIsInJlZHVjZSIsInN1bSIsImNvbXBsZXhXb3JkcyIsInRvdGFsV29yZHMiLCJleHRyYWN0VG9waWNzRnJvbVRleHQiLCJoZWFkaW5ncyIsImRldGVybWluZUN1bHR1cmFsQ29udGV4dCIsImdlbmVyYXRlTGVhcm5pbmdPYmplY3RpdmVzIiwiYW5hbHl6ZUNvbnRlbnRDb250ZXh0IiwiY3JlYXRlQ29udGV4dHVhbFN1bW1hcnkiLCJjb250ZW50QW5hbHlzaXMiLCJzdW1tYXJ5UHJvbXB0Iiwic3VtbWFyeSIsInRlbXBlcmF0dXJlIiwibWF4VG9rZW5zIiwid2FybiIsIm1lc3NhZ2UiLCJ0cnVuY2F0ZWQiLCJnZW5lcmF0ZUNvbnRleHR1YWxXYXJtdXBRdWVzdGlvbnMiLCJjb250ZW50IiwibGV2ZWxJbnN0cnVjdGlvbnMiLCJ0b3BpYyIsIndhcm11cFByb21wdCIsInBhcnNlTGlzdEZyb21UZXh0IiwiZmFsbGJhY2tRdWVzdGlvbiIsImdldEZhbGxiYWNrV2FybXVwUXVlc3Rpb24iLCJmYWxsYmFja1F1ZXN0aW9ucyIsImdldENvbnRleHR1YWxXYXJtdXBGYWxsYmFjayIsImdlbmVyYXRlQ29udGV4dHVhbExlc3NvblN0cnVjdHVyZSIsImNvbnRleHR1YWxXYXJtdXAiLCJqb2luIiwidm9jYWIiLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2VkIiwicGFyc2UiLCJwYXJzZUVycm9yIiwianNvbk1hdGNoIiwiY2xlYW5lZCIsImNsZWFuRXJyb3IiLCJmYWxsYmFjayIsImNyZWF0ZVN0cnVjdHVyZWRGYWxsYmFjayIsImdlbmVyYXRlRGV0YWlsZWRDb250ZXh0dWFsQ29udGVudCIsInN0cnVjdHVyZSIsImkiLCJjb250ZXh0dWFsRXhhbXBsZVByb21wdCIsImVuaGFuY2VkRXhhbXBsZSIsIndyaXRlIiwidG9uZSIsImNvbnRleHR1YWxNZWFuaW5nUHJvbXB0IiwiY29udGV4dHVhbE1lYW5pbmciLCJlbmhhbmNlZERpc2N1c3Npb25Qcm9tcHQiLCJlbmhhbmNlZERpc2N1c3Npb24iLCJmb3JtYXQiLCJzdHJ1Y3R1cmVkUmVhZGluZ1Byb21wdCIsImgiLCJlbmhhbmNlZFJlYWRpbmciLCJyZXdyaXRlIiwiYXVkaWVuY2UiLCJnZXRBdWRpZW5jZUxldmVsIiwiZm9jdXMiLCJncmFtbWFyRXhhbXBsZXNQcm9tcHQiLCJjb250ZXh0dWFsR3JhbW1hckV4YW1wbGVzIiwiY29udGV4dHVhbEV4YW1wbGVzIiwicHJvb2ZyZWFkTGVzc29uIiwibGVzc29uIiwic2VjdGlvbnNUb1Byb29mcmVhZCIsInNlY3Rpb25QYXRoIiwidmFsdWUiLCJnZXROZXN0ZWRWYWx1ZSIsInByb29mcmVhZCIsImNoZWNrR3JhbW1hciIsImNoZWNrU3BlbGxpbmciLCJjaGVja1N0eWxlIiwic2V0TmVzdGVkVmFsdWUiLCJjb3JyZWN0ZWRfdGV4dCIsImdlbmVyYXRlRmFsbGJhY2tMZXNzb24iLCJnZXRUZW1wbGF0ZVdhcm11cCIsImV4dHJhY3RWb2NhYnVsYXJ5Iiwic2ltcGxpZnlUZXh0IiwiZ2V0VGVtcGxhdGVDb21wcmVoZW5zaW9uIiwiZ2V0VGVtcGxhdGVEaXNjdXNzaW9uIiwiZ2V0VGVtcGxhdGVHcmFtbWFyIiwiZ2V0VGVtcGxhdGVQcm9udW5jaWF0aW9uIiwiZ2V0VGVtcGxhdGVXcmFwdXAiLCJnZXRTdW1tYXJ5TGVuZ3RoIiwibGV2ZWwiLCJsZW5ndGhNYXAiLCJBMSIsIkEyIiwiQjEiLCJCMiIsIkMxIiwiZ2V0TGFuZ3VhZ2VDb2RlIiwibGFuZ3VhZ2UiLCJsYW5ndWFnZU1hcCIsInNwYW5pc2giLCJmcmVuY2giLCJnZXJtYW4iLCJpdGFsaWFuIiwicG9ydHVndWVzZSIsImphcGFuZXNlIiwia29yZWFuIiwiY2hpbmVzZSIsIm9iaiIsInBhdGgiLCJjdXJyZW50Iiwia2V5IiwibGFzdEtleSIsInBvcCIsInRhcmdldCIsInRlbXBsYXRlcyIsInRyYXZlbCIsImJ1c2luZXNzIiwic2VsZWN0ZWRXb3JkcyIsIm1heExlbmd0aCIsImxpbWl0IiwiZ3JhbW1hckZvY2kiLCJleGVyY2lzZSIsInNlbGVjdGVkV29yZCIsImlwYSIsInByYWN0aWNlIiwiZXh0cmFjdFRvcGljc0Zyb21IZWFkaW5ncyIsImhlYWRpbmdUb3BpY3MiLCJ0b3BpY1BhdHRlcm5zIiwic2VudGVuY2UiLCJrZXlXb3JkcyIsImluZGV4IiwiYXJyIiwiaW5kZXhPZiIsImNvbXBsZXhpdHlUaHJlc2hvbGQiLCJjdWx0dXJhbEluZGljYXRvcnMiLCJhbWVyaWNhbk1hcmtlcnMiLCJicml0aXNoTWFya2VycyIsImFtZXJpY2FuQ291bnQiLCJtYXJrZXIiLCJicml0aXNoQ291bnQiLCJvYmplY3RpdmVzIiwiZm9yRWFjaCIsImNlZnJMZXZlbCIsImxldmVsTWFwIiwiZ2VuZXJhdGVFbmhhbmNlZEZhbGxiYWNrTGVzc29uIiwibW9ja0NvbnRlbnRBbmFseXNpcyIsImV4dHJhY3RDb250ZXh0dWFsVm9jYWJ1bGFyeSIsImdldENvbnRleHR1YWxDb21wcmVoZW5zaW9uIiwiZ2V0Q29udGV4dHVhbERpc2N1c3Npb24iLCJnZXRDb250ZXh0dWFsV3JhcHVwIiwiZ2V0Q29udGV4dHVhbFdhcm11cCIsIm1vY2tBbmFseXNpcyIsImdlbmVyYXRlQmFzaWNGYWxsYmFja0xlc3NvbiIsImNvbnRleHQiLCJiYXNlUXVlc3Rpb25zIiwiZ2VuZXJhdGVTbWFydFRlbXBsYXRlTGVzc29uIiwic2Vjb25kVG9waWMiLCJsZXZlbFF1ZXN0aW9ucyIsInZvY2FiUHJvbWlzZXMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwibG93ZXJXb3JkIiwiY29udGV4dHVhbE1lYW5pbmdzIiwibGV2ZWxNZWFuaW5ncyIsImlzU2ltcGxlTGV2ZWwiLCJleGFtcGxlQ291bnQiLCJnZXRFeGFtcGxlQ291bnQiLCJsZXZlbEd1aWRhbmNlIiwiZ2V0TGV2ZWxHdWlkYW5jZSIsImNsZWFuU2VudGVuY2UiLCJib2xkaWZ5VGFyZ2V0V29yZCIsImFkZGl0aW9uYWxOZWVkZWQiLCJ0ZW1wbGF0ZVNlbnRlbmNlcyIsImdlbmVyYXRlQ29udGV4dHVhbEV4YW1wbGVzIiwiZ3VpZGFuY2UiLCJkZWZpbml0aW9uIiwidGFyZ2V0V29yZCIsInJlZ2V4IiwiUmVnRXhwIiwiY291bnQiLCJ0aGVtZXMiLCJleHRyYWN0VGhlbWVzRnJvbVRleHQiLCJtYWluVGhlbWUiLCJsZXZlbEV4YW1wbGVzIiwidGhlbWVLZXl3b3JkcyIsImxvd2VyVGV4dCIsInRoZW1lIiwia2V5d29yZHMiLCJlbnRyaWVzIiwibWF0Y2hDb3VudCIsImtleXdvcmQiLCJnZW5lcmF0ZUxldmVsQXBwcm9wcmlhdGVFeGFtcGxlcyIsImdlbmVyYXRlVGVtcGxhdGVFeGFtcGxlcyIsImNvbnRleHRTZW50ZW5jZSIsImZpbmQiLCJhZGRpdGlvbmFsRXhhbXBsZXMiLCJnZW5lcmF0ZUFkZGl0aW9uYWxFeGFtcGxlcyIsImV4YW1wbGVUZW1wbGF0ZXMiLCJ0YXJnZXRMZW5ndGgiLCJzaW1wbGlmaWVkU2VudGVuY2VzIiwiZ3JhbW1hckZvY3VzIiwidyIsInByb251bmNpYXRpb25zIiwiY291bnRyeU1hcCIsImRvbWFpbktleSIsImNvdW50cnkiLCJxdWVzdGlvbkluZGV4IiwiZmFsbGJhY2tTZXRzIiwibGVzc29uQUlTZXJ2ZXJHZW5lcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/lesson-ai-generator-server.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase-server.ts":
/*!********************************!*\
  !*** ./lib/supabase-server.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerSupabaseClient: () => (/* binding */ createServerSupabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\nconst createServerSupabaseClient = ()=>{\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://jbkpnirowdvlwlgheqho.supabase.co\" || 0, \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impia3BuaXJvd2R2bHdsZ2hlcWhvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MTQ3NTEsImV4cCI6MjA3NDQ5MDc1MX0.FZhruXKDzIkZLhla5oerfs7yzjvTsGLlKTUer34N6N0\" || 0, {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            },\n            set (name, value, options) {\n                cookieStore.set({\n                    name,\n                    value,\n                    ...options\n                });\n            },\n            remove (name, options) {\n                cookieStore.set({\n                    name,\n                    value: \"\",\n                    ...options\n                });\n            }\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUNaO0FBRS9CLE1BQU1FLDZCQUE2QjtJQUN4QyxNQUFNQyxjQUFjRixxREFBT0E7SUFFM0IsT0FBT0QsaUVBQWtCQSxDQUN2QkksMENBQW9DLElBQUksR0FDeENBLGtOQUF5QyxJQUFJLEdBQzdDO1FBQ0FILFNBQVM7WUFDUE8sS0FBSUMsSUFBWTtnQkFDZCxPQUFPTixZQUFZSyxHQUFHLENBQUNDLE9BQU9DO1lBQ2hDO1lBQ0FDLEtBQUlGLElBQVksRUFBRUMsS0FBYSxFQUFFRSxPQUFZO2dCQUMzQ1QsWUFBWVEsR0FBRyxDQUFDO29CQUFFRjtvQkFBTUM7b0JBQU8sR0FBR0UsT0FBTztnQkFBQztZQUM1QztZQUNBQyxRQUFPSixJQUFZLEVBQUVHLE9BQVk7Z0JBQy9CVCxZQUFZUSxHQUFHLENBQUM7b0JBQUVGO29CQUFNQyxPQUFPO29CQUFJLEdBQUdFLE9BQU87Z0JBQUM7WUFDaEQ7UUFDRjtJQUNGO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9saWIvc3VwYWJhc2Utc2VydmVyLnRzPzA5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VydmVyQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zc3JcIlxuaW1wb3J0IHsgY29va2llcyB9IGZyb20gXCJuZXh0L2hlYWRlcnNcIlxuXG5leHBvcnQgY29uc3QgY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IGNvb2tpZVN0b3JlID0gY29va2llcygpXG5cbiAgcmV0dXJuIGNyZWF0ZVNlcnZlckNsaWVudChcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgfHwgJ2h0dHBzOi8vcGxhY2Vob2xkZXIuc3VwYWJhc2UuY28nLCBcbiAgICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCAncGxhY2Vob2xkZXIta2V5JywgXG4gICAge1xuICAgIGNvb2tpZXM6IHtcbiAgICAgIGdldChuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNvb2tpZVN0b3JlLmdldChuYW1lKT8udmFsdWVcbiAgICAgIH0sXG4gICAgICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWUsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgICByZW1vdmUobmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgY29va2llU3RvcmUuc2V0KHsgbmFtZSwgdmFsdWU6IFwiXCIsIC4uLm9wdGlvbnMgfSlcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJDbGllbnQiLCJjb29raWVzIiwiY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQiLCJjb29raWVTdG9yZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsImdldCIsIm5hbWUiLCJ2YWx1ZSIsInNldCIsIm9wdGlvbnMiLCJyZW1vdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase-server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/next","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/cookie","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-lesson%2Froute&page=%2Fapi%2Fgenerate-lesson%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-lesson%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();