"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/test-ai/route";
exports.ids = ["app/api/test-ai/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-ai%2Froute&page=%2Fapi%2Ftest-ai%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-ai%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-ai%2Froute&page=%2Fapi%2Ftest-ai%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-ai%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_linguaspark_app_api_test_ai_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/test-ai/route.ts */ \"(rsc)/./app/api/test-ai/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/test-ai/route\",\n        pathname: \"/api/test-ai\",\n        filename: \"route\",\n        bundlePath: \"app/api/test-ai/route\"\n    },\n    resolvedPagePath: \"D:\\\\linguaspark\\\\app\\\\api\\\\test-ai\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_linguaspark_app_api_test_ai_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/test-ai/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0ZXN0LWFpJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0ZXN0LWFpJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGVzdC1haSUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDbGluZ3Vhc3BhcmslNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNsaW5ndWFzcGFyayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDSjtBQUN6RTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvP2U4NzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcbGluZ3Vhc3BhcmtcXFxcYXBwXFxcXGFwaVxcXFx0ZXN0LWFpXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90ZXN0LWFpL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdGVzdC1haVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdGVzdC1haS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkQ6XFxcXGxpbmd1YXNwYXJrXFxcXGFwcFxcXFxhcGlcXFxcdGVzdC1haVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvdGVzdC1haS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-ai%2Froute&page=%2Fapi%2Ftest-ai%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-ai%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/test-ai/route.ts":
/*!**********************************!*\
  !*** ./app/api/test-ai/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_google_ai_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/google-ai-server */ \"(rsc)/./lib/google-ai-server.ts\");\n\n\nasync function POST(request) {\n    try {\n        console.log(\"\\uD83E\\uDDEA Testing Google AI API connection...\");\n        // Check environment variables first\n        const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\";\n        const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n        console.log(\"\\uD83D\\uDD11 API Key present:\", !!apiKey);\n        console.log(\"\\uD83C\\uDF10 Base URL:\", baseUrl);\n        console.log(\"\\uD83D\\uDD11 API Key format:\", apiKey ? `${apiKey.substring(0, 10)}...` : \"MISSING\");\n        if (!apiKey) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Google AI API key is not configured\",\n                details: \"Check NEXT_PUBLIC_GOOGLE_AI_API_KEY in .env.local\",\n                timestamp: new Date().toISOString()\n            }, {\n                status: 500\n            });\n        }\n        // First, let's list available models\n        console.log(\"\\uD83D\\uDCCB Listing available models...\");\n        const listUrls = [\n            `${baseUrl}/v1beta/models?key=${apiKey}`,\n            `${baseUrl}/v1/models?key=${apiKey}`\n        ];\n        let availableModels = [];\n        for (const listUrl of listUrls){\n            try {\n                console.log(`🔍 Checking models at: ${listUrl.replace(apiKey, \"API_KEY_HIDDEN\")}`);\n                const response = await fetch(listUrl);\n                if (response.ok) {\n                    const result = await response.json();\n                    console.log(\"✅ Models list retrieved successfully\");\n                    if (result.models) {\n                        availableModels = result.models.map((model)=>model.name);\n                        console.log(\"\\uD83D\\uDCCB Available models:\", availableModels);\n                        break;\n                    }\n                } else {\n                    const errorText = await response.text();\n                    console.log(`❌ Models list failed: ${response.status} - ${errorText}`);\n                }\n            } catch (error) {\n                console.log(`❌ Models list exception: ${error.message}`);\n            }\n        }\n        // Test with available models or fallback to common ones\n        const modelsToTest = availableModels.length > 0 ? availableModels : [\n            \"models/gemini-1.5-flash-latest\",\n            \"models/gemini-1.5-pro-latest\",\n            \"models/gemini-pro\",\n            \"models/gemini-1.5-flash\",\n            \"models/gemini-1.5-pro\",\n            \"gemini-1.5-flash-latest\",\n            \"gemini-1.5-pro-latest\",\n            \"gemini-pro\",\n            \"gemini-1.5-flash\",\n            \"gemini-1.5-pro\"\n        ];\n        console.log(\"\\uD83E\\uDDEA Testing models:\", modelsToTest.slice(0, 5));\n        const testUrls = [];\n        // Generate test URLs for different API versions and models\n        for (const model of modelsToTest.slice(0, 5)){\n            testUrls.push(`${baseUrl}/v1beta/models/${model}:generateContent?key=${apiKey}`);\n            testUrls.push(`${baseUrl}/v1/models/${model}:generateContent?key=${apiKey}`);\n        }\n        const requestBody = {\n            contents: [\n                {\n                    parts: [\n                        {\n                            text: \"Say 'Hello, I am working!' if you can understand this message.\"\n                        }\n                    ]\n                }\n            ],\n            generationConfig: {\n                temperature: 0.1,\n                maxOutputTokens: 50\n            }\n        };\n        let lastError = null;\n        for(let i = 0; i < testUrls.length; i++){\n            const url = testUrls[i];\n            console.log(`🌐 Testing URL ${i + 1}: ${url.replace(apiKey, \"API_KEY_HIDDEN\")}`);\n            try {\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(requestBody)\n                });\n                console.log(`📡 Response ${i + 1}: ${response.status} ${response.statusText}`);\n                if (response.ok) {\n                    const result = await response.json();\n                    console.log(\"✅ Direct API call successful!\");\n                    if (result.candidates && result.candidates[0] && result.candidates[0].content) {\n                        const aiResponse = result.candidates[0].content.parts[0].text;\n                        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                            success: true,\n                            message: \"Google AI API is working!\",\n                            response: aiResponse,\n                            workingUrl: url.replace(apiKey, \"API_KEY_HIDDEN\"),\n                            timestamp: new Date().toISOString()\n                        });\n                    }\n                } else {\n                    const errorText = await response.text();\n                    lastError = `${response.status} ${response.statusText}: ${errorText}`;\n                    console.warn(`❌ URL ${i + 1} failed:`, lastError);\n                }\n            } catch (error) {\n                lastError = error.message;\n                console.warn(`❌ URL ${i + 1} exception:`, lastError);\n            }\n        }\n        // If we get here, all direct calls failed, try the service\n        console.log(\"\\uD83D\\uDD04 Direct calls failed, trying service wrapper...\");\n        const googleAI = (0,_lib_google_ai_server__WEBPACK_IMPORTED_MODULE_1__.createGoogleAIServerService)();\n        const response = await googleAI.prompt(\"Say 'Hello, I am working!' if you can understand this message.\", {\n            temperature: 0.1,\n            maxTokens: 50\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Google AI API is working via service!\",\n            response: response,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"❌ Google AI API test failed:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error.message,\n            details: \"Check console logs for detailed error information\",\n            apiKeyPresent: !!\"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\",\n            baseUrl: \"https://generativelanguage.googleapis.com\" || 0,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/test-ai/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-ai-server.ts":
/*!*********************************!*\
  !*** ./lib/google-ai-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleAIServerService: () => (/* binding */ createGoogleAIServerService)\n/* harmony export */ });\n// Server-side Google AI (Gemini) APIs service layer\nclass GoogleAIServerService {\n    constructor(config){\n        this.model = \"models/gemini-2.5-flash\" // Use actual available model\n        ;\n        this.config = config;\n    }\n    async makeGeminiRequest(prompt, options = {}) {\n        // Try different model names based on actual available models from API\n        const modelsToTry = [\n            \"models/gemini-2.5-flash\",\n            \"models/gemini-2.5-pro\",\n            \"models/gemini-2.0-flash\",\n            \"models/gemini-flash-latest\",\n            \"models/gemini-pro-latest\",\n            \"models/gemini-2.0-flash-001\",\n            \"gemini-2.5-flash\",\n            \"gemini-2.5-pro\",\n            \"gemini-2.0-flash\",\n            \"gemini-flash-latest\",\n            \"gemini-pro-latest\"\n        ];\n        const possibleUrls = [];\n        // Generate URLs for different combinations\n        for (const model of modelsToTry){\n            possibleUrls.push(`${this.config.baseUrl}/v1beta/models/${model}:generateContent?key=${this.config.apiKey}`);\n            possibleUrls.push(`${this.config.baseUrl}/v1/models/${model}:generateContent?key=${this.config.apiKey}`);\n        }\n        const requestBody = {\n            contents: [\n                {\n                    parts: [\n                        {\n                            text: prompt\n                        }\n                    ]\n                }\n            ],\n            generationConfig: {\n                temperature: options.temperature || 0.7,\n                maxOutputTokens: options.maxTokens || 1000,\n                topP: options.topP || 0.9\n            }\n        };\n        console.log(\"\\uD83D\\uDD17 Trying Gemini API endpoints...\");\n        // Try each URL until one works\n        for(let i = 0; i < possibleUrls.length; i++){\n            const url = possibleUrls[i];\n            console.log(`🌐 Attempt ${i + 1}: ${url.replace(this.config.apiKey, \"API_KEY_HIDDEN\")}`);\n            try {\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(requestBody)\n                });\n                console.log(`📡 Response status: ${response.status} ${response.statusText}`);\n                if (response.ok) {\n                    const result = await response.json();\n                    console.log(\"✅ Successful API response received\");\n                    if (result.candidates && result.candidates[0] && result.candidates[0].content) {\n                        return result.candidates[0].content.parts[0].text;\n                    } else {\n                        console.warn(\"⚠️ Invalid response structure:\", result);\n                        throw new Error(\"Invalid response structure from Gemini API\");\n                    }\n                } else {\n                    const errorText = await response.text();\n                    console.warn(`❌ Attempt ${i + 1} failed:`, response.status, errorText);\n                    // If this is the last attempt, throw the error\n                    if (i === possibleUrls.length - 1) {\n                        throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);\n                    }\n                }\n            } catch (error) {\n                console.warn(`❌ Attempt ${i + 1} exception:`, error.message);\n                // If this is the last attempt, throw the error\n                if (i === possibleUrls.length - 1) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async summarize(text, options = {}) {\n        const summaryType = options.type || \"key-points\";\n        const length = options.length || \"medium\";\n        const lengthInstructions = {\n            short: \"in 2-3 sentences\",\n            medium: \"in 4-6 sentences\",\n            long: \"in 7-10 sentences\"\n        };\n        const typeInstructions = {\n            \"key-points\": \"Extract and summarize the key points\",\n            \"tl-dr\": \"Create a TL;DR summary\",\n            \"teaser\": \"Write an engaging teaser summary\",\n            \"headline\": \"Create a headline-style summary\"\n        };\n        const prompt = `${typeInstructions[summaryType]} of the following text ${lengthInstructions[length]}:\n\n${text}\n\nSummary:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.3\n            });\n        } catch (error) {\n            console.error(\"Summarization failed:\", error);\n            // Fallback to simple truncation\n            return text.substring(0, 500) + \"...\";\n        }\n    }\n    async translate(text, options) {\n        const targetLang = this.getLanguageName(options.targetLanguage);\n        const prompt = `Translate the following text to ${targetLang}. Maintain the original meaning and tone:\n\n${text}\n\nTranslation:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n        } catch (error) {\n            console.error(\"Translation failed:\", error);\n            // Return original text if translation fails\n            return text;\n        }\n    }\n    async prompt(prompt, options = {}) {\n        try {\n            return await this.makeGeminiRequest(prompt, options);\n        } catch (error) {\n            console.error(\"Prompt generation failed:\", error);\n            throw error;\n        }\n    }\n    async write(prompt, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"medium\";\n        const format = options.format || \"paragraph\";\n        const lengthInstructions = {\n            short: \"Keep it brief and concise\",\n            medium: \"Write a moderate length response\",\n            long: \"Provide a detailed and comprehensive response\"\n        };\n        const formatInstructions = {\n            paragraph: \"Write in paragraph form\",\n            \"bullet-points\": \"Format as bullet points\",\n            \"numbered-list\": \"Format as a numbered list\"\n        };\n        const enhancedPrompt = `${prompt}\n\nInstructions:\n- Tone: ${tone}\n- ${lengthInstructions[length]}\n- ${formatInstructions[format]}\n\nResponse:`;\n        try {\n            return await this.makeGeminiRequest(enhancedPrompt, {\n                temperature: 0.7\n            });\n        } catch (error) {\n            console.error(\"Writing failed:\", error);\n            throw error;\n        }\n    }\n    async rewrite(text, options = {}) {\n        const tone = options.tone || \"casual\";\n        const length = options.length || \"same\";\n        const audience = options.audience || \"general\";\n        const lengthInstructions = {\n            shorter: \"Make it more concise\",\n            longer: \"Expand and add more detail\",\n            same: \"Keep approximately the same length\"\n        };\n        const prompt = `Rewrite the following text with these requirements:\n- Tone: ${tone}\n- Audience: ${audience}\n- Length: ${lengthInstructions[length]}\n\nOriginal text:\n${text}\n\nRewritten text:`;\n        try {\n            return await this.makeGeminiRequest(prompt, {\n                temperature: 0.5\n            });\n        } catch (error) {\n            console.error(\"Rewriting failed:\", error);\n            return text // Return original if rewriting fails\n            ;\n        }\n    }\n    async proofread(text, options = {}) {\n        const checkGrammar = options.checkGrammar !== false;\n        const checkSpelling = options.checkSpelling !== false;\n        const checkStyle = options.checkStyle !== false;\n        const checks = [];\n        if (checkGrammar) checks.push(\"grammar\");\n        if (checkSpelling) checks.push(\"spelling\");\n        if (checkStyle) checks.push(\"style and clarity\");\n        const prompt = `Proofread and correct the following text for ${checks.join(\", \")}. Return only the corrected text:\n\n${text}\n\nCorrected text:`;\n        try {\n            const correctedText = await this.makeGeminiRequest(prompt, {\n                temperature: 0.2\n            });\n            return {\n                corrected_text: correctedText,\n                suggestions: [],\n                errors: []\n            };\n        } catch (error) {\n            console.error(\"Proofreading failed:\", error);\n            return {\n                corrected_text: text,\n                suggestions: [],\n                errors: []\n            };\n        }\n    }\n    getLanguageName(code) {\n        const languageMap = {\n            es: \"Spanish\",\n            fr: \"French\",\n            de: \"German\",\n            it: \"Italian\",\n            pt: \"Portuguese\",\n            ja: \"Japanese\",\n            ko: \"Korean\",\n            zh: \"Chinese\",\n            en: \"English\"\n        };\n        return languageMap[code] || \"English\";\n    }\n}\n// Server-side only initialization\nconst createGoogleAIServerService = ()=>{\n    const apiKey = \"AIzaSyAkDCpwWTPKYftoc1Fdm77P6B00Lj89Lio\";\n    const baseUrl = \"https://generativelanguage.googleapis.com\" || 0;\n    if (!apiKey) {\n        console.warn(\"Google AI API key not found. Lesson generation will use fallback templates.\");\n        // Return a service that will always throw errors, triggering fallbacks\n        return new GoogleAIServerService({\n            apiKey: \"dummy\",\n            baseUrl\n        });\n    }\n    return new GoogleAIServerService({\n        apiKey,\n        baseUrl\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-ai-server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-ai%2Froute&page=%2Fapi%2Ftest-ai%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-ai%2Froute.ts&appDir=D%3A%5Clinguaspark%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Clinguaspark&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();