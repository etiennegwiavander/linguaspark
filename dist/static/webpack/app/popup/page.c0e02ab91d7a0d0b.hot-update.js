"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/popup/page",{

/***/ "(app-pages-browser)/./lib/lesson-interface-bridge.ts":
/*!****************************************!*\
  !*** ./lib/lesson-interface-bridge.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonInterfaceBridge: function() { return /* binding */ LessonInterfaceBridge; },\n/* harmony export */   LessonInterfaceUtils: function() { return /* binding */ LessonInterfaceUtils; }\n/* harmony export */ });\n/**\r\n * Lesson Interface Bridge\r\n * \r\n * Connects extracted content to the existing lesson generation interface.\r\n * Handles automatic popup opening, content pre-population, and metadata preservation.\r\n * \r\n * Requirements: 4.1, 4.2, 4.6, 6.6\r\n */ class LessonInterfaceBridge {\n    /**\r\n   * Initialize the bridge with callbacks\r\n   */ initialize(callbacks) {\n        this.callbacks = callbacks;\n    }\n    /**\r\n   * Open lesson interface with extracted content\r\n   * Requirement 4.1: Open the LinguaSpark lesson generation interface\r\n   */ async openLessonInterface(content) {\n        try {\n            // Create lesson pre-configuration\n            const config = this.createLessonPreConfiguration(content);\n            this.currentConfiguration = config;\n            // Store configuration for the lesson interface\n            await this.storeConfiguration(config);\n            // Open the lesson interface\n            await this.openInterface();\n            // Update state\n            this.state.lessonInterfaceOpen = true;\n            this.state.extractionConfirmed = true;\n            // Notify callback\n            if (this.callbacks.onLessonInterfaceOpened) {\n                this.callbacks.onLessonInterfaceOpened(config);\n            }\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to open lesson interface\";\n            console.error(\"[LessonInterfaceBridge] Failed to open lesson interface:\", error);\n            if (this.callbacks.onError) {\n                this.callbacks.onError(errorMessage);\n            }\n            throw new Error(errorMessage);\n        }\n    }\n    /**\r\n   * Pre-populate lesson interface with extracted content\r\n   * Requirement 4.2: Pre-populate source content field with extracted content\r\n   */ async populateInterface(content) {\n        try {\n            const config = this.createLessonPreConfiguration(content);\n            // Store the content for the lesson generator\n            await this.storeExtractedContent(config);\n            // Update state\n            this.state.contentPrePopulated = true;\n            this.state.readyForGeneration = true;\n            // Notify callback\n            if (this.callbacks.onContentPrePopulated) {\n                this.callbacks.onContentPrePopulated(config.sourceContent);\n            }\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to populate interface\";\n            console.error(\"[LessonInterfaceBridge] Failed to populate interface:\", error);\n            if (this.callbacks.onError) {\n                this.callbacks.onError(errorMessage);\n            }\n            throw new Error(errorMessage);\n        }\n    }\n    /**\r\n   * Enable content editing in the lesson interface\r\n   * Requirement 4.5: User can edit extracted content before generation\r\n   */ enableContentEditing() {\n        if (this.currentConfiguration) {\n            this.currentConfiguration.allowContentEditing = true;\n            this.storeConfiguration(this.currentConfiguration);\n        }\n    }\n    /**\r\n   * Preserve user customizations\r\n   * Requirement 4.4: User can modify lesson type, CEFR level, and other settings\r\n   */ preserveUserCustomizations() {\n        if (this.currentConfiguration) {\n            this.currentConfiguration.userCanModifySettings = true;\n            this.storeConfiguration(this.currentConfiguration);\n        }\n    }\n    /**\r\n   * Integrate with existing lesson generation workflow\r\n   * Requirement 4.6: Follow existing enhanced lesson generation workflow\r\n   */ integrateWithExistingWorkflow() {\n        // The integration happens through the stored configuration\n        // The lesson generator will detect the extraction source and handle accordingly\n        this.state.readyForGeneration = true;\n    }\n    /**\r\n   * Get current interface state\r\n   */ getState() {\n        return {\n            ...this.state\n        };\n    }\n    /**\r\n   * Get current configuration\r\n   */ getCurrentConfiguration() {\n        return this.currentConfiguration ? {\n            ...this.currentConfiguration\n        } : null;\n    }\n    /**\r\n   * Check if content is from extraction\r\n   */ static async isExtractionSource() {\n        try {\n            var _window_chrome;\n            // First try URL parameters (most reliable for web context)\n            if (true) {\n                const urlParams = new URLSearchParams(window.location.search);\n                if (urlParams.get(\"source\") === \"extraction\") {\n                    return true;\n                }\n            }\n            // Try Chrome storage if available (extension context)\n            if ( true && ((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {\n                return new Promise((resolve)=>{\n                    try {\n                        window.chrome.storage.local.get([\n                            \"extractionSource\"\n                        ], (result)=>{\n                            if (window.chrome.runtime.lastError) {\n                                console.warn(\"[LessonInterfaceBridge] Chrome storage error, checking localStorage fallback:\", window.chrome.runtime.lastError.message);\n                                // Check localStorage fallback\n                                const fallbackConfig = LessonInterfaceBridge.loadFromLocalStorage();\n                                resolve((fallbackConfig === null || fallbackConfig === void 0 ? void 0 : fallbackConfig.extractionSource) === \"webpage\");\n                            } else {\n                                resolve(result.extractionSource === \"webpage\");\n                            }\n                        });\n                    } catch (error) {\n                        console.warn(\"[LessonInterfaceBridge] Chrome storage access failed, checking localStorage fallback:\", error);\n                        // Check localStorage fallback\n                        const fallbackConfig = LessonInterfaceBridge.loadFromLocalStorage();\n                        resolve((fallbackConfig === null || fallbackConfig === void 0 ? void 0 : fallbackConfig.extractionSource) === \"webpage\");\n                    }\n                });\n            }\n            // Try localStorage (fallback for extension context invalidation)\n            const localStorageConfig = LessonInterfaceBridge.loadFromLocalStorage();\n            if ((localStorageConfig === null || localStorageConfig === void 0 ? void 0 : localStorageConfig.extractionSource) === \"webpage\") {\n                return true;\n            }\n            // Try session storage (web context fallback)\n            if (typeof sessionStorage !== \"undefined\") {\n                const stored = sessionStorage.getItem(\"linguaspark_lesson_config\");\n                if (stored) {\n                    const config = JSON.parse(stored);\n                    return config.extractionSource === \"webpage\";\n                }\n            }\n            return false;\n        } catch (error) {\n            console.error(\"[LessonInterfaceBridge] Failed to check extraction source:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Load extraction configuration\r\n   */ static async loadExtractionConfiguration() {\n        try {\n            var _window_chrome;\n            // Try Chrome storage if available (extension context)\n            if ( true && ((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {\n                return new Promise((resolve)=>{\n                    try {\n                        window.chrome.storage.local.get([\n                            \"lessonConfiguration\"\n                        ], (result)=>{\n                            if (window.chrome.runtime.lastError) {\n                                console.warn(\"[LessonInterfaceBridge] Chrome storage error, trying localStorage fallback:\", window.chrome.runtime.lastError.message);\n                                // Fallback to localStorage\n                                const fallbackConfig = LessonInterfaceBridge.loadFromLocalStorage();\n                                resolve(fallbackConfig);\n                            } else if (result.lessonConfiguration) {\n                                // Parse dates\n                                const config = result.lessonConfiguration;\n                                if (config.metadata.extractedAt) {\n                                    config.metadata.extractedAt = new Date(config.metadata.extractedAt);\n                                }\n                                resolve(config);\n                            } else {\n                                // Try localStorage fallback\n                                const fallbackConfig = LessonInterfaceBridge.loadFromLocalStorage();\n                                resolve(fallbackConfig);\n                            }\n                        });\n                    } catch (error) {\n                        console.warn(\"[LessonInterfaceBridge] Chrome storage access failed, using localStorage fallback:\", error);\n                        const fallbackConfig = LessonInterfaceBridge.loadFromLocalStorage();\n                        resolve(fallbackConfig);\n                    }\n                });\n            }\n            // Try localStorage (fallback for extension context invalidation)\n            const localStorageConfig = LessonInterfaceBridge.loadFromLocalStorage();\n            if (localStorageConfig) {\n                return localStorageConfig;\n            }\n            // Try session storage (web context)\n            if (typeof sessionStorage !== \"undefined\") {\n                const stored = sessionStorage.getItem(\"linguaspark_lesson_config\");\n                if (stored) {\n                    const config = JSON.parse(stored);\n                    // Parse dates\n                    if (config.metadata.extractedAt) {\n                        config.metadata.extractedAt = new Date(config.metadata.extractedAt);\n                    }\n                    return config;\n                }\n            }\n            // Try URL parameters (for metadata only, content should be in storage)\n            if (true) {\n                const urlParams = new URLSearchParams(window.location.search);\n                const sourceParam = urlParams.get(\"sourceUrl\");\n                const isExtractionSource = urlParams.get(\"source\") === \"extraction\";\n                // If this is an extraction source but no content in URL, it should be in storage\n                if (isExtractionSource && sourceParam) {\n                    // This indicates content should be available in storage\n                    // Return null here so the caller knows to check storage\n                    console.log(\"[LessonInterfaceBridge] Extraction source detected but content not in URL - should be in storage\");\n                }\n                // Legacy support: if content is in URL parameters (for small content)\n                const contentParam = urlParams.get(\"content\");\n                if (contentParam && sourceParam) {\n                    try {\n                        const decodedContent = decodeURIComponent(contentParam);\n                        return {\n                            sourceContent: decodedContent,\n                            suggestedType: urlParams.get(\"type\") || \"discussion\",\n                            suggestedLevel: urlParams.get(\"level\") || \"B1\",\n                            metadata: {\n                                title: urlParams.get(\"title\") || \"Extracted Content\",\n                                sourceUrl: decodeURIComponent(sourceParam),\n                                domain: new URL(decodeURIComponent(sourceParam)).hostname,\n                                extractedAt: new Date(),\n                                wordCount: decodedContent.split(/\\s+/).length,\n                                readingTime: Math.ceil(decodedContent.split(/\\s+/).length / 200),\n                                complexity: \"intermediate\",\n                                suitabilityScore: 0.8\n                            },\n                            extractionSource: \"webpage\",\n                            allowContentEditing: true,\n                            userCanModifySettings: true,\n                            attribution: \"Source: \".concat(new URL(decodeURIComponent(sourceParam)).hostname)\n                        };\n                    } catch (urlError) {\n                        console.warn(\"[LessonInterfaceBridge] Failed to parse URL parameters:\", urlError);\n                    }\n                }\n            }\n            return null;\n        } catch (error) {\n            console.error(\"[LessonInterfaceBridge] Failed to load extraction configuration:\", error);\n            return null;\n        }\n    }\n    /**\r\n   * Clear extraction configuration\r\n   */ static async clearExtractionConfiguration() {\n        try {\n            var _window_chrome;\n            if ( true && ((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {\n                window.chrome.storage.local.remove([\n                    \"lessonConfiguration\",\n                    \"extractionSource\"\n                ]);\n            } else if (typeof sessionStorage !== \"undefined\") {\n                sessionStorage.removeItem(\"linguaspark_lesson_config\");\n            }\n        } catch (error) {\n            console.error(\"[LessonInterfaceBridge] Failed to clear extraction configuration:\", error);\n        }\n    }\n    /**\r\n   * Create lesson pre-configuration from extracted content\r\n   */ createLessonPreConfiguration(content) {\n        var _content_metadata, _content_metadata1, _content_metadata2;\n        return {\n            sourceContent: content.text,\n            suggestedType: content.suggestedLessonType,\n            suggestedLevel: content.suggestedCEFRLevel,\n            metadata: {\n                title: content.metadata.title,\n                author: content.metadata.author,\n                sourceUrl: content.metadata.sourceUrl,\n                domain: content.metadata.domain,\n                extractedAt: content.sourceInfo.extractedAt,\n                wordCount: content.quality.wordCount,\n                readingTime: content.quality.readingTime,\n                complexity: content.quality.complexity,\n                suitabilityScore: content.quality.suitabilityScore,\n                bannerImages: content.bannerImages || ((_content_metadata = content.metadata) === null || _content_metadata === void 0 ? void 0 : _content_metadata.bannerImages) || [],\n                bannerImage: content.bannerImage || ((_content_metadata1 = content.metadata) === null || _content_metadata1 === void 0 ? void 0 : _content_metadata1.bannerImage) || null,\n                images: content.images || ((_content_metadata2 = content.metadata) === null || _content_metadata2 === void 0 ? void 0 : _content_metadata2.images) || []\n            },\n            extractionSource: \"webpage\",\n            allowContentEditing: true,\n            userCanModifySettings: true,\n            attribution: content.sourceInfo.attribution\n        };\n    }\n    /**\r\n   * Store configuration for lesson interface\r\n   */ async storeConfiguration(config) {\n        try {\n            var _window_chrome;\n            if ( true && ((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {\n                // Store in Chrome extension storage\n                window.chrome.storage.local.set({\n                    lessonConfiguration: config,\n                    extractionSource: \"webpage\",\n                    extractionTimestamp: Date.now()\n                });\n            } else if (typeof sessionStorage !== \"undefined\") {\n                // Fallback to session storage\n                sessionStorage.setItem(\"linguaspark_lesson_config\", JSON.stringify(config));\n            }\n        } catch (error) {\n            console.error(\"[LessonInterfaceBridge] Failed to store configuration:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Store extracted content for lesson generator\r\n   */ async storeExtractedContent(config) {\n        try {\n            var _window_chrome;\n            if ( true && ((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {\n                // Store content in the format expected by lesson generator\n                window.chrome.storage.local.set({\n                    selectedText: config.sourceContent,\n                    sourceUrl: config.metadata.sourceUrl,\n                    lessonType: config.suggestedType,\n                    studentLevel: config.suggestedLevel,\n                    extractionMetadata: config.metadata,\n                    attribution: config.attribution\n                });\n            } else if (typeof sessionStorage !== \"undefined\") {\n                // Fallback storage\n                sessionStorage.setItem(\"linguaspark_selected_text\", config.sourceContent);\n                sessionStorage.setItem(\"linguaspark_source_url\", config.metadata.sourceUrl);\n                sessionStorage.setItem(\"linguaspark_lesson_type\", config.suggestedType);\n                sessionStorage.setItem(\"linguaspark_student_level\", config.suggestedLevel);\n            }\n        } catch (error) {\n            console.error(\"[LessonInterfaceBridge] Failed to store extracted content:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Open the lesson interface\r\n   */ async openInterface() {\n        try {\n            var _window_chrome;\n            const config = this.currentConfiguration;\n            if (!config) {\n                throw new Error(\"No configuration available\");\n            }\n            if ( true && ((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.action)) {\n                // Extension context - try to open popup\n                try {\n                    await window.chrome.action.openPopup();\n                } catch (popupError) {\n                    // If popup fails, open in new tab with minimal URL parameters\n                    // ALWAYS store full content in Chrome storage, NEVER in URL\n                    await window.chrome.storage.local.set({\n                        lessonConfiguration: config,\n                        extractionSource: \"webpage\",\n                        extractionTimestamp: Date.now()\n                    });\n                    const url = new URL(window.chrome.runtime.getURL(\"popup.html\"));\n                    url.searchParams.set(\"source\", \"extraction\");\n                    url.searchParams.set(\"autoPopulate\", \"true\");\n                    url.searchParams.set(\"sourceUrl\", encodeURIComponent(config.metadata.sourceUrl));\n                    url.searchParams.set(\"type\", config.suggestedType);\n                    url.searchParams.set(\"level\", config.suggestedLevel);\n                    url.searchParams.set(\"title\", encodeURIComponent(config.metadata.title));\n                    // NOTE: NO 'content' parameter to avoid URL length limits\n                    console.log(\"[LessonInterfaceBridge] Stored full content in Chrome storage, opening popup with metadata-only URL\");\n                    await window.chrome.tabs.create({\n                        url: url.toString()\n                    });\n                }\n            } else if (true) {\n                // Web context - ALWAYS store full content in session storage, NEVER in URL\n                sessionStorage.setItem(\"linguaspark_lesson_config\", JSON.stringify(config));\n                // Use minimal URL parameters - NO CONTENT in URL to avoid truncation\n                const url = new URL(\"/popup\", window.location.origin);\n                url.searchParams.set(\"source\", \"extraction\");\n                url.searchParams.set(\"autoPopulate\", \"true\");\n                url.searchParams.set(\"sourceUrl\", encodeURIComponent(config.metadata.sourceUrl));\n                url.searchParams.set(\"type\", config.suggestedType);\n                url.searchParams.set(\"level\", config.suggestedLevel);\n                url.searchParams.set(\"title\", encodeURIComponent(config.metadata.title));\n                // NOTE: NO 'content' parameter to avoid URL length limits\n                console.log(\"[LessonInterfaceBridge] Stored full content in session storage, opening popup with metadata-only URL\");\n                window.open(url.toString(), \"_blank\");\n            }\n        } catch (error) {\n            console.error(\"[LessonInterfaceBridge] Failed to open interface:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Load configuration from localStorage (fallback for extension context invalidation)\r\n   */ static loadFromLocalStorage() {\n        try {\n            if (typeof localStorage === \"undefined\") return null;\n            const stored = localStorage.getItem(\"linguaspark_lesson_config\");\n            if (stored) {\n                var _config_metadata;\n                const config = JSON.parse(stored);\n                // Parse dates\n                if ((_config_metadata = config.metadata) === null || _config_metadata === void 0 ? void 0 : _config_metadata.extractedAt) {\n                    config.metadata.extractedAt = new Date(config.metadata.extractedAt);\n                }\n                console.log(\"[LessonInterfaceBridge] Loaded configuration from localStorage fallback\");\n                return config;\n            }\n            return null;\n        } catch (error) {\n            console.error(\"[LessonInterfaceBridge] Failed to load from localStorage:\", error);\n            return null;\n        }\n    }\n    /**\r\n   * Clear extraction configuration from all storage types\r\n   */ static async clearExtractionConfiguration() {\n        try {\n            var _window_chrome;\n            // Clear Chrome storage if available\n            if ( true && ((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.storage)) {\n                try {\n                    await new Promise((resolve)=>{\n                        window.chrome.storage.local.remove([\n                            \"lessonConfiguration\",\n                            \"extractedContent\",\n                            \"extractionSource\",\n                            \"extractionTimestamp\"\n                        ], ()=>{\n                            if (window.chrome.runtime.lastError) {\n                                console.warn(\"[LessonInterfaceBridge] Chrome storage clear error:\", window.chrome.runtime.lastError.message);\n                            }\n                            resolve();\n                        });\n                    });\n                } catch (error) {\n                    console.warn(\"[LessonInterfaceBridge] Failed to clear Chrome storage:\", error);\n                }\n            }\n            // Clear localStorage fallback\n            if (typeof localStorage !== \"undefined\") {\n                try {\n                    localStorage.removeItem(\"linguaspark_lesson_config\");\n                } catch (error) {\n                    console.warn(\"[LessonInterfaceBridge] Failed to clear localStorage:\", error);\n                }\n            }\n            // Clear sessionStorage\n            if (typeof sessionStorage !== \"undefined\") {\n                try {\n                    sessionStorage.removeItem(\"linguaspark_lesson_config\");\n                    sessionStorage.removeItem(\"linguaspark_selected_text\");\n                    sessionStorage.removeItem(\"linguaspark_source_url\");\n                    sessionStorage.removeItem(\"linguaspark_lesson_type\");\n                    sessionStorage.removeItem(\"linguaspark_student_level\");\n                } catch (error) {\n                    console.warn(\"[LessonInterfaceBridge] Failed to clear sessionStorage:\", error);\n                }\n            }\n            console.log(\"[LessonInterfaceBridge] Cleared extraction configuration from all storage types\");\n        } catch (error) {\n            console.error(\"[LessonInterfaceBridge] Failed to clear extraction configuration:\", error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.state = {\n            contentPrePopulated: false,\n            settingsCustomizable: true,\n            extractionConfirmed: false,\n            readyForGeneration: false,\n            lessonInterfaceOpen: false\n        };\n        this.callbacks = {};\n        this.currentConfiguration = null;\n    }\n}\n/**\r\n * Utility functions for lesson interface integration\r\n */ const LessonInterfaceUtils = {\n    /**\r\n   * Check if current page is lesson interface with extraction source\r\n   */ async isExtractionLessonInterface () {\n        if (false) {}\n        const urlParams = new URLSearchParams(window.location.search);\n        const isExtractionSource = urlParams.get(\"source\") === \"extraction\";\n        const shouldAutoPopulate = urlParams.get(\"autoPopulate\") === \"true\";\n        return isExtractionSource && shouldAutoPopulate;\n    },\n    /**\r\n   * Get extraction parameters from URL\r\n   */ getExtractionParams () {\n        if (false) {}\n        const urlParams = new URLSearchParams(window.location.search);\n        return {\n            source: urlParams.get(\"source\"),\n            autoPopulate: urlParams.get(\"autoPopulate\") === \"true\"\n        };\n    },\n    /**\r\n   * Check if Chrome APIs are available\r\n   */ isChromeExtensionContext () {\n        return  true && typeof window.chrome !== \"undefined\" && typeof window.chrome.storage !== \"undefined\";\n    },\n    /**\r\n   * Safe Chrome storage access with fallback\r\n   */ async safeStorageGet (keys) {\n        console.log(\"[LessonInterfaceUtils] safeStorageGet called with keys:\", keys);\n        console.log(\"[LessonInterfaceUtils] Chrome extension context:\", this.isChromeExtensionContext());\n        if (this.isChromeExtensionContext()) {\n            return new Promise((resolve)=>{\n                try {\n                    window.chrome.storage.local.get(keys, (result)=>{\n                        if (window.chrome.runtime.lastError) {\n                            console.warn(\"[LessonInterfaceUtils] Chrome storage error, trying localStorage fallback:\", window.chrome.runtime.lastError.message);\n                            const fallbackResult = this.getFromLocalStorageFallback(keys);\n                            console.log(\"[LessonInterfaceUtils] Fallback result:\", Object.keys(fallbackResult));\n                            resolve(fallbackResult);\n                        } else {\n                            console.log(\"[LessonInterfaceUtils] Chrome storage result:\", Object.keys(result || {}));\n                            resolve(result);\n                        }\n                    });\n                } catch (error) {\n                    console.warn(\"[LessonInterfaceUtils] Chrome storage access failed:\", error);\n                    const fallbackResult = this.getFromLocalStorageFallback(keys);\n                    console.log(\"[LessonInterfaceUtils] Exception fallback result:\", Object.keys(fallbackResult));\n                    resolve(fallbackResult);\n                }\n            });\n        }\n        const fallbackResult = this.getFromLocalStorageFallback(keys);\n        console.log(\"[LessonInterfaceUtils] Direct fallback result:\", Object.keys(fallbackResult));\n        return fallbackResult;\n    },\n    /**\r\n   * Get data from localStorage fallback\r\n   */ getFromLocalStorageFallback (keys) {\n        const result = {};\n        // First try the main lesson config key (used by content script)\n        try {\n            const mainConfig = localStorage.getItem(\"linguaspark_lesson_config\");\n            if (mainConfig) {\n                const parsed = JSON.parse(mainConfig);\n                console.log(\"[LessonInterfaceUtils] Found localStorage config:\", Object.keys(parsed));\n                // Map the stored data to the expected keys\n                if (parsed.lessonConfiguration) {\n                    result.lessonConfiguration = parsed.lessonConfiguration;\n                }\n                if (parsed.extractedContent) {\n                    result.extractedContent = parsed.extractedContent;\n                }\n                if (parsed.selectedText) {\n                    result.selectedText = parsed.selectedText;\n                }\n                if (parsed.sourceUrl) {\n                    result.sourceUrl = parsed.sourceUrl;\n                }\n                // If we have lesson configuration, that's the primary data\n                if (result.lessonConfiguration) {\n                    return result;\n                }\n            }\n        } catch (error) {\n            console.warn(\"[LessonInterfaceUtils] Failed to parse localStorage config:\", error);\n        }\n        // Fallback to individual sessionStorage keys\n        for (const key of keys){\n            try {\n                const stored = sessionStorage.getItem(\"linguaspark_\".concat(key));\n                if (stored) {\n                    try {\n                        result[key] = JSON.parse(stored);\n                    } catch (e) {\n                        result[key] = stored;\n                    }\n                }\n            } catch (error) {\n                console.warn(\"[LessonInterfaceUtils] Failed to get sessionStorage key \".concat(key, \":\"), error);\n            }\n        }\n        return result;\n    },\n    /**\r\n   * Safe Chrome storage set with fallback\r\n   */ async safeStorageSet (data) {\n        if (this.isChromeExtensionContext()) {\n            try {\n                window.chrome.storage.local.set(data);\n                return;\n            } catch (error) {\n                console.warn(\"[LessonInterfaceUtils] Chrome storage set failed, using localStorage fallback:\", error);\n            }\n        }\n        // Fallback to localStorage with the same format as content script\n        try {\n            localStorage.setItem(\"linguaspark_lesson_config\", JSON.stringify(data));\n            console.log(\"[LessonInterfaceUtils] Stored data in localStorage fallback\");\n        } catch (error) {\n            console.warn(\"[LessonInterfaceUtils] localStorage fallback failed:\", error);\n            // Final fallback to session storage\n            for (const [key, value] of Object.entries(data)){\n                sessionStorage.setItem(\"linguaspark_\".concat(key), JSON.stringify(value));\n            }\n        }\n    },\n    /**\r\n   * Format attribution text for display\r\n   */ formatAttribution (attribution) {\n        return attribution.startsWith(\"Source: \") ? attribution : \"Source: \".concat(attribution);\n    },\n    /**\r\n   * Create lesson metadata display\r\n   */ createMetadataDisplay (metadata) {\n        const parts = [];\n        if (metadata.title) {\n            parts.push(metadata.title);\n        }\n        if (metadata.author) {\n            parts.push(\"by \".concat(metadata.author));\n        }\n        if (metadata.domain) {\n            parts.push(\"from \".concat(metadata.domain));\n        }\n        parts.push(\"\".concat(metadata.wordCount, \" words\"));\n        parts.push(\"\".concat(metadata.readingTime, \" min read\"));\n        return parts.join(\" • \");\n    },\n    /**\r\n   * Debug storage state for troubleshooting\r\n   */ async debugStorageState () {\n        console.log(\"[LessonInterfaceBridge] Debug Storage State:\");\n        console.log(\"- Chrome extension context:\", this.isChromeExtensionContext());\n        console.log(\"- URL:\", window.location.href);\n        console.log(\"- URL params:\", Object.fromEntries(new URLSearchParams(window.location.search)));\n        if (this.isChromeExtensionContext()) {\n            const chromeData = await this.safeStorageGet([\n                \"lessonConfiguration\",\n                \"extractedContent\",\n                \"selectedText\"\n            ]);\n            console.log(\"- Chrome storage:\", chromeData);\n        }\n        console.log(\"- Session storage keys:\", Object.keys(sessionStorage).filter((k)=>k.startsWith(\"linguaspark_\")));\n        const sessionConfig = sessionStorage.getItem(\"linguaspark_lesson_config\");\n        if (sessionConfig) {\n            try {\n                console.log(\"- Session config:\", JSON.parse(sessionConfig));\n            } catch (e) {\n                console.log(\"- Session config (raw):\", sessionConfig);\n            }\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/lesson-interface-bridge.ts\n"));

/***/ })

});