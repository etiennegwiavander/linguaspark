"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/popup/page",{

/***/ "(app-pages-browser)/./lib/export-utils.ts":
/*!*****************************!*\
  !*** ./lib/export-utils.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LessonExporter: function() { return /* binding */ LessonExporter; },\n/* harmony export */   lessonExporter: function() { return /* binding */ lessonExporter; },\n/* harmony export */   safeStripMarkdown: function() { return /* binding */ safeStripMarkdown; },\n/* harmony export */   stripMarkdown: function() { return /* binding */ stripMarkdown; }\n/* harmony export */ });\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ \"(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js\");\n/* harmony import */ var docx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! docx */ \"(app-pages-browser)/./node_modules/docx/dist/index.mjs\");\n/* harmony import */ var _avatar_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./avatar-utils */ \"(app-pages-browser)/./lib/avatar-utils.ts\");\n\n\n\n/**\n * Strips markdown formatting from text while preserving content.\n * Handles bold syntax (**text**, __text__) and italic syntax (*text*, _text_).\n * Recursively processes nested markdown.\n * \n * @param text - The text containing markdown syntax\n * @returns The text with markdown syntax removed\n */ function stripMarkdown(text) {\n    if (!text || typeof text !== \"string\") {\n        return text;\n    }\n    let result = text;\n    // Remove bold syntax: **text** and __text__\n    // Use non-greedy matching to handle nested markdown\n    result = result.replace(/\\*\\*(.+?)\\*\\*/g, \"$1\");\n    result = result.replace(/__(.+?)__/g, \"$1\");\n    // Remove italic syntax: *text* and _text_\n    // Use non-greedy matching to handle nested markdown\n    result = result.replace(/\\*(.+?)\\*/g, \"$1\");\n    result = result.replace(/_(.+?)_/g, \"$1\");\n    return result;\n}\n/**\n * Safely strips markdown formatting from text with error handling.\n * If stripping fails, returns the original text and logs the error.\n * This ensures export processes never break due to markdown stripping failures.\n * \n * @param text - The text containing markdown syntax\n * @returns The text with markdown syntax removed, or original text if stripping fails\n */ function safeStripMarkdown(text) {\n    try {\n        return stripMarkdown(text);\n    } catch (error) {\n        console.error(\"Markdown stripping error:\", error);\n        console.error(\"Failed text:\", text === null || text === void 0 ? void 0 : text.substring(0, 100));\n        // Return original text if stripping fails to ensure export continues\n        return text;\n    }\n}\nclass LessonExporter {\n    formatDate() {\n        return new Date().toLocaleDateString(\"en-US\", {\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\"\n        });\n    }\n    validateLessonData(lessonData) {\n        var _sections_vocabulary, _sections_reading, _sections_comprehension, _sections_discussion, _sections_grammar, _sections_pronunciation, _sections_wrapup;\n        console.log(\"Validating lesson data:\", lessonData);\n        if (!lessonData) {\n            throw new Error(\"Lesson data is required\");\n        }\n        if (!lessonData.lessonTitle) {\n            throw new Error(\"AI-generated lesson title is required\");\n        }\n        if (!lessonData.lessonType) {\n            throw new Error(\"Lesson type is required\");\n        }\n        if (!lessonData.studentLevel) {\n            throw new Error(\"Student level is required\");\n        }\n        if (!lessonData.targetLanguage) {\n            throw new Error(\"Target language is required\");\n        }\n        if (!lessonData.sections) {\n            throw new Error(\"Lesson sections are required\");\n        }\n        // Validate sections structure with detailed logging\n        const sections = lessonData.sections;\n        console.log(\"Validating section types:\", {\n            warmup: {\n                type: typeof sections.warmup,\n                isArray: Array.isArray(sections.warmup),\n                value: sections.warmup\n            },\n            vocabulary: {\n                type: typeof sections.vocabulary,\n                isArray: Array.isArray(sections.vocabulary),\n                length: (_sections_vocabulary = sections.vocabulary) === null || _sections_vocabulary === void 0 ? void 0 : _sections_vocabulary.length\n            },\n            reading: {\n                type: typeof sections.reading,\n                length: (_sections_reading = sections.reading) === null || _sections_reading === void 0 ? void 0 : _sections_reading.length\n            },\n            comprehension: {\n                type: typeof sections.comprehension,\n                isArray: Array.isArray(sections.comprehension),\n                length: (_sections_comprehension = sections.comprehension) === null || _sections_comprehension === void 0 ? void 0 : _sections_comprehension.length\n            },\n            discussion: {\n                type: typeof sections.discussion,\n                isArray: Array.isArray(sections.discussion),\n                length: (_sections_discussion = sections.discussion) === null || _sections_discussion === void 0 ? void 0 : _sections_discussion.length\n            },\n            grammar: {\n                type: typeof sections.grammar,\n                hasFocus: !!((_sections_grammar = sections.grammar) === null || _sections_grammar === void 0 ? void 0 : _sections_grammar.focus)\n            },\n            pronunciation: {\n                type: typeof sections.pronunciation,\n                hasWord: !!((_sections_pronunciation = sections.pronunciation) === null || _sections_pronunciation === void 0 ? void 0 : _sections_pronunciation.word)\n            },\n            wrapup: {\n                type: typeof sections.wrapup,\n                isArray: Array.isArray(sections.wrapup),\n                length: (_sections_wrapup = sections.wrapup) === null || _sections_wrapup === void 0 ? void 0 : _sections_wrapup.length\n            }\n        });\n        if (!Array.isArray(sections.warmup)) {\n            console.warn(\"Warmup section is not an array:\", sections.warmup);\n        }\n        if (!Array.isArray(sections.vocabulary)) {\n            console.warn(\"Vocabulary section is not an array:\", sections.vocabulary);\n        }\n        if (typeof sections.reading !== \"string\") {\n            console.warn(\"Reading section is not a string:\", sections.reading);\n        }\n        if (!Array.isArray(sections.comprehension)) {\n            console.warn(\"Comprehension section is not an array:\", sections.comprehension);\n        }\n        if (!Array.isArray(sections.discussion)) {\n            console.warn(\"Discussion section is not an array:\", sections.discussion);\n        }\n        if (!sections.grammar || !sections.grammar.focus) {\n            console.warn(\"Grammar section is malformed:\", sections.grammar);\n        }\n        if (!sections.pronunciation || !sections.pronunciation.word) {\n            console.warn(\"Pronunciation section is malformed:\", sections.pronunciation);\n        }\n        if (!Array.isArray(sections.wrapup)) {\n            console.warn(\"Wrapup section is not an array:\", sections.wrapup);\n        }\n        console.log(\"Lesson data validation completed\");\n    }\n    async exportToPDF(lessonData, enabledSections) {\n        try {\n            console.log(\"Starting PDF export with data:\", {\n                lessonData,\n                enabledSections\n            });\n            // Check if we're in a browser environment\n            if (false) {}\n            // Check if jsPDF is available\n            if (typeof jspdf__WEBPACK_IMPORTED_MODULE_0__[\"default\"] === \"undefined\") {\n                throw new Error(\"jsPDF library is not available\");\n            }\n            console.log(\"Environment checks passed\");\n            this.validateLessonData(lessonData);\n            // Additional validation for enabled sections\n            if (!enabledSections || Object.keys(enabledSections).length === 0) {\n                throw new Error(\"No sections enabled for export\");\n            }\n            console.log(\"Creating jsPDF instance...\");\n            const pdf = new jspdf__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n            console.log(\"jsPDF instance created successfully\");\n            let yPosition = 20;\n            const pageHeight = pdf.internal.pageSize.height;\n            const margin = 20;\n            const lineHeight = 7;\n            console.log(\"PDF dimensions:\", {\n                pageHeight,\n                margin,\n                lineHeight\n            });\n            // Typography hierarchy constants (matching web interface)\n            const FONT_SIZES = {\n                LESSON_TITLE: 32,\n                SECTION_HEADER: 28,\n                MAIN_CONTENT: 16,\n                INSTRUCTIONS: 15,\n                SUPPLEMENTARY: 14 // Answer keys, explanations\n            };\n            // Helper function to add text with word wrapping\n            const addText = function(text) {\n                let fontSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : FONT_SIZES.MAIN_CONTENT, isBold = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, isItalic = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, indent = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;\n                try {\n                    // Sanitize text to prevent PDF errors and strip markdown formatting\n                    const sanitizedText = text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\") // Remove bold markdown (**text**)\n                    .replace(/\\*(.*?)\\*/g, \"$1\") // Remove italic markdown (*text*)\n                    .replace(/__(.*?)__/g, \"$1\") // Remove bold markdown (__text__)\n                    .replace(/_(.*?)_/g, \"$1\") // Remove italic markdown (_text_)\n                    .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, \"\") // Remove control characters\n                    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\u3000-\\u303F]/g, \" \") // Replace special spaces\n                    .trim();\n                    if (!sanitizedText) {\n                        console.warn(\"Empty text after sanitization, skipping\");\n                        return;\n                    }\n                    console.log('Adding text: \"'.concat(sanitizedText.substring(0, 50)).concat(sanitizedText.length > 50 ? \"...\" : \"\", '\"'));\n                    pdf.setFontSize(fontSize);\n                    // Set font style based on bold and italic flags\n                    let fontStyle = \"normal\";\n                    if (isBold && isItalic) {\n                        fontStyle = \"bolditalic\";\n                    } else if (isBold) {\n                        fontStyle = \"bold\";\n                    } else if (isItalic) {\n                        fontStyle = \"italic\";\n                    }\n                    pdf.setFont(\"helvetica\", fontStyle);\n                    const maxWidth = pdf.internal.pageSize.width - margin * 2 - indent;\n                    const lines = pdf.splitTextToSize(sanitizedText, maxWidth);\n                    for (const line of lines){\n                        if (yPosition > pageHeight - 30) {\n                            pdf.addPage();\n                            yPosition = 20;\n                        }\n                        pdf.text(line, margin + indent, yPosition);\n                        yPosition += lineHeight;\n                    }\n                    yPosition += 3 // Extra spacing after text block\n                    ;\n                } catch (error) {\n                    console.error(\"Error adding text to PDF:\", error, \"Text:\", text);\n                    throw error;\n                }\n            };\n            const addSection = (title, content)=>{\n                if (yPosition > pageHeight - 50) {\n                    pdf.addPage();\n                    yPosition = 20;\n                }\n                addText(title, FONT_SIZES.SECTION_HEADER, true);\n                yPosition += 5;\n                content();\n                yPosition += 10;\n            };\n            // Title and metadata\n            addText(lessonData.lessonTitle, FONT_SIZES.LESSON_TITLE, true);\n            addText(\"Target Language: \".concat(lessonData.targetLanguage.charAt(0).toUpperCase() + lessonData.targetLanguage.slice(1)), FONT_SIZES.SUPPLEMENTARY);\n            addText(\"Generated on: \".concat(this.formatDate()), FONT_SIZES.SUPPLEMENTARY);\n            yPosition += 10;\n            // Add sections based on enabled state\n            if (enabledSections.warmup && lessonData.sections.warmup) {\n                addSection(\"Warm-up Questions\", ()=>{\n                    const warmupQuestions = Array.isArray(lessonData.sections.warmup) ? lessonData.sections.warmup : [];\n                    warmupQuestions.forEach((question, index)=>{\n                        // First item is the instruction with light green background (italic) - manual rendering\n                        if (index === 0) {\n                            pdf.setFillColor(238, 247, 220) // #EEF7DC\n                            ;\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"italic\");\n                            const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 10;\n                            const instructionLines = pdf.splitTextToSize(question, instructionWidth);\n                            const instructionHeight = instructionLines.length * lineHeight + 6;\n                            // Draw background rectangle\n                            pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                            // Add instruction text\n                            for (const line of instructionLines){\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            }\n                            yPosition += 8 // Extra spacing after instruction\n                            ;\n                        } else {\n                            // Rest are actual questions (renumber starting from 1)\n                            addText(\"\".concat(index, \". \").concat(question), FONT_SIZES.MAIN_CONTENT, false, false, 10);\n                        }\n                    });\n                });\n            }\n            if (enabledSections.vocabulary && lessonData.sections.vocabulary) {\n                addSection(\"Key Vocabulary\", ()=>{\n                    const vocabularyItems = Array.isArray(lessonData.sections.vocabulary) ? lessonData.sections.vocabulary : [];\n                    let vocabIndex = 0 // Track actual vocabulary item numbering\n                    ;\n                    vocabularyItems.forEach((item, index)=>{\n                        // First item might be an instruction\n                        if (index === 0 && item.word === \"INSTRUCTION\") {\n                            pdf.setFillColor(241, 250, 255) // #F1FAFF\n                            ;\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"italic\");\n                            const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 10;\n                            const instructionLines = pdf.splitTextToSize(item.meaning, instructionWidth);\n                            const instructionHeight = instructionLines.length * lineHeight + 6;\n                            // Draw background rectangle\n                            pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                            // Add instruction text\n                            for (const line of instructionLines){\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            }\n                            yPosition += 8 // Extra spacing after instruction\n                            ;\n                            return;\n                        }\n                        vocabIndex++;\n                        addText(\"\".concat(vocabIndex, \". \").concat(item.word), FONT_SIZES.MAIN_CONTENT, true, false, 10);\n                        addText(\"   Meaning: \".concat(item.meaning), FONT_SIZES.MAIN_CONTENT, false, false, 15);\n                        // Handle both old format (example) and new format (examples array)\n                        if (item.examples && Array.isArray(item.examples) && item.examples.length > 0) {\n                            addText(\"   Examples:\", FONT_SIZES.INSTRUCTIONS, true, false, 15);\n                            const examples = Array.isArray(item.examples) ? item.examples : [];\n                            examples.forEach((example, exIndex)=>{\n                                addText(\"   \".concat(exIndex + 1, '. \"').concat(example, '\"'), FONT_SIZES.SUPPLEMENTARY, false, false, 20);\n                            });\n                        } else if (item.example) {\n                            addText('   Example: \"'.concat(item.example, '\"'), FONT_SIZES.SUPPLEMENTARY, false, false, 15);\n                        }\n                        yPosition += 3;\n                    });\n                });\n            }\n            if (enabledSections.reading && lessonData.sections.reading) {\n                addSection(\"Reading Passage\", ()=>{\n                    const readingContent = lessonData.sections.reading;\n                    const parts = readingContent.split(\"\\n\\n\");\n                    // Check if first part is an instruction\n                    if (parts.length > 1 && parts[0].includes(\"Read the following text carefully\")) {\n                        // Add instruction with light green background (italic) - manual rendering\n                        pdf.setFillColor(238, 247, 220) // #EEF7DC\n                        ;\n                        pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                        pdf.setFont(\"helvetica\", \"italic\");\n                        const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 10;\n                        const instructionLines = pdf.splitTextToSize(parts[0], instructionWidth);\n                        const instructionHeight = instructionLines.length * lineHeight + 6;\n                        // Draw background rectangle\n                        pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                        // Add instruction text\n                        for (const line of instructionLines){\n                            pdf.text(line, margin + 10, yPosition);\n                            yPosition += lineHeight;\n                        }\n                        yPosition += 8 // Extra spacing after instruction\n                        ;\n                        // Add the rest of the reading passage\n                        addText(parts.slice(1).join(\"\\n\\n\"), FONT_SIZES.MAIN_CONTENT, false, false, 10);\n                    } else {\n                        // No instruction, display as before\n                        addText(readingContent, FONT_SIZES.MAIN_CONTENT, false, false, 10);\n                    }\n                });\n            }\n            if (enabledSections.comprehension && lessonData.sections.comprehension) {\n                addSection(\"Reading Comprehension\", ()=>{\n                    const comprehensionQuestions = Array.isArray(lessonData.sections.comprehension) ? lessonData.sections.comprehension : [];\n                    comprehensionQuestions.forEach((question, index)=>{\n                        // First item is the instruction with light blue background (italic) - manual rendering\n                        if (index === 0) {\n                            pdf.setFillColor(241, 250, 255) // #F1FAFF\n                            ;\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"italic\");\n                            const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 10;\n                            const instructionLines = pdf.splitTextToSize(question, instructionWidth);\n                            const instructionHeight = instructionLines.length * lineHeight + 6;\n                            // Draw background rectangle\n                            pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                            // Add instruction text\n                            for (const line of instructionLines){\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            }\n                            yPosition += 8 // Extra spacing after instruction\n                            ;\n                        } else {\n                            // Rest are actual questions (renumber starting from 1)\n                            addText(\"\".concat(index, \". \").concat(question), FONT_SIZES.MAIN_CONTENT, false, false, 10);\n                        }\n                    });\n                });\n            }\n            if (enabledSections.discussion && lessonData.sections.discussion) {\n                addSection(\"Discussion Questions\", ()=>{\n                    const discussionQuestions = Array.isArray(lessonData.sections.discussion) ? lessonData.sections.discussion : [];\n                    discussionQuestions.forEach((question, index)=>{\n                        // First item is the instruction with light green background (italic) - manual rendering\n                        if (index === 0) {\n                            pdf.setFillColor(238, 247, 220) // #EEF7DC\n                            ;\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"italic\");\n                            const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 10;\n                            const instructionLines = pdf.splitTextToSize(question, instructionWidth);\n                            const instructionHeight = instructionLines.length * lineHeight + 6;\n                            // Draw background rectangle\n                            pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                            // Add instruction text\n                            for (const line of instructionLines){\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            }\n                            yPosition += 8 // Extra spacing after instruction\n                            ;\n                        } else {\n                            // Rest are actual questions (renumber starting from 1)\n                            addText(\"\".concat(index, \". \").concat(question), FONT_SIZES.MAIN_CONTENT, false, false, 10);\n                        }\n                    });\n                });\n            }\n            if (enabledSections.dialoguePractice && lessonData.sections.dialoguePractice) {\n                addSection(\"Dialogue Practice\", ()=>{\n                    const dialogueSection = lessonData.sections.dialoguePractice;\n                    // Add instruction with light green background color (italic) - manually without addText\n                    pdf.setFillColor(238, 247, 220) // #EEF7DC\n                    ;\n                    pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                    pdf.setFont(\"helvetica\", \"italic\");\n                    const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 10;\n                    const instructionLines = pdf.splitTextToSize(dialogueSection.instruction, instructionWidth);\n                    const instructionHeight = instructionLines.length * lineHeight + 6;\n                    // Draw background rectangle\n                    pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                    // Add instruction text\n                    for (const line of instructionLines){\n                        pdf.text(line, margin + 10, yPosition);\n                        yPosition += lineHeight;\n                    }\n                    yPosition += 8 // Extra spacing after instruction before dialogue starts\n                    ;\n                    // Enhance dialogue with avatar names\n                    const enhancedDialogue = (0,_avatar_utils__WEBPACK_IMPORTED_MODULE_2__.enhanceDialogueWithAvatars)(dialogueSection.dialogue, lessonData.id, \"dialoguePractice\");\n                    // Add dialogue lines with character names and spacing\n                    const dialoguePracticeLines = Array.isArray(enhancedDialogue) ? enhancedDialogue : [];\n                    dialoguePracticeLines.forEach((line, index)=>{\n                        // Add 3px gap between dialogue lines (except first)\n                        if (index > 0) {\n                            yPosition += 3;\n                        }\n                        // Character name in bold, then line\n                        pdf.setFontSize(FONT_SIZES.MAIN_CONTENT);\n                        pdf.setFont(\"helvetica\", \"bold\");\n                        const charWidth = pdf.getTextWidth(\"\".concat(line.character, \": \"));\n                        pdf.text(\"\".concat(line.character, \": \"), margin + 10, yPosition);\n                        pdf.setFont(\"helvetica\", \"normal\");\n                        const maxWidth = pdf.internal.pageSize.width - margin * 2 - 10 - charWidth;\n                        const lineText = pdf.splitTextToSize(line.line, maxWidth);\n                        pdf.text(lineText[0], margin + 10 + charWidth, yPosition);\n                        yPosition += lineHeight;\n                        // Handle wrapped lines\n                        for(let i = 1; i < lineText.length; i++){\n                            if (yPosition > pageHeight - 30) {\n                                pdf.addPage();\n                                yPosition = 20;\n                            }\n                            pdf.text(lineText[i], margin + 10 + charWidth, yPosition);\n                            yPosition += lineHeight;\n                        }\n                    });\n                    if (dialogueSection.followUpQuestions && dialogueSection.followUpQuestions.length > 0) {\n                        yPosition += 5;\n                        addText(\"Follow-up Questions:\", FONT_SIZES.INSTRUCTIONS, true, false, 10);\n                        const followUpQuestions = Array.isArray(dialogueSection.followUpQuestions) ? dialogueSection.followUpQuestions : [];\n                        followUpQuestions.forEach((question, index)=>{\n                            addText(\"\".concat(index + 1, \". \").concat(question), FONT_SIZES.MAIN_CONTENT, false, false, 15);\n                        });\n                    }\n                });\n            }\n            if (enabledSections.dialogueFillGap && lessonData.sections.dialogueFillGap) {\n                addSection(\"Dialogue Fill-in-the-Gap\", ()=>{\n                    const dialogueSection = lessonData.sections.dialogueFillGap;\n                    // Add instruction with light blue background color (italic) - manually without addText\n                    pdf.setFillColor(241, 250, 255) // #F1FAFF\n                    ;\n                    pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                    pdf.setFont(\"helvetica\", \"italic\");\n                    const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 10;\n                    const instructionLines = pdf.splitTextToSize(dialogueSection.instruction, instructionWidth);\n                    const instructionHeight = instructionLines.length * lineHeight + 6;\n                    // Draw background rectangle\n                    pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                    // Add instruction text\n                    for (const line of instructionLines){\n                        pdf.text(line, margin + 10, yPosition);\n                        yPosition += lineHeight;\n                    }\n                    yPosition += 8 // Extra spacing after instruction before dialogue starts\n                    ;\n                    // Enhance dialogue with avatar names\n                    const enhancedDialogue = (0,_avatar_utils__WEBPACK_IMPORTED_MODULE_2__.enhanceDialogueWithAvatars)(dialogueSection.dialogue, lessonData.id, \"dialogueFillGap\");\n                    // Add dialogue lines with character names and spacing\n                    const dialogueFillGapLines = Array.isArray(enhancedDialogue) ? enhancedDialogue : [];\n                    dialogueFillGapLines.forEach((line, index)=>{\n                        // Add 3px gap between dialogue lines (except first)\n                        if (index > 0) {\n                            yPosition += 3;\n                        }\n                        // Character name in bold, then line\n                        pdf.setFontSize(FONT_SIZES.MAIN_CONTENT);\n                        pdf.setFont(\"helvetica\", \"bold\");\n                        const charWidth = pdf.getTextWidth(\"\".concat(line.character, \": \"));\n                        pdf.text(\"\".concat(line.character, \": \"), margin + 10, yPosition);\n                        pdf.setFont(\"helvetica\", \"normal\");\n                        const maxWidth = pdf.internal.pageSize.width - margin * 2 - 10 - charWidth;\n                        const lineText = pdf.splitTextToSize(line.line, maxWidth);\n                        pdf.text(lineText[0], margin + 10 + charWidth, yPosition);\n                        yPosition += lineHeight;\n                        // Handle wrapped lines\n                        for(let i = 1; i < lineText.length; i++){\n                            if (yPosition > pageHeight - 30) {\n                                pdf.addPage();\n                                yPosition = 20;\n                            }\n                            pdf.text(lineText[i], margin + 10 + charWidth, yPosition);\n                            yPosition += lineHeight;\n                        }\n                    });\n                    if (dialogueSection.answers && dialogueSection.answers.length > 0) {\n                        yPosition += 5;\n                        addText(\"Answer Key:\", FONT_SIZES.INSTRUCTIONS, true, false, 10);\n                        addText(dialogueSection.answers.join(\", \"), FONT_SIZES.SUPPLEMENTARY, false, false, 15);\n                    }\n                });\n            }\n            if (enabledSections.grammar && lessonData.sections.grammar) {\n                addSection(\"Grammar Focus\", ()=>{\n                    addText(lessonData.sections.grammar.focus, FONT_SIZES.MAIN_CONTENT, true, false, 10);\n                    yPosition += 5;\n                    // Grammar Explanation (Form, Usage, Notes)\n                    if (lessonData.sections.grammar.explanation) {\n                        const explanation = lessonData.sections.grammar.explanation;\n                        if (explanation.form) {\n                            const formWidth = pdf.internal.pageSize.width - margin * 2 - 20;\n                            // Calculate heights for background\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"bold\");\n                            const formTitleLines = pdf.splitTextToSize(\"Form:\", formWidth);\n                            const formTitleHeight = formTitleLines.length * lineHeight;\n                            pdf.setFont(\"helvetica\", \"normal\");\n                            const formLines = pdf.splitTextToSize(explanation.form, formWidth);\n                            const formContentHeight = formLines.length * lineHeight;\n                            const totalFormHeight = formTitleHeight + formContentHeight + 8;\n                            // Draw background rectangle\n                            pdf.setFillColor(241, 250, 255) // #F1FAFF light blue\n                            ;\n                            pdf.rect(margin + 10, yPosition - 4, formWidth, totalFormHeight, \"F\");\n                            // Draw title text in black\n                            pdf.setTextColor(0, 0, 0) // Black text\n                            ;\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"bold\");\n                            pdf.text(\"Form:\", margin + 10, yPosition);\n                            yPosition += lineHeight;\n                            // Draw content text in black\n                            pdf.setFont(\"helvetica\", \"normal\");\n                            for (const line of formLines){\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            }\n                            yPosition += 5;\n                        }\n                        if (explanation.usage) {\n                            const usageWidth = pdf.internal.pageSize.width - margin * 2 - 20;\n                            // Calculate heights for background\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"bold\");\n                            const usageTitleLines = pdf.splitTextToSize(\"Usage:\", usageWidth);\n                            const usageTitleHeight = usageTitleLines.length * lineHeight;\n                            pdf.setFont(\"helvetica\", \"normal\");\n                            const usageLines = pdf.splitTextToSize(explanation.usage, usageWidth);\n                            const usageContentHeight = usageLines.length * lineHeight;\n                            const totalUsageHeight = usageTitleHeight + usageContentHeight + 8;\n                            // Draw background rectangle\n                            pdf.setFillColor(241, 250, 255) // #F1FAFF light blue\n                            ;\n                            pdf.rect(margin + 10, yPosition - 4, usageWidth, totalUsageHeight, \"F\");\n                            // Draw title text in black\n                            pdf.setTextColor(0, 0, 0) // Black text\n                            ;\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"bold\");\n                            pdf.text(\"Usage:\", margin + 10, yPosition);\n                            yPosition += lineHeight;\n                            // Draw content text in black\n                            pdf.setFont(\"helvetica\", \"normal\");\n                            for (const line of usageLines){\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            }\n                            yPosition += 5;\n                        }\n                        if (explanation.levelNotes) {\n                            const noteWidth = pdf.internal.pageSize.width - margin * 2 - 20;\n                            // Calculate heights for background\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"bold\");\n                            const noteTitleLines = pdf.splitTextToSize(\"Note:\", noteWidth);\n                            const noteTitleHeight = noteTitleLines.length * lineHeight;\n                            pdf.setFont(\"helvetica\", \"italic\");\n                            const noteLines = pdf.splitTextToSize(explanation.levelNotes, noteWidth);\n                            const noteContentHeight = noteLines.length * lineHeight;\n                            const totalNoteHeight = noteTitleHeight + noteContentHeight + 8;\n                            // Draw background rectangle\n                            pdf.setFillColor(241, 250, 255) // #F1FAFF light blue\n                            ;\n                            pdf.rect(margin + 10, yPosition - 4, noteWidth, totalNoteHeight, \"F\");\n                            // Draw title text in black\n                            pdf.setTextColor(0, 0, 0) // Black text\n                            ;\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"bold\");\n                            pdf.text(\"Note:\", margin + 10, yPosition);\n                            yPosition += lineHeight;\n                            // Draw content text in black (italic)\n                            pdf.setFont(\"helvetica\", \"italic\");\n                            for (const line of noteLines){\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            }\n                            yPosition += 8;\n                        }\n                    }\n                    // Examples\n                    addText(\"Examples:\", FONT_SIZES.INSTRUCTIONS, true, false, 10);\n                    const grammarExamples = Array.isArray(lessonData.sections.grammar.examples) ? lessonData.sections.grammar.examples : [];\n                    grammarExamples.forEach((example, index)=>{\n                        addText(example, FONT_SIZES.MAIN_CONTENT, false, false, 15);\n                    });\n                    yPosition += 5;\n                    // Practice Exercises\n                    addText(\"Practice Exercises:\", FONT_SIZES.INSTRUCTIONS, true, false, 10);\n                    // Check for new format (exercises) or old format (exercise)\n                    if (lessonData.sections.grammar.exercises && Array.isArray(lessonData.sections.grammar.exercises)) {\n                        // New format with structured exercises\n                        lessonData.sections.grammar.exercises.forEach((exercise, index)=>{\n                            addText(\"\".concat(index + 1, \". \").concat(exercise.prompt), FONT_SIZES.MAIN_CONTENT, false, false, 15);\n                            if (exercise.answer) {\n                                addText(\"Answer: \".concat(exercise.answer), FONT_SIZES.SUPPLEMENTARY, false, false, 20);\n                            }\n                            if (exercise.explanation) {\n                                addText(exercise.explanation, FONT_SIZES.SUPPLEMENTARY, false, true, 20);\n                            }\n                            yPosition += 3;\n                        });\n                    } else if (lessonData.sections.grammar.exercise && Array.isArray(lessonData.sections.grammar.exercise)) {\n                        // Old format\n                        const grammarExercises = lessonData.sections.grammar.exercise;\n                        grammarExercises.forEach((exercise, index)=>{\n                            addText(\"\".concat(index + 1, \". \").concat(exercise), FONT_SIZES.MAIN_CONTENT, false, false, 15);\n                        });\n                    }\n                });\n            }\n            if (enabledSections.pronunciation && lessonData.sections.pronunciation) {\n                addSection(\"Pronunciation Practice\", ()=>{\n                    const pronSection = lessonData.sections.pronunciation;\n                    // Add instruction if present\n                    if (pronSection.instruction) {\n                        const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 20;\n                        // Calculate height for background\n                        pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                        pdf.setFont(\"helvetica\", \"italic\");\n                        const instructionLines = pdf.splitTextToSize(pronSection.instruction, instructionWidth);\n                        const instructionHeight = instructionLines.length * lineHeight + 8;\n                        // Draw background rectangle\n                        pdf.setFillColor(241, 250, 255) // #F1FAFF light blue\n                        ;\n                        pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                        // Draw instruction text in black\n                        pdf.setTextColor(0, 0, 0);\n                        for (const line of instructionLines){\n                            pdf.text(line, margin + 10, yPosition);\n                            yPosition += lineHeight;\n                        }\n                        yPosition += 8;\n                    }\n                    // Handle both old format (single word) and new format (words array)\n                    if (pronSection.words && Array.isArray(pronSection.words) && pronSection.words.length > 0) {\n                        // New format with multiple words\n                        pronSection.words.forEach((wordItem, index)=>{\n                            if (index > 0) yPosition += 8 // Spacing between words\n                            ;\n                            // Check for page break\n                            if (yPosition > pageHeight - 30) {\n                                pdf.addPage();\n                                yPosition = 20;\n                            }\n                            // Word and IPA - use addText for proper wrapping and sanitization\n                            pdf.setTextColor(0, 0, 0);\n                            pdf.setFontSize(FONT_SIZES.MAIN_CONTENT);\n                            pdf.setFont(\"helvetica\", \"bold\");\n                            const wordText = wordItem.word || \"N/A\";\n                            const ipaText = wordItem.ipa || \"N/A\";\n                            // Word on its own line (bold)\n                            const maxWidth = pdf.internal.pageSize.width - margin * 2 - 20;\n                            const wordLines = pdf.splitTextToSize(wordText, maxWidth);\n                            wordLines.forEach((line)=>{\n                                if (yPosition > pageHeight - 30) {\n                                    pdf.addPage();\n                                    yPosition = 20;\n                                }\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            });\n                            // IPA on next line (normal font, in brackets)\n                            pdf.setFont(\"helvetica\", \"normal\");\n                            pdf.setFontSize(FONT_SIZES.SUPPLEMENTARY);\n                            const ipaLines = pdf.splitTextToSize(\"IPA: [\".concat(ipaText, \"]\"), maxWidth);\n                            ipaLines.forEach((line)=>{\n                                if (yPosition > pageHeight - 30) {\n                                    pdf.addPage();\n                                    yPosition = 20;\n                                }\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            });\n                            yPosition += 3;\n                            // Difficult Sounds\n                            if (wordItem.difficultSounds && wordItem.difficultSounds.length > 0) {\n                                if (yPosition > pageHeight - 30) {\n                                    pdf.addPage();\n                                    yPosition = 20;\n                                }\n                                pdf.setTextColor(0, 0, 0);\n                                pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                                pdf.setFont(\"helvetica\", \"normal\");\n                                pdf.text(\"Difficult Sounds:\", margin + 10, yPosition);\n                                yPosition += lineHeight;\n                                pdf.setFontSize(FONT_SIZES.SUPPLEMENTARY);\n                                const soundsText = wordItem.difficultSounds.map((s)=>\"/\".concat(s, \"/\")).join(\"  \");\n                                const soundsMaxWidth = pdf.internal.pageSize.width - margin * 2 - 25;\n                                const soundsLines = pdf.splitTextToSize(soundsText, soundsMaxWidth);\n                                soundsLines.forEach((line)=>{\n                                    if (yPosition > pageHeight - 30) {\n                                        pdf.addPage();\n                                        yPosition = 20;\n                                    }\n                                    pdf.text(line, margin + 15, yPosition);\n                                    yPosition += lineHeight;\n                                });\n                                yPosition += 3;\n                            }\n                            // Pronunciation Tips\n                            if (wordItem.tips && wordItem.tips.length > 0) {\n                                if (yPosition > pageHeight - 30) {\n                                    pdf.addPage();\n                                    yPosition = 20;\n                                }\n                                pdf.setTextColor(0, 0, 0);\n                                pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                                pdf.setFont(\"helvetica\", \"normal\");\n                                pdf.text(\"Pronunciation Tips:\", margin + 10, yPosition);\n                                yPosition += lineHeight;\n                                pdf.setFontSize(FONT_SIZES.SUPPLEMENTARY);\n                                pdf.setFont(\"helvetica\", \"normal\");\n                                wordItem.tips.forEach((tip)=>{\n                                    // Wrap long tips properly\n                                    const tipMaxWidth = pdf.internal.pageSize.width - margin * 2 - 25;\n                                    const tipLines = pdf.splitTextToSize(\"• \".concat(tip), tipMaxWidth);\n                                    tipLines.forEach((line)=>{\n                                        if (yPosition > pageHeight - 30) {\n                                            pdf.addPage();\n                                            yPosition = 20;\n                                        }\n                                        pdf.text(line, margin + 15, yPosition);\n                                        yPosition += lineHeight;\n                                    });\n                                });\n                                yPosition += 3;\n                            }\n                            // Practice Sentence\n                            if (wordItem.practiceSentence) {\n                                if (yPosition > pageHeight - 30) {\n                                    pdf.addPage();\n                                    yPosition = 20;\n                                }\n                                pdf.setTextColor(0, 0, 0);\n                                pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                                pdf.setFont(\"helvetica\", \"normal\");\n                                pdf.text(\"Practice Sentence:\", margin + 10, yPosition);\n                                yPosition += lineHeight;\n                                pdf.setFontSize(FONT_SIZES.MAIN_CONTENT);\n                                const sentenceMaxWidth = pdf.internal.pageSize.width - margin * 2 - 25;\n                                const sentenceLines = pdf.splitTextToSize(wordItem.practiceSentence, sentenceMaxWidth);\n                                sentenceLines.forEach((line)=>{\n                                    if (yPosition > pageHeight - 30) {\n                                        pdf.addPage();\n                                        yPosition = 20;\n                                    }\n                                    pdf.text(line, margin + 15, yPosition);\n                                    yPosition += lineHeight;\n                                });\n                                yPosition += 3;\n                            }\n                        });\n                    } else if (pronSection.word) {\n                        // Old format with single word\n                        addText(\"Word: \".concat(pronSection.word || \"N/A\"), FONT_SIZES.MAIN_CONTENT, true, false, 10);\n                        addText(\"IPA: \".concat(pronSection.ipa || \"N/A\"), FONT_SIZES.SUPPLEMENTARY, false, false, 10);\n                        if (pronSection.practice) {\n                            addText('Practice: \"'.concat(pronSection.practice, '\"'), FONT_SIZES.MAIN_CONTENT, false, false, 10);\n                        }\n                    } else {\n                        addText(\"No pronunciation data available\", FONT_SIZES.MAIN_CONTENT, false, false, 10);\n                    }\n                });\n            }\n            if (enabledSections.wrapup && lessonData.sections.wrapup) {\n                addSection(\"Lesson Wrap-up\", ()=>{\n                    const wrapupQuestions = Array.isArray(lessonData.sections.wrapup) ? lessonData.sections.wrapup : [];\n                    wrapupQuestions.forEach((question, index)=>{\n                        // First item is the instruction - manual rendering (no numbering)\n                        if (index === 0) {\n                            pdf.setFillColor(238, 247, 220) // #EEF7DC\n                            ;\n                            pdf.setFontSize(FONT_SIZES.INSTRUCTIONS);\n                            pdf.setFont(\"helvetica\", \"italic\");\n                            const instructionWidth = pdf.internal.pageSize.width - margin * 2 - 10;\n                            const instructionLines = pdf.splitTextToSize(question, instructionWidth);\n                            const instructionHeight = instructionLines.length * lineHeight + 6;\n                            // Draw background rectangle\n                            pdf.rect(margin + 10, yPosition - 4, instructionWidth, instructionHeight, \"F\");\n                            // Add instruction text\n                            for (const line of instructionLines){\n                                pdf.text(line, margin + 10, yPosition);\n                                yPosition += lineHeight;\n                            }\n                            yPosition += 8 // Extra spacing after instruction\n                            ;\n                        } else {\n                            // Rest are actual questions (renumber starting from 1)\n                            addText(\"\".concat(index, \". \").concat(question), FONT_SIZES.MAIN_CONTENT, false, false, 10);\n                        }\n                    });\n                });\n            }\n            // Footer\n            const pageCount = pdf.internal.getNumberOfPages();\n            for(let i = 1; i <= pageCount; i++){\n                pdf.setPage(i);\n                pdf.setFontSize(8);\n                pdf.setFont(\"helvetica\", \"normal\");\n                pdf.text(\"Generated by LinguaSpark - Page \".concat(i, \" of \").concat(pageCount), margin, pageHeight - 10);\n            }\n            // Download the PDF\n            try {\n                const fileName = \"\".concat(lessonData.lessonType, \"-lesson-\").concat(lessonData.studentLevel, \"-\").concat(Date.now(), \".pdf\");\n                console.log(\"Saving PDF with filename:\", fileName);\n                pdf.save(fileName);\n                console.log(\"PDF export completed successfully\");\n            } catch (saveError) {\n                console.error(\"Error saving PDF:\", saveError);\n                throw new Error(\"Failed to save PDF: \".concat(saveError instanceof Error ? saveError.message : \"Unknown save error\"));\n            }\n        } catch (error) {\n            console.error(\"PDF export error:\", error);\n            console.error(\"Error stack:\", error instanceof Error ? error.stack : \"No stack trace\");\n            console.error(\"Error details:\", {\n                name: error instanceof Error ? error.name : \"Unknown\",\n                message: error instanceof Error ? error.message : \"Unknown error\",\n                lessonDataKeys: lessonData ? Object.keys(lessonData) : \"No lesson data\",\n                sectionsKeys: (lessonData === null || lessonData === void 0 ? void 0 : lessonData.sections) ? Object.keys(lessonData.sections) : \"No sections\",\n                enabledSectionsKeys: enabledSections ? Object.keys(enabledSections) : \"No enabled sections\"\n            });\n            throw new Error(\"PDF export failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async exportToWord(lessonData, enabledSections) {\n        try {\n            console.log(\"Starting Word export with data:\", {\n                lessonData,\n                enabledSections\n            });\n            this.validateLessonData(lessonData);\n            // Additional validation for enabled sections\n            if (!enabledSections || Object.keys(enabledSections).length === 0) {\n                throw new Error(\"No sections enabled for export\");\n            }\n            const children = [];\n            // Typography hierarchy constants (in half-points for Word - multiply by 2)\n            // 32px = 24pt, 28px = 21pt, 16px = 12pt, 15px = 11.25pt, 14px = 10.5pt\n            const WORD_FONT_SIZES = {\n                LESSON_TITLE: 48,\n                SECTION_HEADER: 42,\n                MAIN_CONTENT: 24,\n                INSTRUCTIONS: 23,\n                SUPPLEMENTARY: 21 // 10.5pt (14px equivalent)\n            };\n            // Title and metadata\n            children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                        text: safeStripMarkdown(lessonData.lessonTitle),\n                        bold: true,\n                        size: WORD_FONT_SIZES.LESSON_TITLE\n                    })\n                ],\n                heading: docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.TITLE,\n                alignment: docx__WEBPACK_IMPORTED_MODULE_1__.AlignmentType.CENTER,\n                spacing: {\n                    after: 400\n                }\n            }));\n            children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                        text: \"Target Language: \".concat(lessonData.targetLanguage.charAt(0).toUpperCase() + lessonData.targetLanguage.slice(1)),\n                        size: WORD_FONT_SIZES.SUPPLEMENTARY\n                    })\n                ],\n                spacing: {\n                    after: 200\n                }\n            }));\n            children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                        text: \"Generated on: \".concat(this.formatDate()),\n                        size: WORD_FONT_SIZES.SUPPLEMENTARY\n                    })\n                ],\n                spacing: {\n                    after: 400\n                }\n            }));\n            // Helper function to add section\n            const addSection = (title, content)=>{\n                children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                            text: title,\n                            bold: true,\n                            size: WORD_FONT_SIZES.SECTION_HEADER,\n                            underline: {\n                                type: docx__WEBPACK_IMPORTED_MODULE_1__.UnderlineType.SINGLE\n                            }\n                        })\n                    ],\n                    heading: docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.HEADING_2,\n                    spacing: {\n                        before: 400,\n                        after: 200\n                    }\n                }));\n                children.push(...content);\n            };\n            // Add sections based on enabled state\n            if (enabledSections.warmup && lessonData.sections.warmup) {\n                const warmupQuestions = Array.isArray(lessonData.sections.warmup) ? lessonData.sections.warmup : [];\n                const warmupContent = warmupQuestions.map((question, index)=>{\n                    // First item is the instruction with light green background\n                    if (index === 0) {\n                        return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(question),\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS,\n                                    italics: true\n                                })\n                            ],\n                            spacing: {\n                                after: 200\n                            },\n                            shading: {\n                                fill: \"EEF7DC\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        });\n                    } else {\n                        // Rest are actual questions (renumber starting from 1)\n                        return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(\"\".concat(index, \". \").concat(question)),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 150\n                            }\n                        });\n                    }\n                });\n                addSection(\"Warm-up Questions\", warmupContent);\n            }\n            if (enabledSections.vocabulary && lessonData.sections.vocabulary) {\n                const vocabContent = [];\n                const vocabularyItems = Array.isArray(lessonData.sections.vocabulary) ? lessonData.sections.vocabulary : [];\n                vocabularyItems.forEach((item, index)=>{\n                    // First item might be an instruction\n                    if (index === 0 && item.word === \"INSTRUCTION\") {\n                        vocabContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(item.meaning),\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS,\n                                    italics: true\n                                })\n                            ],\n                            spacing: {\n                                after: 200\n                            },\n                            shading: {\n                                fill: \"F1FAFF\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        }));\n                        return;\n                    }\n                    vocabContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"\".concat(index + 1, \". \").concat(safeStripMarkdown(item.word)),\n                                bold: true,\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            after: 100\n                        }\n                    }));\n                    vocabContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"   Meaning: \".concat(safeStripMarkdown(item.meaning)),\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            after: 100\n                        }\n                    }));\n                    // Handle both old format (example) and new format (examples array)\n                    if (item.examples && Array.isArray(item.examples) && item.examples.length > 0) {\n                        vocabContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: \"   Examples:\",\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS,\n                                    bold: true\n                                })\n                            ],\n                            spacing: {\n                                after: 100\n                            }\n                        }));\n                        // Additional safety check before forEach\n                        const examples = Array.isArray(item.examples) ? item.examples : [];\n                        examples.forEach((example, exIndex)=>{\n                            vocabContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: \"      \".concat(exIndex + 1, '. \"').concat(safeStripMarkdown(example), '\"'),\n                                        size: WORD_FONT_SIZES.SUPPLEMENTARY,\n                                        italics: true\n                                    })\n                                ],\n                                spacing: {\n                                    after: 100\n                                }\n                            }));\n                        });\n                        vocabContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: \"\"\n                                })\n                            ],\n                            spacing: {\n                                after: 100\n                            }\n                        }));\n                    } else if (item.example) {\n                        vocabContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: '   Example: \"'.concat(safeStripMarkdown(item.example), '\"'),\n                                    size: WORD_FONT_SIZES.SUPPLEMENTARY,\n                                    italics: true\n                                })\n                            ],\n                            spacing: {\n                                after: 200\n                            }\n                        }));\n                    }\n                });\n                addSection(\"Key Vocabulary\", vocabContent);\n            }\n            if (enabledSections.reading && lessonData.sections.reading) {\n                const readingText = lessonData.sections.reading;\n                const parts = readingText.split(\"\\n\\n\");\n                const readingContent = [];\n                // Check if first part is an instruction\n                if (parts.length > 1 && parts[0].includes(\"Read the following text carefully\")) {\n                    // Add instruction with light green background\n                    readingContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: safeStripMarkdown(parts[0]),\n                                size: WORD_FONT_SIZES.INSTRUCTIONS,\n                                italics: true\n                            })\n                        ],\n                        spacing: {\n                            after: 200\n                        },\n                        shading: {\n                            fill: \"EEF7DC\"\n                        },\n                        border: {\n                            left: {\n                                color: \"CCCCCC\",\n                                size: 6,\n                                style: \"single\"\n                            }\n                        }\n                    }));\n                    // Add the rest of the reading passage\n                    readingContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: safeStripMarkdown(parts.slice(1).join(\"\\n\\n\")),\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            after: 200\n                        }\n                    }));\n                } else {\n                    // No instruction, display as before\n                    readingContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: safeStripMarkdown(readingText),\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            after: 200\n                        }\n                    }));\n                }\n                addSection(\"Reading Passage\", readingContent);\n            }\n            if (enabledSections.comprehension && lessonData.sections.comprehension) {\n                const comprehensionQuestions = Array.isArray(lessonData.sections.comprehension) ? lessonData.sections.comprehension : [];\n                const comprehensionContent = comprehensionQuestions.map((question, index)=>{\n                    // First item is the instruction with light blue background\n                    if (index === 0) {\n                        return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(question),\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS,\n                                    italics: true\n                                })\n                            ],\n                            spacing: {\n                                after: 200\n                            },\n                            shading: {\n                                fill: \"F1FAFF\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        });\n                    } else {\n                        // Rest are actual questions (renumber starting from 1)\n                        return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(\"\".concat(index, \". \").concat(question)),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 150\n                            }\n                        });\n                    }\n                });\n                addSection(\"Reading Comprehension\", comprehensionContent);\n            }\n            if (enabledSections.discussion && lessonData.sections.discussion) {\n                const discussionQuestions = Array.isArray(lessonData.sections.discussion) ? lessonData.sections.discussion : [];\n                const discussionContent = discussionQuestions.map((question, index)=>{\n                    // First item is the instruction with light green background\n                    if (index === 0) {\n                        return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(question),\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS,\n                                    italics: true\n                                })\n                            ],\n                            spacing: {\n                                after: 200\n                            },\n                            shading: {\n                                fill: \"EEF7DC\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        });\n                    } else {\n                        // Rest are actual questions (renumber starting from 1)\n                        return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(\"\".concat(index, \". \").concat(question)),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 150\n                            }\n                        });\n                    }\n                });\n                addSection(\"Discussion Questions\", discussionContent);\n            }\n            if (enabledSections.dialoguePractice && lessonData.sections.dialoguePractice) {\n                const dialoguePracticeContent = [];\n                const dialogueSection = lessonData.sections.dialoguePractice;\n                // Add instruction with light green background (#EEF7DC)\n                dialoguePracticeContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                            text: safeStripMarkdown(dialogueSection.instruction),\n                            size: WORD_FONT_SIZES.INSTRUCTIONS,\n                            italics: true\n                        })\n                    ],\n                    spacing: {\n                        after: 200\n                    },\n                    shading: {\n                        fill: \"EEF7DC\"\n                    },\n                    border: {\n                        left: {\n                            color: \"CCCCCC\",\n                            size: 6,\n                            style: \"single\"\n                        }\n                    }\n                }));\n                // Enhance dialogue with avatar names\n                const enhancedDialogue = (0,_avatar_utils__WEBPACK_IMPORTED_MODULE_2__.enhanceDialogueWithAvatars)(dialogueSection.dialogue, lessonData.id, \"dialoguePractice\");\n                // Add dialogue lines with character names in bold and 3px spacing between lines\n                const dialogueLines = Array.isArray(enhancedDialogue) ? enhancedDialogue : [];\n                dialogueLines.forEach((line, index)=>{\n                    dialoguePracticeContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"\".concat(safeStripMarkdown(line.character), \": \"),\n                                bold: true,\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            }),\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: safeStripMarkdown(line.line),\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            before: index === 0 ? 0 : 60,\n                            after: 0\n                        }\n                    }));\n                });\n                // Add follow-up questions if any\n                if (dialogueSection.followUpQuestions && dialogueSection.followUpQuestions.length > 0) {\n                    dialoguePracticeContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"Follow-up Questions:\",\n                                bold: true,\n                                size: WORD_FONT_SIZES.INSTRUCTIONS\n                            })\n                        ],\n                        spacing: {\n                            before: 200,\n                            after: 100\n                        }\n                    }));\n                    const followUpQuestions = Array.isArray(dialogueSection.followUpQuestions) ? dialogueSection.followUpQuestions : [];\n                    followUpQuestions.forEach((question, index)=>{\n                        dialoguePracticeContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(\"\".concat(index + 1, \". \").concat(question)),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 100\n                            }\n                        }));\n                    });\n                }\n                addSection(\"Dialogue Practice\", dialoguePracticeContent);\n            }\n            if (enabledSections.dialogueFillGap && lessonData.sections.dialogueFillGap) {\n                const dialogueFillGapContent = [];\n                const dialogueSection = lessonData.sections.dialogueFillGap;\n                // Add instruction with light blue background (#F1FAFF)\n                dialogueFillGapContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                            text: safeStripMarkdown(dialogueSection.instruction),\n                            size: WORD_FONT_SIZES.INSTRUCTIONS,\n                            italics: true\n                        })\n                    ],\n                    spacing: {\n                        after: 200\n                    },\n                    shading: {\n                        fill: \"F1FAFF\"\n                    },\n                    border: {\n                        left: {\n                            color: \"CCCCCC\",\n                            size: 6,\n                            style: \"single\"\n                        }\n                    }\n                }));\n                // Enhance dialogue with avatar names\n                const enhancedDialogue = (0,_avatar_utils__WEBPACK_IMPORTED_MODULE_2__.enhanceDialogueWithAvatars)(dialogueSection.dialogue, lessonData.id, \"dialogueFillGap\");\n                // Add dialogue lines with character names in bold and 3px spacing between lines\n                const dialogueFillGapLines = Array.isArray(enhancedDialogue) ? enhancedDialogue : [];\n                dialogueFillGapLines.forEach((line, index)=>{\n                    dialogueFillGapContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"\".concat(safeStripMarkdown(line.character), \": \"),\n                                bold: true,\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            }),\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: safeStripMarkdown(line.line),\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            before: index === 0 ? 0 : 60,\n                            after: 0\n                        }\n                    }));\n                });\n                // Add answer key if any\n                if (dialogueSection.answers && dialogueSection.answers.length > 0) {\n                    dialogueFillGapContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"Answer Key:\",\n                                bold: true,\n                                size: WORD_FONT_SIZES.INSTRUCTIONS\n                            })\n                        ],\n                        spacing: {\n                            before: 200,\n                            after: 100\n                        }\n                    }));\n                    dialogueFillGapContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: safeStripMarkdown(dialogueSection.answers.join(\", \")),\n                                size: WORD_FONT_SIZES.SUPPLEMENTARY\n                            })\n                        ],\n                        spacing: {\n                            after: 100\n                        }\n                    }));\n                }\n                addSection(\"Dialogue Fill-in-the-Gap\", dialogueFillGapContent);\n            }\n            if (enabledSections.grammar && lessonData.sections.grammar) {\n                const grammarContent = [];\n                // Grammar topic/focus\n                grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                            text: safeStripMarkdown(lessonData.sections.grammar.focus),\n                            bold: true,\n                            size: WORD_FONT_SIZES.MAIN_CONTENT\n                        })\n                    ],\n                    spacing: {\n                        after: 200\n                    }\n                }));\n                // Grammar Explanation (Form, Usage, Notes)\n                if (lessonData.sections.grammar.explanation) {\n                    const explanation = lessonData.sections.grammar.explanation;\n                    if (explanation.form) {\n                        grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: \"Form:\",\n                                    bold: true,\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS\n                                })\n                            ],\n                            spacing: {\n                                after: 100\n                            },\n                            shading: {\n                                fill: \"F1FAFF\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        }));\n                        grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(explanation.form),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 150\n                            },\n                            shading: {\n                                fill: \"F1FAFF\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        }));\n                    }\n                    if (explanation.usage) {\n                        grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: \"Usage:\",\n                                    bold: true,\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS\n                                })\n                            ],\n                            spacing: {\n                                after: 100\n                            },\n                            shading: {\n                                fill: \"F1FAFF\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        }));\n                        grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(explanation.usage),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 150\n                            },\n                            shading: {\n                                fill: \"F1FAFF\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        }));\n                    }\n                    if (explanation.levelNotes) {\n                        grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: \"Note:\",\n                                    bold: true,\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS\n                                })\n                            ],\n                            spacing: {\n                                after: 100\n                            },\n                            shading: {\n                                fill: \"F1FAFF\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        }));\n                        grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(explanation.levelNotes),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT,\n                                    italics: true\n                                })\n                            ],\n                            spacing: {\n                                after: 200\n                            },\n                            shading: {\n                                fill: \"F1FAFF\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        }));\n                    }\n                }\n                // Examples\n                grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                            text: \"Examples:\",\n                            bold: true,\n                            size: WORD_FONT_SIZES.INSTRUCTIONS\n                        })\n                    ],\n                    spacing: {\n                        after: 100\n                    }\n                }));\n                const grammarExamples = Array.isArray(lessonData.sections.grammar.examples) ? lessonData.sections.grammar.examples : [];\n                grammarExamples.forEach((example)=>{\n                    grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: safeStripMarkdown(example),\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            after: 100\n                        }\n                    }));\n                });\n                // Practice Exercises\n                grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                    children: [\n                        new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                            text: \"Practice Exercises:\",\n                            bold: true,\n                            size: WORD_FONT_SIZES.INSTRUCTIONS\n                        })\n                    ],\n                    spacing: {\n                        before: 200,\n                        after: 100\n                    }\n                }));\n                // Check for new format (exercises) or old format (exercise)\n                if (lessonData.sections.grammar.exercises && Array.isArray(lessonData.sections.grammar.exercises)) {\n                    // New format with structured exercises\n                    lessonData.sections.grammar.exercises.forEach((exercise, index)=>{\n                        grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(\"\".concat(index + 1, \". \").concat(exercise.prompt)),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 100\n                            }\n                        }));\n                        if (exercise.answer) {\n                            grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: \"Answer: \".concat(safeStripMarkdown(exercise.answer)),\n                                        size: WORD_FONT_SIZES.SUPPLEMENTARY\n                                    })\n                                ],\n                                spacing: {\n                                    after: 100\n                                }\n                            }));\n                        }\n                        if (exercise.explanation) {\n                            grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: safeStripMarkdown(exercise.explanation),\n                                        size: WORD_FONT_SIZES.SUPPLEMENTARY,\n                                        italics: true\n                                    })\n                                ],\n                                spacing: {\n                                    after: 150\n                                }\n                            }));\n                        }\n                    });\n                } else if (lessonData.sections.grammar.exercise && Array.isArray(lessonData.sections.grammar.exercise)) {\n                    // Old format\n                    const grammarExercises = lessonData.sections.grammar.exercise;\n                    grammarExercises.forEach((exercise, index)=>{\n                        grammarContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(\"\".concat(index + 1, \". \").concat(exercise)),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 100\n                            }\n                        }));\n                    });\n                }\n                addSection(\"Grammar Focus\", grammarContent);\n            }\n            if (enabledSections.pronunciation && lessonData.sections.pronunciation) {\n                const pronSection = lessonData.sections.pronunciation;\n                const pronunciationContent = [];\n                // Add instruction if present\n                if (pronSection.instruction) {\n                    pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: safeStripMarkdown(pronSection.instruction),\n                                size: WORD_FONT_SIZES.INSTRUCTIONS,\n                                italics: true\n                            })\n                        ],\n                        spacing: {\n                            after: 200\n                        },\n                        shading: {\n                            fill: \"F1FAFF\"\n                        },\n                        border: {\n                            left: {\n                                color: \"CCCCCC\",\n                                size: 6,\n                                style: \"single\"\n                            }\n                        }\n                    }));\n                }\n                // Handle both old format (single word) and new format (words array)\n                if (pronSection.words && Array.isArray(pronSection.words) && pronSection.words.length > 0) {\n                    // New format with multiple words\n                    pronSection.words.forEach((wordItem, index)=>{\n                        if (index > 0) {\n                            // Add spacing between words\n                            pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: \"\"\n                                    })\n                                ],\n                                spacing: {\n                                    before: 300\n                                }\n                            }));\n                        }\n                        // Word and IPA\n                        pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: \"\".concat(safeStripMarkdown(wordItem.word || \"N/A\"), \" \"),\n                                    bold: true,\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                }),\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: \"[\".concat(safeStripMarkdown(wordItem.ipa || \"N/A\"), \"]\"),\n                                    size: WORD_FONT_SIZES.SUPPLEMENTARY\n                                })\n                            ],\n                            spacing: {\n                                after: 150\n                            }\n                        }));\n                        // Difficult Sounds\n                        if (wordItem.difficultSounds && wordItem.difficultSounds.length > 0) {\n                            pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: \"Difficult Sounds:\",\n                                        size: WORD_FONT_SIZES.INSTRUCTIONS\n                                    })\n                                ],\n                                spacing: {\n                                    after: 100\n                                }\n                            }));\n                            pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: wordItem.difficultSounds.map((s)=>\"/\".concat(s, \"/\")).join(\"  \"),\n                                        size: WORD_FONT_SIZES.SUPPLEMENTARY\n                                    })\n                                ],\n                                spacing: {\n                                    after: 150\n                                }\n                            }));\n                        }\n                        // Pronunciation Tips\n                        if (wordItem.tips && wordItem.tips.length > 0) {\n                            pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: \"Pronunciation Tips:\",\n                                        size: WORD_FONT_SIZES.INSTRUCTIONS\n                                    })\n                                ],\n                                spacing: {\n                                    after: 100\n                                }\n                            }));\n                            wordItem.tips.forEach((tip)=>{\n                                pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                    children: [\n                                        new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                            text: \"• \".concat(safeStripMarkdown(tip)),\n                                            size: WORD_FONT_SIZES.SUPPLEMENTARY\n                                        })\n                                    ],\n                                    spacing: {\n                                        after: 100\n                                    }\n                                }));\n                            });\n                        }\n                        // Practice Sentence\n                        if (wordItem.practiceSentence) {\n                            pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: \"Practice Sentence:\",\n                                        size: WORD_FONT_SIZES.INSTRUCTIONS\n                                    })\n                                ],\n                                spacing: {\n                                    before: 150,\n                                    after: 100\n                                }\n                            }));\n                            pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                                children: [\n                                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                        text: safeStripMarkdown(wordItem.practiceSentence),\n                                        size: WORD_FONT_SIZES.MAIN_CONTENT\n                                    })\n                                ],\n                                spacing: {\n                                    after: 150\n                                }\n                            }));\n                        }\n                    });\n                } else if (pronSection.word) {\n                    // Old format with single word\n                    pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"Word: \".concat(safeStripMarkdown(pronSection.word || \"N/A\")),\n                                bold: true,\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            after: 150\n                        }\n                    }));\n                    pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"IPA: \".concat(safeStripMarkdown(pronSection.ipa || \"N/A\")),\n                                size: WORD_FONT_SIZES.SUPPLEMENTARY\n                            })\n                        ],\n                        spacing: {\n                            after: 150\n                        }\n                    }));\n                    if (pronSection.practice) {\n                        pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: 'Practice: \"'.concat(safeStripMarkdown(pronSection.practice), '\"'),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT,\n                                    italics: true\n                                })\n                            ],\n                            spacing: {\n                                after: 200\n                            }\n                        }));\n                    }\n                } else {\n                    pronunciationContent.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                text: \"No pronunciation data available\",\n                                size: WORD_FONT_SIZES.MAIN_CONTENT\n                            })\n                        ],\n                        spacing: {\n                            after: 200\n                        }\n                    }));\n                }\n                addSection(\"Pronunciation Practice\", pronunciationContent);\n            }\n            if (enabledSections.wrapup && lessonData.sections.wrapup) {\n                const wrapupQuestions = Array.isArray(lessonData.sections.wrapup) ? lessonData.sections.wrapup : [];\n                const wrapupContent = wrapupQuestions.map((question, index)=>{\n                    // First item is the instruction with light green background\n                    if (index === 0) {\n                        return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(question),\n                                    size: WORD_FONT_SIZES.INSTRUCTIONS,\n                                    italics: true\n                                })\n                            ],\n                            spacing: {\n                                after: 200\n                            },\n                            shading: {\n                                fill: \"EEF7DC\"\n                            },\n                            border: {\n                                left: {\n                                    color: \"CCCCCC\",\n                                    size: 6,\n                                    style: \"single\"\n                                }\n                            }\n                        });\n                    } else {\n                        // Rest are actual questions (renumber starting from 1)\n                        return new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                            children: [\n                                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                                    text: safeStripMarkdown(\"\".concat(index, \". \").concat(question)),\n                                    size: WORD_FONT_SIZES.MAIN_CONTENT\n                                })\n                            ],\n                            spacing: {\n                                after: 150\n                            }\n                        });\n                    }\n                });\n                addSection(\"Lesson Wrap-up\", wrapupContent);\n            }\n            // Footer\n            children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                        text: \"Generated by LinguaSpark\",\n                        size: WORD_FONT_SIZES.SUPPLEMENTARY,\n                        italics: true\n                    })\n                ],\n                alignment: docx__WEBPACK_IMPORTED_MODULE_1__.AlignmentType.CENTER,\n                spacing: {\n                    before: 600\n                }\n            }));\n            // Create document\n            const doc = new docx__WEBPACK_IMPORTED_MODULE_1__.Document({\n                sections: [\n                    {\n                        properties: {},\n                        children: children\n                    }\n                ]\n            });\n            // Generate and download\n            console.log(\"Creating Word document...\");\n            const buffer = await docx__WEBPACK_IMPORTED_MODULE_1__.Packer.toBuffer(doc);\n            console.log(\"Document buffer created, size:\", buffer.byteLength);\n            const blob = new Blob([\n                buffer\n            ], {\n                type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n            });\n            const url = URL.createObjectURL(blob);\n            const fileName = \"\".concat(lessonData.lessonType, \"-lesson-\").concat(lessonData.studentLevel, \"-\").concat(Date.now(), \".docx\");\n            console.log(\"Downloading Word document with filename:\", fileName);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = fileName;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n            console.log(\"Word export completed successfully\");\n        } catch (error) {\n            console.error(\"Word export error:\", error);\n            throw new Error(\"Word export failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n}\nconst lessonExporter = new LessonExporter();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/export-utils.ts\n"));

/***/ })

});