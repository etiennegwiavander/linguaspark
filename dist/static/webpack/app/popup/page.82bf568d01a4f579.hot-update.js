"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/popup/page",{

/***/ "(app-pages-browser)/./app/popup/page.tsx":
/*!****************************!*\
  !*** ./app/popup/page.tsx ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PopupPage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_lesson_generator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/lesson-generator */ \"(app-pages-browser)/./components/lesson-generator.tsx\");\n/* harmony import */ var _components_lesson_display__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/lesson-display */ \"(app-pages-browser)/./components/lesson-display.tsx\");\n/* harmony import */ var _lib_lesson_interface_bridge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/lesson-interface-bridge */ \"(app-pages-browser)/./lib/lesson-interface-bridge.ts\");\n/* harmony import */ var _components_user_menu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/user-menu */ \"(app-pages-browser)/./components/user-menu.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction PopupPage() {\n    _s();\n    const [selectedText, setSelectedText] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [sourceUrl, setSourceUrl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [extractedMetadata, setExtractedMetadata] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [generatedLesson, setGeneratedLesson] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Load persisted lesson or lesson from URL parameter on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadLesson = async ()=>{\n            try {\n                // Check if there's a lessonId in the URL\n                const urlParams = new URLSearchParams(window.location.search);\n                const lessonId = urlParams.get(\"lessonId\");\n                if (lessonId) {\n                    console.log(\"[LinguaSpark Popup] \\uD83D\\uDD0D Loading lesson from database with ID:\", lessonId);\n                    try {\n                        // Get auth token from localStorage\n                        const sessionData = localStorage.getItem(\"sb-jbkpnirowdvlwlgheqho-auth-token\");\n                        if (!sessionData) {\n                            throw new Error(\"No authentication session found. Please sign in again.\");\n                        }\n                        const session = JSON.parse(sessionData);\n                        const authToken = session.access_token;\n                        // Call the get lesson API route\n                        const response = await fetch(\"/api/get-lesson?id=\".concat(lessonId), {\n                            headers: {\n                                \"Authorization\": \"Bearer \".concat(authToken)\n                            }\n                        });\n                        if (!response.ok) {\n                            const errorData = await response.json();\n                            throw new Error(errorData.error || \"HTTP \".concat(response.status));\n                        }\n                        const { lesson } = await response.json();\n                        console.log(\"[LinguaSpark Popup] ✅ Loaded lesson from database:\", lesson.title);\n                        console.log(\"[LinguaSpark Popup] Lesson data structure:\", {\n                            hasLessonData: !!lesson.lesson_data,\n                            lessonType: lesson.lesson_type,\n                            studentLevel: lesson.student_level\n                        });\n                        setGeneratedLesson(lesson.lesson_data);\n                        setSourceUrl(lesson.source_url || \"\");\n                        // Persist to localStorage\n                        localStorage.setItem(\"linguaspark_current_lesson\", JSON.stringify(lesson.lesson_data));\n                        return;\n                    } catch (loadError) {\n                        console.error(\"[LinguaSpark Popup] ❌ Error loading lesson from database:\", loadError);\n                        if (loadError instanceof Error) {\n                            console.error(\"[LinguaSpark Popup] Error details:\", {\n                                message: loadError.message,\n                                name: loadError.name\n                            });\n                            alert(\"Failed to load lesson: \".concat(loadError.message));\n                        }\n                    }\n                    // Don't continue to localStorage fallback if we had a lessonId\n                    return;\n                }\n                // Fallback to localStorage if no lessonId in URL\n                const savedLesson = localStorage.getItem(\"linguaspark_current_lesson\");\n                if (savedLesson) {\n                    const lesson = JSON.parse(savedLesson);\n                    console.log(\"[LinguaSpark Popup] ✅ Loaded persisted lesson from localStorage\");\n                    setGeneratedLesson(lesson);\n                }\n            } catch (error) {\n                console.error(\"[LinguaSpark Popup] Failed to load lesson:\", error);\n            }\n        };\n        loadLesson();\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadContent = async ()=>{\n            try {\n                // Debug storage state\n                if (true) {\n                    await _lib_lesson_interface_bridge__WEBPACK_IMPORTED_MODULE_4__.LessonInterfaceUtils.debugStorageState();\n                }\n                // First check URL parameters (works in both extension and web contexts)\n                const urlParams = new URLSearchParams(window.location.search);\n                const contentParam = urlParams.get(\"content\");\n                const sourceParam = urlParams.get(\"sourceUrl\");\n                // Check if this is an extraction source\n                const isExtractionSource = urlParams.get(\"source\") === \"extraction\";\n                if (isExtractionSource) {\n                    console.log(\"[LinguaSpark Popup] Extraction source detected - checking for session ID\");\n                    console.log(\"[LinguaSpark Popup] URL params:\", Object.fromEntries(urlParams));\n                    // NEW: Check for session ID and retrieve content from API\n                    const sessionId = urlParams.get(\"sessionId\");\n                    if (sessionId) {\n                        console.log(\"[LinguaSpark Popup] Found session ID, retrieving content from API:\", sessionId);\n                        try {\n                            const response = await fetch(\"/api/get-extracted-content\", {\n                                method: \"POST\",\n                                headers: {\n                                    \"Content-Type\": \"application/json\"\n                                },\n                                body: JSON.stringify({\n                                    action: \"retrieve\",\n                                    sessionId: sessionId\n                                })\n                            });\n                            const apiResult = await response.json();\n                            if (apiResult.success && apiResult.data.lessonConfiguration) {\n                                var _metadata_images;\n                                const content = apiResult.data.lessonConfiguration.sourceContent;\n                                const metadata = apiResult.data.lessonConfiguration.metadata;\n                                console.log(\"[LinguaSpark Popup] ✅ Retrieved content from API, length:\", content.length);\n                                console.log(\"[LinguaSpark Popup] \\uD83D\\uDCF8 Banner image:\", metadata.bannerImage || \"None\");\n                                console.log(\"[LinguaSpark Popup] \\uD83D\\uDDBC️ Images count:\", ((_metadata_images = metadata.images) === null || _metadata_images === void 0 ? void 0 : _metadata_images.length) || 0);\n                                if (metadata.images && metadata.images.length > 0) {\n                                    console.log(\"[LinguaSpark Popup] First image:\", metadata.images[0]);\n                                }\n                                setSelectedText(content);\n                                setSourceUrl(metadata.sourceUrl || \"\");\n                                setExtractedMetadata(metadata); // ← STORE METADATA\n                                console.log(\"[LinguaSpark Popup] ✅ Metadata stored in state\");\n                                return;\n                            } else {\n                                console.error(\"[LinguaSpark Popup] Failed to retrieve content from API:\", apiResult.error);\n                            }\n                        } catch (error) {\n                            console.error(\"[LinguaSpark Popup] API request failed:\", error);\n                        }\n                    }\n                    // Fallback: Check for content in URL parameters (legacy support)\n                    if (contentParam && sourceParam) {\n                        const decodedContent = decodeURIComponent(contentParam);\n                        console.log(\"[LinguaSpark Popup] ✅ Found content in URL parameters, length:\", decodedContent.length);\n                        setSelectedText(decodedContent);\n                        setSourceUrl(decodeURIComponent(sourceParam));\n                        return;\n                    }\n                // For extraction sources, check storage as final fallback\n                } else if (contentParam && sourceParam) {\n                    // Only use URL parameters for non-extraction sources (manual URLs, etc.)\n                    const decodedContent = decodeURIComponent(contentParam);\n                    console.log(\"[LinguaSpark Popup] Non-extraction source with URL content, length:\", decodedContent.length);\n                    setSelectedText(decodedContent);\n                    setSourceUrl(decodeURIComponent(sourceParam));\n                    return;\n                }\n                // Use safe storage access\n                const result = await _lib_lesson_interface_bridge__WEBPACK_IMPORTED_MODULE_4__.LessonInterfaceUtils.safeStorageGet([\n                    \"lessonConfiguration\",\n                    \"extractedContent\",\n                    \"selectedText\",\n                    \"sourceUrl\"\n                ]);\n                console.log(\"[LinguaSpark Popup] Storage result:\", result);\n                console.log(\"[LinguaSpark Popup] Storage result keys:\", Object.keys(result || {}));\n                // Also check localStorage directly for debugging\n                try {\n                    const directCheck = localStorage.getItem(\"linguaspark_lesson_config\");\n                    console.log(\"[LinguaSpark Popup] Direct localStorage check:\", directCheck ? \"Found data\" : \"No data\");\n                    if (directCheck) {\n                        var _parsed_lessonConfiguration_sourceContent, _parsed_lessonConfiguration;\n                        const parsed = JSON.parse(directCheck);\n                        console.log(\"[LinguaSpark Popup] Direct localStorage keys:\", Object.keys(parsed));\n                        console.log(\"[LinguaSpark Popup] Direct localStorage lessonConfiguration:\", !!parsed.lessonConfiguration);\n                        console.log(\"[LinguaSpark Popup] Direct localStorage content length:\", ((_parsed_lessonConfiguration = parsed.lessonConfiguration) === null || _parsed_lessonConfiguration === void 0 ? void 0 : (_parsed_lessonConfiguration_sourceContent = _parsed_lessonConfiguration.sourceContent) === null || _parsed_lessonConfiguration_sourceContent === void 0 ? void 0 : _parsed_lessonConfiguration_sourceContent.length) || 0);\n                        // If we found data in localStorage but not in the result, use it directly\n                        if (parsed.lessonConfiguration && !result.lessonConfiguration) {\n                            var _parsed_lessonConfiguration_sourceContent1, _parsed_lessonConfiguration_metadata;\n                            console.log(\"[LinguaSpark Popup] Using localStorage data directly\");\n                            console.log(\"[LinguaSpark Popup] Setting selectedText to:\", ((_parsed_lessonConfiguration_sourceContent1 = parsed.lessonConfiguration.sourceContent) === null || _parsed_lessonConfiguration_sourceContent1 === void 0 ? void 0 : _parsed_lessonConfiguration_sourceContent1.length) || 0, \"characters\");\n                            setSelectedText(parsed.lessonConfiguration.sourceContent || \"\");\n                            setSourceUrl(((_parsed_lessonConfiguration_metadata = parsed.lessonConfiguration.metadata) === null || _parsed_lessonConfiguration_metadata === void 0 ? void 0 : _parsed_lessonConfiguration_metadata.sourceUrl) || \"\");\n                            return;\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"[LinguaSpark Popup] Direct localStorage check failed:\", error);\n                }\n                // Check for new lesson configuration format first\n                if (result.lessonConfiguration) {\n                    var _result_lessonConfiguration_sourceContent;\n                    console.log(\"[LinguaSpark Popup] Found lesson configuration with\", ((_result_lessonConfiguration_sourceContent = result.lessonConfiguration.sourceContent) === null || _result_lessonConfiguration_sourceContent === void 0 ? void 0 : _result_lessonConfiguration_sourceContent.length) || 0, \"characters\");\n                    setSelectedText(result.lessonConfiguration.sourceContent);\n                    setSourceUrl(result.lessonConfiguration.metadata.sourceUrl);\n                    return;\n                }\n                // Check for extracted content format\n                if (result.extractedContent) {\n                    var _result_extractedContent_text, _result_extractedContent_metadata;\n                    console.log(\"[LinguaSpark Popup] Found extracted content with\", ((_result_extractedContent_text = result.extractedContent.text) === null || _result_extractedContent_text === void 0 ? void 0 : _result_extractedContent_text.length) || 0, \"characters\");\n                    setSelectedText(result.extractedContent.text);\n                    setSourceUrl(((_result_extractedContent_metadata = result.extractedContent.metadata) === null || _result_extractedContent_metadata === void 0 ? void 0 : _result_extractedContent_metadata.sourceUrl) || window.location.href);\n                    return;\n                }\n                // Fallback to legacy format\n                if (result.selectedText) {\n                    console.log(\"[LinguaSpark Popup] Found legacy selected text\");\n                    setSelectedText(result.selectedText);\n                }\n                if (result.sourceUrl) {\n                    setSourceUrl(result.sourceUrl);\n                }\n                // If no content found in storage and this is an extraction source, use URL fallback\n                if (isExtractionSource && !result.lessonConfiguration && !result.extractedContent && !result.selectedText) {\n                    console.log(\"[LinguaSpark Popup] No content in storage - checking URL parameters as fallback\");\n                    // CRITICAL FIX: Use URL content as primary fallback (cross-domain solution)\n                    if (contentParam && sourceParam) {\n                        const decodedContent = decodeURIComponent(contentParam);\n                        console.log(\"[LinguaSpark Popup] ✅ Using URL content fallback, length:\", decodedContent.length);\n                        setSelectedText(decodedContent);\n                        setSourceUrl(decodeURIComponent(sourceParam));\n                        return;\n                    } else {\n                        console.error(\"[LinguaSpark Popup] ❌ No content in storage OR URL - extraction failed completely\");\n                    }\n                }\n                // If no content found and we're in extension context, try to get current tab content\n                if (!result.lessonConfiguration && !result.extractedContent && !result.selectedText && _lib_lesson_interface_bridge__WEBPACK_IMPORTED_MODULE_4__.LessonInterfaceUtils.isChromeExtensionContext()) {\n                    var _window_chrome_tabs;\n                    console.log(\"[LinguaSpark Popup] No stored content, trying current tab\");\n                    (_window_chrome_tabs = window.chrome.tabs) === null || _window_chrome_tabs === void 0 ? void 0 : _window_chrome_tabs.query({\n                        active: true,\n                        currentWindow: true\n                    }, (tabs)=>{\n                        var _tabs_;\n                        if ((_tabs_ = tabs[0]) === null || _tabs_ === void 0 ? void 0 : _tabs_.id) {\n                            window.chrome.tabs.sendMessage(tabs[0].id, {\n                                action: \"getPageContent\"\n                            }, (response)=>{\n                                if (response && response.content) {\n                                    // Use full content without truncation\n                                    const fullContent = typeof response.content === \"object\" ? response.content.text : response.content;\n                                    setSelectedText(fullContent);\n                                    setSourceUrl(tabs[0].url);\n                                }\n                            });\n                        }\n                    });\n                }\n            } catch (error) {\n                console.error(\"[LinguaSpark Popup] Failed to load content:\", error);\n            }\n        };\n        loadContent();\n    }, []);\n    const handleExtractFromPage = ()=>{\n        var _window_chrome;\n        if ( true && ((_window_chrome = window.chrome) === null || _window_chrome === void 0 ? void 0 : _window_chrome.tabs)) {\n            window.chrome.tabs.query({\n                active: true,\n                currentWindow: true\n            }, (tabs)=>{\n                var _tabs_;\n                if ((_tabs_ = tabs[0]) === null || _tabs_ === void 0 ? void 0 : _tabs_.id) {\n                    window.chrome.tabs.sendMessage(tabs[0].id, {\n                        action: \"getPageContent\"\n                    }, (response)=>{\n                        if (response && response.content) {\n                            // Handle enhanced content extraction\n                            if (typeof response.content === \"object\") {\n                                // Use full content without truncation\n                                setSelectedText(response.content.text);\n                                setSourceUrl(tabs[0].url);\n                                // Store enhanced content data for lesson generation\n                                window.chrome.storage.local.set({\n                                    enhancedContent: response.content,\n                                    sourceUrl: tabs[0].url\n                                });\n                            } else {\n                                // Fallback for simple text content - use full content\n                                setSelectedText(response.content);\n                                setSourceUrl(tabs[0].url);\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    };\n    const handleLessonGenerated = async (lesson)=>{\n        console.log(\"[LinguaSpark Popup] Lesson generated, saving to localStorage and database\");\n        setGeneratedLesson(lesson);\n        // Persist lesson to localStorage\n        try {\n            localStorage.setItem(\"linguaspark_current_lesson\", JSON.stringify(lesson));\n            console.log(\"[LinguaSpark Popup] ✅ Lesson saved to localStorage\");\n        } catch (error) {\n            console.error(\"[LinguaSpark Popup] Failed to save lesson to localStorage:\", error);\n        }\n        // Save to Supabase database using the new API route\n        try {\n            console.log(\"[LinguaSpark Popup] \\uD83D\\uDCBE Attempting to save lesson to database...\");\n            console.log(\"[LinguaSpark Popup] Lesson data:\", {\n                title: lesson.lessonTitle,\n                lesson_type: lesson.lessonType,\n                student_level: lesson.studentLevel,\n                target_language: lesson.targetLanguage,\n                has_source_url: !!sourceUrl\n            });\n            // Get auth token from localStorage\n            const sessionData = localStorage.getItem(\"sb-jbkpnirowdvlwlgheqho-auth-token\");\n            if (!sessionData) {\n                throw new Error(\"No authentication session found\");\n            }\n            const session = JSON.parse(sessionData);\n            const authToken = session.access_token;\n            // Call the save API route\n            const response = await fetch(\"/api/save-lesson\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \".concat(authToken)\n                },\n                body: JSON.stringify({\n                    title: lesson.lessonTitle,\n                    lesson_type: lesson.lessonType,\n                    student_level: lesson.studentLevel,\n                    target_language: lesson.targetLanguage,\n                    source_url: sourceUrl || undefined,\n                    lesson_data: lesson\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || \"HTTP \".concat(response.status));\n            }\n            const { lesson: savedLesson } = await response.json();\n            console.log(\"[LinguaSpark Popup] ✅ Lesson saved to database with ID:\", savedLesson.id);\n        } catch (error) {\n            console.error(\"[LinguaSpark Popup] ❌ Failed to save lesson to database:\", error);\n            if (error instanceof Error) {\n                console.error(\"[LinguaSpark Popup] Error details:\", {\n                    message: error.message,\n                    name: error.name\n                });\n            }\n            // Show user-friendly error notification (non-blocking)\n            console.warn(\"[LinguaSpark Popup] Lesson generated but not saved to library. User can save manually.\");\n        }\n    };\n    const handleNewLesson = ()=>{\n        console.log(\"[LinguaSpark Popup] Creating new lesson, clearing persisted data\");\n        setGeneratedLesson(null);\n        // Clear persisted lesson from localStorage\n        try {\n            localStorage.removeItem(\"linguaspark_current_lesson\");\n            console.log(\"[LinguaSpark Popup] ✅ Cleared persisted lesson from localStorage\");\n        } catch (error) {\n            console.error(\"[LinguaSpark Popup] Failed to clear persisted lesson:\", error);\n        }\n    };\n    const handleExportPDF = ()=>{\n        // PDF export functionality will be implemented in the next milestone\n        console.log(\"Exporting as PDF...\");\n    };\n    const handleExportWord = ()=>{\n        // Word export functionality will be implemented in the next milestone\n        console.log(\"Exporting as Word...\");\n    };\n    const handleLoadLesson = (lesson)=>{\n        console.log(\"[LinguaSpark Popup] Loading lesson from history:\", lesson.title);\n        // Convert database lesson format to display format\n        const lessonData = lesson.lesson_data;\n        setGeneratedLesson(lessonData);\n        // Persist loaded lesson to localStorage\n        try {\n            localStorage.setItem(\"linguaspark_current_lesson\", JSON.stringify(lessonData));\n            console.log(\"[LinguaSpark Popup] ✅ Loaded lesson saved to localStorage\");\n        } catch (error) {\n            console.error(\"[LinguaSpark Popup] Failed to save loaded lesson:\", error);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full min-h-screen bg-vintage-cream\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"w-full space-y-4\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"sticky top-0 z-50 flex items-center justify-between px-6 pt-4 pb-3 border-b-3 border-vintage-brown bg-vintage-cream-dark shadow-sm\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-center flex-1\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                    className: \"text-2xl font-serif font-bold text-vintage-brown\",\n                                    children: \"LinguaSpark\"\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                                    lineNumber: 409,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"text-sm text-vintage-brown/70\",\n                                    children: \"Transform content into professional lessons\"\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                                    lineNumber: 410,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                            lineNumber: 408,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_user_menu__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                            fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                            lineNumber: 412,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                    lineNumber: 407,\n                    columnNumber: 9\n                }, this),\n                !generatedLesson ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"max-w-2xl mx-auto\",\n                    children: [\n                         true && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"mb-4 p-2 bg-gray-100 text-xs\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        \"Debug: selectedText length = \",\n                                        selectedText.length\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                                    lineNumber: 420,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        \"Debug: sourceUrl = \",\n                                        sourceUrl\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                                    lineNumber: 421,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: [\n                                        \"Debug: URL params = \",\n                                        window.location.search\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                                    lineNumber: 422,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                            lineNumber: 419,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_lesson_generator__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                            initialText: selectedText,\n                            sourceUrl: sourceUrl,\n                            extractedMetadata: extractedMetadata,\n                            onLessonGenerated: handleLessonGenerated,\n                            onExtractFromPage: handleExtractFromPage\n                        }, void 0, false, {\n                            fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                            lineNumber: 425,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                    lineNumber: 416,\n                    columnNumber: 11\n                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_lesson_display__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    lesson: generatedLesson,\n                    onExportPDF: handleExportPDF,\n                    onExportWord: handleExportWord,\n                    onNewLesson: handleNewLesson,\n                    onLoadLesson: handleLoadLesson\n                }, void 0, false, {\n                    fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n                    lineNumber: 434,\n                    columnNumber: 11\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n            lineNumber: 405,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"D:\\\\linguaspark\\\\app\\\\popup\\\\page.tsx\",\n        lineNumber: 404,\n        columnNumber: 5\n    }, this);\n}\n_s(PopupPage, \"JPr9OumK66yFemW4pYvdQJnxVgE=\");\n_c = PopupPage;\nvar _c;\n$RefreshReg$(_c, \"PopupPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/popup/page.tsx\n"));

/***/ })

});